this.BX=this.BX||{};this.BX.Messenger=this.BX.Messenger||{};this.BX.Messenger.v2=this.BX.Messenger.v2||{};this.BX.Messenger.v2.Component=this.BX.Messenger.v2.Component||{};(function(t,e,a,n,i,s,r,o,l,c,d,h,u,g,C,_,v,p,m,b,E,T,I){"use strict";class M{async updateLastActivityDate(t){if(this.isPullServerWithUserStatusSupport()){const e=await this.getUserActivityFromPull(t);if(!e){return Promise.resolve()}return this.updateUserModel(t,{lastActivityDate:e})}const e=await this.requestUserData(t);return this.updateUserModel(t,e)}async getUserActivityFromPull(t){const e=await b.Core.getPullClient().getUsersLastSeen([t]).catch((t=>{console.error("UserService: error getting user activity from P&P",t)}));if(!p.Type.isNumber(e[t])){return null}const a=e[t]*1e3;return new Date(Date.now()-a)}async requestUserData(t){l.Logger.warn(`UserService: get actual user data for - ${t}`);const e=await b.Core.getRestClient().callMethod(E.RestMethod.imUserGet,{ID:t}).catch((t=>{console.error("UserService: error getting user data",t)}));return e.data()}async updateUserModel(t,e){l.Logger.warn("UserService: update user data",e);return b.Core.getStore().dispatch("users/update",{id:t,fields:e})}isPullServerWithUserStatusSupport(){return b.Core.getPullClient().isJsonRpc()}}const y={video:{id:"video",locCode:"IM_CONTENT_CHAT_HEADER_VIDEOCALL",start:t=>{_.Messenger.startVideoCall(t)}},audio:{id:"audio",locCode:"IM_CONTENT_CHAT_HEADER_CALL_MENU_AUDIO",start:t=>{_.Messenger.startVideoCall(t,false)}},beta:{id:"beta",locCode:"IM_CONTENT_CHAT_HEADER_CALL_MENU_BETA_2",start:t=>{const e=b.Core.getStore().getters["chats/get"](t);v.CallManager.getInstance().createBetaCallRoom(e.chatId)}}};let f=t=>t,A;var L=babelHelpers.classPrivateFieldLooseKey("getDelimiter");var S=babelHelpers.classPrivateFieldLooseKey("getVideoCallItem");var N=babelHelpers.classPrivateFieldLooseKey("getAudioCallItem");var x=babelHelpers.classPrivateFieldLooseKey("getPersonalPhoneItem");var P=babelHelpers.classPrivateFieldLooseKey("getWorkPhoneItem");var O=babelHelpers.classPrivateFieldLooseKey("getInnerPhoneItem");var B=babelHelpers.classPrivateFieldLooseKey("getZoomItem");var H=babelHelpers.classPrivateFieldLooseKey("getUserPhoneHtml");var k=babelHelpers.classPrivateFieldLooseKey("isCallAvailable");var R=babelHelpers.classPrivateFieldLooseKey("getUser");var D=babelHelpers.classPrivateFieldLooseKey("isUser");var U=babelHelpers.classPrivateFieldLooseKey("requestCreateZoomConference");class w extends g.BaseMenu{constructor(){super();Object.defineProperty(this,U,{value:J});Object.defineProperty(this,D,{value:W});Object.defineProperty(this,R,{value:Z});Object.defineProperty(this,k,{value:q});Object.defineProperty(this,H,{value:V});Object.defineProperty(this,B,{value:j});Object.defineProperty(this,O,{value:K});Object.defineProperty(this,P,{value:G});Object.defineProperty(this,x,{value:z});Object.defineProperty(this,N,{value:X});Object.defineProperty(this,S,{value:F});Object.defineProperty(this,L,{value:$});this.id="bx-im-chat-header-call-menu"}getMenuOptions(){return{...super.getMenuOptions(),className:this.getMenuClassName(),angle:true,offsetLeft:4,offsetTop:5}}getMenuClassName(){return"bx-im-messenger__scope bx-im-chat-header-call-button__scope"}getMenuItems(){return[babelHelpers.classPrivateFieldLooseBase(this,S)[S](),babelHelpers.classPrivateFieldLooseBase(this,N)[N](),babelHelpers.classPrivateFieldLooseBase(this,B)[B](),babelHelpers.classPrivateFieldLooseBase(this,L)[L](),babelHelpers.classPrivateFieldLooseBase(this,x)[x](),babelHelpers.classPrivateFieldLooseBase(this,P)[P](),babelHelpers.classPrivateFieldLooseBase(this,O)[O]()]}}function $(){return{delimiter:true}}function F(){const t=babelHelpers.classPrivateFieldLooseBase(this,k)[k](this.context.dialogId);return{text:p.Loc.getMessage("IM_CONTENT_CHAT_HEADER_VIDEOCALL"),onclick:()=>{if(!t){return}y.video.start(this.context.dialogId);this.emit(w.events.onMenuItemClick,y.video);this.menuInstance.close()},disabled:!t}}function X(){const t=babelHelpers.classPrivateFieldLooseBase(this,k)[k](this.context.dialogId);return{text:p.Loc.getMessage("IM_CONTENT_CHAT_HEADER_CALL_MENU_AUDIO"),onclick:()=>{if(!t){return}y.audio.start(this.context.dialogId);this.emit(w.events.onMenuItemClick,y.audio);this.menuInstance.close()},disabled:!t}}function z(){if(!babelHelpers.classPrivateFieldLooseBase(this,D)[D]()){return null}const{phones:t}=babelHelpers.classPrivateFieldLooseBase(this,R)[R]();if(!t.personalMobile){return null}const e=p.Loc.getMessage("IM_CONTENT_CHAT_HEADER_CALL_MENU_PERSONAL_PHONE");return{className:"menu-popup-no-icon bx-im-chat-header-call-button-menu__item",html:babelHelpers.classPrivateFieldLooseBase(this,H)[H](e,t.personalMobile),onclick:()=>{_.Messenger.startPhoneCall(t.personalMobile);this.menuInstance.close()}}}function G(){if(!babelHelpers.classPrivateFieldLooseBase(this,D)[D]()){return null}const{phones:t}=babelHelpers.classPrivateFieldLooseBase(this,R)[R]();if(!t.workPhone){return null}const e=p.Loc.getMessage("IM_CONTENT_CHAT_HEADER_CALL_MENU_WORK_PHONE");return{className:"menu-popup-no-icon bx-im-chat-header-call-button-menu__item",html:babelHelpers.classPrivateFieldLooseBase(this,H)[H](e,t.workPhone),onclick:()=>{_.Messenger.startPhoneCall(t.workPhone);this.menuInstance.close()}}}function K(){if(!babelHelpers.classPrivateFieldLooseBase(this,D)[D]()){return null}const{phones:t}=babelHelpers.classPrivateFieldLooseBase(this,R)[R]();if(!t.innerPhone){return null}const e=p.Loc.getMessage("IM_CONTENT_CHAT_HEADER_CALL_MENU_INNER_PHONE_MSGVER_1");return{className:"menu-popup-no-icon bx-im-chat-header-call-button-menu__item",html:babelHelpers.classPrivateFieldLooseBase(this,H)[H](e,t.innerPhone),onclick:()=>{_.Messenger.startPhoneCall(t.innerPhone);this.menuInstance.close()}}}function j(){const t=p.Extension.getSettings("im.v2.component.content.chat");const e=t.get("isZoomActive",false);if(!e){return null}const a=["bx-im-chat-header-call-button-menu__zoom","menu-popup-no-icon"];const n=t.get("isZoomFeatureAvailable",false);if(!n){a.push("--disabled")}return{className:a.join(" "),text:p.Loc.getMessage("IM_CONTENT_CHAT_HEADER_CALL_MENU_ZOOM"),onclick:()=>{if(!n){BX.UI.InfoHelper.show("limit_video_conference_zoom");return}babelHelpers.classPrivateFieldLooseBase(this,U)[U](this.context.dialogId);this.menuInstance.close()}}}function V(t,e){return p.Tag.render(A||(A=f`
			<span class="bx-im-chat-header-call-button-menu__phone_container">
				<span class="bx-im-chat-header-call-button-menu__phone_title">${0}</span>
				<span class="bx-im-chat-header-call-button-menu__phone_number">${0}</span>
			</span>
		`),t,e)}function q(t){if(b.Core.getStore().getters["recent/calls/hasActiveCall"](t)&&v.CallManager.getInstance().getCurrentCallDialogId()===t){return true}if(b.Core.getStore().getters["recent/calls/hasActiveCall"]()){return false}const e=v.CallManager.getInstance().chatCanBeCalled(t);const a=u.PermissionManager.getInstance().canPerformAction(E.ChatActionType.call,t);return e&&a}function Z(){if(!babelHelpers.classPrivateFieldLooseBase(this,D)[D]()){return null}return b.Core.getStore().getters["users/get"](this.context.dialogId)}function W(){return this.context.type===E.ChatType.user}function J(t){C.runAction(E.RestMethod.imV2CallZoomCreate,{data:{dialogId:t}}).catch((t=>{let e=p.Loc.getMessage("IM_CONTENT_CHAT_HEADER_CALL_MENU_ZOOM_CREATE_ERROR");const a=t.some((t=>t.code==="ZOOM_CONNECTED_ERROR"));if(a){const t=`/company/personal/user/${b.Core.getUserId()}/social_services/`;e=p.Loc.getMessage("IM_CONTENT_CHAT_HEADER_CALL_MENU_ZOOM_CONNECT_ERROR").replace("#HREF_START#",`<a href=${t}>`).replace("#HREF_END#","</>")}BX.UI.Notification.Center.notify({content:e})}))}w.events={onMenuItemClick:"onMenuItemClick"};const Y={props:{dialogId:{type:String,required:true}},emits:[],data(){return{lastCallType:""}},computed:{dialog(){return this.$store.getters["chats/get"](this.dialogId,true)},isActive(){if(this.$store.getters["recent/calls/hasActiveCall"](this.dialogId)&&v.CallManager.getInstance().getCurrentCallDialogId()===this.dialogId){return true}if(this.$store.getters["recent/calls/hasActiveCall"]()){return false}const t=v.CallManager.getInstance().chatCanBeCalled(this.dialogId);const e=u.PermissionManager.getInstance().canPerformAction(E.ChatActionType.call,this.dialogId);return t&&e},isConference(){return this.dialog.type===E.ChatType.videoconf},callButtonText(){const t=y[this.lastCallType].locCode;return this.loc(t)}},created(){this.lastCallType=this.getLastCallChoice();this.subscribeToMenuItemClick()},methods:{startVideoCall(){if(!this.isActive){return}_.Messenger.startVideoCall(this.dialogId)},subscribeToMenuItemClick(){this.getCallMenu().subscribe(w.events.onMenuItemClick,(t=>{const{id:e}=t.getData();this.saveLastCallChoice(e)}))},getCallMenu(){if(!this.callMenu){this.callMenu=new w}return this.callMenu},onButtonClick(){if(!this.isActive){return}y[this.lastCallType].start(this.dialogId)},onMenuClick(){if(!this.shouldShowMenu()){return}this.getCallMenu().openMenu(this.dialog,this.$refs.menu)},onStartConferenceClick(){_.Messenger.openConference({code:this.dialog.public.code})},getLastCallChoice(){const t=h.LocalStorageManager.getInstance().get(E.LocalStorageKey.lastCallType,y.video.id);if(t===y.beta.id&&!this.isBitrixCallEnabled()){return y.video.id}return t},saveLastCallChoice(t){this.lastCallType=t;h.LocalStorageManager.getInstance().set(E.LocalStorageKey.lastCallType,t)},shouldShowMenu(){return this.isActive||this.isBitrixCallEnabled()},isBitrixCallEnabled(){return false},loc(t){return this.$Bitrix.Loc.getMessage(t)}},template:`\n\t\t<div v-if="isConference" class="bx-im-chat-header-call-button__scope bx-im-chat-header-call-button__container --conference" @click="onStartConferenceClick">\n\t\t\t<div class="bx-im-chat-header-call-button__text">\n\t\t\t\t{{ loc('IM_CONTENT_CHAT_HEADER_START_CONFERENCE') }}\n\t\t\t</div>\n\t\t</div>\n\t\t<div\n\t\t\tv-else\n\t\t\tclass="bx-im-chat-header-call-button__scope bx-im-chat-header-call-button__container"\n\t\t\t:class="{'--disabled': !isActive}"\n\t\t\t@click="onButtonClick"\n\t\t>\n\t\t\t<div class="bx-im-chat-header-call-button__text">\n\t\t\t\t{{ callButtonText }}\n\t\t\t</div>\n\t\t\t<div class="bx-im-chat-header-call-button__separator"></div>\n\t\t\t<div class="bx-im-chat-header-call-button__chevron_container" @click.stop="onMenuClick">\n\t\t\t\t<div class="bx-im-chat-header-call-button__chevron" ref="menu"></div>\n\t\t\t</div>\n\t\t</div>\n\t`};const Q={[E.ChatEntityLinkType.tasks]:{className:"--task",loc:p.Loc.getMessage("IM_CONTENT_CHAT_HEADER_OPEN_TASK")},[E.ChatEntityLinkType.calendar]:{className:"--calendar",loc:p.Loc.getMessage("IM_CONTENT_CHAT_HEADER_OPEN_MEETING_MSGVER_1")},[E.ChatEntityLinkType.sonetGroup]:{className:"--group",loc:p.Loc.getMessage("IM_CONTENT_CHAT_HEADER_OPEN_GROUP_MSGVER_1")},[E.ChatEntityLinkType.mail]:{className:"--mail",loc:p.Loc.getMessage("IM_CONTENT_CHAT_HEADER_OPEN_MAIL_MSGVER_1")},[E.ChatEntityLinkType.contact]:{className:"--crm",loc:p.Loc.getMessage("IM_CONTENT_CHAT_HEADER_OPEN_CONTACT")},[E.ChatEntityLinkType.deal]:{className:"--crm",loc:p.Loc.getMessage("IM_CONTENT_CHAT_HEADER_OPEN_DEAL")},[E.ChatEntityLinkType.lead]:{className:"--crm",loc:p.Loc.getMessage("IM_CONTENT_CHAT_HEADER_OPEN_LEAD")},[E.ChatEntityLinkType.dynamic]:{className:"--crm",loc:p.Loc.getMessage("IM_CONTENT_CHAT_HEADER_OPEN_DYNAMIC_ELEMENT")}};const tt={name:"EntityLink",props:{dialogId:{type:String,required:true}},data(){return{}},computed:{dialog(){return this.$store.getters["chats/get"](this.dialogId,true)},entityType(){return this.dialog.entityLink.type},entityUrl(){return this.dialog.entityLink.url},containerClassName(){var t,e;return(t=(e=Q[this.entityType])==null?void 0:e.className)!=null?t:""},linkText(){var t,e;return(t=(e=Q[this.entityType])==null?void 0:e.loc)!=null?t:"Open entity"}},template:`\n\t\t<a :href="entityUrl" class="bx-im-chat-header-entity-link__container" :class="containerClassName" target="_blank">\n\t\t\t<div class="bx-im-chat-header-entity-link__icon"></div>\n\t\t\t<div class="bx-im-chat-header-entity-link__text">{{ linkText }}</div>\n\t\t\t<div class="bx-im-chat-header-entity-link__arrow"></div>\n\t\t</a>\n\t`};const et={name:"GroupChatTitle",components:{EditableChatTitle:T.EditableChatTitle,EntityLink:tt},props:{dialogId:{type:String,required:true}},emits:["membersClick","newTitle"],data(){return{}},computed:{dialog(){return this.$store.getters["chats/get"](this.dialogId,true)},userCounter(){return p.Loc.getMessagePlural("IM_CONTENT_CHAT_HEADER_USER_COUNT",this.dialog.userCounter,{"#COUNT#":this.dialog.userCounter})},hasEntityLink(){var t;return Boolean((t=this.dialog.entityLink)==null?void 0:t.url)}},methods:{loc(t){return this.$Bitrix.Loc.getMessage(t)}},template:`\n\t\t<div class="bx-im-chat-header__info">\n\t\t\t<EditableChatTitle :dialogId="dialogId" @newTitleSubmit="$emit('newTitle', $event)" />\n\t\t\t<div class="bx-im-chat-header__subtitle_container">\n\t\t\t\t<div\n\t\t\t\t\t:title="loc('IM_CONTENT_CHAT_HEADER_OPEN_MEMBERS')"\n\t\t\t\t\t@click="$emit('membersClick')"\n\t\t\t\t\tclass="bx-im-chat-header__subtitle_content --click"\n\t\t\t\t>\n\t\t\t\t\t{{ userCounter }}\n\t\t\t\t</div>\n\t\t\t\t<EntityLink v-if="hasEntityLink" :dialogId="dialogId" />\n\t\t\t</div>\n\t\t</div>\n\t`};const at=60*1e3;const nt={name:"UserTitle",components:{ChatTitle:T.ChatTitle},props:{dialogId:{type:String,required:true}},data(){return{userLastOnlineText:""}},computed:{userPosition(){return this.$store.getters["users/getPosition"](this.dialogId)},userLastOnline(){return this.$store.getters["users/getLastOnline"](this.dialogId)},userLink(){return m.Utils.user.getProfileLink(this.dialogId)}},watch:{userLastOnline(t){this.userLastOnlineText=t}},created(){this.updateUserOnline();this.userLastOnlineInterval=setInterval(this.updateUserOnline,at)},beforeUnmount(){clearInterval(this.userLastOnlineInterval)},methods:{updateUserOnline(){this.userLastOnlineText=this.$store.getters["users/getLastOnline"](this.dialogId)}},template:`\n\t\t<div class="bx-im-chat-header__info">\n\t\t\t<div class="bx-im-chat-header__title --user">\n\t\t\t\t<a :href="userLink" target="_blank" class="bx-im-chat-header__title_container">\n\t\t\t\t\t<ChatTitle :dialogId="dialogId" />\n\t\t\t\t</a>\n\t\t\t\t<span class="bx-im-chat-header__user-status">{{ userLastOnlineText }}</span>\n\t\t\t</div>\n\t\t\t<div class="bx-im-chat-header__subtitle_container">\n\t\t\t\t<div class="bx-im-chat-header__subtitle_content">{{ userPosition }}</div>\n\t\t\t</div>\n\t\t</div>\n\t`};const it={name:"ChatHeader",components:{Avatar:T.Avatar,AddToChat:c.AddToChat,CallButton:Y,GroupChatTitle:et,UserTitle:nt},props:{dialogId:{type:String,default:""},currentSidebarPanel:{type:String,default:""}},emits:["toggleRightPanel","toggleSearchPanel","toggleMembersPanel"],data(){return{showAddToChatPopup:false}},computed:{AvatarSize:()=>T.AvatarSize,user(){return this.$store.getters["users/get"](this.dialogId,true)},dialog(){return this.$store.getters["chats/get"](this.dialogId,true)},isInited(){return this.dialog.inited},isUser(){return this.dialog.type===E.ChatType.user},isBot(){if(!this.isUser){return false}return this.user.bot===true},isChat(){return!this.isUser},isGuest(){return this.dialog.role===E.UserRole.guest},chatId(){return this.dialog.chatId},userLink(){return m.Utils.user.getProfileLink(this.dialogId)},showCallButton(){return!this.isBot},showInviteButton(){if(this.isBot){return false}return u.PermissionManager.getInstance().canPerformAction(E.ChatActionType.extend,this.dialogId)},canChangeAvatar(){return u.PermissionManager.getInstance().canPerformAction(E.ChatActionType.avatar,this.dialogId)},isSidebarOpened(){return this.currentSidebarPanel.length>0},isMessageSearchActive(){return this.currentSidebarPanel===E.SidebarDetailBlock.messageSearch}},methods:{toggleRightPanel(){if(this.currentSidebarPanel){d.EventEmitter.emit(E.EventType.sidebar.close,{panel:""});return}d.EventEmitter.emit(E.EventType.sidebar.open,{panel:E.SidebarDetailBlock.main,dialogId:this.dialogId})},toggleSearchPanel(){if(this.isMessageSearchActive){d.EventEmitter.emit(E.EventType.sidebar.close,{panel:E.SidebarDetailBlock.messageSearch});return}d.EventEmitter.emit(E.EventType.sidebar.open,{panel:E.SidebarDetailBlock.messageSearch,dialogId:this.dialogId})},onMembersClick(){if(!this.isInited){return}if(this.currentSidebarPanel===E.SidebarDetailBlock.members){d.EventEmitter.emit(E.EventType.sidebar.close,{panel:E.SidebarDetailBlock.members});return}d.EventEmitter.emit(E.EventType.sidebar.open,{panel:E.SidebarDetailBlock.members,dialogId:this.dialogId})},onNewTitleSubmit(t){this.getChatService().renameChat(this.dialogId,t).catch((()=>{BX.UI.Notification.Center.notify({content:this.loc("IM_CONTENT_CHAT_HEADER_RENAME_ERROR")})}))},getChatService(){if(!this.chatService){this.chatService=new I.ChatService}return this.chatService},openInvitePopup(){this.showAddToChatPopup=true},onAvatarClick(){if(!this.isChat||!this.canChangeAvatar){return}this.$refs.avatarInput.click()},async onAvatarSelect(t){const e=t.target;const a=e.files[0];if(!a){return}const n=await this.getChatService().prepareAvatar(a);if(!n){return}void this.getChatService().changeAvatar(this.dialog.chatId,n)},onContainerClick(t){if(this.isGuest){t.stopPropagation()}},loc(t,e={}){return this.$Bitrix.Loc.getMessage(t,e)}},template:`\n\t\t<div @click.capture="onContainerClick" class="bx-im-chat-header__scope bx-im-chat-header__container">\n\t\t\t<div class="bx-im-chat-header__left">\n\t\t\t\t<div class="bx-im-chat-header__avatar" :class="{'--can-change': canChangeAvatar}" @click="onAvatarClick">\n\t\t\t\t\t<Avatar v-if="isChat" :dialogId="dialogId" :size="AvatarSize.L" />\n\t\t\t\t\t<a v-else :href="userLink" target="_blank">\n\t\t\t\t\t\t<Avatar :dialogId="dialogId" :size="AvatarSize.L" />\n\t\t\t\t\t</a>\n\t\t\t\t</div>\n\t\t\t\t<input \n\t\t\t\t\ttype="file" \n\t\t\t\t\t@change="onAvatarSelect" \n\t\t\t\t\taccept="image/*" \n\t\t\t\t\tclass="bx-im-chat-header__avatar_input" \n\t\t\t\t\tref="avatarInput"\n\t\t\t\t>\n\t\t\t\t<GroupChatTitle\n\t\t\t\t\tv-if="isChat"\n\t\t\t\t\t:dialogId="dialogId"\n\t\t\t\t\t@membersClick="onMembersClick"\n\t\t\t\t\t@newTitle="onNewTitleSubmit"\n\t\t\t\t/>\n\t\t\t\t<UserTitle v-else :dialogId="dialogId" />\n\t\t\t</div>\n\t\t\t<div class="bx-im-chat-header__right">\n\t\t\t\t<CallButton v-if="showCallButton" :dialogId="dialogId" />\n\t\t\t\t<div\n\t\t\t\t\tv-if="showInviteButton"\n\t\t\t\t\t:title="loc('IM_CONTENT_CHAT_HEADER_OPEN_INVITE_POPUP_TITLE')"\n\t\t\t\t\t:class="{'--active': showAddToChatPopup}"\n\t\t\t\t\tclass="bx-im-chat-header__icon --add-people"\n\t\t\t\t\t@click="openInvitePopup" \n\t\t\t\t\tref="add-members"\n\t\t\t\t></div>\n\t\t\t\t<div \n\t\t\t\t\t:title="loc('IM_CONTENT_CHAT_HEADER_OPEN_SEARCH')"\n\t\t\t\t\t:class="{'--active': isMessageSearchActive}"\n\t\t\t\t\tclass="bx-im-chat-header__icon --search" \n\t\t\t\t\t@click="toggleSearchPanel"\n\t\t\t\t></div>\n\t\t\t\t<div \n\t\t\t\t\tclass="bx-im-chat-header__icon --panel"\n\t\t\t\t\t:title="loc('IM_CONTENT_CHAT_HEADER_OPEN_SIDEBAR')"\n\t\t\t\t\t:class="{'--active': isSidebarOpened}"\n\t\t\t\t\t@click="toggleRightPanel" \n\t\t\t\t></div>\n\t\t\t</div>\n\t\t\t<AddToChat\n\t\t\t\t:bindElement="$refs['add-members'] || {}"\n\t\t\t\t:dialogId="dialogId"\n\t\t\t\t:showPopup="showAddToChatPopup"\n\t\t\t\t:popupConfig="{offsetTop: 15, offsetLeft: -300}"\n\t\t\t\t@close="showAddToChatPopup = false"\n\t\t\t/>\n\t\t</div>\n\t`};const st={props:{show:{type:Boolean,required:true}},template:`\n\t\t<Transition name="drop-area-fade">\n\t\t\t<div v-if="show" class="bx-im-content-chat-drop-area__container bx-im-content-chat-drop-area__scope">\n\t\t\t\t<div class="bx-im-content-chat-drop-area__box">\n\t\t\t\t\t<span class="bx-im-content-chat-drop-area__icon"></span>\n\t\t\t\t\t<label class="bx-im-content-chat-drop-area__label-text">\n\t\t\t\t\t\t{{ $Bitrix.Loc.getMessage('IM_CONTENT_DROP_AREA') }}\n\t\t\t\t\t</label>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</Transition>\n\t`};const rt={data(){return{}},computed:{iconClass(){return this.isEmptyRecent?"--empty":"--default"},text(){if(this.isEmptyRecent){return this.loc("IM_CONTENT_CHAT_NO_CHATS_START_MESSAGE")}return this.loc("IM_CONTENT_CHAT_START_MESSAGE_V2")},subtext(){return""},isEmptyRecent(){return I.RecentService.getInstance().getCollection().length===0}},methods:{loc(t){return this.$Bitrix.Loc.getMessage(t)}},template:`\n\t\t<div class="bx-im-content-chat-start__container">\n\t\t\t<div class="bx-im-content-chat-start__content">\n\t\t\t\t<div class="bx-im-content-chat-start__icon" :class="iconClass"></div>\n\t\t\t\t<div class="bx-im-content-chat-start__title">\n\t\t\t\t\t{{ text }}\n\t\t\t\t</div>\n\t\t\t\t<div v-if="subtext" class="bx-im-content-chat-start__subtitle">\n\t\t\t\t\t{{ subtext }}\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t`};const ot="rgba(0, 0, 0, 0.1)";const lt="rgba(0, 0, 0, 0.2)";const ct="#fff";const dt={components:{ChatButton:T.Button},props:{dialogId:{type:String,required:true}},data(){return{}},computed:{ButtonSize:()=>T.ButtonSize,dialog(){return this.$store.getters["chats/get"](this.dialogId,true)},isMuted(){return this.dialog.muteList.includes(b.Core.getUserId())},buttonText(){const t=this.loc("IM_CONTENT_BLOCKED_TEXTAREA_ENABLE_NOTIFICATIONS");const e=this.loc("IM_CONTENT_BLOCKED_TEXTAREA_DISABLE_NOTIFICATIONS");return this.isMuted?t:e},buttonColorScheme(){return{borderColor:E.Color.transparent,backgroundColor:ot,iconColor:ct,textColor:ct,hoverColor:lt}}},methods:{onButtonClick(){if(this.isMuted){this.getChatService().unmuteChat(this.dialogId);return}this.getChatService().muteChat(this.dialogId)},getChatService(){if(!this.chatService){this.chatService=new I.ChatService}return this.chatService},loc(t){return this.$Bitrix.Loc.getMessage(t)}},template:`\n\t\t<div class="bx-im-content-chat__textarea_placeholder">\n\t\t\t<ChatButton\n\t\t\t\t:size="ButtonSize.XL"\n\t\t\t\t:customColorScheme="buttonColorScheme"\n\t\t\t\t:text="buttonText"\n\t\t\t\t:isRounded="true"\n\t\t\t\t@click="onButtonClick"\n\t\t\t/>\n\t\t</div>\n\t`};const ht={components:{ChatButton:T.Button},props:{dialogId:{type:String,required:true}},data(){return{}},computed:{ButtonSize:()=>T.ButtonSize,ButtonColor:()=>T.ButtonColor},methods:{onButtonClick(){this.getChatService().joinChat(this.dialogId)},getChatService(){if(!this.chatService){this.chatService=new I.ChatService}return this.chatService},loc(t){return this.$Bitrix.Loc.getMessage(t)}},template:`\n\t\t<div class="bx-im-content-chat__textarea_placeholder">\n\t\t\t<ChatButton\n\t\t\t\t:size="ButtonSize.XL"\n\t\t\t\t:color="ButtonColor.Primary"\n\t\t\t\t:text="loc('IM_CONTENT_BLOCKED_TEXTAREA_JOIN_CHAT')"\n\t\t\t\t:isRounded="true"\n\t\t\t\t@click="onButtonClick"\n\t\t\t/>\n\t\t</div>\n\t`};const ut=64;const gt={name:"ChatContent",components:{ChatHeader:it,ChatDialog:a.ChatDialog,ChatTextarea:n.ChatTextarea,ChatSidebar:r.ChatSidebar,DropArea:st,EmptyState:rt,MutePanel:dt,JoinPanel:ht},directives:{"textarea-observer":{mounted(t,e){e.instance.textareaResizeManager.observeTextarea(t)},beforeUnmount(t,e){e.instance.textareaResizeManager.unobserveTextarea(t)}}},props:{entityId:{type:String,default:""},contextMessageId:{type:Number,default:0}},data(){return{currentSidebarPanel:"",textareaHeight:0,showDropArea:false,lastDropAreaEnterTarget:null}},computed:{layout(){return this.$store.getters["application/getLayout"]},dialog(){return this.$store.getters["chats/get"](this.entityId,true)},hasPinnedMessages(){return this.$store.getters["messages/pin/getPinned"](this.dialog.chatId).length>0},canPost(){return u.PermissionManager.getInstance().canPerformAction(E.ChatActionType.send,this.dialog.dialogId)},isGuest(){return this.dialog.role===E.UserRole.guest},isUser(){return this.dialog.type===E.ChatType.user},containerClasses(){const t=this.$store.getters["application/settings/get"](E.Settings.appearance.alignment);return[`--${t}-align`]},backgroundStyle(){return i.ThemeManager.getCurrentBackgroundStyle()},dialogContainerStyle(){const t=50;let e=this.textareaHeight;if(!this.canPost){e=t}return{height:`calc(100% - ${ut}px - ${e}px)`}},dropAreaStyles(){const t=53;const e=16+ut;const a=this.hasPinnedMessages?t+e:e;return{top:`${a}px`}}},watch:{entityId(t,e){l.Logger.warn(`ChatContent: switching from ${e||"empty"} to ${t}`);this.onChatChange()}},created(){if(this.entityId){this.onChatChange()}this.initTextareaResizeManager()},methods:{async onChatChange(){if(this.entityId===""){return}if(m.Utils.dialog.isExternalId(this.entityId)){const t=await this.getChatService().prepareDialogId(this.entityId);void o.LayoutManager.getInstance().setLayout({name:E.Layout.chat.name,entityId:t,contextId:this.layout.contextId});return}if(this.dialog.inited){l.Logger.warn(`ChatContent: chat ${this.entityId} is already loaded`);if(this.isUser){const t=parseInt(this.dialog.dialogId,10);void this.getUserService().updateLastActivityDate(t)}return}if(this.dialog.loading){l.Logger.warn(`ChatContent: chat ${this.entityId} is loading`);return}if(this.layout.contextId){await this.loadChatWithContext();return}await this.loadChat()},loadChatWithContext(){l.Logger.warn(`ChatContent: loading chat ${this.entityId} with context - ${this.layout.contextId}`);return this.getChatService().loadChatWithContext(this.entityId,this.layout.contextId).then((()=>{l.Logger.warn(`ChatContent: chat ${this.entityId} is loaded with context of ${this.layout.contextId}`)})).catch((t=>{this.handleChatLoadError(t);l.Logger.error(t);_.Messenger.openChat()}))},loadChat(){l.Logger.warn(`ChatContent: loading chat ${this.entityId}`);return this.getChatService().loadChatWithMessages(this.entityId).then((()=>{l.Logger.warn(`ChatContent: chat ${this.entityId} is loaded`)})).catch((t=>{this.handleChatLoadError(t);l.Logger.error(t);_.Messenger.openChat()}))},handleChatLoadError(t){const[e]=t;if(e.code==="ACCESS_DENIED"){this.showNotification(this.loc("IM_CONTENT_CHAT_ACCESS_ERROR"))}else if(e.code==="MESSAGE_NOT_FOUND"){this.showNotification(this.loc("IM_CONTENT_CHAT_CONTEXT_MESSAGE_NOT_FOUND"))}},initTextareaResizeManager(){this.textareaResizeManager=new s.ResizeManager;this.textareaResizeManager.subscribe(s.ResizeManager.events.onHeightChange,(t=>{const{newHeight:e}=t.getData();this.textareaHeight=e}))},showNotification(t){BX.UI.Notification.Center.notify({content:t})},getUserService(){if(!this.userService){this.userService=new M}return this.userService},loc(t){return this.$Bitrix.Loc.getMessage(t)},onDragEnter(t){void e.hasDataTransferOnlyFiles(t.dataTransfer,false).then((e=>{if(!e){return}this.lastDropAreaEnterTarget=t.target;this.showDropArea=true}))},onDragLeave(t){if(this.lastDropAreaEnterTarget===t.target){this.showDropArea=false}},onDrop(t){void e.getFilesFromDataTransfer(t.dataTransfer).then((t=>{this.getUploadingService().addFilesFromInput(t,this.entityId)}));this.showDropArea=false},getChatService(){if(!this.chatService){this.chatService=new I.ChatService}return this.chatService},getUploadingService(){if(!this.uploadingService){this.uploadingService=I.UploadingService.getInstance()}return this.uploadingService},onChangeSidebarPanel({panel:t}){this.currentSidebarPanel=t}},template:`\n\t\t<div class="bx-im-content-chat__scope bx-im-content-chat__container" :class="containerClasses" :style="backgroundStyle">\n\t\t\t<div \n\t\t\t\tclass="bx-im-content-chat__content"\n\t\t\t\t@drop.prevent="onDrop"\n\t\t\t\t@dragleave.stop.prevent="onDragLeave"\n\t\t\t\t@dragenter.stop.prevent="onDragEnter"\n\t\t\t\t@dragover.prevent\n\t\t\t>\n\t\t\t\t<template v-if="entityId">\n\t\t\t\t\t<ChatHeader :dialogId="entityId" :key="entityId" :currentSidebarPanel="currentSidebarPanel" />\n\t\t\t\t\t<div :style="dialogContainerStyle" class="bx-im-content-chat__dialog_container">\n\t\t\t\t\t\t<div class="bx-im-content-chat__dialog_content">\n\t\t\t\t\t\t\t<ChatDialog :dialogId="entityId" :key="entityId" :textareaHeight="textareaHeight" />\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t\t\x3c!-- Textarea --\x3e\n\t\t\t\t\t<div v-if="canPost" v-textarea-observer class="bx-im-content-chat__textarea_container">\n\t\t\t\t\t\t<ChatTextarea :dialogId="entityId" :key="entityId" />\n\t\t\t\t\t</div>\n\t\t\t\t\t<JoinPanel v-else-if="isGuest" :dialogId="entityId" />\n\t\t\t\t\t<MutePanel v-else :dialogId="entityId" />\n\t\t\t\t\t\x3c!-- End textarea --\x3e\n\t\t\t\t\t<DropArea :show="showDropArea" :style="dropAreaStyles" />\n\t\t\t\t</template>\n\t\t\t\t<EmptyState v-else />\n\t\t\t</div>\n\t\t\t<ChatSidebar \n\t\t\t\tv-if="entityId.length > 0" \n\t\t\t\t:originDialogId="entityId" \n\t\t\t\t@changePanel="onChangeSidebarPanel" \n\t\t\t/>\n\t\t</div>\n\t`};t.ChatContent=gt})(this.BX.Messenger.v2.Component.Content=this.BX.Messenger.v2.Component.Content||{},BX.UI.Uploader,BX.Messenger.v2.Component.Dialog,BX.Messenger.v2.Component,BX.Messenger.v2.Lib,BX.Messenger.v2.Lib,BX.Messenger.v2.Component,BX.Messenger.v2.Lib,BX.Messenger.v2.Lib,BX.Messenger.v2.Component.EntitySelector,BX.Event,BX.Messenger.v2.Lib,BX.Messenger.v2.Lib,BX.Messenger.v2.Lib,BX.Messenger.v2.Lib,BX.Messenger.v2.Lib,BX.Messenger.v2.Lib,BX,BX.Messenger.v2.Lib,BX.Messenger.v2.Application,BX.Messenger.v2.Const,BX.Messenger.v2.Component.Elements,BX.Messenger.v2.Provider.Service);
//# sourceMappingURL=chat-content.bundle.map.js