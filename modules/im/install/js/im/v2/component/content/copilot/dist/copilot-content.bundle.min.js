this.BX=this.BX||{};this.BX.Messenger=this.BX.Messenger||{};this.BX.Messenger.v2=this.BX.Messenger.v2||{};this.BX.Messenger.v2.Component=this.BX.Messenger.v2.Component||{};(function(t,e,o,n,i,a,s,r,l,d,c,h,C,g,p,u,m,I,_){"use strict";const T="im-add-to-chat-hint-popup";const M={name:"AddToChatHint",components:{MessengerPopup:u.MessengerPopup},props:{bindElement:{type:Object,required:true}},emits:["close","hide"],computed:{POPUP_ID:()=>T,config(){return{darkMode:true,bindElement:this.bindElement,angle:true,width:346,closeIcon:true,offsetLeft:8,className:"bx-im-copilot-add-to-chat-hint__scope",contentBorderRadius:0}}},methods:{loc(t){return this.$Bitrix.Loc.getMessage(t)}},template:`\n\t\t<MessengerPopup\n\t\t\tv-slot="{enableAutoHide, disableAutoHide}"\n\t\t\t:config="config"\n\t\t\t@close="$emit('close')"\n\t\t\t:id="POPUP_ID"\n\t\t>\n\t\t\t<div class="bx-im-copilot-add-to-chat-hint__title">\n\t\t\t\t{{ loc('IM_CONTENT_COPILOT_ADD_TO_CHAT_HINT_TITLE') }}\n\t\t\t</div>\n\t\t\t<br />\n\t\t\t<div class="bx-im-copilot-add-to-chat-hint__description">\n\t\t\t\t{{ loc('IM_CONTENT_COPILOT_ADD_TO_CHAT_HINT_DESCRIPTION') }}\n\t\t\t</div>\n\t\t\t<br />\n\t\t\t<button class="bx-im-copilot-add-to-chat-hint__hide" @click="$emit('hide')">\n\t\t\t\t{{ loc('IM_CONTENT_COPILOT_ADD_TO_CHAT_HINT_HIDE') }}\n\t\t\t</button>\n\t\t</MessengerPopup>\n\t`};const v={name:"CopilotChatHeader",components:{ChatHeader:s.ChatHeader,EditableChatTitle:u.EditableChatTitle,ChatAvatar:u.ChatAvatar,AddToChatHint:M},inject:["currentSidebarPanel"],props:{dialogId:{type:String,default:""}},data(){return{showAddToChatPopup:false,showAddToChatHint:false}},computed:{AvatarSize:()=>u.AvatarSize,dialog(){return this.$store.getters["chats/get"](this.dialogId,true)},isInited(){return this.dialog.inited},isGroupCopilotChat(){return this.dialog.userCounter>2},copilotRole(){var t;const e=this.$store.getters["copilot/chats/getRole"](this.dialogId);return(t=e==null?void 0:e.name)!=null?t:""},formattedUserCounter(){return h.Loc.getMessagePlural("IM_CONTENT_COPILOT_HEADER_USER_COUNT",this.dialog.userCounter,{"#COUNT#":this.dialog.userCounter})}},methods:{onNewTitleSubmit(t){this.getChatService().renameChat(this.dialogId,t).catch((()=>{BX.UI.Notification.Center.notify({content:this.loc("IM_CONTENT_CHAT_HEADER_RENAME_ERROR")})}))},onHintHide(){void a.PromoManager.getInstance().markAsWatched(m.PromoId.addUsersToCopilotChat);this.showAddToChatHint=false},onMembersClick(){if(!this.isInited){return}if(this.currentSidebarPanel===m.SidebarDetailBlock.members){i.EventEmitter.emit(m.EventType.sidebar.close,{panel:m.SidebarDetailBlock.members});return}i.EventEmitter.emit(m.EventType.sidebar.open,{panel:m.SidebarDetailBlock.members,dialogId:this.dialogId})},handleAddToChatHint(){this.showAddToChatHint=a.PromoManager.getInstance().needToShow(m.PromoId.addUsersToCopilotChat)},getChatService(){if(!this.chatService){this.chatService=new _.ChatService}return this.chatService},loc(t,e={}){return this.$Bitrix.Loc.getMessage(t,e)}},template:`\n\t\t<ChatHeader\n\t\t\t:dialogId="dialogId"\n\t\t\t:withSearchButton="false"\n\t\t\tclass="bx-im-copilot-header__container"\n\t\t\t@buttonPanelReady="handleAddToChatHint"\n\t\t>\n\t\t\t<template #left>\n\t\t\t\t<div class="bx-im-copilot-header__avatar">\n\t\t\t\t\t<ChatAvatar\n\t\t\t\t\t\t:avatarDialogId="dialogId"\n\t\t\t\t\t\t:contextDialogId="dialogId"\n\t\t\t\t\t\t:withSpecialTypes="false"\n\t\t\t\t\t\t:size="AvatarSize.L"\n\t\t\t\t\t/>\n\t\t\t\t</div>\n\t\t\t\t<div class="bx-im-copilot-header__info">\n\t\t\t\t\t<EditableChatTitle :dialogId="dialogId" @newTitleSubmit="onNewTitleSubmit" />\n\t\t\t\t\t<div\n\t\t\t\t\t\tv-if="isGroupCopilotChat"\n\t\t\t\t\t\t:title="loc('IM_CONTENT_COPILOT_HEADER_OPEN_MEMBERS_TITLE')"\n\t\t\t\t\t\t@click="onMembersClick"\n\t\t\t\t\t\tclass="bx-im-copilot-header__subtitle --click"\n\t\t\t\t\t>\n\t\t\t\t\t\t{{ formattedUserCounter }}\n\t\t\t\t\t</div>\n\t\t\t\t\t<div v-else class="bx-im-copilot-header__subtitle">\n\t\t\t\t\t\t{{ copilotRole }}\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</template>\n\t\t\t<template #invite-hint="{ inviteButtonRef }">\n\t\t\t\t<AddToChatHint\n\t\t\t\t\tv-if="showAddToChatHint"\n\t\t\t\t\t:bindElement="inviteButtonRef"\n\t\t\t\t\t@close="showAddToChatHint = false"\n\t\t\t\t\t@hide="onHintHide"\n\t\t\t\t/>\n\t\t\t</template>\n\t\t</ChatHeader>\n\t`};const E={name:"CopilotTextarea",components:{ChatTextarea:l.ChatTextarea},props:{dialogId:{type:String,default:""}},computed:{CopilotDraftManager:()=>d.CopilotDraftManager},methods:{loc(t){return this.$Bitrix.Loc.getMessage(t)}},template:`\n\t\t<ChatTextarea\n\t\t\t:dialogId="dialogId"\n\t\t\t:placeholder="this.loc('IM_CONTENT_COPILOT_TEXTAREA_PLACEHOLDER')"\n\t\t\t:withCreateMenu="false"\n\t\t\t:withMarket="false"\n\t\t\t:withEdit="false"\n\t\t\t:withUploadMenu="false"\n\t\t\t:withSmileSelector="false"\n\t\t\t:draftManagerClass="CopilotDraftManager"\n\t\t/>\n\t`};const S=Object.freeze({personal:"chat_copilot_tab_one_by_one",group:"chat_copilot_tab_multi"});class f extends C.MessageMenu{getMenuItems(){return[this.getCopyItem(),this.getFavoriteItem(),this.getForwardItem(),this.getSendFeedbackItem(),this.getDeleteItem()]}getSendFeedbackItem(){const t=new g.CopilotManager;if(!t.isCopilotBot(this.context.authorId)){return null}return{text:h.Loc.getMessage("IM_CONTENT_COPILOT_CONTEXT_MENU_FEEDBACK"),onclick:()=>{void this.openForm();this.menuInstance.close()}}}async openForm(){const t=Math.round(Math.random()*1e3);await h.Runtime.loadExtension(["ui.feedback.form"]);BX.UI.Feedback.Form.open({id:`im.copilot.feedback-${t}`,forms:[{zones:["es"],id:684,lang:"es",sec:"svvq1x"},{zones:["en"],id:686,lang:"en",sec:"tjwodz"},{zones:["de"],id:688,lang:"de",sec:"nrwksg"},{zones:["com.br"],id:690,lang:"com.br",sec:"kpte6m"},{zones:["ru","by","kz"],id:692,lang:"ru",sec:"jbujn0"}],presets:{sender_page:this.getCopilotChatContext(),language:h.Loc.getMessage("LANGUAGE_ID"),cp_answer:this.context.text}})}getCopilotChatContext(){const t=this.store.getters["chats/get"](this.context.dialogId);if(t.userCounter<=2){return S.personal}return S.group}}const b={name:"CopilotMessageList",components:{MessageList:C.MessageList,DialogStatus:u.DialogStatus},props:{dialogId:{type:String,required:true}},computed:{CopilotMessageMenu:()=>f},template:`\n\t\t<MessageList :dialogId="dialogId" :messageMenuClass="CopilotMessageMenu" />\n\t`};const y={name:"CopilotDialog",components:{ChatDialog:c.ChatDialog,CopilotMessageList:b},props:{dialogId:{type:String,required:true}},template:`\n\t\t<ChatDialog :dialogId="dialogId">\n\t\t\t<template #message-list>\n\t\t\t\t<CopilotMessageList :dialogId="dialogId" />\n\t\t\t</template>\n\t\t</ChatDialog>\t\n\t`};const B=4;const O={name:"CopilotInternalContent",components:{BaseChatContent:s.BaseChatContent,CopilotChatHeader:v,CopilotDialog:y,CopilotTextarea:E},props:{dialogId:{type:String,default:""}},computed:{COPILOT_BACKGROUND_ID:()=>B},template:`\n\t\t<BaseChatContent :dialogId="dialogId" :backgroundId="COPILOT_BACKGROUND_ID">\n\t\t\t<template #header>\n\t\t\t\t<CopilotChatHeader :dialogId="dialogId" :key="dialogId" />\n\t\t\t</template>\n\t\t\t<template #dialog>\n\t\t\t\t<CopilotDialog :dialogId="dialogId" :key="dialogId" />\n\t\t\t</template>\n\t\t\t<template #textarea="{ onTextareaMount }">\n\t\t\t\t<CopilotTextarea :dialogId="dialogId" :key="dialogId" @mounted="onTextareaMount" />\n\t\t\t</template>\n\t\t</BaseChatContent>\n\t`};const A="#fff";const w="#eee";const x="rgba(82, 92, 105, 0.9)";const N={name:"EmptyState",components:{ChatButton:u.Button,CopilotRolesDialog:u.CopilotRolesDialog},data(){return{isCreatingChat:false,showRolesDialog:false}},computed:{ButtonSize:()=>u.ButtonSize,backgroundStyle(){return I.ThemeManager.getBackgroundStyleById(B)},preparedText(){return this.loc("IM_CONTENT_COPILOT_EMPTY_STATE_MESSAGE_MSGVER_1",{"#BR#":"\n"})},buttonColorScheme(){return{borderColor:m.Color.transparent,backgroundColor:A,iconColor:x,textColor:x,hoverColor:w}}},methods:{onCreateChatClick(){this.showRolesDialog=true},async createChat(t){const e=t.code;this.isCreatingChat=true;this.showRolesDialog=false;const o=await this.getCopilotService().createChat({roleCode:e}).catch((()=>{this.isCreatingChat=false;this.showCreateChatError()}));this.isCreatingChat=false;void p.Messenger.openCopilot(o)},showCreateChatError(){BX.UI.Notification.Center.notify({content:this.loc("IM_CONTENT_COPILOT_EMPTY_STATE_ERROR_CREATING_CHAT")})},getCopilotService(){if(!this.copilotService){this.copilotService=new _.CopilotService}return this.copilotService},loc(t,e={}){return this.$Bitrix.Loc.getMessage(t,e)}},template:`\n\t\t<div class="bx-im-content-copilot-empty-state__container" :style="backgroundStyle">\n\t\t\t<div class="bx-im-content-copilot-empty-state__content">\n\t\t\t\t<div class="bx-im-content-copilot-empty-state__icon"></div>\n\t\t\t\t<div class="bx-im-content-copilot-empty-state__text">{{ preparedText }}</div>\n\t\t\t\t<ChatButton\n\t\t\t\t\tclass="--black-loader"\n\t\t\t\t\t:size="ButtonSize.XL"\n\t\t\t\t\t:customColorScheme="buttonColorScheme"\n\t\t\t\t\t:text="loc('IM_CONTENT_COPILOT_EMPTY_STATE_ASK_QUESTION')"\n\t\t\t\t\t:isRounded="true"\n\t\t\t\t\t:isLoading="isCreatingChat"\n\t\t\t\t\t@click="onCreateChatClick"\n\t\t\t\t/>\n\t\t\t</div>\n\t\t\t<CopilotRolesDialog \n\t\t\t\tv-if="showRolesDialog"\n\t\t\t\t@selectRole="createChat"\n\t\t\t\t@close="showRolesDialog = false"\n\t\t\t/>\n\t\t</div>\n\t`};const L={name:"CopilotContent",components:{EmptyState:N,CopilotInternalContent:O},props:{entityId:{type:String,default:""},contextMessageId:{type:Number,default:0}},data(){return{}},computed:{layout(){return this.$store.getters["application/getLayout"]},dialog(){return this.$store.getters["chats/get"](this.entityId,true)}},watch:{entityId(t,o){e.Logger.warn(`CopilotContent: switching from ${o||"empty"} to ${t}`);this.onChatChange()}},created(){if(!this.entityId){return}this.onChatChange()},methods:{async onChatChange(){if(this.entityId===""){return}if(this.dialog.inited){e.Logger.warn(`CopilotContent: chat ${this.entityId} is already loaded`);o.Analytics.getInstance().onOpenChat(this.dialog);return}if(this.dialog.loading){e.Logger.warn(`CopilotContent: chat ${this.entityId} is loading`);return}if(this.layout.contextId){await this.loadChatWithContext();o.Analytics.getInstance().onOpenChat(this.dialog);return}await this.loadChat();o.Analytics.getInstance().onOpenChat(this.dialog)},async loadChatWithContext(){e.Logger.warn(`CopilotContent: loading chat ${this.entityId} with context - ${this.layout.contextId}`);await this.getChatService().loadChatWithContext(this.entityId,this.layout.contextId).catch((t=>{if(t.code==="ACCESS_ERROR"){this.showNotification(this.loc("IM_CONTENT_CHAT_ACCESS_ERROR_MSGVER_1"))}e.Logger.error(t);p.Messenger.openCopilot()}));e.Logger.warn(`CopilotContent: chat ${this.entityId} is loaded with context of ${this.layout.contextId}`);return Promise.resolve()},async loadChat(){e.Logger.warn(`CopilotContent: loading chat ${this.entityId}`);await this.getChatService().loadChatWithMessages(this.entityId).catch((t=>{const[e]=t;if(e.code==="ACCESS_DENIED"){this.showNotification(this.loc("IM_CONTENT_CHAT_ACCESS_ERROR_MSGVER_1"))}p.Messenger.openCopilot()}));e.Logger.warn(`CopilotContent: chat ${this.entityId} is loaded`);return Promise.resolve()},showNotification(t){BX.UI.Notification.Center.notify({content:t})},getChatService(){if(!this.chatService){this.chatService=new _.ChatService}return this.chatService},loc(t){return this.$Bitrix.Loc.getMessage(t)}},template:`\n\t\t<EmptyState v-if="!entityId" />\n\t\t<CopilotInternalContent v-else :dialogId="entityId" />\n\t`};t.CopilotContent=L})(this.BX.Messenger.v2.Component.Content=this.BX.Messenger.v2.Component.Content||{},BX.Messenger.v2.Lib,BX.Messenger.v2.Lib,BX,BX.Event,BX.Messenger.v2.Lib,BX.Messenger.v2.Component.Content,BX.Main,BX.Messenger.v2.Component,BX.Messenger.v2.Lib,BX.Messenger.v2.Component.Dialog,BX,BX.Messenger.v2.Component,BX.Messenger.v2.Lib,BX.Messenger.v2.Lib,BX.Messenger.v2.Component.Elements,BX.Messenger.v2.Const,BX.Messenger.v2.Lib,BX.Messenger.v2.Service);
//# sourceMappingURL=copilot-content.bundle.map.js