this.BX=this.BX||{};this.BX.UI=this.BX.UI||{};(function(e,t,i,s,a,r,o,n,l){"use strict";const{DRAG_END_COMMAND:d,DRAG_START_COMMAND:c}=r.Commands;var p=babelHelpers.classPrivateFieldLooseKey("textEditor");var u=babelHelpers.classPrivateFieldLooseKey("uploaderAdapter");var h=babelHelpers.classPrivateFieldLooseKey("uploader");var b=babelHelpers.classPrivateFieldLooseKey("allowDropFiles");var g=babelHelpers.classPrivateFieldLooseKey("syncHighlightsDebounced");var v=babelHelpers.classPrivateFieldLooseKey("lastInserted");var m=babelHelpers.classPrivateFieldLooseKey("createTextEditor");var f=babelHelpers.classPrivateFieldLooseKey("createUploaderAdapter");var F=babelHelpers.classPrivateFieldLooseKey("registerCommands");var A=babelHelpers.classPrivateFieldLooseKey("syncHighlights");var T=babelHelpers.classPrivateFieldLooseKey("isInsertedChanged");class P extends s.EventEmitter{constructor(e){super();Object.defineProperty(this,T,{value:I});Object.defineProperty(this,A,{value:D});Object.defineProperty(this,F,{value:O});Object.defineProperty(this,f,{value:E});Object.defineProperty(this,m,{value:B});Object.defineProperty(this,p,{writable:true,value:null});Object.defineProperty(this,u,{writable:true,value:null});Object.defineProperty(this,h,{writable:true,value:null});Object.defineProperty(this,b,{writable:true,value:true});Object.defineProperty(this,g,{writable:true,value:i.Runtime.debounce(babelHelpers.classPrivateFieldLooseBase(this,A)[A],500)});Object.defineProperty(this,v,{writable:true,value:new Set});this.setEventNamespace("BX.UI.RichTextArea");const t=i.Type.isPlainObject(e)?e:{};this.subscribeFromOptions(t.widgetOptions.events);babelHelpers.classPrivateFieldLooseBase(this,m)[m](t.editorOptions,t.editorInstance);babelHelpers.classPrivateFieldLooseBase(this,f)[f](t.uploaderOptions,t.uploaderInstance,t.files);const s=babelHelpers.classPrivateFieldLooseBase(this,u)[u].getUploader().getFiles().map((e=>e.toJSON()));this.getEditor().dispatchCommand(r.Plugins.File.ADD_FILES_COMMAND,s);babelHelpers.classPrivateFieldLooseBase(this,F)[F]()}getUploaderAdapter(){return babelHelpers.classPrivateFieldLooseBase(this,u)[u]}getUploader(){return babelHelpers.classPrivateFieldLooseBase(this,u)[u].getUploader()}getFileCount(){return this.getUploader().getFiles().length}getEditor(){return babelHelpers.classPrivateFieldLooseBase(this,p)[p]}isFilePluginEnabled(){const e=this.getEditor().getPlugin("File");return(e==null?void 0:e.isEnabled())===true}canDropFiles(){return babelHelpers.classPrivateFieldLooseBase(this,b)[b]}insertFile(e){this.getEditor().dispatchCommand(r.Plugins.File.INSERT_FILE_COMMAND,{serverFileId:e.serverFileId,width:600,height:600,info:e})}removeFile(e){this.getEditor().dispatchCommand(r.Plugins.File.REMOVE_FILE_COMMAND,{serverFileId:e,skipHistoryStack:true});babelHelpers.classPrivateFieldLooseBase(this,A)[A]()}destroy(){babelHelpers.classPrivateFieldLooseBase(this,p)[p].destroy();babelHelpers.classPrivateFieldLooseBase(this,h)[h].destroy();babelHelpers.classPrivateFieldLooseBase(this,p)[p]=null;babelHelpers.classPrivateFieldLooseBase(this,h)[h]=null}}function B(e,t){if(t){babelHelpers.classPrivateFieldLooseBase(this,p)[p]=t}else{const t=i.Type.isPlainObject(e)?{...e}:{};babelHelpers.classPrivateFieldLooseBase(this,p)[p]=new r.TextEditor(t)}babelHelpers.classPrivateFieldLooseBase(this,p)[p].subscribeFromOptions({onChange:e=>{const{tags:t,isInitialChange:i}=e.getData();if(t.has("historic")){this.getEditor().update((()=>{babelHelpers.classPrivateFieldLooseBase(this,A)[A]()}))}else if(i){babelHelpers.classPrivateFieldLooseBase(this,A)[A](true)}else{babelHelpers.classPrivateFieldLooseBase(this,g)[g]()}}});return babelHelpers.classPrivateFieldLooseBase(this,p)[p]}function E(e,t,s){if(t instanceof n.Uploader){babelHelpers.classPrivateFieldLooseBase(this,u)[u]=new o.VueUploaderAdapter(t)}else{const t=i.Type.isPlainObject(e)?e:{};const s={imagePreviewHeight:1200,imagePreviewWidth:1200,imagePreviewQuality:.85,treatOversizeImageAsFile:true,ignoreUnknownImageTypes:true,multiple:true};babelHelpers.classPrivateFieldLooseBase(this,u)[u]=new o.VueUploaderAdapter({...s,...t})}babelHelpers.classPrivateFieldLooseBase(this,u)[u].subscribeFromOptions({"Item:onAdd":e=>{const t=e.getData().item;const i=this.getFileCount();this.emit("Item:onAdd",{item:t,fileCount:i})},"Item:onComplete":e=>{const t=e.getData().item;const i=this.getFileCount();this.getEditor().dispatchCommand(r.Plugins.File.ADD_FILE_COMMAND,t);this.emit("Item:onComplete",{item:t,fileCount:i})},"Item:onRemove":e=>{const t=e.getData().item;this.removeFile(e.getData().item.serverFileId);const i=this.getFileCount();this.emit("Item:onRemove",{item:t,fileCount:i})}});babelHelpers.classPrivateFieldLooseBase(this,u)[u].getUploader().addFiles(s)}function O(){this.getEditor().registerCommand(a.PASTE_COMMAND,(e=>{const t=e.clipboardData;if(!t||!n.isFilePasted(t)){return false}e.preventDefault();n.getFilesFromDataTransfer(t).then((e=>{if(e.length>0){this.emit("onBeforeFilePaste")}e.forEach((e=>{this.getUploader().addFile(e,{events:{[n.FileEvent.LOAD_ERROR]:()=>{},[n.FileEvent.UPLOAD_ERROR]:()=>{},[n.FileEvent.UPLOAD_COMPLETE]:e=>{const t=e.getTarget();this.emit("onFilePaste",{file:t});this.insertFile(t.toJSON())}}})}))})).catch((()=>{console.error("RichTextArea: clipboard pasting error.")}));return true}),a.COMMAND_PRIORITY_NORMAL);this.getEditor().registerCommand(c,(()=>{babelHelpers.classPrivateFieldLooseBase(this,b)[b]=false}),a.COMMAND_PRIORITY_LOW);this.getEditor().registerCommand(d,(()=>{babelHelpers.classPrivateFieldLooseBase(this,b)[b]=true}),a.COMMAND_PRIORITY_LOW)}function D(e=false){this.getEditor().dispatchCommand(r.Plugins.File.GET_INSERTED_FILES_COMMAND,(t=>{const s=new Set;for(const e of t){const{serverFileId:t}=e.getInfo();if(i.Type.isStringFilled(t)||i.Type.isNumber(t)){s.add(t)}}const a=babelHelpers.classPrivateFieldLooseBase(this,T)[T](s);babelHelpers.classPrivateFieldLooseBase(this,v)[v]=new Set(s);let r=false;this.getUploader().getFiles().forEach((e=>{if(s.has(e.getServerFileId())){r=true;e.setCustomData("tileSelected",true);s.delete(e.getServerFileId())}else{e.setCustomData("tileSelected",false)}}));for(const e of s){this.richTextArea.removeFile(e)}if(!e&&a){this.emit("Item:onInsertChange",{hasInsertedItems:r})}}))}function I(e){if(babelHelpers.classPrivateFieldLooseBase(this,v)[v].size!==e.size){return true}for(const t of babelHelpers.classPrivateFieldLooseBase(this,v)[v]){if(!e.has(t)){return true}}return false}const x={name:"DropArea",props:{show:{type:Boolean,required:true}},template:`\n\t\t<Transition name="ui-rich-text-area-fade">\n\t\t\t<div v-if="show" class="ui-rich-text-area-drop-area">\n\t\t\t\t<div class="ui-rich-text-area-drop-area-box">\n\t\t\t\t\t<label class="ui-rich-text-area-drop-area-text">\n\t\t\t\t\t\t{{ $Bitrix.Loc.getMessage('UI_RICH_TEXT_AREA_DROP_AREA') }}\n\t\t\t\t\t</label>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</Transition>\n\t`};const L={name:"ActionButton",props:{icon:{type:String},title:{type:String},counter:{type:Number,default:0},selected:{type:Boolean,default:false},buttonRef:{default:null}},template:`\n\t\t<button class="ui-rich-text-area-action" :class="{ '--selected': selected }" :ref="buttonRef">\n\t\t\t<span class="ui-rich-text-area-action-icon"><span\n\t\t\t\t:class="icon"\n\t\t\t\tclass="ui-icon-set"\n\t\t\t\tstyle="--ui-icon-set__icon-color: var(--ui-color-base-90)"\n\t\t\t></span></span>\n\t\t\t<span class="ui-rich-text-area-action-title">{{ title }}</span>\n\t\t\t<span class="ui-rich-text-area-action-counter" v-show="counter > 0">\n\t\t\t\t<span class="ui-counter ui-counter-sm ui-counter-gray"><span class="ui-counter-inner">{{ counter }}</span></span>\n\t\t\t</span>\n\t\t</button>\n\t`};const C={name:"FileButton",components:{ActionButton:L},template:`\n\t\t<ActionButton icon="--attach" :title="$Bitrix.Loc.getMessage('UI_RICH_TEXT_AREA_UPLOAD_FILE')" />\n\t`};const y={name:"CreateDocumentButton",components:{ActionButton:L},template:`\n\t\t<ActionButton icon="--file" :title="$Bitrix.Loc.getMessage('UI_RICH_TEXT_AREA_CREATE_DOCUMENT')" />\n\t`};const R={name:"RecordVideoButton",components:{ActionButton:L},template:`\n\t\t<ActionButton icon="--video-3" :title="$Bitrix.Loc.getMessage('UI_RICH_TEXT_AREA_RECORD_VIDEO')" />\n\t`};const H={name:"RichTextAreaComponent",components:{TextEditorComponent:r.TextEditorComponent,TileWidgetComponent:t.TileWidgetComponent,DropArea:x,FileButton:C,ActionButton:L,CreateDocumentButton:y,RecordVideoButton:R},props:{editorOptions:{type:Object},editorInstance:{type:r.TextEditor},uploaderOptions:{type:Object},uploaderInstance:{type:n.Uploader},widgetOptions:{type:Object,default:{}},files:{type:Array}},data(){return{showDropArea:false,uploaderVisibility:false}},beforeCreate(){this.richTextArea=new P({editorOptions:this.editorOptions,editorInstance:this.editorInstance,uploaderOptions:this.uploaderOptions,uploaderInstance:this.uploaderInstance,widgetOptions:this.widgetOptions,files:this.files});this.richTextArea.subscribe("Item:onAdd",(()=>{this.uploaderVisibility=true}));this.fileButtonRef=l.ref(null)},created(){this.uploaderVisibility=this.richTextArea.getFileCount()>0},methods:{getRichTextArea(){return this.richTextArea},getEditor(){return this.richTextArea.getEditor()},getUploader(){return this.richTextArea.getUploader()},getUploaderAdapter(){return this.richTextArea.getUploaderAdapter()},onDragOver(e){if(this.richTextArea.canDropFiles()){e.preventDefault()}},onDragEnter(e){if(!this.richTextArea.canDropFiles()){return}e.preventDefault();e.stopPropagation();void n.hasDataTransferOnlyFiles(e.dataTransfer,false).then((t=>{if(!t){return}this.lastDropAreaEnterTarget=e.target;this.showDropArea=true}))},onDragLeave(e){if(!this.richTextArea.canDropFiles()){return}e.preventDefault();e.stopPropagation();if(this.lastDropAreaEnterTarget===e.target){this.showDropArea=false}},onDrop(e){if(!this.richTextArea.canDropFiles()){return}e.preventDefault();void n.getFilesFromDataTransfer(e.dataTransfer).then((e=>{this.getUploader().addFiles(e);this.getEditor().expand()}));this.showDropArea=false}},computed:{tileWidgetOptions(){const e=this.widgetOptions;const t={insertIntoText:i.Type.isBoolean(e.insertIntoText)?e.insertIntoText:true,...i.Type.isPlainObject(e.tileWidgetOptions)?e.tileWidgetOptions:{}};t.enableDropzone=false;if(t.insertIntoText){t.events=t.events||{};t.events.onInsertIntoText=e=>{this.richTextArea.insertFile(e.getData().item)}}return t},isUploadEnabled(){return this.getRichTextArea().isFilePluginEnabled()}},mounted(){if(this.isUploadEnabled){this.getUploader().assignBrowse(this.fileButtonRef.value)}},unmounted(){this.richTextArea.destroy();this.richTextArea=null},template:`\n\t\t<div \n\t\t\tclass="ui-rich-text-area"\n\t\t\tv-on="\n\t\t\t\tisUploadEnabled\n\t\t\t\t? { drop: onDrop, dragleave: onDragLeave, dragenter: onDragEnter, dragover: onDragOver }\n\t\t\t\t: {}\n\t\t\t"\n\t\t>\n\t\t\t<TextEditorComponent :editor-instance="getEditor()">\n\t\t\t\t<template #footer>\n\t\t\t\t\t<div class="ui-rich-text-area-actions">\n\t\t\t\t\t\t<slot name="before-buttons" :richTextArea="getRichTextArea()"></slot>\n\t\t\t\t\t\t<slot name="file-button" :richTextArea="getRichTextArea()">\n\t\t\t\t\t\t\t<FileButton v-if="isUploadEnabled" ref="fileButton" :buttonRef="fileButtonRef" />\n\t\t\t\t\t\t</slot>\n\t\t\t\t\t\t<slot name="after-buttons" :richTextArea="getRichTextArea()"></slot>\n\t\t\t\t\t</div>\n\t\t\t\t\t<slot name="uploader" :adapter="getUploaderAdapter()" :richTextArea="getRichTextArea()">\n\t\t\t\t\t\t<div class="ui-rich-text-area-uploader" :class="{ '--visible': uploaderVisibility }">\n\t\t\t\t\t\t\t<TileWidgetComponent\n\t\t\t\t\t\t\t\t:widgetOptions="tileWidgetOptions"\n\t\t\t\t\t\t\t\t:uploader-adapter="getUploaderAdapter()"\n\t\t\t\t\t\t\t\tref="tileWidget"\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</slot>\n\t\t\t\t</template>\n\t\t\t</TextEditorComponent>\n\t\t\t<DropArea :show="showDropArea" />\n\t\t</div>\n\t`};e.RichTextAreaComponent=H;e.FileButton=C;e.ActionButton=L;e.CreateDocumentButton=y;e.RecordVideoButton=R})(this.BX.UI.RichTextArea=this.BX.UI.RichTextArea||{},BX.UI.Uploader,BX,BX.Event,BX.UI.Lexical.Core,BX.UI.TextEditor,BX.UI.Uploader,BX.UI.Uploader,BX.Vue3);
//# sourceMappingURL=rich-text-area.bundle.map.js