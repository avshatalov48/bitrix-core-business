this.BX=this.BX||{};this.BX.Messenger=this.BX.Messenger||{};this.BX.Messenger.v2=this.BX.Messenger.v2||{};this.BX.Messenger.v2.Component=this.BX.Messenger.v2.Component||{};(function(t,e,i,n,s,a,r,o,c,l,h,d,g,u,m,C,v,_){"use strict";const I={[_.ChatType.openChannel]:u.Loc.getMessage("IM_LIST_RECENT_CHAT_TYPE_OPEN_CHANNEL"),[_.ChatType.channel]:u.Loc.getMessage("IM_LIST_RECENT_CHAT_TYPE_PRIVATE_CHANNEL"),[_.ChatType.generalChannel]:u.Loc.getMessage("IM_LIST_RECENT_CHAT_TYPE_OPEN_CHANNEL"),default:u.Loc.getMessage("IM_LIST_RECENT_CHAT_TYPE_GROUP_V2")};const p={props:{item:{type:Object,required:true}},data(){return{}},computed:{recentItem(){return this.item},dialog(){return this.$store.getters["chats/get"](this.recentItem.dialogId,true)},user(){return this.$store.getters["users/get"](this.recentItem.dialogId,true)},message(){return this.$store.getters["recent/getMessage"](this.recentItem.dialogId)},needsBirthdayPlaceholder(){return this.$store.getters["recent/needsBirthdayPlaceholder"](this.recentItem.dialogId)},needsVacationPlaceholder(){return this.$store.getters["recent/needsVacationPlaceholder"](this.recentItem.dialogId)},showLastMessage(){return this.$store.getters["application/settings/get"](_.Settings.recent.showLastMessage)},hiddenMessageText(){var t;if(this.isUser){return this.$store.getters["users/getPosition"](this.recentItem.dialogId)}return(t=I[this.dialog.type])!=null?t:I.default},isLastMessageAuthor(){return this.message.authorId===v.Core.getUserId()},lastMessageAuthorAvatar(){const t=this.$store.getters["chats/get"](this.message.authorId);if(!t){return""}return t.avatar},lastMessageAuthorAvatarStyle(){return{backgroundImage:`url('${this.lastMessageAuthorAvatar}')`}},messageText(){if(this.message.isDeleted){return this.loc("IM_LIST_RECENT_DELETED_MESSAGE")}const t=a.Parser.purifyRecent(this.recentItem);if(!t){return this.isUser?this.$store.getters["users/getPosition"](this.recentItem.dialogId):this.hiddenMessageText}return t},formattedMessageText(){const t=27;return m.Utils.text.insertUnseenWhitespace(this.messageText,t)},preparedDraftContent(){const t=this.loc("IM_LIST_RECENT_MESSAGE_DRAFT_2");const e="#TEXT#".length;const i=t.slice(0,-e);const n=u.Text.encode(this.formattedDraftText);return`\n\t\t\t\t<span class="bx-im-list-recent-item__message_draft-prefix">${i}</span>\n\t\t\t\t<span class="bx-im-list-recent-item__message_text_content">${n}</span>\n\t\t\t`},formattedDraftText(){return a.Parser.purify({text:this.recentItem.draft.text,showIconIfEmptyText:false})},formattedVacationEndDate(){return s.DateTimeFormat.format("d.m.Y",this.user.absent)},isUser(){return this.dialog.type===_.ChatType.user},isChat(){return!this.isUser}},methods:{loc(t,e={}){return this.$Bitrix.Loc.getMessage(t,e)}},template:`\n\t\t<div class="bx-im-list-recent-item__message_container">\n\t\t\t<span class="bx-im-list-recent-item__message_text">\n\t\t\t\t<span v-if="recentItem.draft.text" v-html="preparedDraftContent"></span>\n\t\t\t\t<div v-else-if="recentItem.invitation.isActive" class="bx-im-list-recent-item__balloon_container --invitation">\n\t\t\t\t\t<div class="bx-im-list-recent-item__balloon">{{ loc('IM_LIST_RECENT_INVITATION_NOT_ACCEPTED_MSGVER_1') }}</div>\n\t\t\t\t</div>\n\t\t\t\t<div v-else-if="needsBirthdayPlaceholder" class="bx-im-list-recent-item__balloon_container --birthday">\n\t\t\t\t\t<div class="bx-im-list-recent-item__balloon">{{ loc('IM_LIST_RECENT_BIRTHDAY') }}</div>\n\t\t\t\t</div>\n\t\t\t\t<div v-else-if="needsVacationPlaceholder" class="bx-im-list-recent-item__balloon_container --vacation">\n\t\t\t\t\t<div class="bx-im-list-recent-item__balloon">\n\t\t\t\t\t\t{{ loc('IM_LIST_RECENT_VACATION', {'#VACATION_END_DATE#': formattedVacationEndDate}) }}\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t<template v-else-if="!showLastMessage">\n\t\t\t\t\t{{ hiddenMessageText }}\n\t\t\t\t</template>\n\t\t\t\t<template v-else>\n\t\t\t\t\t<span v-if="isLastMessageAuthor" class="bx-im-list-recent-item__message_author-icon --self"></span>\n\t\t\t\t\t<template v-else-if="isChat && message.authorId">\n\t\t\t\t\t\t<span v-if="lastMessageAuthorAvatar" :style="lastMessageAuthorAvatarStyle" class="bx-im-list-recent-item__message_author-icon --user"></span>\n\t\t\t\t\t\t<span v-else class="bx-im-list-recent-item__message_author-icon --user --default"></span>\n\t\t\t\t\t</template>\n\t\t\t\t\t<span class="bx-im-list-recent-item__message_text_content">{{ formattedMessageText }}</span>\n\t\t\t\t</template>\n\t\t\t</span>\n\t\t</div>\n\t`};const T={name:"ItemCounter",props:{item:{type:Object,required:true},isChatMuted:{type:Boolean,required:true}},data(){return{}},computed:{recentItem(){return this.item},dialog(){return this.$store.getters["chats/get"](this.recentItem.dialogId,true)},user(){return this.$store.getters["users/get"](this.recentItem.dialogId,true)},isUser(){return this.dialog.type===_.ChatType.user},isSelfChat(){return this.isUser&&this.user.id===v.Core.getUserId()},invitation(){return this.recentItem.invitation},totalCounter(){return this.dialog.counter+this.channelCommentsCounter},channelCommentsCounter(){return this.$store.getters["counters/getChannelCommentsCounter"](this.dialog.chatId)},formattedCounter(){return this.formatCounter(this.totalCounter)},showCounterContainer(){return!this.needsBirthdayPlaceholder&&!this.invitation.isActive},showPinnedIcon(){const t=this.totalCounter===0;return this.recentItem.pinned&&t&&!this.recentItem.unread},showUnreadWithoutCounter(){return this.recentItem.unread&&this.totalCounter===0},showUnreadWithCounter(){return this.recentItem.unread&&this.totalCounter>0},showCounter(){return!this.recentItem.unread&&this.totalCounter>0&&!this.isSelfChat},needsBirthdayPlaceholder(){return this.$store.getters["recent/needsBirthdayPlaceholder"](this.recentItem.dialogId)},containerClasses(){const t=this.dialog.counter===0&&this.channelCommentsCounter>0;const e=this.dialog.counter>0&&this.channelCommentsCounter>0;return{"--muted":this.isChatMuted,"--extended":this.totalCounter>99,"--comments-only":t,"--with-comments":e}}},methods:{formatCounter(t){return t>99?"99+":t.toString()}},template:`\n\t\t<div v-if="showCounterContainer" :class="containerClasses" class="bx-im-list-recent-item__counter_wrap">\n\t\t\t<div class="bx-im-list-recent-item__counter_container">\n\t\t\t\t<div v-if="showPinnedIcon" class="bx-im-list-recent-item__pinned-icon"></div>\n\t\t\t\t<div v-else-if="showUnreadWithoutCounter" class="bx-im-list-recent-item__counter_number --no-counter"></div>\n\t\t\t\t<div v-else-if="showUnreadWithCounter" class="bx-im-list-recent-item__counter_number --with-unread">\n\t\t\t\t\t{{ formattedCounter }}\n\t\t\t\t</div>\n\t\t\t\t<div v-else-if="showCounter" class="bx-im-list-recent-item__counter_number">\n\t\t\t\t\t{{ formattedCounter }}\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t`};const M={none:"",like:"like",sending:"sending",sent:"sent",viewed:"viewed"};const E={props:{item:{type:Object,required:true}},data(){return{}},computed:{recentItem(){return this.item},user(){return this.$store.getters["users/get"](this.recentItem.dialogId,true)},dialog(){return this.$store.getters["chats/get"](this.recentItem.dialogId,true)},message(){return this.$store.getters["recent/getMessage"](this.recentItem.dialogId)},messageStatus(){if(this.message.sending){return _.OwnMessageStatus.sending}if(this.message.viewedByOthers){return _.OwnMessageStatus.viewed}return _.OwnMessageStatus.sent},statusIcon(){if(!this.isLastMessageAuthor||this.isBot||this.needsBirthdayPlaceholder||this.hasDraft){return M.none}if(this.isSelfChat){return M.none}if(this.recentItem.liked){return M.like}return this.messageStatus},isLastMessageAuthor(){var t;return((t=this.message)==null?void 0:t.authorId)===v.Core.getUserId()},isSelfChat(){return this.isUser&&this.user.id===v.Core.getUserId()},isUser(){return this.dialog.type===_.ChatType.user},isBot(){if(this.isUser){return this.user.bot}return false},hasDraft(){return Boolean(this.recentItem.draft.text)},needsBirthdayPlaceholder(){if(!this.isUser){return false}return this.$store.getters["recent/needsBirthdayPlaceholder"](this.recentItem.dialogId)}},template:`\n\t\t<div class="bx-im-list-recent-item__status-icon" :class="'--' + statusIcon"></div>\n\t`};const b={name:"RecentItem",components:{ChatAvatar:g.ChatAvatar,ChatTitle:g.ChatTitle,MessageText:p,MessageStatus:E,ItemCounter:T},props:{item:{type:Object,required:true}},computed:{AvatarSize:()=>g.AvatarSize,recentItem(){return this.item},formattedDate(){if(this.needsBirthdayPlaceholder){return this.loc("IM_LIST_RECENT_BIRTHDAY_DATE")}return this.formatDate(this.itemDate)},formattedCounter(){return this.dialog.counter>99?"99+":this.dialog.counter.toString()},dialog(){return this.$store.getters["chats/get"](this.recentItem.dialogId,true)},layout(){return this.$store.getters["application/getLayout"]},message(){return this.$store.getters["recent/getMessage"](this.recentItem.dialogId)},itemDate(){return this.$store.getters["recent/getSortDate"](this.recentItem.dialogId)},isUser(){return this.dialog.type===_.ChatType.user},isChat(){return!this.isUser},isChannel(){return o.ChannelManager.isChannel(this.recentItem.dialogId)},isChatSelected(){const t=[_.Layout.chat.name,_.Layout.updateChat.name];if(!t.includes(this.layout.name)){return false}return this.layout.entityId===this.recentItem.dialogId},isChatMuted(){if(this.isUser){return false}const t=this.dialog.muteList.find((t=>t===v.Core.getUserId()));return Boolean(t)},isSomeoneTyping(){return this.dialog.writingList.length>0},needsBirthdayPlaceholder(){return this.$store.getters["recent/needsBirthdayPlaceholder"](this.recentItem.dialogId)},showLastMessage(){return this.$store.getters["application/settings/get"](_.Settings.recent.showLastMessage)},invitation(){return this.recentItem.invitation},wrapClasses(){return{"--pinned":this.recentItem.pinned,"--selected":this.isChatSelected}},itemClasses(){return{"--no-text":!this.showLastMessage}}},methods:{formatDate(t){return r.DateFormatter.formatByTemplate(t,r.DateTemplate.recent)},loc(t){return this.$Bitrix.Loc.getMessage(t)}},template:`\n\t\t<div :data-id="recentItem.dialogId" :class="wrapClasses" class="bx-im-list-recent-item__wrap">\n\t\t\t<div :class="itemClasses" class="bx-im-list-recent-item__container">\n\t\t\t\t<div class="bx-im-list-recent-item__avatar_container">\n\t\t\t\t\t<div v-if="invitation.isActive" class="bx-im-list-recent-item__avatar_invitation"></div>\n\t\t\t\t\t<div v-else class="bx-im-list-recent-item__avatar_content">\n\t\t\t\t\t\t<ChatAvatar \n\t\t\t\t\t\t\t:avatarDialogId="recentItem.dialogId" \n\t\t\t\t\t\t\t:contextDialogId="recentItem.dialogId" \n\t\t\t\t\t\t\t:size="AvatarSize.XL" \n\t\t\t\t\t\t\t:withSpecialTypeIcon="!isSomeoneTyping" \n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<div v-if="isSomeoneTyping" class="bx-im-list-recent-item__avatar_typing"></div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t<div class="bx-im-list-recent-item__content_container">\n\t\t\t\t\t<div class="bx-im-list-recent-item__content_header">\n\t\t\t\t\t\t<ChatTitle :dialogId="recentItem.dialogId" :withMute="true" />\n\t\t\t\t\t\t<div class="bx-im-list-recent-item__date">\n\t\t\t\t\t\t\t<MessageStatus :item="item" />\n\t\t\t\t\t\t\t<span>{{ formattedDate }}</span>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div class="bx-im-list-recent-item__content_bottom">\n\t\t\t\t\t\t<MessageText :item="recentItem" />\n\t\t\t\t\t\t<ItemCounter :item="recentItem" :isChatMuted="isChatMuted" />\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t`};const L={name:"ActiveCall",components:{ChatAvatar:g.ChatAvatar,ChatTitle:g.ChatTitle,MessengerButton:g.Button},props:{item:{type:Object,required:true}},emits:["click"],computed:{AvatarSize:()=>g.AvatarSize,ButtonSize:()=>g.ButtonSize,ButtonColor:()=>g.ButtonColor,ButtonIcon:()=>g.ButtonIcon,activeCall(){return this.item},dialog(){return this.$store.getters["chats/get"](this.activeCall.dialogId,true)},isConference(){return this.dialog.type===_.ChatType.videoconf},preparedName(){return u.Text.decode(this.activeCall.name)},anotherDeviceColorScheme(){return{backgroundColor:"transparent",borderColor:"#bbde4d",iconColor:"#525c69",textColor:"#525c69",hoverColor:"transparent"}},isTabWithActiveCall(){return this.$store.getters["recent/calls/hasActiveCall"]()&&Boolean(this.getCallManager().hasCurrentCall())},hasJoined(){return this.activeCall.state===_.RecentCallStatus.joined}},methods:{onJoinClick(){if(this.isConference){h.Analytics.getInstance().onJoinConferenceClick({callId:this.activeCall.call.id});c.Messenger.openConference({code:this.dialog.public.code});return}this.getCallManager().joinCall(this.activeCall.call.id)},onLeaveCallClick(){this.getCallManager().leaveCurrentCall()},onClick(t){const e=this.$store.getters["recent/get"](this.activeCall.dialogId);if(!e){return}this.$emit("click",{item:e,$event:t})},returnToCall(){if(this.activeCall.state!==_.RecentCallStatus.joined){return}this.getCallManager().unfoldCurrentCall()},getCallManager(){return l.CallManager.getInstance()},loc(t){return this.$Bitrix.Loc.getMessage(t)}},template:`\n\t\t<div :data-id="activeCall.dialogId" class="bx-im-list-recent-item__wrap bx-im-list-recent-active-call-item__wrap">\n\t\t\t<div @click="onClick" class="bx-im-list-recent-item__container bx-im-list-recent-active-call__container">\n\t\t\t\t<div class="bx-im-list-recent-item__avatar_container">\n\t\t\t\t\t<ChatAvatar \n\t\t\t\t\t\t:avatarDialogId="activeCall.dialogId" \n\t\t\t\t\t\t:contextDialogId="activeCall.dialogId" \n\t\t\t\t\t\t:size="AvatarSize.XL" \n\t\t\t\t\t/>\n\t\t\t\t</div>\n\t\t\t\t<div class="bx-im-list-recent-item__content_container">\n\t\t\t\t\t<div class="bx-im-list-recent-active-call__title_container">\n\t\t\t\t\t\t<ChatTitle :text="preparedName" />\n\t\t\t\t\t\t<div class="bx-im-list-recent-active-call__title_icon"></div>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div v-if="!hasJoined" class="bx-im-list-recent-active-call__actions_container">\n\t\t\t\t\t\t<div class="bx-im-list-recent-active-call__actions_item --join">\n\t\t\t\t\t\t\t<MessengerButton @click.stop="onJoinClick" :size="ButtonSize.M" :color="ButtonColor.Success" :isRounded="true" :text="loc('IM_LIST_RECENT_ACTIVE_CALL_JOIN')" />\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div v-else-if="hasJoined && isTabWithActiveCall" class="bx-im-list-recent-active-call__actions_container">\n\t\t\t\t\t\t<div class="bx-im-list-recent-active-call__actions_item --return">\n\t\t\t\t\t\t\t<MessengerButton @click.stop="returnToCall" :size="ButtonSize.M" :color="ButtonColor.Success" :isRounded="true" :text="loc('IM_LIST_RECENT_ACTIVE_CALL_RETURN')" />\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div v-else-if="hasJoined && !isTabWithActiveCall" class="bx-im-list-recent-active-call__actions_container">\n\t\t\t\t\t\t<div class="bx-im-list-recent-active-call__actions_item --another-device">\n\t\t\t\t\t\t\t<MessengerButton :size="ButtonSize.M" :customColorScheme="anotherDeviceColorScheme" :isRounded="true" :text="loc('IM_LIST_RECENT_ACTIVE_CALL_ANOTHER_DEVICE')" />\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t`};const f={[_.ChatType.chat]:u.Loc.getMessage("IM_LIST_RECENT_CREATE_CHAT_DEFAULT_TITLE"),[_.ChatType.videoconf]:u.Loc.getMessage("IM_LIST_RECENT_CREATE_CONFERENCE_DEFAULT_TITLE"),[_.ChatType.channel]:u.Loc.getMessage("IM_LIST_RECENT_CREATE_CHANNEL_DEFAULT_TITLE"),[_.ChatType.collab]:u.Loc.getMessage("IM_LIST_RECENT_CREATE_COLLAB_DEFAULT_TITLE")};const S={[_.ChatType.chat]:u.Loc.getMessage("IM_LIST_RECENT_CREATE_CHAT_SUBTITLE"),[_.ChatType.videoconf]:u.Loc.getMessage("IM_LIST_RECENT_CREATE_CONFERENCE_SUBTITLE"),[_.ChatType.channel]:u.Loc.getMessage("IM_LIST_RECENT_CREATE_CHANNEL_SUBTITLE"),[_.ChatType.collab]:u.Loc.getMessage("IM_LIST_RECENT_CREATE_COLLAB_SUBTITLE")};const x={data(){return{chatTitle:"",chatAvatarFile:"",chatType:""}},computed:{chatCreationIsOpened(){const{name:t}=this.$store.getters["application/getLayout"];return t===_.Layout.createChat.name},preparedTitle(){if(this.chatTitle===""){return f[this.chatType]}return this.chatTitle},preparedSubtitle(){return S[this.chatType]},preparedAvatar(){if(!this.chatAvatarFile){return null}return URL.createObjectURL(this.chatAvatarFile)},isSpecialType(){return this.chatType!==_.ChatType.chat}},created(){const t=d.CreateChatManager.getInstance().getChatTitle();if(t){this.chatTitle=t}const e=d.CreateChatManager.getInstance().getChatAvatar();if(e){this.chatAvatarFile=e}this.chatType=d.CreateChatManager.getInstance().getChatType();d.CreateChatManager.getInstance().subscribe(d.CreateChatManager.events.titleChange,this.onTitleChange);d.CreateChatManager.getInstance().subscribe(d.CreateChatManager.events.avatarChange,this.onAvatarChange);d.CreateChatManager.getInstance().subscribe(d.CreateChatManager.events.chatTypeChange,this.onChatTypeChange)},beforeUnmount(){d.CreateChatManager.getInstance().unsubscribe(d.CreateChatManager.events.titleChange,this.onTitleChange);d.CreateChatManager.getInstance().unsubscribe(d.CreateChatManager.events.avatarChange,this.onAvatarChange);d.CreateChatManager.getInstance().unsubscribe(d.CreateChatManager.events.chatTypeChange,this.onChatTypeChange)},methods:{onTitleChange(t){this.chatTitle=t.getData()},onAvatarChange(t){this.chatAvatarFile=t.getData()},onChatTypeChange(t){this.chatType=t.getData()},onClick(){d.CreateChatManager.getInstance().startChatCreation(this.chatType,{clearCurrentCreation:false})},loc(t){return this.$Bitrix.Loc.getMessage(t)}},template:`\n\t\t<div class="bx-im-list-recent-create-chat__container">\n\t\t\t<div class="bx-im-list-recent-item__wrap" :class="{'--selected': chatCreationIsOpened}" @click="onClick">\n\t\t\t\t<div class="bx-im-list-recent-item__container">\n\t\t\t\t\t<div class="bx-im-list-recent-item__avatar_container" :class="{'--squared': isSpecialType}">\n\t\t\t\t\t\t<div v-if="!preparedAvatar" class="bx-im-list-recent-create-chat__avatar --default"></div>\n\t\t\t\t\t\t<img v-else class="bx-im-list-recent-create-chat__avatar --image" :src="preparedAvatar" :alt="chatTitle" />\n\t\t\t\t\t</div>\n\t\t\t\t\t<div class="bx-im-list-recent-item__content_container">\n\t\t\t\t\t\t<div class="bx-im-list-recent-item__content_header">\n\t\t\t\t\t\t\t<div class="bx-im-list-recent-create-chat__header">\n\t\t\t\t\t\t\t\t{{ preparedTitle }}\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div class="bx-im-list-recent-item__content_bottom">\n\t\t\t\t\t\t\t<div class="bx-im-list-recent-item__message_container">\n\t\t\t\t\t\t\t\t{{ preparedSubtitle }}\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t`};const y={name:"EmptyState",components:{MessengerButton:g.Button},data(){return{}},computed:{ButtonSize:()=>g.ButtonSize,ButtonColor:()=>g.ButtonColor,inviteUsersLink(){const t="/bitrix/services/main/ajax.php";const e="bitrix:intranet.invitation";const i="getSliderContent";const n=new URLSearchParams({action:i,site_id:v.Core.getSiteId(),c:e,mode:"ajax"});return`${t}?${n.toString()}`}},methods:{onInviteUsersClick(){BX.SidePanel.Instance.open(this.inviteUsersLink)},loc(t){return this.$Bitrix.Loc.getMessage(t)}},template:`\n\t\t<div class="bx-im-list-recent-empty-state__container">\n\t\t\t<div class="bx-im-list-recent-empty-state__image"></div>\n\t\t\t<div class="bx-im-list-recent-empty-state__title">{{ loc('IM_LIST_RECENT_EMPTY_STATE_TITLE') }}</div>\n\t\t\t<div class="bx-im-list-recent-empty-state__subtitle">{{ loc('IM_LIST_RECENT_EMPTY_STATE_SUBTITLE') }}</div>\n\t\t\t<div class="bx-im-list-recent-empty-state__button">\n\t\t\t\t<MessengerButton\n\t\t\t\t\t:size="ButtonSize.L"\n\t\t\t\t\t:isRounded="true"\n\t\t\t\t\t:text="loc('IM_LIST_RECENT_EMPTY_STATE_INVITE_USERS')"\n\t\t\t\t\t@click="onInviteUsersClick"\n\t\t\t\t/>\n\t\t\t</div>\n\t\t</div>\n\t`};class B extends C.EventEmitter{static getInstance(){if(!this.instance){this.instance=new this}return this.instance}constructor(){super();this.setEventNamespace(B.eventNamespace);this.init()}isSupported(){return!u.Type.isUndefined(window.BroadcastChannel)&&!m.Utils.platform.isBitrixDesktop()}init(){if(!this.isSupported()){return}this.channel=new BroadcastChannel(B.channelName);this.channel.addEventListener("message",(({data:{type:t,data:e}})=>{this.emit(t,e)}))}sendRecentList(t){if(!this.isSupported()){return}this.channel.postMessage({type:B.events.recentListUpdate,data:t})}}B.instance=null;B.channelName="im-recent";B.eventNamespace="BX.Messenger.v2.Recent.BroadcastManager";B.events={recentListUpdate:"recentListUpdate"};class A{constructor(){this.store=v.Core.getStore()}init(){this.onDialogInitedHandler=this.onDialogInited.bind(this);C.EventEmitter.subscribe(_.EventType.dialog.onDialogInited,this.onDialogInitedHandler)}destroy(){C.EventEmitter.unsubscribe(_.EventType.dialog.onDialogInited,this.onDialogInitedHandler)}onDialogInited(t){const{dialogId:e}=t.getData();const i=this.store.getters["recent/get"](e);if(!i||!i.liked){return}this.store.dispatch("recent/like",{id:e,liked:false})}}const R={name:"RecentList",components:{LoadingState:g.ListLoadingState,RecentItem:b,ActiveCall:L,CreateChat:x,EmptyState:y},emits:["chatClick"],data(){return{isLoading:false,isLoadingNextPage:false,listIsScrolled:false,isCreatingChat:false}},computed:{collection(){return this.getRecentService().getCollection()},isEmptyCollection(){return this.collection.length===0},preparedItems(){const t=this.collection.filter((t=>{let e=true;if(!this.showBirthdays&&t.isBirthdayPlaceholder){e=false}if(t.isFakeElement&&!this.isFakeItemNeeded(t)){e=false}return e}));return[...t].sort(((t,e)=>{const i=this.$store.getters["recent/getSortDate"](t.dialogId);const n=this.$store.getters["recent/getSortDate"](e.dialogId);return n-i}))},activeCalls(){return this.$store.getters["recent/calls/get"]},pinnedItems(){return this.preparedItems.filter((t=>t.pinned===true))},generalItems(){return this.preparedItems.filter((t=>t.pinned===false))},showBirthdays(){return this.$store.getters["application/settings/get"](_.Settings.recent.showBirthday)},showInvited(){return this.$store.getters["application/settings/get"](_.Settings.recent.showInvited)},firstPageLoaded(){return this.getRecentService().firstPageIsLoaded}},async created(){this.contextMenuManager=new i.RecentMenu;this.initBroadcastManager();this.initLikeManager();this.initCreateChatManager();this.isLoading=true;await this.getRecentService().loadFirstPage({ignorePreloadedItems:true});this.isLoading=false;void n.DraftManager.getInstance().initDraftHistory()},beforeUnmount(){this.contextMenuManager.destroy();this.destroyBroadcastManager();this.destroyLikeManager();this.destroyCreateChatManager()},methods:{async onScroll(t){this.listIsScrolled=t.target.scrollTop>0;this.contextMenuManager.close();if(!m.Utils.dom.isOneScreenRemaining(t.target)||!this.getRecentService().hasMoreItemsToLoad){return}this.isLoadingNextPage=true;await this.getRecentService().loadNextPage();this.isLoadingNextPage=false},onClick(t){this.$emit("chatClick",t.dialogId)},onRightClick(t,e){if(m.Utils.key.isCombination(e,"Alt+Shift")){return}const i={...t,compactMode:false};this.contextMenuManager.openMenu(i,e.currentTarget);e.preventDefault()},onCallClick({item:t,$event:e}){this.onClick(t,e)},initBroadcastManager(){this.onRecentListUpdate=t=>{this.getRecentService().setPreloadedData(t.data)};this.broadcastManager=B.getInstance();this.broadcastManager.subscribe(B.events.recentListUpdate,this.onRecentListUpdate)},destroyBroadcastManager(){this.broadcastManager=B.getInstance();this.broadcastManager.unsubscribe(B.events.recentListUpdate,this.onRecentListUpdate)},initLikeManager(){this.likeManager=new A;this.likeManager.init()},destroyLikeManager(){this.likeManager.destroy()},initCreateChatManager(){if(d.CreateChatManager.getInstance().isCreating()){this.isCreatingChat=true}this.onCreationStatusChange=t=>{this.isCreatingChat=t.getData()};d.CreateChatManager.getInstance().subscribe(d.CreateChatManager.events.creationStatusChange,this.onCreationStatusChange)},destroyCreateChatManager(){d.CreateChatManager.getInstance().unsubscribe(d.CreateChatManager.events.creationStatusChange,this.onCreationStatusChange)},isFakeItemNeeded(t){const e=this.$store.getters["chats/get"](t.dialogId,true);const i=e.type===_.ChatType.user;const n=i&&this.showBirthdays&&this.$store.getters["users/hasBirthday"](t.dialogId);return this.showInvited||n},getRecentService(){if(!this.service){this.service=e.RecentService.getInstance()}return this.service},loc(t){return this.$Bitrix.Loc.getMessage(t)}},template:`\n\t\t<div class="bx-im-list-recent__container">\n\t\t\t<div v-if="activeCalls.length > 0" class="bx-im-list-recent__calls_container" :class="{'--with-shadow': listIsScrolled}">\n\t\t\t\t<ActiveCall\n\t\t\t\t\tv-for="activeCall in activeCalls"\n\t\t\t\t\t:key="activeCall.dialogId"\n\t\t\t\t\t:item="activeCall"\n\t\t\t\t\t@click="onCallClick"\n\t\t\t\t/>\n\t\t\t</div>\n\t\t\t<CreateChat v-if="isCreatingChat"></CreateChat>\n\t\t\t<LoadingState v-if="isLoading && !firstPageLoaded" />\n\t\t\t<div v-else @scroll="onScroll" class="bx-im-list-recent__scroll-container">\n\t\t\t\t<EmptyState v-if="isEmptyCollection" />\n\t\t\t\t<div v-if="pinnedItems.length > 0" class="bx-im-list-recent__pinned_container">\n\t\t\t\t\t<RecentItem\n\t\t\t\t\t\tv-for="item in pinnedItems"\n\t\t\t\t\t\t:key="item.dialogId"\n\t\t\t\t\t\t:item="item"\n\t\t\t\t\t\t@click="onClick(item, $event)"\n\t\t\t\t\t\t@click.right="onRightClick(item, $event)"\n\t\t\t\t\t/>\n\t\t\t\t</div>\n\t\t\t\t<div class="bx-im-list-recent__general_container">\n\t\t\t\t\t<RecentItem\n\t\t\t\t\t\tv-for="item in generalItems"\n\t\t\t\t\t\t:key="item.dialogId"\n\t\t\t\t\t\t:item="item"\n\t\t\t\t\t\t@click="onClick(item, $event)"\n\t\t\t\t\t\t@click.right="onRightClick(item, $event)"\n\t\t\t\t\t/>\n\t\t\t\t</div>\t\n\t\t\t\t<LoadingState v-if="isLoadingNextPage" />\n\t\t\t</div>\n\t\t</div>\n\t`};t.RecentList=R})(this.BX.Messenger.v2.Component.List=this.BX.Messenger.v2.Component.List||{},BX.Messenger.v2.Service,BX.Messenger.v2.Lib,BX.Messenger.v2.Lib,BX.Main,BX.Messenger.v2.Lib,BX.Messenger.v2.Lib,BX.Messenger.v2.Lib,BX.Messenger.v2.Lib,BX.Messenger.v2.Lib,BX.Messenger.v2.Lib,BX.Messenger.v2.Lib,BX.Messenger.v2.Component.Elements,BX,BX.Messenger.v2.Lib,BX.Event,BX.Messenger.v2.Application,BX.Messenger.v2.Const);
//# sourceMappingURL=recent-list.bundle.map.js