this.BX=this.BX||{};this.BX.Messenger=this.BX.Messenger||{};this.BX.Messenger.v2=this.BX.Messenger.v2||{};this.BX.Messenger.v2.Component=this.BX.Messenger.v2.Component||{};(function(t,e,n,o,a,s,i,r,l,d,c,g,h,m,u,C,p,I,T,_,b,M,v,y,S,E,B){"use strict";const f={name:"CommentsButton",props:{dialogId:{type:String,required:true},counter:{type:Number,required:true}},data(){return{}},computed:{dialog(){return this.$store.getters["chats/get"](this.dialogId,true)}},template:`\n\t\t<div class="bx-im-dialog-channel__comments-button">\n\t\t\t<div class="bx-im-dialog-channel__comments-button_counter">\n\t\t\t\t{{ counter }}\n\t\t\t</div>\n\t\t</div>\n\t`};class A extends v.MessageMenu{getMenuItems(){return[this.getCopyItem(),this.getCopyLinkItem(),this.getCopyFileItem(),this.getPinItem(),this.getForwardItem(),this.getDelimiter(),this.getMarkItem(),this.getFavoriteItem(),this.getDelimiter(),this.getDownloadFileItem(),this.getSaveToDisk(),this.getDelimiter(),this.getEditItem(),this.getDeleteItem(),this.getDelimiter(),this.getSelectItem()]}}const L={name:"ChannelMessageList",components:{MessageList:v.MessageList},props:{dialogId:{type:String,required:true}},computed:{ChannelMessageMenu:()=>A},template:`\n\t\t<MessageList :dialogId="dialogId" :messageMenuClass="ChannelMessageMenu" />\n\t`};const x={name:"ChannelDialog",components:{ChatDialog:T.ChatDialog,ChannelMessageList:L,CommentsButton:f},props:{dialogId:{type:String,required:true}},data(){return{lastScrolledChatId:0}},computed:{dialog(){return this.$store.getters["chats/get"](this.dialogId,true)},layout(){return this.$store.getters["application/getLayout"]},isGuest(){return this.dialog.role===y.UserRole.guest},isChatLayout(){return this.layout.name===y.Layout.chat.name},channelComments(){return this.$store.getters["counters/getChannelComments"](this.dialog.chatId)},totalChannelCommentsCounter(){let t=0;Object.values(this.channelComments).forEach((e=>{t+=e}));return t},showCommentsButton(){return this.isChatLayout&&this.totalChannelCommentsCounter>0}},beforeUnmount(){this.readAllChannelComments()},methods:{async onCommentsButtonClick(){const t=this.getNextChatIdToJump();this.lastScrolledChatId=t;const e=this.$store.getters["messages/comments/getMessageIdByChatId"](t);if(e){this.$refs.dialog.goToMessageContext(e,{position:T.ScrollManager.scrollPosition.messageBottom});return}await this.goToMessageContextByCommentsChatId(t)},async goToMessageContextByCommentsChatId(t){this.$refs.dialog.showLoadingBar();const e=await this.$refs.dialog.getMessageService().loadContextByChatId(t).catch((t=>{console.error("ChannelDialog: goToMessageContextByCommentsChatId error",t)}));this.$refs.dialog.hideLoadingBar();if(!e){console.error("ChannelDialog: no messageId after loading context")}await this.$nextTick();this.$refs.dialog.getScrollManager().scrollToMessage(e,{position:T.ScrollManager.scrollPosition.messageBottom});await this.$nextTick();this.$refs.dialog.highlightMessage(e)},getNextChatIdToJump(){const t=this.getCommentsChatIds();t.sort(((t,e)=>t-e));if(this.lastScrolledChatId===0){return t[0]}const e=t.filter((t=>t>this.lastScrolledChatId));if(e.length===0){return t[0]}return e[0]},getCommentsChatIds(){return Object.keys(this.channelComments).map((t=>Number(t)))},readAllChannelComments(){B.CommentsService.readAllChannelComments(this.dialogId)}},template:`\n\t\t<ChatDialog ref="dialog" :dialogId="dialogId" :resetOnExit="isGuest">\n\t\t\t<template #message-list>\n\t\t\t\t<ChannelMessageList :dialogId="dialogId" />\n\t\t\t</template>\n\t\t\t<template #additional-float-button>\n\t\t\t\t<Transition name="float-button-transition">\n\t\t\t\t\t<CommentsButton\n\t\t\t\t\t\tv-if="showCommentsButton"\n\t\t\t\t\t\t:dialogId="dialogId"\n\t\t\t\t\t\t:counter="totalChannelCommentsCounter"\n\t\t\t\t\t\t@click="onCommentsButtonClick"\n\t\t\t\t\t\tkey="comments"\n\t\t\t\t\t/>\n\t\t\t\t</Transition>\n\t\t\t</template>\n\t\t</ChatDialog>\n\t`};const N={components:{ChatButton:E.Button},props:{dialogId:{type:String,required:true}},computed:{ButtonSize:()=>E.ButtonSize,ButtonColor:()=>E.ButtonColor},methods:{onButtonClick(){this.getChatService().joinChat(this.dialogId)},getChatService(){if(!this.chatService){this.chatService=new B.ChatService}return this.chatService},loc(t){return this.$Bitrix.Loc.getMessage(t)}},template:`\n\t\t<div class="bx-im-content-chat__textarea_placeholder">\n\t\t\t<ChatButton\n\t\t\t\t:size="ButtonSize.XL"\n\t\t\t\t:color="ButtonColor.Primary"\n\t\t\t\t:text="loc('IM_CONTENT_BLOCKED_TEXTAREA_JOIN_CHANNEL_V2')"\n\t\t\t\t:isRounded="true"\n\t\t\t\t@click="onButtonClick"\n\t\t\t/>\n\t\t</div>\n\t`};const k={name:"ChannelTextarea",components:{ChatTextarea:S.ChatTextarea},props:{dialogId:{type:String,default:""}},methods:{loc(t){return this.$Bitrix.Loc.getMessage(t)}},template:`\n\t\t<ChatTextarea\n\t\t\t:dialogId="dialogId"\n\t\t\t:placeholder="this.loc('IM_CONTENT_CHANNEL_TEXTAREA_PLACEHOLDER')"\n\t\t\t:withCreateMenu="false"\n\t\t\t:withMarket="false"\n\t\t\t:withAudioInput="false"\n\t\t\tclass="bx-im-channel-send-panel__container"\n\t\t/>\n\t`};const w={name:"ChannelContent",components:{BaseChatContent:C.BaseChatContent,ChannelDialog:x,ChannelTextarea:k,JoinPanel:N},props:{dialogId:{type:String,required:true}},template:`\n\t\t<BaseChatContent :dialogId="dialogId">\n\t\t\t<template #dialog>\n\t\t\t\t<ChannelDialog :dialogId="dialogId" :key="dialogId" />\n\t\t\t</template>\n\t\t\t<template #join-panel>\n\t\t\t\t<JoinPanel :dialogId="dialogId" />\n\t\t\t</template>\n\t\t\t<template #textarea="{ onTextareaMount }">\n\t\t\t\t<ChannelTextarea :dialogId="dialogId" :key="dialogId" @mounted="onTextareaMount" />\n\t\t\t</template>\n\t\t</BaseChatContent>\n\t`};const O={name:"CollabTitle",components:{ChatTitle:E.ChatTitle,LineLoader:E.LineLoader,FadeAnimation:s.FadeAnimation},inject:["currentSidebarPanel"],props:{dialogId:{type:String,required:true}},computed:{dialog(){return this.$store.getters["chats/get"](this.dialogId,true)},collabInfo(){return this.$store.getters["chats/collabs/getByChatId"](this.dialog.chatId)},guestCounter(){return this.collabInfo.guestCount},userCounterText(){return b.Loc.getMessagePlural("IM_CONTENT_CHAT_HEADER_USER_COUNT",this.dialog.userCounter,{"#COUNT#":this.dialog.userCounter})},guestCounterText(){return b.Loc.getMessagePlural("IM_CONTENT_COLLAB_HEADER_GUEST_COUNT",this.guestCounter,{"#COUNT#":this.guestCounter})}},methods:{onMembersClick(){if(this.currentSidebarPanel===y.SidebarDetailBlock.members){M.EventEmitter.emit(y.EventType.sidebar.close,{panel:y.SidebarDetailBlock.members});return}M.EventEmitter.emit(y.EventType.sidebar.open,{panel:y.SidebarDetailBlock.members,dialogId:this.dialogId})},loc(t){return this.$Bitrix.Loc.getMessage(t)}},template:`\n\t\t<div class="bx-im-collab-header-title__container">\n\t\t\t<div class="bx-im-collab-header-title__title-container --ellipsis">\n\t\t\t\t<ChatTitle :dialogId="dialogId" />\n\t\t\t</div>\n\t\t\t<LineLoader v-if="!dialog.inited" :width="50" :height="16" />\n\t\t\t<FadeAnimation :duration="100">\n\t\t\t\t<div v-if="dialog.inited" class="bx-im-collab-header-title__subtitle_container">\n\t\t\t\t\t<div @click="onMembersClick" class="bx-im-collab-header-title__subtitle_content --ellipsis">\n\t\t\t\t\t\t<span\n\t\t\t\t\t\t\t:title="loc('IM_CONTENT_CHAT_HEADER_OPEN_MEMBERS')"\n\t\t\t\t\t\t\tclass="bx-im-collab-header-title__user-counter"\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t{{ userCounterText }}\n\t\t\t\t\t\t</span>\n\t\t\t\t\t\t<span v-if="guestCounter > 0" class="bx-im-collab-header-title__guest-counter">\n\t\t\t\t\t\t\t{{ guestCounterText }}\n\t\t\t\t\t\t</span>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</FadeAnimation>\n\t\t</div>\n\t`};const P={name:"EntityCounter",props:{counter:{type:Number,required:true}},computed:{preparedCounter(){return this.counter>99?"99+":this.counter.toString()}},template:`\n\t\t<span class="bx-im-collab-header__link-counter">\n\t\t\t{{ preparedCounter }}\n\t\t</span>\n\t`};const D={name:"EntityLink",components:{EntityCounter:P},props:{dialogId:{type:String,required:true},compactMode:{type:Boolean,required:true},type:{type:String,required:true},title:{type:String,required:true},url:{type:String,required:true},counter:{type:[Number,null],default:null}},computed:{showCounter(){return!b.Type.isNull(this.counter)&&this.counter>0}},methods:{onLinkClick(){m.Analytics.getInstance().collabEntities.onClick(this.dialogId,this.type);BX.SidePanel.Instance.open(this.url,{cacheable:false,customLeftBoundary:0})}},template:`\n\t\t<a :href="url" @click.prevent="onLinkClick" class="bx-im-collab-header__link" :class="'--' + type">\n\t\t\t<span v-if="compactMode" class="bx-im-collab-header__link-icon"></span>\n\t\t\t<span v-else class="bx-im-collab-header__link-text">{{ title }}</span>\n\t\t\t<EntityCounter v-if="showCounter" :counter="counter" />\n\t\t</a>\n\t`};const $={name:"EntitiesPanel",components:{EntityLink:D},props:{dialogId:{type:String,default:""},compactMode:{type:Boolean,required:true}},computed:{CollabEntityType:()=>y.CollabEntityType,dialog(){return this.$store.getters["chats/get"](this.dialogId,true)},collabInfo(){return this.$store.getters["chats/collabs/getByChatId"](this.dialog.chatId)},tasksInfo(){return this.collabInfo.entities.tasks},tasksUrl(){return this.tasksInfo.url},tasksCounter(){return this.tasksInfo.counter},filesInfo(){return this.collabInfo.entities.files},filesUrl(){return this.filesInfo.url},calendarInfo(){return this.collabInfo.entities.calendar},calendarUrl(){return this.calendarInfo.url},calendarCounter(){return this.calendarInfo.counter}},methods:{loc(t){return this.$Bitrix.Loc.getMessage(t)}},template:`\n\t\t<div class="bx-im-collab-header__links-container" :class="{'--compact': compactMode}">\n\t\t\t<EntityLink\n\t\t\t\t:dialogId="dialogId"\n\t\t\t\t:compactMode="compactMode"\n\t\t\t\t:url="tasksUrl"\n\t\t\t\t:type="CollabEntityType.tasks"\n\t\t\t\t:title="loc('IM_CONTENT_COLLAB_HEADER_LINK_TASKS')"\n\t\t\t\t:counter="tasksCounter"\n\t\t\t/>\n\t\t\t<EntityLink\n\t\t\t\t:dialogId="dialogId"\n\t\t\t\t:compactMode="compactMode"\n\t\t\t\t:url="filesUrl"\n\t\t\t\t:type="CollabEntityType.files"\n\t\t\t\t:title="loc('IM_CONTENT_COLLAB_HEADER_LINK_FILES')"\n\t\t\t/>\n\t\t\t<EntityLink\n\t\t\t\t:dialogId="dialogId"\n\t\t\t\t:compactMode="compactMode"\n\t\t\t\t:url="calendarUrl"\n\t\t\t\t:type="CollabEntityType.calendar"\n\t\t\t\t:title="loc('IM_CONTENT_COLLAB_HEADER_LINK_CALENDAR')"\n\t\t\t\t:counter="calendarCounter"\n\t\t\t/>\n\t\t</div>\n\t`};const U={name:"AddToChatButton",components:{AddToCollab:i.AddToCollab},props:{dialogId:{type:String,default:""},withAnimation:{type:Boolean,default:false}},emits:["close"],data(){return{showAddToChatPopup:false}},methods:{openAddToChatPopup(){m.Analytics.getInstance().userAdd.onChatHeaderClick(this.dialogId);this.showAddToChatPopup=true},closeAddToChatPopup(){this.$emit("close");this.showAddToChatPopup=false},loc(t){return this.$Bitrix.Loc.getMessage(t)}},template:`\n\t\t<div\n\t\t\t:title="loc('IM_CONTENT_CHAT_HEADER_OPEN_INVITE_POPUP_TITLE')"\n\t\t\t:class="{'--active': showAddToChatPopup}"\n\t\t\tclass="bx-im-collab-header__add-people-icon"\n\t\t\t@click="openAddToChatPopup"\n\t\t\tref="add-members"\n\t\t></div>\n\t\t<AddToCollab\n\t\t\tv-if="showAddToChatPopup"\n\t\t\t:bindElement="$refs['add-members'] ?? {}"\n\t\t\t:dialogId="dialogId"\n\t\t\t:popupConfig="{ offsetTop: 25, offsetLeft: -300 }"\n\t\t\t@close="closeAddToChatPopup"\n\t\t/>\n\t`};const R=3;const H={name:"PulseAnimation",props:{showPulse:{type:Boolean,default:true}},computed:{rings(){if(!this.showPulse){return[]}return Array.from({length:R})}},template:`\n\t\t<div class="bx-im-pulse-animation__container">\n\t\t\t<slot />\n\t\t\t<div v-for="ring in rings" class="bx-im-pulse-animation__ring"></div>\n\t\t</div>\n\t`};const X={name:"CollabHeader",components:{ChatHeader:C.ChatHeader,CollabTitle:O,EntitiesPanel:$,AddToChatButton:U,AddToChatPopup:i.AddToChat,PulseAnimation:H},props:{dialogId:{type:String,default:""}},data(){return{compactMode:false,showAddToChatPopupDelayed:false}},computed:{dialog(){return this.$store.getters["chats/get"](this.dialogId,true)},isInited(){return this.dialog.inited}},watch:{async isInited(t){if(t&&this.showAddToChatPopupDelayed){await this.$nextTick();this.openAddToChatPopup()}}},created(){M.EventEmitter.subscribe(y.EventType.header.openAddToChatPopup,this.onOpenAddToChatPopup)},beforeUnmount(){M.EventEmitter.unsubscribe(y.EventType.header.openAddToChatPopup,this.onOpenAddToChatPopup)},methods:{onOpenAddToChatPopup(){if(!this.isInited){this.showAddToChatPopupDelayed=true;return}this.openAddToChatPopup()},openAddToChatPopup(){this.$refs["add-to-chat-button"].openAddToChatPopup()},onCompactModeChange(t){this.compactMode=t}},template:`\n\t\t<ChatHeader :dialogId="dialogId" @compactModeChange="onCompactModeChange" class="bx-im-collab-header__container">\n\t\t\t<template #title>\n\t\t\t\t<CollabTitle :dialogId="dialogId" />\n\t\t\t</template>\n\t\t\t<template #before-actions>\n\t\t\t\t<EntitiesPanel :dialogId="dialogId" :compactMode="compactMode" />\n\t\t\t</template>\n\t\t\t<template #add-to-chat-button>\n\t\t\t\t<PulseAnimation :showPulse="showAddToChatPopupDelayed">\n\t\t\t\t\t<AddToChatButton \n\t\t\t\t\t\t:withAnimation="showAddToChatPopupDelayed" \n\t\t\t\t\t\t:dialogId="dialogId" \n\t\t\t\t\t\tref="add-to-chat-button" \n\t\t\t\t\t\t@close="showAddToChatPopupDelayed = false"\n\t\t\t\t\t/>\n\t\t\t\t</PulseAnimation>\n\t\t\t</template>\n\t\t</ChatHeader>\n\t`};const F={name:"CollabContent",components:{BaseChatContent:C.BaseChatContent,CollabHeader:X},props:{dialogId:{type:String,required:true}},computed:{SpecialBackground:()=>r.SpecialBackground},template:`\n\t\t<BaseChatContent :dialogId="dialogId" :backgroundId="SpecialBackground.collab">\n\t\t\t<template #header>\n\t\t\t\t<CollabHeader :dialogId="dialogId" :key="dialogId" />\n\t\t\t</template>\n\t\t</BaseChatContent>\n\t`};const q={name:"MultidialogChatTitle",components:{EditableChatTitle:E.EditableChatTitle,ChatTitle:E.ChatTitle},props:{dialogId:{type:String,required:true}},emits:["newTitle"],computed:{isSupportBot(){return this.$store.getters["users/bots/isSupport"](this.dialogId)},subtitle(){return this.$Bitrix.Loc.getMessage("IM_CONTENT_CHAT_HEADER_SUPPORT_SUBTITLE")}},template:`\n\t\t<div class="bx-im-chat-header__info">\n\t\t\t<ChatTitle v-if="isSupportBot" :dialogId="dialogId" />\n\t\t\t<EditableChatTitle v-else :dialogId="dialogId" @newTitleSubmit="$emit('newTitle', $event)" />\n\t\t\t<div class="bx-im-chat-header__subtitle_container">\n\t\t\t\t<div class="bx-im-chat-header__subtitle_content">{{ subtitle }}</div>\n\t\t\t</div>\n\t\t</div>\n\t`};const G={name:"MultidialogHeader",components:{ChatHeader:C.ChatHeader,MultidialogChatTitle:q},props:{dialogId:{type:String,default:""}},template:`\n\t\t<ChatHeader :dialogId="dialogId">\n\t\t\t<template #title="{ onNewTitleHandler }">\n\t\t\t\t<MultidialogChatTitle\n\t\t\t\t\t:dialogId="dialogId"\n\t\t\t\t\t@newTitle="onNewTitleHandler"\n\t\t\t\t/>\n\t\t\t</template>\n\t\t</ChatHeader>\n\t`};const z={name:"MultidialogContent",components:{BaseChatContent:C.BaseChatContent,MultidialogHeader:G},props:{dialogId:{type:String,required:true}},template:`\n\t\t<BaseChatContent :dialogId="dialogId">\n\t\t\t<template #header>\n\t\t\t\t<MultidialogHeader :dialogId="dialogId" :key="dialogId" />\n\t\t\t</template>\n\t\t</BaseChatContent>\n\t`};const K={props:{text:{type:String,default:""},subtext:{type:String,default:""},backgroundId:{type:[String,Number],default:""}},computed:{iconClass(){return this.isEmptyRecent?"--empty":"--default"},preparedText(){if(this.text){return this.text}if(this.isEmptyRecent){return this.loc("IM_CONTENT_CHAT_NO_CHATS_START_MESSAGE")}return this.loc("IM_CONTENT_CHAT_START_MESSAGE_V2")},preparedSubtext(){if(this.subtext){return this.subtext}return""},isEmptyRecent(){return B.RecentService.getInstance().getCollection().length===0},backgroundStyle(){if(b.Type.isStringFilled(this.backgroundId)||b.Type.isNumber(this.backgroundId)){return r.ThemeManager.getBackgroundStyleById(this.backgroundId)}return r.ThemeManager.getCurrentBackgroundStyle()}},methods:{loc(t,e={}){return this.$Bitrix.Loc.getMessage(t,e)}},template:`\n\t\t<div class="bx-im-content-chat-start__container" :style="backgroundStyle">\n\t\t\t<div class="bx-im-content-chat-start__content">\n\t\t\t\t<div class="bx-im-content-chat-start__icon" :class="iconClass"></div>\n\t\t\t\t<div class="bx-im-content-chat-start__title">\n\t\t\t\t\t{{ preparedText }}\n\t\t\t\t</div>\n\t\t\t\t<div v-if="preparedSubtext" class="bx-im-content-chat-start__subtitle">\n\t\t\t\t\t{{ preparedSubtext }}\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t`};const J={name:"ChannelEmptyState",components:{BaseEmptyState:K},computed:{text(){return this.loc("IM_CONTENT_CHANNEL_START_MESSAGE_V3")},subtext(){return this.loc("IM_CONTENT_CHANNEL_START_MESSAGE_SUBTITLE")}},methods:{loc(t){return this.$Bitrix.Loc.getMessage(t)}},template:`\n\t\t<BaseEmptyState :text="text" :subtext="subtext" />\n\t`};class j{async updateLastActivityDate(t){if(this.isPullServerWithUserStatusSupport()){const e=await this.getUserActivityFromPull(t);if(!e){return Promise.resolve()}return this.updateUserModel(t,{lastActivityDate:e})}const e=await this.requestUserData(t);return this.updateUserModel(t,e)}async getUserActivityFromPull(t){const e=await l.Core.getPullClient().getUsersLastSeen([t]).catch((t=>{console.error("UserService: error getting user activity from P&P",t)}));if(!b.Type.isNumber(e[t])){return null}const n=e[t]*1e3;return new Date(Date.now()-n)}async requestUserData(t){p.Logger.warn(`UserService: get actual user data for - ${t}`);const e=await l.Core.getRestClient().callMethod(y.RestMethod.imUserGet,{ID:t}).catch((t=>{console.error("UserService: error getting user data",t)}));return e.data()}async updateUserModel(t,e){p.Logger.warn("UserService: update user data",e);return l.Core.getStore().dispatch("users/update",{id:t,fields:e})}isPullServerWithUserStatusSupport(){return l.Core.getPullClient().isJsonRpc()}}const V={name:"FeatureBlock",props:{name:{type:String,required:true},title:{type:String,required:true},subtitle:{type:String,required:true}},template:`\n\t\t<div class="bx-im-content-collab-start__block">\n\t\t\t<div class="bx-im-content-collab-start__block_icon" :class="'--' + name"></div>\n\t\t\t<div class="bx-im-content-collab-start__block_content">\n\t\t\t\t<div class="bx-im-content-collab-start__block_title">\n\t\t\t\t\t{{ title }}\n\t\t\t\t</div>\n\t\t\t\t<div class="bx-im-content-collab-start__block_subtitle">\n\t\t\t\t\t{{ subtitle }}\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t`};const W={name:"CollabEmptyState",components:{FeatureBlock:V,MessengerButton:E.Button},computed:{ButtonSize:()=>E.ButtonSize,canCreateCollab(){const t=g.FeatureManager.isFeatureAvailable(g.Feature.collabCreationAvailable);const e=u.PermissionManager.getInstance().canPerformActionByUserType(y.ActionByUserType.createCollab);return t&&e},preparedTitle(){return b.Loc.getMessage("IM_CONTENT_COLLAB_START_TITLE",{"[highlight]":'<span class="bx-im-content-collab-start__title_highlight">',"[/highlight]":"</span>"})},createButtonColorScheme(){return{borderColor:y.Color.transparent,backgroundColor:y.Color.collab60,iconColor:y.Color.white,textColor:y.Color.white,hoverColor:y.Color.collab50}}},methods:{onCreateClick(){m.Analytics.getInstance().chatCreate.onCollabEmptyStateCreateClick();d.Messenger.openChatCreation(c.CreatableChat.collab)},loc(t){return this.$Bitrix.Loc.getMessage(t)}},template:`\n\t\t<div class="bx-im-content-collab-start__container">\n\t\t\t<div class="bx-im-content-collab-start__title" v-html="preparedTitle"></div>\n\t\t\t<div class="bx-im-content-collab-start__content">\n\t\t\t\t<div class="bx-im-content-collab-start__blocks">\n\t\t\t\t\t<FeatureBlock\n\t\t\t\t\t\t:title="loc('IM_CONTENT_COLLAB_START_BLOCK_TITLE_1')"\n\t\t\t\t\t\t:subtitle="loc('IM_CONTENT_COLLAB_START_BLOCK_SUBTITLE_1')"\n\t\t\t\t\t\tname="collaboration"\n\t\t\t\t\t/>\n\t\t\t\t\t<FeatureBlock\n\t\t\t\t\t\t:title="loc('IM_CONTENT_COLLAB_START_BLOCK_TITLE_2')"\n\t\t\t\t\t\t:subtitle="loc('IM_CONTENT_COLLAB_START_BLOCK_SUBTITLE_2')"\n\t\t\t\t\t\tname="business"\n\t\t\t\t\t/>\n\t\t\t\t\t<FeatureBlock\n\t\t\t\t\t\t:title="loc('IM_CONTENT_COLLAB_START_BLOCK_TITLE_3')"\n\t\t\t\t\t\t:subtitle="loc('IM_CONTENT_COLLAB_START_BLOCK_SUBTITLE_3')"\n\t\t\t\t\t\tname="result"\n\t\t\t\t\t/>\n\t\t\t\t</div>\n\t\t\t\t<div class="bx-im-content-collab-start__image"></div>\n\t\t\t</div>\n\t\t\t<MessengerButton\n\t\t\t\tv-if="canCreateCollab"\n\t\t\t\t:size="ButtonSize.XXL"\n\t\t\t\t:customColorScheme="createButtonColorScheme"\n\t\t\t\t:text="loc('IM_CONTENT_COLLAB_START_CREATE_BUTTON')"\n\t\t\t\t:isRounded="true"\n\t\t\t\t@click="onCreateClick"\n\t\t\t/>\n\t\t</div>\n\t`};const Q={[y.Layout.channel.name]:J,[y.Layout.collab.name]:W,default:K};const Y={name:"ChatOpener",components:{BaseChatContent:C.BaseChatContent,ChannelContent:w,CollabContent:F,MultidialogContent:z,EmptyState:K,ChannelEmptyState:J},props:{dialogId:{type:String,required:true}},emits:["close"],data(){return{}},computed:{layout(){return this.$store.getters["application/getLayout"]},dialog(){return this.$store.getters["chats/get"](this.dialogId,true)},isUser(){return this.dialog.type===y.ChatType.user},isChannel(){return o.ChannelManager.isChannel(this.dialogId)},isCollab(){return this.dialog.type===y.ChatType.collab},isMultidialog(){return this.$store.getters["sidebar/multidialog/isSupport"](this.dialogId)},isGuest(){return this.dialog.role===y.UserRole.guest},emptyStateComponent(){var t;return(t=Q[this.layout.name])!=null?t:Q.default}},watch:{dialogId(t,e){p.Logger.warn(`ChatContent: switching from ${e||"empty"} to ${t}`);this.onChatChange()}},created(){if(!this.dialogId){return}this.onChatChange()},methods:{async onChatChange(){if(this.dialogId===""){return}if(n.Utils.dialog.isExternalId(this.dialogId)){const t=await this.getChatService().prepareDialogId(this.dialogId);void e.LayoutManager.getInstance().setLayout({name:y.Layout.chat.name,entityId:t,contextId:this.layout.contextId});return}if(this.dialog.inited){p.Logger.warn(`ChatContent: chat ${this.dialogId} is already loaded`);if(this.isUser){const t=parseInt(this.dialog.dialogId,10);void this.getUserService().updateLastActivityDate(t)}else if(this.isChannel&&!this.isGuest){p.Logger.warn(`ChatContent: channel ${this.dialogId} is loaded, loading comments metadata`);void this.getChatService().loadCommentInfo(this.dialogId)}m.Analytics.getInstance().onOpenChat(this.dialog);return}if(this.dialog.loading){p.Logger.warn(`ChatContent: chat ${this.dialogId} is loading`);return}if(this.layout.contextId){await this.loadChatWithContext();m.Analytics.getInstance().onOpenChat(this.dialog);return}await this.loadChat();m.Analytics.getInstance().onOpenChat(this.dialog)},async loadChatWithContext(){p.Logger.warn(`ChatContent: loading chat ${this.dialogId} with context - ${this.layout.contextId}`);await this.getChatService().loadChatWithContext(this.dialogId,this.layout.contextId).catch((t=>{this.sendAnalytics(t);this.handleChatLoadError(t);p.Logger.error(t);d.Messenger.openChat()}));p.Logger.warn(`ChatContent: chat ${this.dialogId} is loaded with context of ${this.layout.contextId}`)},async loadChat(){p.Logger.warn(`ChatContent: loading chat ${this.dialogId}`);await this.getChatService().loadChatWithMessages(this.dialogId).catch((t=>{this.handleChatLoadError(t);p.Logger.error(t);d.Messenger.openChat()}));p.Logger.warn(`ChatContent: chat ${this.dialogId} is loaded`)},handleChatLoadError(t){const[e]=t;if(e.code===a.AccessErrorCode.accessDenied){this.showNotification(this.loc("IM_CONTENT_CHAT_ACCESS_ERROR_MSGVER_1"))}else if(e.code===a.AccessErrorCode.messageNotFound){this.showNotification(this.loc("IM_CONTENT_CHAT_CONTEXT_MESSAGE_NOT_FOUND"))}},sendAnalytics(t){const[e]=t;if(e.code!==a.AccessErrorCode.messageNotFound){return}m.Analytics.getInstance().messageDelete.onNotFoundNotification({dialogId:this.dialogId})},showNotification(t){BX.UI.Notification.Center.notify({content:t})},getChatService(){if(!this.chatService){this.chatService=new B.ChatService}return this.chatService},getUserService(){if(!this.userService){this.userService=new j}return this.userService},loc(t){return this.$Bitrix.Loc.getMessage(t)}},template:`\n\t\t<div class="bx-im-content-default-chat__container">\n\t\t\t<component :is="emptyStateComponent" v-if="!dialogId" />\n\t\t\t<ChannelContent v-else-if="isChannel" :dialogId="dialogId" />\n\t\t\t<CollabContent v-else-if="isCollab" :dialogId="dialogId" />\n\t\t\t<MultidialogContent v-else-if="isMultidialog" :dialogId="dialogId" />\n\t\t\t<BaseChatContent v-else :dialogId="dialogId" />\n\t\t</div>\n\t`};const Z={name:"SubscribeToggle",components:{Toggle:E.Toggle},props:{dialogId:{type:String,required:true}},data(){return{}},computed:{ToggleSize:()=>E.ToggleSize,dialog(){return this.$store.getters["chats/get"](this.dialogId,true)},postMessageId(){return this.$store.getters["messages/comments/getMessageIdByChatId"](this.dialog.chatId)},isSubscribed(){return this.$store.getters["messages/comments/isUserSubscribed"](this.postMessageId)}},methods:{onToggleClick(){if(this.isSubscribed){B.CommentsService.unsubscribe(this.postMessageId);return}B.CommentsService.subscribe(this.postMessageId)},loc(t){return this.$Bitrix.Loc.getMessage(t)}},template:`\n\t\t<div @click="onToggleClick" class="bx-im-comments-header-follow__container">\n\t\t\t<div class="bx-im-comments-header-follow__text">{{ loc('IM_CONTENT_COMMENTS_FOLLOW_TOGGLE_TEXT') }}</div>\n\t\t\t<Toggle :size="ToggleSize.M" :isEnabled="isSubscribed" />\n\t\t</div>\n\t`};const tt={name:"CommentsHeader",components:{ChatHeader:C.ChatHeader,ChatAvatar:E.ChatAvatar,SubscribeToggle:Z},props:{dialogId:{type:String,default:""},channelId:{type:String,required:true}},computed:{AvatarSize:()=>E.AvatarSize,channel(){return this.$store.getters["chats/get"](this.channelId,true)},showSubscribeToggle(){return u.PermissionManager.getInstance().canPerformActionByRole(y.ActionByRole.subscribeToComments,this.dialogId)}},methods:{onBackClick(){M.EventEmitter.emit(y.EventType.dialog.closeComments)},loc(t){return this.$Bitrix.Loc.getMessage(t)}},template:`\n\t\t<ChatHeader\n\t\t\t:dialogId="dialogId"\n\t\t\tclass="bx-im-comment-header__container"\n\t\t>\n\t\t\t<template #left>\n\t\t\t\t<div @click="onBackClick" class="bx-im-comment-header__back"></div>\n\t\t\t\t<div class="bx-im-comment-header__info">\n\t\t\t\t\t<div class="bx-im-comment-header__title">{{ loc('IM_CONTENT_COMMENTS_HEADER_TITLE') }}</div>\n\t\t\t\t\t<div class="bx-im-comment-header__subtitle">\n\t\t\t\t\t\t<div class="bx-im-comment-header__subtitle_avatar">\n\t\t\t\t\t\t\t<ChatAvatar :avatarDialogId="channelId" :contextDialogId="channelId" :size="AvatarSize.XS" />\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div class="bx-im-comment-header__subtitle_text">{{ channel.name }}</div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</template>\n\t\t\t<template v-if="showSubscribeToggle" #before-actions>\n\t\t\t\t<SubscribeToggle :dialogId="dialogId" />\n\t\t\t</template>\n\t\t</ChatHeader>\n\t`};const et={name:"CommentsDialogLoader",data(){return{}},methods:{loc(t){return this.$Bitrix.Loc.getMessage(t)}},template:`\n\t\t<div class="bx-im-comments-dialog-loader__container">\n\t\t\t<div class="bx-im-comments-dialog-loader__spinner"></div>\n\t\t</div>\n\t`};class nt extends v.MessageMenu{getMenuItems(){if(this.isPostMessage()){return[this.getCopyItem(),this.getCopyFileItem(),this.getDelimiter(),this.getDownloadFileItem(),this.getSaveToDisk(),this.getDelimiter(),this.getOpenInChannelItem()]}return[this.getReplyItem(),this.getCopyItem(),this.getCopyFileItem(),this.getDelimiter(),this.getFavoriteItem(),this.getDelimiter(),this.getCreateItem(),this.getDelimiter(),this.getDownloadFileItem(),this.getSaveToDisk(),this.getDelimiter(),this.getEditItem(),this.getDeleteItem()]}getOpenInChannelItem(){return{text:b.Loc.getMessage("IM_CONTENT_COMMENTS_MESSAGE_MENU_OPEN_IN_CHANNEL"),onclick:()=>{M.EventEmitter.emit(y.EventType.dialog.closeComments);this.menuInstance.close()}}}isPostMessage(){const{dialogId:t}=this.store.getters["chats/getByChatId"](this.context.chatId);return t!==this.context.dialogId}}const ot={name:"CommentsMessageList",components:{MessageList:v.MessageList,CommentsDialogLoader:et,AuthorGroup:v.AuthorGroup,...v.MessageComponents},props:{dialogId:{type:String,required:true}},computed:{CommentsMessageMenu:()=>nt,dialog(){return this.$store.getters["chats/get"](this.dialogId,true)},showPostMessage(){return this.dialog.inited&&!this.dialog.hasPrevPage},postMessageId(){return this.$store.getters["messages/comments/getMessageIdByChatId"](this.dialog.chatId)},postMessage(){return this.$store.getters["messages/getById"](this.postMessageId)},postAuthorGroup(){if(!this.dialog.inited){return null}const t=new v.CollectionManager(this.dialogId);return t.formatAuthorGroup(this.postMessage)}},methods:{onPostMessageMouseUp(t,e){this.$refs.messageList.onMessageMouseUp(t,e)},getMessageComponentName(t){return new _.MessageComponentManager(t).getName()}},template:`\n\t\t<MessageList\n\t\t\t:dialogId="dialogId"\n\t\t\t:messageMenuClass="CommentsMessageMenu"\n\t\t\tref="messageList"\n\t\t>\n\t\t\t<template #loader>\n\t\t\t\t<CommentsDialogLoader />\n\t\t\t</template>\n\t\t\t<template v-if="showPostMessage" #before-messages>\n\t\t\t\t<div class="bx-im-comments-message-list__channel-post">\n\t\t\t\t\t<AuthorGroup :item="postAuthorGroup" :contextDialogId="dialogId" :withAvatarMenu="false">\n\t\t\t\t\t\t<template #message>\n\t\t\t\t\t\t\t<component\n\t\t\t\t\t\t\t\t:is="getMessageComponentName(postMessage)"\n\t\t\t\t\t\t\t\t:item="postMessage"\n\t\t\t\t\t\t\t\t:dialogId="dialogId"\n\t\t\t\t\t\t\t\t:key="postMessage.id"\n\t\t\t\t\t\t\t\t@mouseup="onPostMessageMouseUp(postMessage, $event)"\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t</component>\n\t\t\t\t\t\t</template>\n\t\t\t\t\t</AuthorGroup>\n\t\t\t\t</div>\n\t\t\t</template>\n\t\t</MessageList>\n\t`};const at={name:"CommentsDialog",components:{ChatDialog:T.ChatDialog,CommentsMessageList:ot,PinnedMessages:T.PinnedMessages},props:{dialogId:{type:String,required:true}},computed:{dialog(){return this.$store.getters["chats/get"](this.dialogId,true)},dialogInited(){return this.dialog.inited},postMessageId(){return this.$store.getters["messages/comments/getMessageIdByChatId"](this.dialog.chatId)},postMessage(){return this.$store.getters["messages/getById"](this.postMessageId)}},methods:{async goToPostMessageContext(){const t=this.$refs.dialog;const e=this.dialogInited&&!this.dialog.hasPrevPage;if(e){await t.getScrollManager().animatedScrollToMessage(this.postMessageId);t.highlightMessage(this.postMessageId);return}t.showLoadingBar();await t.getMessageService().loadFirstPage().catch((t=>{p.Logger.error("goToMessageContext error",t)}));await this.$nextTick();t.hideLoadingBar();t.getScrollManager().scrollToMessage(this.postMessageId);await this.$nextTick();t.highlightMessage(this.postMessageId)},onPinnedPostMessageClick(){this.goToPostMessageContext()}},template:`\n\t\t<ChatDialog ref="dialog" :dialogId="dialogId" :saveScrollOnExit="false" :resetOnExit="true">\n\t\t\t<template v-if="dialogInited" #pinned-panel>\n\t\t\t\t<PinnedMessages\n\t\t\t\t\t:dialogId="dialogId"\n\t\t\t\t\t:messages="[postMessage]"\n\t\t\t\t\t@messageClick="onPinnedPostMessageClick"\n\t\t\t\t/>\n\t\t\t</template>\n\t\t\t<template #message-list>\n\t\t\t\t<CommentsMessageList :dialogId="dialogId" />\n\t\t\t</template>\n\t\t</ChatDialog>\n\t`};const st={name:"CommentsTextarea",components:{ChatTextarea:S.ChatTextarea},props:{dialogId:{type:String,default:""}},template:`\n\t\t<ChatTextarea\n\t\t\t:dialogId="dialogId"\n\t\t\t:withMarket="false"\n\t\t\t:withAudioInput="false"\n\t\t\tclass="bx-im-comments-send-panel__container"\n\t\t/>\n\t`};const it={components:{ChatButton:E.Button},props:{dialogId:{type:String,required:true}},computed:{ButtonSize:()=>E.ButtonSize,ButtonColor:()=>E.ButtonColor},methods:{onButtonClick(){this.getChatService().joinChat(this.dialogId)},getChatService(){if(!this.chatService){this.chatService=new B.ChatService}return this.chatService},loc(t){return this.$Bitrix.Loc.getMessage(t)}},template:`\n\t\t<div class="bx-im-content-chat__textarea_placeholder">\n\t\t\t<ChatButton\n\t\t\t\t:size="ButtonSize.XL"\n\t\t\t\t:color="ButtonColor.Primary"\n\t\t\t\t:text="loc('IM_CONTENT_BLOCKED_TEXTAREA_JOIN_CHANNEL_V2')"\n\t\t\t\t:isRounded="true"\n\t\t\t\t@click="onButtonClick"\n\t\t\t/>\n\t\t</div>\n\t`};const rt={name:"CommentsContent",components:{BaseChatContent:C.BaseChatContent,CommentsHeader:tt,CommentsDialog:at,CommentsTextarea:st,JoinPanel:it},props:{dialogId:{type:String,required:true},channelId:{type:String,required:true}},template:`\n\t\t<BaseChatContent :dialogId="dialogId">\n\t\t\t<template #header>\n\t\t\t\t<CommentsHeader :dialogId="dialogId" :channelId="channelId" :key="dialogId" />\n\t\t\t</template>\n\t\t\t<template #dialog>\n\t\t\t\t<CommentsDialog :dialogId="dialogId" :key="dialogId" />\n\t\t\t</template>\n\t\t\t<template #join-panel>\n\t\t\t\t<JoinPanel :dialogId="dialogId" />\n\t\t\t</template>\n\t\t\t<template #textarea="{ onTextareaMount }">\n\t\t\t\t<CommentsTextarea :dialogId="dialogId" :key="dialogId" @mounted="onTextareaMount" />\n\t\t\t</template>\n\t\t</BaseChatContent>\n\t`};const lt={name:"CommentsOpener",components:{CommentsContent:rt},props:{postId:{type:Number,required:true},channelId:{type:String,required:true}},emits:["close"],data(){return{}},computed:{dialog(){return this.$store.getters["chats/getByChatId"](this.commentsChatId)},commentInfo(){return this.$store.getters["messages/comments/getByMessageId"](this.postId)},commentsChatId(){return this.commentInfo.chatId},commentsDialogId(){if(!this.dialog){return""}return this.dialog.dialogId}},created(){this.onCreated()},methods:{async onCreated(){await this.loadChat();m.Analytics.getInstance().onOpenChat(this.dialog)},async loadChat(){p.Logger.warn(`CommentsContent: loading comments for post ${this.postId}`);await this.getChatService().loadComments(this.postId).catch((t=>{this.handleChatLoadError(t);p.Logger.error(t);this.$emit("close")}));p.Logger.warn(`CommentsContent: comments for post ${this.postId} are loaded`)},handleChatLoadError(t){const[e]=t;if(e.code==="ACCESS_DENIED"){this.showNotification(this.loc("IM_CONTENT_CHAT_ACCESS_ERROR_MSGVER_1"))}},showNotification(t){BX.UI.Notification.Center.notify({content:t})},getChatService(){if(!this.chatService){this.chatService=new B.ChatService}return this.chatService}},template:`\n\t\t<div class="bx-im-content-comments__container">\n\t\t\t<CommentsContent :dialogId="commentsDialogId" :channelId="channelId" />\n\t\t</div>\n\t`};const dt={name:"ChatContent",components:{ChatOpener:Y,CommentsOpener:lt},props:{entityId:{type:String,default:""}},data(){return{commentsPostId:0,commentsAnimationFlag:false}},computed:{layout(){return this.$store.getters["application/getLayout"]},showComments(){return this.$store.getters["messages/comments/areOpened"]}},watch:{layout(){this.closeComments()}},created(){M.EventEmitter.subscribe(y.EventType.dialog.openComments,this.onOpenComments);M.EventEmitter.subscribe(y.EventType.dialog.closeComments,this.onCloseComments)},beforeUnmount(){M.EventEmitter.unsubscribe(y.EventType.dialog.openComments,this.onOpenComments);M.EventEmitter.unsubscribe(y.EventType.dialog.closeComments,this.onCloseComments)},methods:{onOpenComments(t){const{messageId:e}=t.getData();this.commentsPostId=e;this.commentsAnimationFlag=true;this.$store.dispatch("messages/comments/setOpened",{channelDialogId:this.entityId,commentsPostId:this.commentsPostId})},onCloseComments(){this.closeComments()},closeComments(){this.commentsPostId=0;this.$store.dispatch("messages/comments/setClosed")},onCommentsAnimationEnd(){this.commentsAnimationFlag=false}},template:`\n\t\t<ChatOpener :dialogId="entityId" :class="{'--comments-show-animation': commentsAnimationFlag}" />\n\t\t<Transition name="comments-content" @after-enter="onCommentsAnimationEnd">\n\t\t\t<CommentsOpener\n\t\t\t\tv-if="showComments"\n\t\t\t\t:postId="commentsPostId"\n\t\t\t\t:channelId="entityId"\n\t\t\t/>\n\t\t</Transition>\n\t`};t.ChatContent=dt})(this.BX.Messenger.v2.Component.Content=this.BX.Messenger.v2.Component.Content||{},BX.Messenger.v2.Lib,BX.Messenger.v2.Lib,BX.Messenger.v2.Lib,BX.Messenger.v2.Lib,BX.Messenger.v2.Component.Animation,BX.Messenger.v2.Component.EntitySelector,BX.Messenger.v2.Lib,BX.Messenger.v2.Application,BX.Messenger.v2.Lib,BX.Messenger.v2.Component.Content,BX.Messenger.v2.Lib,BX,BX.Messenger.v2.Lib,BX.Messenger.v2.Lib,BX.Messenger.v2.Component.Content,BX.Messenger.v2.Lib,BX.Messenger.v2.Model,BX.Messenger.v2.Component.Dialog,BX.Messenger.v2.Lib,BX,BX.Event,BX.Messenger.v2.Component,BX.Messenger.v2.Const,BX.Messenger.v2.Component,BX.Messenger.v2.Component.Elements,BX.Messenger.v2.Service);
//# sourceMappingURL=chat-content.bundle.map.js