{"version":3,"file":"parser.bundle.js","sources":["../../shared/src/get-by-index.js","../src/parser-scheme.js","../src/parser.js"],"sourcesContent":["import { Type } from 'main.core';\n\nexport function getByIndex<T>(array: Array<T>, index: number): ?T\n{\n\tif (!Type.isArray(array))\n\t{\n\t\tthrow new TypeError('array is not a array');\n\t}\n\n\tif (!Type.isInteger(index))\n\t{\n\t\tthrow new TypeError('index is not a integer');\n\t}\n\n\tconst preparedIndex = index < 0 ? array.length + index : index;\n\n\treturn array[preparedIndex];\n};\n","import { BBCodeScheme, BBCodeTagScheme, BBCodeNode } from 'ui.bbcode.model';\nimport type { BBCodeContentNode } from 'ui.bbcode.model';\n\nexport class ParserScheme extends BBCodeScheme\n{\n\tgetTagScheme(tagName: string): BBCodeTagScheme\n\t{\n\t\tif (tagName === 'code')\n\t\t{\n\t\t\treturn new BBCodeTagScheme({\n\t\t\t\tname: 'code',\n\t\t\t\tconvertChild: (child: BBCodeContentNode, scheme: BBCodeScheme): BBCodeContentNode => {\n\t\t\t\t\tif (['#linebreak', '#tab', '#text'].includes(child.getName()))\n\t\t\t\t\t{\n\t\t\t\t\t\treturn child;\n\t\t\t\t\t}\n\n\t\t\t\t\treturn scheme.createText(child.toString());\n\t\t\t\t},\n\t\t\t});\n\t\t}\n\n\t\treturn new BBCodeTagScheme({\n\t\t\tname: 'any',\n\t\t});\n\t}\n\n\tisAllowedTag(tagName: string): boolean\n\t{\n\t\treturn true;\n\t}\n\n\tisChildAllowed(parent: string | BBCodeNode, child: string | BBCodeNode): boolean\n\t{\n\t\treturn true;\n\t}\n}\n","import { Type } from 'main.core';\nimport { getByIndex } from '../../shared';\nimport {\n\tBBCodeScheme,\n\tDefaultBBCodeScheme,\n\tBBCodeNode,\n\ttypeof BBCodeRootNode,\n\ttypeof BBCodeElementNode,\n\ttypeof BBCodeTextNode,\n\ttypeof BBCodeTagScheme,\n\ttype BBCodeContentNode,\n\ttype BBCodeSpecialCharNode,\n} from 'ui.bbcode.model';\nimport { ParserScheme } from './parser-scheme';\n\nconst TAG_REGEX: RegExp = /\\[(\\/)?(\\w+|\\*)(.*?)]/gs;\nconst isSpecialChar = (symbol: string): boolean => {\n\treturn ['\\n', '\\t'].includes(symbol);\n};\n\nconst isList = (tagName: string): boolean => {\n\treturn ['list', 'ul', 'ol'].includes(String(tagName).toLowerCase());\n};\n\nconst isListItem = (tagName: string): boolean => {\n\treturn ['*', 'li'].includes(String(tagName).toLowerCase());\n};\n\nconst parserScheme = new ParserScheme();\n\ntype BBCodeParserOptions = {\n\tscheme?: BBCodeScheme,\n\tonUnknown?: (node: BBCodeContentNode, scheme: BBCodeScheme) => void,\n};\n\nclass BBCodeParser\n{\n\tscheme: BBCodeScheme;\n\tonUnknownHandler: () => any;\n\n\tconstructor(options: BBCodeParserOptions = {})\n\t{\n\t\tif (options.scheme)\n\t\t{\n\t\t\tthis.setScheme(options.scheme);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.setScheme(new DefaultBBCodeScheme());\n\t\t}\n\n\t\tif (Type.isFunction(options.onUnknown))\n\t\t{\n\t\t\tthis.setOnUnknown(options.onUnknown);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.setOnUnknown(BBCodeParser.defaultOnUnknownHandler);\n\t\t}\n\t}\n\n\tsetScheme(scheme: BBCodeScheme)\n\t{\n\t\tthis.scheme = scheme;\n\t}\n\n\tgetScheme(): BBCodeScheme\n\t{\n\t\treturn this.scheme;\n\t}\n\n\tsetOnUnknown(handler: () => any)\n\t{\n\t\tif (!Type.isFunction(handler))\n\t\t{\n\t\t\tthrow new TypeError('handler is not a function');\n\t\t}\n\n\t\tthis.onUnknownHandler = handler;\n\t}\n\n\tgetOnUnknownHandler(): () => any\n\t{\n\t\treturn this.onUnknownHandler;\n\t}\n\n\tstatic defaultOnUnknownHandler(node: BBCodeContentNode, scheme: BBCodeScheme): ?Array<BBCodeContentNode>\n\t{\n\t\tif (node.getType() === BBCodeNode.ELEMENT_NODE)\n\t\t{\n\t\t\tconst nodeName: string = node.getName();\n\t\t\tif (['left', 'center', 'right', 'justify'].includes(nodeName))\n\t\t\t{\n\t\t\t\tnode.replace(\n\t\t\t\t\tscheme.createElement({\n\t\t\t\t\t\tname: 'p',\n\t\t\t\t\t\tchildren: node.getChildren(),\n\t\t\t\t\t}),\n\t\t\t\t);\n\t\t\t}\n\t\t\telse if (['background', 'color', 'size'].includes(nodeName))\n\t\t\t{\n\t\t\t\tnode.replace(\n\t\t\t\t\tscheme.createElement({\n\t\t\t\t\t\tname: 'b',\n\t\t\t\t\t\tchildren: node.getChildren(),\n\t\t\t\t\t}),\n\t\t\t\t);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tconst openingTag: string = node.getOpeningTag();\n\t\t\t\tconst closingTag: string = node.getClosingTag();\n\n\t\t\t\tnode.replace(\n\t\t\t\t\tscheme.createText(openingTag),\n\t\t\t\t\t...node.getChildren(),\n\t\t\t\t\tscheme.createText(closingTag),\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t}\n\n\tstatic toLowerCase(value: string): string\n\t{\n\t\tif (Type.isStringFilled(value))\n\t\t{\n\t\t\treturn value.toLowerCase();\n\t\t}\n\n\t\treturn value;\n\t}\n\n\tparseText(text: string): Array<BBCodeTextNode | BBCodeSpecialCharNode>\n\t{\n\t\tif (Type.isStringFilled(text))\n\t\t{\n\t\t\treturn [...text]\n\t\t\t\t.reduce((acc: Array<BBCodeTextNode | BBCodeSpecialCharNode>, symbol: string) => {\n\t\t\t\t\tif (isSpecialChar(symbol))\n\t\t\t\t\t{\n\t\t\t\t\t\tacc.push(symbol);\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tconst lastItem: string = getByIndex(acc, -1);\n\t\t\t\t\t\tif (isSpecialChar(lastItem) || Type.isNil(lastItem))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tacc.push(symbol);\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tacc[acc.length - 1] += symbol;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\treturn acc;\n\t\t\t\t}, [])\n\t\t\t\t.map((fragment: string) => {\n\t\t\t\t\tif (fragment === '\\n')\n\t\t\t\t\t{\n\t\t\t\t\t\treturn parserScheme.createNewLine();\n\t\t\t\t\t}\n\n\t\t\t\t\tif (fragment === '\\t')\n\t\t\t\t\t{\n\t\t\t\t\t\treturn parserScheme.createTab();\n\t\t\t\t\t}\n\n\t\t\t\t\treturn parserScheme.createText({ content: fragment });\n\t\t\t\t});\n\t\t}\n\n\t\treturn [];\n\t}\n\n\tstatic findNextTagIndex(bbcode: string, startIndex = 0): number\n\t{\n\t\tconst nextContent: string = bbcode.slice(startIndex);\n\t\tconst [nextTag: ?string] = nextContent.match(new RegExp(TAG_REGEX)) || [];\n\t\tif (nextTag)\n\t\t{\n\t\t\treturn bbcode.indexOf(nextTag, startIndex);\n\t\t}\n\n\t\treturn -1;\n\t}\n\n\tstatic trimQuotes(value: string): string\n\t{\n\t\tconst source = String(value);\n\t\tif ((/^[\"'].*[\"']$/g).test(source))\n\t\t{\n\t\t\treturn source.slice(1, -1);\n\t\t}\n\n\t\treturn value;\n\t}\n\n\tparseAttributes(sourceAttributes: string): { value: ?string, attributes: Array<[string, string]> }\n\t{\n\t\tconst result: {value: string, attributes: Array<Array<string, string>>} = { value: '', attributes: [] };\n\n\t\tif (Type.isStringFilled(sourceAttributes))\n\t\t{\n\t\t\tif (sourceAttributes.startsWith('='))\n\t\t\t{\n\t\t\t\tresult.value = BBCodeParser.trimQuotes(\n\t\t\t\t\tsourceAttributes.slice(1),\n\t\t\t\t);\n\n\t\t\t\treturn result;\n\t\t\t}\n\n\t\t\treturn sourceAttributes\n\t\t\t\t.trim()\n\t\t\t\t.split(' ')\n\t\t\t\t.filter(Boolean)\n\t\t\t\t.reduce((acc: typeof result, item: string) => {\n\t\t\t\t\tconst [key: string, value: string = ''] = item.split('=');\n\t\t\t\t\tacc.attributes.push([\n\t\t\t\t\t\tBBCodeParser.toLowerCase(key),\n\t\t\t\t\t\tBBCodeParser.trimQuotes(value),\n\t\t\t\t\t]);\n\n\t\t\t\t\treturn acc;\n\t\t\t\t}, result);\n\t\t}\n\n\t\treturn result;\n\t}\n\n\tparse(bbcode: string): BBCodeRootNode\n\t{\n\t\tconst result: BBCodeRootNode = parserScheme.createRoot();\n\n\t\tconst firstTagIndex: number = BBCodeParser.findNextTagIndex(bbcode);\n\t\tif (firstTagIndex !== 0)\n\t\t{\n\t\t\tconst textBeforeFirstTag: string = firstTagIndex === -1 ? bbcode : bbcode.slice(0, firstTagIndex);\n\t\t\tresult.appendChild(\n\t\t\t\t...this.parseText(textBeforeFirstTag),\n\t\t\t);\n\t\t}\n\n\t\tconst stack: Array<BBCodeElementNode> = [result];\n\t\tconst wasOpened: Array<string> = [];\n\t\tlet current: ?BBCodeElementNode = null;\n\t\tlet level: number = 0;\n\n\t\tbbcode.replace(TAG_REGEX, (fullTag: string, slash: ?string, tagName: string, attrs: ?string, index: number) => {\n\t\t\tconst isOpeningTag: boolean = Boolean(slash) === false;\n\t\t\tconst startIndex: number = fullTag.length + index;\n\t\t\tconst nextContent: string = bbcode.slice(startIndex);\n\t\t\tconst attributes = this.parseAttributes(attrs);\n\t\t\tconst lowerCaseTagName: string = BBCodeParser.toLowerCase(tagName);\n\t\t\tlet parent: ?(BBCodeRootNode | BBCodeElementNode) = stack[level];\n\n\t\t\tif (isOpeningTag)\n\t\t\t{\n\t\t\t\tconst isPotentiallyVoid: boolean = !nextContent.includes(`[/${tagName}]`);\n\t\t\t\tif (\n\t\t\t\t\tisPotentiallyVoid\n\t\t\t\t\t&& !isListItem(lowerCaseTagName)\n\t\t\t\t)\n\t\t\t\t{\n\t\t\t\t\tconst tagScheme: BBCodeTagScheme = this.getScheme().getTagScheme(lowerCaseTagName);\n\t\t\t\t\tconst isAllowedVoidTag: boolean = tagScheme && tagScheme.isVoid();\n\t\t\t\t\tif (isAllowedVoidTag)\n\t\t\t\t\t{\n\t\t\t\t\t\tcurrent = parserScheme.createElement({\n\t\t\t\t\t\t\tname: lowerCaseTagName,\n\t\t\t\t\t\t\tvalue: attributes.value,\n\t\t\t\t\t\t\tattributes: Object.fromEntries(attributes.attributes),\n\t\t\t\t\t\t});\n\n\t\t\t\t\t\tcurrent.setScheme(this.getScheme());\n\t\t\t\t\t\tparent.appendChild(current);\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tparent.appendChild(\n\t\t\t\t\t\t\tparserScheme.createText(fullTag),\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\n\t\t\t\t\tconst nextTagIndex: number = BBCodeParser.findNextTagIndex(bbcode, startIndex);\n\t\t\t\t\tif (nextTagIndex !== 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tconst content: string = nextTagIndex === -1 ? nextContent : bbcode.slice(startIndex, nextTagIndex);\n\t\t\t\t\t\tparent.appendChild(\n\t\t\t\t\t\t\t...this.parseText(content),\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tif (isListItem(lowerCaseTagName) && current && isListItem(current.getName()))\n\t\t\t\t\t{\n\t\t\t\t\t\tlevel--;\n\t\t\t\t\t\tparent = stack[level];\n\t\t\t\t\t}\n\n\t\t\t\t\tcurrent = parserScheme.createElement({\n\t\t\t\t\t\tname: lowerCaseTagName,\n\t\t\t\t\t\tvalue: attributes.value,\n\t\t\t\t\t\tattributes: Object.fromEntries(attributes.attributes),\n\t\t\t\t\t});\n\n\t\t\t\t\tconst nextTagIndex: number = BBCodeParser.findNextTagIndex(bbcode, startIndex);\n\t\t\t\t\tif (nextTagIndex !== 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tconst content: string = nextTagIndex === -1 ? nextContent : bbcode.slice(startIndex, nextTagIndex);\n\t\t\t\t\t\tcurrent.appendChild(\n\t\t\t\t\t\t\t...this.parseText(content),\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\n\t\t\t\t\tparent.appendChild(current);\n\n\t\t\t\t\tlevel++;\n\t\t\t\t\tstack[level] = current;\n\t\t\t\t\twasOpened.push(lowerCaseTagName);\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (wasOpened.includes(lowerCaseTagName))\n\t\t\t\t{\n\t\t\t\t\tlevel--;\n\t\t\t\t\tconst openedTagIndex: number = wasOpened.indexOf(lowerCaseTagName);\n\t\t\t\t\twasOpened.splice(openedTagIndex, 1);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tstack[level].appendChild(\n\t\t\t\t\t\tparserScheme.createText(fullTag),\n\t\t\t\t\t);\n\t\t\t\t}\n\n\t\t\t\tif (isList(lowerCaseTagName) && level > 0)\n\t\t\t\t{\n\t\t\t\t\tlevel--;\n\t\t\t\t}\n\n\t\t\t\tconst nextTagIndex: number = BBCodeParser.findNextTagIndex(bbcode, startIndex);\n\t\t\t\tif (nextTagIndex !== 0 && stack[level])\n\t\t\t\t{\n\t\t\t\t\tconst content: string = nextTagIndex === -1 ? nextContent : bbcode.slice(startIndex, nextTagIndex);\n\t\t\t\t\tstack[level].appendChild(\n\t\t\t\t\t\t...this.parseText(content),\n\t\t\t\t\t);\n\t\t\t\t}\n\n\t\t\t\tif (isListItem(stack[level].getName()) && level > 0)\n\t\t\t\t{\n\t\t\t\t\tlevel--;\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\tconst getFinalLineBreaksIndexes = (node: BBCodeContentNode) => {\n\t\t\tlet skip = false;\n\n\t\t\treturn node\n\t\t\t\t.getChildren()\n\t\t\t\t.reduceRight((acc: Array<BBCodeContentNode>, child: BBCodeContentNode, index: number) => {\n\t\t\t\t\tif (!skip && child.getName() === '#linebreak')\n\t\t\t\t\t{\n\t\t\t\t\t\tacc.push(index);\n\t\t\t\t\t}\n\t\t\t\t\telse if (!skip && child.getName() !== '#tab')\n\t\t\t\t\t{\n\t\t\t\t\t\tskip = true;\n\t\t\t\t\t}\n\n\t\t\t\t\treturn acc;\n\t\t\t\t}, []);\n\t\t};\n\n\t\tBBCodeNode.flattenAst(result).forEach((node: BBCodeContentNode) => {\n\t\t\tif (node.getName() === '*')\n\t\t\t{\n\t\t\t\tconst finalLinebreaksIndexes: Array<number> = getFinalLineBreaksIndexes(node);\n\t\t\t\tif (finalLinebreaksIndexes.length === 1)\n\t\t\t\t{\n\t\t\t\t\tnode.setChildren(\n\t\t\t\t\t\tnode.getChildren().slice(0, getByIndex(finalLinebreaksIndexes, 0)),\n\t\t\t\t\t);\n\t\t\t\t}\n\n\t\t\t\tif (finalLinebreaksIndexes.length > 1 && (finalLinebreaksIndexes & 2) === 0)\n\t\t\t\t{\n\t\t\t\t\tnode.setChildren(\n\t\t\t\t\t\tnode.getChildren().slice(0, getByIndex(finalLinebreaksIndexes, 0)),\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\tresult.setScheme(\n\t\t\tthis.getScheme(),\n\t\t\tthis.getOnUnknownHandler(),\n\t\t);\n\n\t\treturn result;\n\t}\n}\n\nexport {\n\tBBCodeParser,\n};\n"],"names":["getByIndex","array","index","Type","isArray","TypeError","isInteger","preparedIndex","length","ParserScheme","BBCodeScheme","getTagScheme","tagName","BBCodeTagScheme","name","convertChild","child","scheme","includes","getName","createText","toString","isAllowedTag","isChildAllowed","parent","TAG_REGEX","isSpecialChar","symbol","isList","String","toLowerCase","isListItem","parserScheme","BBCodeParser","constructor","options","setScheme","DefaultBBCodeScheme","isFunction","onUnknown","setOnUnknown","defaultOnUnknownHandler","getScheme","handler","onUnknownHandler","getOnUnknownHandler","node","getType","BBCodeNode","ELEMENT_NODE","nodeName","replace","createElement","children","getChildren","openingTag","getOpeningTag","closingTag","getClosingTag","value","isStringFilled","parseText","text","reduce","acc","push","lastItem","isNil","map","fragment","createNewLine","createTab","content","findNextTagIndex","bbcode","startIndex","nextContent","slice","nextTag","match","RegExp","indexOf","trimQuotes","source","test","parseAttributes","sourceAttributes","result","attributes","startsWith","trim","split","filter","Boolean","item","key","parse","createRoot","firstTagIndex","textBeforeFirstTag","appendChild","stack","wasOpened","current","level","fullTag","slash","attrs","isOpeningTag","lowerCaseTagName","isPotentiallyVoid","tagScheme","isAllowedVoidTag","isVoid","Object","fromEntries","nextTagIndex","openedTagIndex","splice","getFinalLineBreaksIndexes","skip","reduceRight","flattenAst","forEach","finalLinebreaksIndexes","setChildren"],"mappings":"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"}