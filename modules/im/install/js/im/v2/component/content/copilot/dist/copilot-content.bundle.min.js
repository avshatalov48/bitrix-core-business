this.BX=this.BX||{};this.BX.Messenger=this.BX.Messenger||{};this.BX.Messenger.v2=this.BX.Messenger.v2||{};this.BX.Messenger.v2.Component=this.BX.Messenger.v2.Component||{};(function(t,e,i,n,o,s,a,r,d,l,c,h,u,g,p,C,v,b,m,_){"use strict";const M={name:"ChatHeader",components:{EditableChatTitle:m.EditableChatTitle,AddToChat:a.AddToChat},props:{dialogId:{type:String,default:""},currentSidebarPanel:{type:String,default:""}},data(){return{showAddToChatPopup:false}},computed:{dialog(){return this.$store.getters["chats/get"](this.dialogId,true)},chatId(){return this.dialog.chatId},userCounter(){return g.Loc.getMessagePlural("IM_CONTENT_COPILOT_HEADER_USER_COUNT",this.dialog.userCounter,{"#COUNT#":this.dialog.userCounter})},isInited(){return this.dialog.inited},isGroupCopilotChat(){return this.dialog.userCounter>2},isAddToChatAvailable(){const t=g.Extension.getSettings("im.v2.component.content.copilot");return t.isAddToChatAvailable==="Y"}},methods:{onNewTitleSubmit(t){this.getChatService().renameChat(this.dialogId,t).catch((()=>{BX.UI.Notification.Center.notify({content:this.loc("IM_CONTENT_COPILOT_HEADER_RENAME_ERROR")})}))},getChatService(){if(!this.chatService){this.chatService=new l.ChatService}return this.chatService},loc(t,e={}){return this.$Bitrix.Loc.getMessage(t,e)},openAddToChatPopup(){this.showAddToChatPopup=true},onMembersClick(){if(!this.isInited){return}if(this.currentSidebarPanel===d.SidebarDetailBlock.members){p.EventEmitter.emit(d.EventType.sidebar.close,{panel:d.SidebarDetailBlock.members});return}p.EventEmitter.emit(d.EventType.sidebar.open,{panel:d.SidebarDetailBlock.members,dialogId:this.dialogId})}},template:`\n\t\t<div class="bx-im-copilot-header__container">\n\t\t\t<div class="bx-im-copilot-header__left">\n\t\t\t\t<div class="bx-im-copilot-header__avatar">\n\t\t\t\t\t<div class="bx-im-copilot-header__avatar_default"></div>\n\t\t\t\t</div>\n\t\t\t\t<div class="bx-im-copilot-header__info">\n\t\t\t\t\t<EditableChatTitle :dialogId="dialogId" @newTitleSubmit="onNewTitleSubmit" />\n\t\t\t\t\t<div \n\t\t\t\t\t\tv-if="isGroupCopilotChat"\n\t\t\t\t\t\t:title="loc('IM_CONTENT_COPILOT_HEADER_OPEN_MEMBERS_TITLE')"\n\t\t\t\t\t\t@click="onMembersClick"\n\t\t\t\t\t\tclass="bx-im-copilot-header__subtitle --click"\n\t\t\t\t\t>\n\t\t\t\t\t\t{{ userCounter }}\n\t\t\t\t\t</div>\n\t\t\t\t\t<div v-else class="bx-im-copilot-header__subtitle">\n\t\t\t\t\t\t{{ loc('IM_CONTENT_COPILOT_HEADER_SUBTITLE') }}\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<div class="bx-im-copilot-header__right">\n\t\t\t\t<div\n\t\t\t\t\tv-if="isAddToChatAvailable"\n\t\t\t\t\t:title="loc('IM_CONTENT_COPILOT_HEADER_OPEN_INVITE_POPUP_TITLE')"\n\t\t\t\t\t:class="{'--active': showAddToChatPopup}"\n\t\t\t\t\tclass="bx-im-copilot-header__icon --add-users"\n\t\t\t\t\t@click="openAddToChatPopup"\n\t\t\t\t\tref="add-users"\n\t\t\t\t></div>\n\t\t\t</div>\n\t\t\t<AddToChat\n\t\t\t\t:bindElement="$refs['add-users'] || {}"\n\t\t\t\t:dialogId="dialogId"\n\t\t\t\t:showPopup="showAddToChatPopup"\n\t\t\t\t:popupConfig="{offsetTop: 15, offsetLeft: -300}"\n\t\t\t\t@close="showAddToChatPopup = false"\n\t\t\t/>\n\t\t</div>\n\t`};const E="#fff";const x="#eee";const T="rgba(82, 92, 105, 0.9)";const S={name:"EmptyState",components:{ChatButton:m.Button},data(){return{isLoading:false}},computed:{ButtonSize:()=>m.ButtonSize,preparedText(){return this.loc("IM_CONTENT_COPILOT_EMPTY_STATE_MESSAGE",{"#BR#":"\n"})},buttonColorScheme(){return{borderColor:d.Color.transparent,backgroundColor:E,iconColor:T,textColor:T,hoverColor:x}}},methods:{async onButtonClick(){this.isLoading=true;const t=await this.getCopilotService().createChat().catch((()=>{this.isLoading=false;this.showCreateChatError()}));this.isLoading=false;void r.Messenger.openCopilot(t)},showCreateChatError(){BX.UI.Notification.Center.notify({content:this.loc("IM_CONTENT_COPILOT_EMPTY_STATE_ERROR_CREATING_CHAT")})},getCopilotService(){if(!this.copilotService){this.copilotService=new l.CopilotService}return this.copilotService},loc(t,e={}){return this.$Bitrix.Loc.getMessage(t,e)}},template:`\n\t\t<div class="bx-im-content-copilot-empty-state__container">\n\t\t\t<div class="bx-im-content-copilot-empty-state__content">\n\t\t\t\t<div class="bx-im-content-copilot-empty-state__icon"></div>\n\t\t\t\t<div class="bx-im-content-copilot-empty-state__text">{{ preparedText }}</div>\n\t\t\t\t<div class="bx-im-content-copilot-empty-state__button">\n\t\t\t\t\t<ChatButton\n\t\t\t\t\t\tclass="--black-loader"\n\t\t\t\t\t\t:size="ButtonSize.XL"\n\t\t\t\t\t\t:customColorScheme="buttonColorScheme"\n\t\t\t\t\t\t:text="loc('IM_CONTENT_COPILOT_EMPTY_STATE_ASK_QUESTION')"\n\t\t\t\t\t\t:isRounded="true"\n\t\t\t\t\t\t:isLoading="isLoading"\n\t\t\t\t\t\t@click="onButtonClick"\n\t\t\t\t\t/>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t`};const I={audioend:"audioend",audiostart:"audiostart",end:"end",error:"error",nomatch:"nomatch",result:"result",soundend:"soundend",soundstart:"soundstart",speechend:"speechend",speechstart:"speechstart",start:"start"};const f="BX.Messenger.v2.CopilotAudioManager";var A=babelHelpers.classPrivateFieldLooseKey("bindEvents");var y=babelHelpers.classPrivateFieldLooseKey("getRecognizedText");var B=babelHelpers.classPrivateFieldLooseKey("getNewText");var R=babelHelpers.classPrivateFieldLooseKey("initSettings");class L extends p.EventEmitter{static isAvailable(){if(C.DesktopApi.isDesktop()){return C.DesktopApi.getApiVersion()>74}return Boolean(window.SpeechRecognition||window.webkitSpeechRecognition)}constructor(){super();Object.defineProperty(this,R,{value:N});Object.defineProperty(this,B,{value:O});Object.defineProperty(this,y,{value:w});Object.defineProperty(this,A,{value:P});this.recognizer=null;this.setEventNamespace(f);this.recognizer=new(window.SpeechRecognition||window.webkitSpeechRecognition);babelHelpers.classPrivateFieldLooseBase(this,R)[R]();babelHelpers.classPrivateFieldLooseBase(this,A)[A]()}startRecognition(){this.recognizer.start()}stopRecognition(){this.recognizer.stop()}}function P(){g.Event.bind(this.recognizer,I.start,(()=>{this.lastRecognizedText="";this.emit(L.events.recognitionStart)}));g.Event.bind(this.recognizer,I.error,(t=>{this.emit(L.events.recognitionError,t.error);console.error("Copilot: AudioManager: error",t.error)}));g.Event.bind(this.recognizer,I.end,(()=>{this.lastRecognizedText="";this.emit(L.events.recognitionEnd)}));g.Event.bind(this.recognizer,I.result,(t=>{const e=babelHelpers.classPrivateFieldLooseBase(this,y)[y](t);const i=babelHelpers.classPrivateFieldLooseBase(this,B)[B](e);if(i!==""){this.emit(L.events.recognitionResult,i)}this.lastRecognizedText=e}))}function w(t){let e="";Object.values(t.results).forEach((t=>{if(t.isFinal){return}const[i]=t;const{transcript:n}=i;e+=n}));return e}function O(t){let e="";const i=this.lastRecognizedText.length;if(t.length>i){e=t.slice(i)}return e}function N(){this.recognizer.continuous=true;this.recognizer.interimResults=true}L.events={recognitionStart:"recognitionStart",recognitionError:"recognitionError",recognitionEnd:"recognitionEnd",recognitionResult:"recognitionResult"};const X={name:"AudioInput",props:{audioMode:{type:Boolean,required:true}},emits:["start","stop","inputStart","inputResult","error"],data(){return{}},watch:{audioMode(t,e){if(e===false&&t===true){this.startAudio()}if(e===true&&t===false){this.stopAudio()}}},methods:{onClick(){if(this.audioMode){this.$emit("stop");return}this.$emit("start")},startAudio(){this.getAudioManager().startRecognition();this.bindAudioEvents()},stopAudio(){this.getAudioManager().stopRecognition();this.unbindAudioEvents()},bindAudioEvents(){this.getAudioManager().subscribe(L.events.recognitionResult,(t=>{const e=t.getData();this.$emit("inputResult",e)}));this.getAudioManager().subscribe(L.events.recognitionStart,(()=>{this.$emit("inputStart")}));this.getAudioManager().subscribe(L.events.recognitionError,(()=>{this.$emit("error");BX.UI.Notification.Center.notify({content:this.loc("IM_CONTENT_COPILOT_TEXTAREA_AUDIO_INPUT_ERROR")})}))},unbindAudioEvents(){this.getAudioManager().unsubscribeAll(L.events.recognitionResult);this.getAudioManager().unsubscribeAll(L.events.recognitionStart);this.getAudioManager().unsubscribeAll(L.events.recognitionEnd);this.getAudioManager().unsubscribeAll(L.events.recognitionError)},isAudioModeAvailable(){return L.isAvailable()},getAudioManager(){if(!this.audioManager){this.audioManager=new L}return this.audioManager},loc(t){return this.$Bitrix.Loc.getMessage(t)}},template:`\n\t\t<div\n\t\t\tv-if="isAudioModeAvailable()"\n\t\t\t@click="onClick"\n\t\t\tclass="bx-im-copilot-audio-input__container"\n\t\t\t:class="{'--active': audioMode}"\n\t\t></div>\n\t`};const k=_.BitrixVue.cloneComponent(u.ChatTextarea,{name:"CopilotTextarea",components:{AudioInput:X},data(){return{...this.parentData(),audioMode:false,audioUsed:false}},computed:{isEmptyText(){return this.text===""},showMentionForCopilotChat(){return this.showMention&&this.dialog.userCounter>2}},methods:{onAudioInputStart(){if(this.isEmptyText){return}this.text+=" "},onAudioInputResult(t){if(!this.audioMode){return}this.text+=t;this.audioUsed=true},onAudioError(){this.audioMode=false},openEditPanel(){},getDraftManager(){if(!this.draftManager){this.draftManager=h.CopilotDraftManager.getInstance()}return this.draftManager},sendMessage(){this.parentSendMessage();if(this.audioUsed){c.Analytics.getInstance().useAudioInput();this.audioUsed=false}this.audioMode=false}},template:`\n\t\t<div class="bx-im-send-panel__scope bx-im-send-panel__container bx-im-copilot-send-panel__container">\n\t\t\t<div class="bx-im-textarea__container">\n\t\t\t\t<div @mousedown="onResizeStart" class="bx-im-textarea__drag-handle"></div>\n\t\t\t\t<div class="bx-im-textarea__content" ref="textarea-content">\n\t\t\t\t\t<div class="bx-im-textarea__left">\n\t\t\t\t\t\t<textarea\n\t\t\t\t\t\t\tv-model="text"\n\t\t\t\t\t\t\t:style="textareaStyle"\n\t\t\t\t\t\t\t:placeholder="loc('IM_CONTENT_COPILOT_TEXTAREA_PLACEHOLDER')"\n\t\t\t\t\t\t\t:maxlength="textareaMaxLength"\n\t\t\t\t\t\t\t@keydown="onKeyDown"\n\t\t\t\t\t\t\t@paste="onPaste"\n\t\t\t\t\t\t\tclass="bx-im-textarea__element"\n\t\t\t\t\t\t\tref="textarea"\n\t\t\t\t\t\t\trows="1"\n\t\t\t\t\t\t></textarea>\n\t\t\t\t\t\t<AudioInput\n\t\t\t\t\t\t\t:audioMode="audioMode"\n\t\t\t\t\t\t\t@start="audioMode = true"\n\t\t\t\t\t\t\t@stop="audioMode = false"\n\t\t\t\t\t\t\t@inputStart="onAudioInputStart"\n\t\t\t\t\t\t\t@inputResult="onAudioInputResult"\n\t\t\t\t\t\t\t@error="onAudioError"\n\t\t\t\t\t\t/>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<SendButton :editMode="editMode" :isDisabled="isDisabled" @click="sendMessage" />\n\t\t\t<MentionPopup\n\t\t\t\tv-if="showMentionForCopilotChat"\n\t\t\t\t:bindElement="$refs['textarea-content']"\n\t\t\t\t:dialogId="dialogId"\n\t\t\t\t:query="mentionQuery"\n\t\t\t\t:searchChats="false"\n\t\t\t\t@close="closeMentionPopup"\n\t\t\t/>\n\t\t</div>\n\t`});const D=_.BitrixVue.cloneComponent(m.DialogStatus,{template:`\n\t\t<div class="bx-im-dialog-chat-status__container">\n\t\t\t<div v-if="typingStatus" class="bx-im-dialog-chat-status__content">\n\t\t\t\t<div class="bx-im-dialog-chat-status__icon --typing"></div>\n\t\t\t\t<div class="bx-im-dialog-chat-status__text">{{ typingStatus }}</div>\n\t\t\t</div>\n\t\t</div>\n\t`});const $=_.BitrixVue.cloneComponent(b.MessageList,{name:"CopilotMessageList",components:{CopilotDialogStatus:D},computed:{statusComponent(){return D}},methods:{onMessageContextMenuClick(){},onAvatarClick(t){const e=this.$store.getters["users/bots/getCopilotUserId"];if(e.toString()===t.dialogId){return}this.parentOnAvatarClick(t)}}});const z=_.BitrixVue.cloneComponent(v.ChatDialog,{name:"CopilotDialog",computed:{messageListComponent(){return $}}});const H={name:"CopilotContent",components:{EmptyState:S,ChatHeader:M,CopilotDialog:z,CopilotTextarea:k,ChatSidebar:o.ChatSidebar},directives:{"textarea-observer":{mounted(t,e){e.instance.textareaResizeManager.observeTextarea(t)},beforeUnmount(t,e){e.instance.textareaResizeManager.unobserveTextarea(t)}}},props:{entityId:{type:String,default:""},contextMessageId:{type:Number,default:0}},data(){return{textareaHeight:0,currentSidebarPanel:""}},computed:{layout(){return this.$store.getters["application/getLayout"]},dialog(){return this.$store.getters["chats/get"](this.entityId,true)},containerClasses(){const t=this.$store.getters["application/settings/get"](d.Settings.appearance.alignment);return[`--${t}-align`]},backgroundStyle(){const t=4;return i.ThemeManager.getBackgroundStyleById(t)},dialogContainerStyle(){const t=64;return{height:`calc(100% - ${t}px - ${this.textareaHeight}px)`}}},watch:{entityId(t,i){e.Logger.warn(`CopilotContent: switching from ${i||"empty"} to ${t}`);this.onChatChange();p.EventEmitter.emit(d.EventType.sidebar.close,{panel:d.SidebarDetailBlock.members})}},created(){if(this.entityId){this.onChatChange()}this.initTextareaResizeManager()},methods:{async onChatChange(){if(this.entityId===""){return}if(this.dialog.inited){e.Logger.warn(`CopilotContent: chat ${this.entityId} is already loaded`);c.Analytics.getInstance().openCopilotChat(this.entityId);return}if(this.dialog.loading){e.Logger.warn(`CopilotContent: chat ${this.entityId} is loading`);return}if(this.layout.contextId){await this.loadChatWithContext();return}await this.loadChat()},loadChatWithContext(){e.Logger.warn(`CopilotContent: loading chat ${this.entityId} with context - ${this.layout.contextId}`);return this.getChatService().loadChatWithContext(this.entityId,this.layout.contextId).then((()=>{e.Logger.warn(`CopilotContent: chat ${this.entityId} is loaded with context of ${this.layout.contextId}`)})).catch((t=>{if(t.code==="ACCESS_ERROR"){this.showNotification(this.loc("IM_CONTENT_CHAT_ACCESS_ERROR"))}e.Logger.error(t);r.Messenger.openCopilot()}))},loadChat(){e.Logger.warn(`CopilotContent: loading chat ${this.entityId}`);return this.getChatService().loadChatWithMessages(this.entityId).then((()=>{e.Logger.warn(`CopilotContent: chat ${this.entityId} is loaded`);c.Analytics.getInstance().openCopilotChat(this.entityId)})).catch((t=>{const[e]=t;if(e.code==="ACCESS_DENIED"){this.showNotification(this.loc("IM_CONTENT_CHAT_ACCESS_ERROR"))}r.Messenger.openCopilot()}))},initTextareaResizeManager(){this.textareaResizeManager=new n.ResizeManager;this.textareaResizeManager.subscribe(n.ResizeManager.events.onHeightChange,(t=>{const{newHeight:e}=t.getData();this.textareaHeight=e}))},showNotification(t){BX.UI.Notification.Center.notify({content:t})},getChatService(){if(!this.chatService){this.chatService=new l.ChatService}return this.chatService},onChangeSidebarPanel({panel:t}){this.currentSidebarPanel=t},loc(t){return this.$Bitrix.Loc.getMessage(t)}},template:`\n\t\t<div class="bx-im-content-chat__container bx-im-content-copilot__container" :class="containerClasses" :style="backgroundStyle">\n\t\t\t<div v-if="entityId" class="bx-im-content-copilot__content">\n\t\t\t\t<ChatHeader :dialogId="entityId" :key="entityId" :currentSidebarPanel="currentSidebarPanel" />\n\t\t\t\t<div :style="dialogContainerStyle" class="bx-im-content-copilot__dialog_container">\n\t\t\t\t\t<div class="bx-im-content-copilot__dialog_content">\n\t\t\t\t\t\t<CopilotDialog :dialogId="entityId" :key="entityId" :textareaHeight="textareaHeight" />\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t<div v-textarea-observer class="bx-im-content-copilot__textarea_container">\n\t\t\t\t\t<CopilotTextarea :dialogId="entityId" :key="entityId" />\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<EmptyState v-else />\n\t\t\t<ChatSidebar\n\t\t\t\tv-if="entityId.length > 0"\n\t\t\t\t:originDialogId="entityId"\n\t\t\t\t@changePanel="onChangeSidebarPanel"\n\t\t\t/>\n\t\t</div>\n\t`};t.CopilotContent=H})(this.BX.Messenger.v2.Component.Content=this.BX.Messenger.v2.Component.Content||{},BX.Messenger.v2.Lib,BX.Messenger.v2.Lib,BX.Messenger.v2.Lib,BX.Messenger.v2.Component,BX,BX.Messenger.v2.Component.EntitySelector,BX.Messenger.v2.Lib,BX.Messenger.v2.Const,BX.Messenger.v2.Provider.Service,BX.Messenger.v2.Lib,BX.Messenger.v2.Lib,BX.Messenger.v2.Component,BX,BX.Event,BX.Messenger.v2.Lib,BX.Messenger.v2.Component.Dialog,BX.Messenger.v2.Component,BX.Messenger.v2.Component.Elements,BX.Vue3);
//# sourceMappingURL=copilot-content.bundle.map.js