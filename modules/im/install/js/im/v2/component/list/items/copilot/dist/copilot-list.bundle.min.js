this.BX=this.BX||{};this.BX.Messenger=this.BX.Messenger||{};this.BX.Messenger.v2=this.BX.Messenger.v2||{};this.BX.Messenger.v2.Component=this.BX.Messenger.v2.Component||{};(function(t,e,s,i,n,r,o,a,c,l,g,m,d,h){"use strict";const p={props:{item:{type:Object,required:true}},data(){return{}},computed:{recentItem(){return this.item},dialog(){return this.$store.getters["chats/get"](this.recentItem.dialogId,true)},user(){return this.$store.getters["users/get"](this.recentItem.dialogId,true)},message(){return this.$store.getters["recent/getMessage"](this.recentItem.dialogId)},showLastMessage(){return this.$store.getters["application/settings/get"](c.Settings.recent.showLastMessage)},hiddenMessageText(){return this.$Bitrix.Loc.getMessage("IM_LIST_RECENT_CHAT_TYPE_GROUP_V2")},isLastMessageAuthor(){if(!this.message){return false}return this.message.authorId===a.Core.getUserId()},lastMessageAuthorAvatar(){const t=this.$store.getters["chats/get"](this.message.authorId);if(!t){return""}return t.avatar},lastMessageAuthorAvatarStyle(){return{backgroundImage:`url('${this.lastMessageAuthorAvatar}')`}},messageText(){const t=r.Parser.purifyRecent(this.recentItem);if(!t){return this.hiddenMessageText}return t},formattedMessageText(){const t=27;return n.Utils.text.insertUnseenWhitespace(this.messageText,t)},preparedDraftContent(){const t=this.loc("IM_LIST_RECENT_MESSAGE_DRAFT_2");const e="#TEXT#".length;const s=t.slice(0,-e);return`\n\t\t\t\t<span class="bx-im-list-copilot-item__message_draft-prefix">${s}</span>\n\t\t\t\t<span class="bx-im-list-copilot-item__message_text_content">${this.formattedDraftText}</span>\n\t\t\t`},formattedDraftText(){return r.Parser.purify({text:this.recentItem.draft.text,showIconIfEmptyText:false})}},methods:{loc(t,e={}){return this.$Bitrix.Loc.getMessage(t,e)}},template:`\n\t\t<div class="bx-im-list-copilot-item__message_container">\n\t\t\t<span class="bx-im-list-copilot-item__message_text">\n\t\t\t\t<span v-if="recentItem.draft.text && dialog.counter === 0" v-html="preparedDraftContent"></span>\n\t\t\t\t<span v-else-if="!showLastMessage">{{ hiddenMessageText }}</span>\n\t\t\t\t<template v-else>\n\t\t\t\t\t<span v-if="isLastMessageAuthor" class="bx-im-list-copilot-item__message_author-icon --self"></span>\n\t\t\t\t\t<template v-else-if="message.authorId">\n\t\t\t\t\t\t<span v-if="lastMessageAuthorAvatar" :style="lastMessageAuthorAvatarStyle" class="bx-im-list-copilot-item__message_author-icon --user"></span>\n\t\t\t\t\t\t<span v-else class="bx-im-list-copilot-item__message_author-icon --user --default"></span>\n\t\t\t\t\t</template>\n\t\t\t\t\t<span class="bx-im-list-copilot-item__message_text_content">{{ formattedMessageText }}</span>\n\t\t\t\t</template>\n\t\t\t</span>\n\t\t</div>\n\t`};const u={name:"CopilotItem",components:{Avatar:i.Avatar,ChatTitle:i.ChatTitle,MessageText:p},props:{item:{type:Object,required:true}},data(){return{}},computed:{AvatarSize:()=>i.AvatarSize,recentItem(){return this.item},formattedDate(){return this.formatDate(this.message.date)},formattedCounter(){return this.dialog.counter>99?"99+":this.dialog.counter.toString()},dialog(){return this.$store.getters["chats/get"](this.recentItem.dialogId,true)},message(){return this.$store.getters["recent/getMessage"](this.recentItem.dialogId)},layout(){return this.$store.getters["application/getLayout"]},isChatSelected(){if(this.layout.name!==c.Layout.copilot.name){return false}return this.layout.entityId===this.recentItem.dialogId},isChatMuted(){const t=this.dialog.muteList.find((t=>t===a.Core.getUserId()));return Boolean(t)},isSomeoneTyping(){return this.dialog.writingList.length>0},showLastMessage(){return this.$store.getters["application/settings/get"](c.Settings.recent.showLastMessage)},showPinnedIcon(){return this.recentItem.pinned&&this.dialog.counter===0&&!this.recentItem.unread},showCounter(){return this.dialog.counter>0},wrapClasses(){return{"--pinned":this.recentItem.pinned,"--selected":this.isChatSelected}},itemClasses(){return{"--no-text":!this.showLastMessage}}},methods:{formatDate(t){return o.DateFormatter.formatByTemplate(t,o.DateTemplate.recent)},loc(t){return this.$Bitrix.Loc.getMessage(t)}},template:`\n\t\t<div :data-id="recentItem.dialogId" :class="wrapClasses" class="bx-im-list-copilot-item__wrap">\n\t\t\t<div :class="itemClasses" class="bx-im-list-copilot-item__container">\n\t\t\t\t<div class="bx-im-list-copilot-item__avatar_container">\n\t\t\t\t\t<div class="bx-im-list-copilot-item__avatar_content">\n\t\t\t\t\t\t<div class="bx-im-list-copilot-item__avatar_icon"></div>\n\t\t\t\t\t\t<div v-if="isSomeoneTyping" class="bx-im-list-copilot-item__avatar_typing"></div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t<div class="bx-im-list-copilot-item__content_container">\n\t\t\t\t\t<div class="bx-im-list-copilot-item__content_header">\n\t\t\t\t\t\t<ChatTitle :dialogId="recentItem.dialogId" :withMute="true" />\n\t\t\t\t\t\t<div class="bx-im-list-copilot-item__date">\n\t\t\t\t\t\t\t<span>{{ formattedDate }}</span>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div class="bx-im-list-copilot-item__content_bottom">\n\t\t\t\t\t\t<MessageText :item="recentItem" />\n\t\t\t\t\t\t<div :class="{'--extended': dialog.counter > 99}" class="bx-im-list-copilot-item__counter_wrap">\n\t\t\t\t\t\t\t<div class="bx-im-list-copilot-item__counter_container">\n\t\t\t\t\t\t\t\t<div v-if="showPinnedIcon" class="bx-im-list-copilot-item__pinned-icon"></div>\n\t\t\t\t\t\t\t\t<div v-else-if="showCounter" :class="{'--muted': isChatMuted}" class="bx-im-list-copilot-item__counter_number">\n\t\t\t\t\t\t\t\t\t{{ formattedCounter }}\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t`};class v extends g.RecentService{getQueryParams(t){return{ONLY_COPILOT:"Y",LIMIT:this.itemsPerPage,LAST_MESSAGE_DATE:t?null:this.lastMessageDate,GET_ORIGINAL_TEXT:"Y",PARSE_TEXT:"Y"}}getModelSaveMethod(){return"recent/setCopilot"}getCollection(){return a.Core.getStore().getters["recent/getCopilotCollection"]}getExtractorOptions(){return{withBirthdays:false}}hideChat(t){l.Logger.warn("Im.CopilotRecentList: hide chat",t);const e=a.Core.getStore().getters["recent/get"](t);if(!e){return}a.Core.getStore().dispatch("recent/delete",{id:t});const s=a.Core.getStore().getters["application/isChatOpen"](t);if(s){d.Messenger.openCopilot()}a.Core.getRestClient().callMethod(c.RestMethod.imRecentHide,{DIALOG_ID:t}).catch((t=>{console.error("Im.CopilotRecentList: hide chat error",t)}))}}class _ extends h.RecentMenu{getMenuItems(){return[this.getOpenItem(),this.getPinMessageItem(),this.getHideItem()]}getOpenItem(){return{text:m.Loc.getMessage("IM_LIB_MENU_OPEN"),onclick:()=>{d.Messenger.openCopilot(this.context.dialogId);this.menuInstance.close()}}}getHideItem(){return{text:m.Loc.getMessage("IM_LIST_COPILOT_MENU_HIDE"),onclick:()=>{this.getRecentService().hideChat(this.context.dialogId);this.menuInstance.close()}}}getRecentService(){if(!this.service){this.service=new v}return this.service}}const I={name:"CopilotList",components:{CopilotItem:u},emits:["chatClick"],data(){return{isLoading:false}},computed:{collection(){return this.getRecentService().getCollection()},sortedItems(){return[...this.collection].sort(((t,e)=>{const s=this.$store.getters["recent/getMessageDate"](t.dialogId);const i=this.$store.getters["recent/getMessageDate"](e.dialogId);return i-s}))},pinnedItems(){return this.sortedItems.filter((t=>t.pinned===true))},generalItems(){return this.sortedItems.filter((t=>t.pinned===false))}},async created(){this.contextMenuManager=new _;this.isLoading=true;await this.getRecentService().loadFirstPage();this.isLoading=false;e.CopilotDraftManager.getInstance().initDraftHistory()},beforeUnmount(){this.contextMenuManager.destroy()},methods:{async onScroll(t){this.contextMenuManager.close();if(!this.oneScreenRemaining(t)||!this.getRecentService().hasMoreItemsToLoad){return}this.isLoading=true;await this.getRecentService().loadNextPage();this.isLoading=false},onClick(t,e){this.$emit("chatClick",t.dialogId)},onRightClick(t,e){e.preventDefault();this.contextMenuManager.openMenu(t,e.currentTarget)},oneScreenRemaining(t){const e=t.target.scrollTop+t.target.clientHeight;const s=t.target.scrollHeight;const i=t.target.clientHeight;return e>=s-i},getRecentService(){if(!this.service){this.service=new v}return this.service},loc(t){return this.$Bitrix.Loc.getMessage(t)}},template:`\n\t\t<div class="bx-im-list-copilot__scope bx-im-list-copilot__container">\n\t\t\t<div @scroll="onScroll" class="bx-im-list-copilot__scroll-container">\n\t\t\t\t<div v-if="pinnedItems.length > 0" class="bx-im-list-copilot__pinned_container">\n\t\t\t\t\t<CopilotItem\n\t\t\t\t\t\tv-for="item in pinnedItems"\n\t\t\t\t\t\t:key="item.dialogId"\n\t\t\t\t\t\t:item="item"\n\t\t\t\t\t\t@click="onClick(item, $event)"\n\t\t\t\t\t\t@click.right="onRightClick(item, $event)"\n\t\t\t\t\t/>\n\t\t\t\t</div>\n\t\t\t\t<div class="bx-im-list-copilot__general_container">\n\t\t\t\t\t<CopilotItem\n\t\t\t\t\t\tv-for="item in generalItems"\n\t\t\t\t\t\t:key="item.dialogId"\n\t\t\t\t\t\t:item="item"\n\t\t\t\t\t\t@click="onClick(item, $event)"\n\t\t\t\t\t\t@click.right="onRightClick(item, $event)"\n\t\t\t\t\t/>\n\t\t\t\t</div>\t\n\t\t\t\t<div v-if="isLoading" class="bx-im-list-copilot__loading"></div>\n\t\t\t\t<div v-else-if="collection.length === 0" class="bx-im-list-copilot__empty">\n\t\t\t\t\t<div class="bx-im-list-copilot__empty_icon"></div>\n\t\t\t\t\t<div class="bx-im-list-copilot__empty_text">{{ loc('IM_LIST_COPILOT_EMPTY') }}</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t`};t.CopilotList=I})(this.BX.Messenger.v2.Component.List=this.BX.Messenger.v2.Component.List||{},BX.Messenger.v2.Lib,BX.Main,BX.Messenger.v2.Component.Elements,BX.Messenger.v2.Lib,BX.Messenger.v2.Lib,BX.Messenger.v2.Lib,BX.Messenger.v2.Application,BX.Messenger.v2.Const,BX.Messenger.v2.Lib,BX.Messenger.v2.Provider.Service,BX,BX.Messenger.v2.Lib,BX.Messenger.v2.Lib);
//# sourceMappingURL=copilot-list.bundle.map.js