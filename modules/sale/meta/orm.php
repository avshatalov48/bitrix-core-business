<?php

/* ORMENTITYANNOTATION:Bitrix\Sale\Internals\OrderTable:sale\lib\internals\order.php */
namespace Bitrix\Sale\Internals {
	/**
	 * EO_Order
	 * @see \Bitrix\Sale\Internals\OrderTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getId()
	 * @method \Bitrix\Sale\Internals\EO_Order setId(\int|\Bitrix\Main\DB\SqlExpression $id)
	 * @method bool hasId()
	 * @method bool isIdFilled()
	 * @method bool isIdChanged()
	 * @method \string getLid()
	 * @method \Bitrix\Sale\Internals\EO_Order setLid(\string|\Bitrix\Main\DB\SqlExpression $lid)
	 * @method bool hasLid()
	 * @method bool isLidFilled()
	 * @method bool isLidChanged()
	 * @method \string remindActualLid()
	 * @method \string requireLid()
	 * @method \Bitrix\Sale\Internals\EO_Order resetLid()
	 * @method \Bitrix\Sale\Internals\EO_Order unsetLid()
	 * @method \string fillLid()
	 * @method \string getAccountNumber()
	 * @method \Bitrix\Sale\Internals\EO_Order setAccountNumber(\string|\Bitrix\Main\DB\SqlExpression $accountNumber)
	 * @method bool hasAccountNumber()
	 * @method bool isAccountNumberFilled()
	 * @method bool isAccountNumberChanged()
	 * @method \string remindActualAccountNumber()
	 * @method \string requireAccountNumber()
	 * @method \Bitrix\Sale\Internals\EO_Order resetAccountNumber()
	 * @method \Bitrix\Sale\Internals\EO_Order unsetAccountNumber()
	 * @method \string fillAccountNumber()
	 * @method \string getTrackingNumber()
	 * @method \Bitrix\Sale\Internals\EO_Order setTrackingNumber(\string|\Bitrix\Main\DB\SqlExpression $trackingNumber)
	 * @method bool hasTrackingNumber()
	 * @method bool isTrackingNumberFilled()
	 * @method bool isTrackingNumberChanged()
	 * @method \string remindActualTrackingNumber()
	 * @method \string requireTrackingNumber()
	 * @method \Bitrix\Sale\Internals\EO_Order resetTrackingNumber()
	 * @method \Bitrix\Sale\Internals\EO_Order unsetTrackingNumber()
	 * @method \string fillTrackingNumber()
	 * @method \int getPaySystemId()
	 * @method \Bitrix\Sale\Internals\EO_Order setPaySystemId(\int|\Bitrix\Main\DB\SqlExpression $paySystemId)
	 * @method bool hasPaySystemId()
	 * @method bool isPaySystemIdFilled()
	 * @method bool isPaySystemIdChanged()
	 * @method \int remindActualPaySystemId()
	 * @method \int requirePaySystemId()
	 * @method \Bitrix\Sale\Internals\EO_Order resetPaySystemId()
	 * @method \Bitrix\Sale\Internals\EO_Order unsetPaySystemId()
	 * @method \int fillPaySystemId()
	 * @method \int getDeliveryId()
	 * @method \Bitrix\Sale\Internals\EO_Order setDeliveryId(\int|\Bitrix\Main\DB\SqlExpression $deliveryId)
	 * @method bool hasDeliveryId()
	 * @method bool isDeliveryIdFilled()
	 * @method bool isDeliveryIdChanged()
	 * @method \int remindActualDeliveryId()
	 * @method \int requireDeliveryId()
	 * @method \Bitrix\Sale\Internals\EO_Order resetDeliveryId()
	 * @method \Bitrix\Sale\Internals\EO_Order unsetDeliveryId()
	 * @method \int fillDeliveryId()
	 * @method \Bitrix\Main\Type\DateTime getDateInsert()
	 * @method \Bitrix\Sale\Internals\EO_Order setDateInsert(\Bitrix\Main\Type\DateTime|\Bitrix\Main\DB\SqlExpression $dateInsert)
	 * @method bool hasDateInsert()
	 * @method bool isDateInsertFilled()
	 * @method bool isDateInsertChanged()
	 * @method \Bitrix\Main\Type\DateTime remindActualDateInsert()
	 * @method \Bitrix\Main\Type\DateTime requireDateInsert()
	 * @method \Bitrix\Sale\Internals\EO_Order resetDateInsert()
	 * @method \Bitrix\Sale\Internals\EO_Order unsetDateInsert()
	 * @method \Bitrix\Main\Type\DateTime fillDateInsert()
	 * @method \Bitrix\Main\Type\DateTime getDateInsertShort()
	 * @method \Bitrix\Main\Type\DateTime remindActualDateInsertShort()
	 * @method \Bitrix\Main\Type\DateTime requireDateInsertShort()
	 * @method bool hasDateInsertShort()
	 * @method bool isDateInsertShortFilled()
	 * @method \Bitrix\Sale\Internals\EO_Order unsetDateInsertShort()
	 * @method \Bitrix\Main\Type\DateTime fillDateInsertShort()
	 * @method \Bitrix\Main\Type\DateTime getDateInsertFormat()
	 * @method \Bitrix\Main\Type\DateTime remindActualDateInsertFormat()
	 * @method \Bitrix\Main\Type\DateTime requireDateInsertFormat()
	 * @method bool hasDateInsertFormat()
	 * @method bool isDateInsertFormatFilled()
	 * @method \Bitrix\Sale\Internals\EO_Order unsetDateInsertFormat()
	 * @method \Bitrix\Main\Type\DateTime fillDateInsertFormat()
	 * @method \Bitrix\Main\Type\DateTime getDateUpdate()
	 * @method \Bitrix\Sale\Internals\EO_Order setDateUpdate(\Bitrix\Main\Type\DateTime|\Bitrix\Main\DB\SqlExpression $dateUpdate)
	 * @method bool hasDateUpdate()
	 * @method bool isDateUpdateFilled()
	 * @method bool isDateUpdateChanged()
	 * @method \Bitrix\Main\Type\DateTime remindActualDateUpdate()
	 * @method \Bitrix\Main\Type\DateTime requireDateUpdate()
	 * @method \Bitrix\Sale\Internals\EO_Order resetDateUpdate()
	 * @method \Bitrix\Sale\Internals\EO_Order unsetDateUpdate()
	 * @method \Bitrix\Main\Type\DateTime fillDateUpdate()
	 * @method \Bitrix\Main\Type\DateTime getDateUpdateShort()
	 * @method \Bitrix\Main\Type\DateTime remindActualDateUpdateShort()
	 * @method \Bitrix\Main\Type\DateTime requireDateUpdateShort()
	 * @method bool hasDateUpdateShort()
	 * @method bool isDateUpdateShortFilled()
	 * @method \Bitrix\Sale\Internals\EO_Order unsetDateUpdateShort()
	 * @method \Bitrix\Main\Type\DateTime fillDateUpdateShort()
	 * @method \string getProductsQuant()
	 * @method \string remindActualProductsQuant()
	 * @method \string requireProductsQuant()
	 * @method bool hasProductsQuant()
	 * @method bool isProductsQuantFilled()
	 * @method \Bitrix\Sale\Internals\EO_Order unsetProductsQuant()
	 * @method \string fillProductsQuant()
	 * @method \string getPersonTypeId()
	 * @method \Bitrix\Sale\Internals\EO_Order setPersonTypeId(\string|\Bitrix\Main\DB\SqlExpression $personTypeId)
	 * @method bool hasPersonTypeId()
	 * @method bool isPersonTypeIdFilled()
	 * @method bool isPersonTypeIdChanged()
	 * @method \string remindActualPersonTypeId()
	 * @method \string requirePersonTypeId()
	 * @method \Bitrix\Sale\Internals\EO_Order resetPersonTypeId()
	 * @method \Bitrix\Sale\Internals\EO_Order unsetPersonTypeId()
	 * @method \string fillPersonTypeId()
	 * @method \int getUserId()
	 * @method \Bitrix\Sale\Internals\EO_Order setUserId(\int|\Bitrix\Main\DB\SqlExpression $userId)
	 * @method bool hasUserId()
	 * @method bool isUserIdFilled()
	 * @method bool isUserIdChanged()
	 * @method \int remindActualUserId()
	 * @method \int requireUserId()
	 * @method \Bitrix\Sale\Internals\EO_Order resetUserId()
	 * @method \Bitrix\Sale\Internals\EO_Order unsetUserId()
	 * @method \int fillUserId()
	 * @method \Bitrix\Main\EO_User getUser()
	 * @method \Bitrix\Main\EO_User remindActualUser()
	 * @method \Bitrix\Main\EO_User requireUser()
	 * @method \Bitrix\Sale\Internals\EO_Order setUser(\Bitrix\Main\EO_User $object)
	 * @method \Bitrix\Sale\Internals\EO_Order resetUser()
	 * @method \Bitrix\Sale\Internals\EO_Order unsetUser()
	 * @method bool hasUser()
	 * @method bool isUserFilled()
	 * @method bool isUserChanged()
	 * @method \Bitrix\Main\EO_User fillUser()
	 * @method \boolean getPayed()
	 * @method \Bitrix\Sale\Internals\EO_Order setPayed(\boolean|\Bitrix\Main\DB\SqlExpression $payed)
	 * @method bool hasPayed()
	 * @method bool isPayedFilled()
	 * @method bool isPayedChanged()
	 * @method \boolean remindActualPayed()
	 * @method \boolean requirePayed()
	 * @method \Bitrix\Sale\Internals\EO_Order resetPayed()
	 * @method \Bitrix\Sale\Internals\EO_Order unsetPayed()
	 * @method \boolean fillPayed()
	 * @method \boolean getIsSyncB24()
	 * @method \Bitrix\Sale\Internals\EO_Order setIsSyncB24(\boolean|\Bitrix\Main\DB\SqlExpression $isSyncB24)
	 * @method bool hasIsSyncB24()
	 * @method bool isIsSyncB24Filled()
	 * @method bool isIsSyncB24Changed()
	 * @method \boolean remindActualIsSyncB24()
	 * @method \boolean requireIsSyncB24()
	 * @method \Bitrix\Sale\Internals\EO_Order resetIsSyncB24()
	 * @method \Bitrix\Sale\Internals\EO_Order unsetIsSyncB24()
	 * @method \boolean fillIsSyncB24()
	 * @method \Bitrix\Main\Type\DateTime getDatePayed()
	 * @method \Bitrix\Sale\Internals\EO_Order setDatePayed(\Bitrix\Main\Type\DateTime|\Bitrix\Main\DB\SqlExpression $datePayed)
	 * @method bool hasDatePayed()
	 * @method bool isDatePayedFilled()
	 * @method bool isDatePayedChanged()
	 * @method \Bitrix\Main\Type\DateTime remindActualDatePayed()
	 * @method \Bitrix\Main\Type\DateTime requireDatePayed()
	 * @method \Bitrix\Sale\Internals\EO_Order resetDatePayed()
	 * @method \Bitrix\Sale\Internals\EO_Order unsetDatePayed()
	 * @method \Bitrix\Main\Type\DateTime fillDatePayed()
	 * @method \int getEmpPayedId()
	 * @method \Bitrix\Sale\Internals\EO_Order setEmpPayedId(\int|\Bitrix\Main\DB\SqlExpression $empPayedId)
	 * @method bool hasEmpPayedId()
	 * @method bool isEmpPayedIdFilled()
	 * @method bool isEmpPayedIdChanged()
	 * @method \int remindActualEmpPayedId()
	 * @method \int requireEmpPayedId()
	 * @method \Bitrix\Sale\Internals\EO_Order resetEmpPayedId()
	 * @method \Bitrix\Sale\Internals\EO_Order unsetEmpPayedId()
	 * @method \int fillEmpPayedId()
	 * @method \boolean getDeducted()
	 * @method \Bitrix\Sale\Internals\EO_Order setDeducted(\boolean|\Bitrix\Main\DB\SqlExpression $deducted)
	 * @method bool hasDeducted()
	 * @method bool isDeductedFilled()
	 * @method bool isDeductedChanged()
	 * @method \boolean remindActualDeducted()
	 * @method \boolean requireDeducted()
	 * @method \Bitrix\Sale\Internals\EO_Order resetDeducted()
	 * @method \Bitrix\Sale\Internals\EO_Order unsetDeducted()
	 * @method \boolean fillDeducted()
	 * @method \Bitrix\Main\Type\DateTime getDateDeducted()
	 * @method \Bitrix\Sale\Internals\EO_Order setDateDeducted(\Bitrix\Main\Type\DateTime|\Bitrix\Main\DB\SqlExpression $dateDeducted)
	 * @method bool hasDateDeducted()
	 * @method bool isDateDeductedFilled()
	 * @method bool isDateDeductedChanged()
	 * @method \Bitrix\Main\Type\DateTime remindActualDateDeducted()
	 * @method \Bitrix\Main\Type\DateTime requireDateDeducted()
	 * @method \Bitrix\Sale\Internals\EO_Order resetDateDeducted()
	 * @method \Bitrix\Sale\Internals\EO_Order unsetDateDeducted()
	 * @method \Bitrix\Main\Type\DateTime fillDateDeducted()
	 * @method \int getEmpDeductedId()
	 * @method \Bitrix\Sale\Internals\EO_Order setEmpDeductedId(\int|\Bitrix\Main\DB\SqlExpression $empDeductedId)
	 * @method bool hasEmpDeductedId()
	 * @method bool isEmpDeductedIdFilled()
	 * @method bool isEmpDeductedIdChanged()
	 * @method \int remindActualEmpDeductedId()
	 * @method \int requireEmpDeductedId()
	 * @method \Bitrix\Sale\Internals\EO_Order resetEmpDeductedId()
	 * @method \Bitrix\Sale\Internals\EO_Order unsetEmpDeductedId()
	 * @method \int fillEmpDeductedId()
	 * @method \string getReasonUndoDeducted()
	 * @method \Bitrix\Sale\Internals\EO_Order setReasonUndoDeducted(\string|\Bitrix\Main\DB\SqlExpression $reasonUndoDeducted)
	 * @method bool hasReasonUndoDeducted()
	 * @method bool isReasonUndoDeductedFilled()
	 * @method bool isReasonUndoDeductedChanged()
	 * @method \string remindActualReasonUndoDeducted()
	 * @method \string requireReasonUndoDeducted()
	 * @method \Bitrix\Sale\Internals\EO_Order resetReasonUndoDeducted()
	 * @method \Bitrix\Sale\Internals\EO_Order unsetReasonUndoDeducted()
	 * @method \string fillReasonUndoDeducted()
	 * @method \string getStatusId()
	 * @method \Bitrix\Sale\Internals\EO_Order setStatusId(\string|\Bitrix\Main\DB\SqlExpression $statusId)
	 * @method bool hasStatusId()
	 * @method bool isStatusIdFilled()
	 * @method bool isStatusIdChanged()
	 * @method \string remindActualStatusId()
	 * @method \string requireStatusId()
	 * @method \Bitrix\Sale\Internals\EO_Order resetStatusId()
	 * @method \Bitrix\Sale\Internals\EO_Order unsetStatusId()
	 * @method \string fillStatusId()
	 * @method \Bitrix\Sale\Internals\EO_StatusLang getStatus()
	 * @method \Bitrix\Sale\Internals\EO_StatusLang remindActualStatus()
	 * @method \Bitrix\Sale\Internals\EO_StatusLang requireStatus()
	 * @method \Bitrix\Sale\Internals\EO_Order setStatus(\Bitrix\Sale\Internals\EO_StatusLang $object)
	 * @method \Bitrix\Sale\Internals\EO_Order resetStatus()
	 * @method \Bitrix\Sale\Internals\EO_Order unsetStatus()
	 * @method bool hasStatus()
	 * @method bool isStatusFilled()
	 * @method bool isStatusChanged()
	 * @method \Bitrix\Sale\Internals\EO_StatusLang fillStatus()
	 * @method \Bitrix\Main\Type\DateTime getDateStatus()
	 * @method \Bitrix\Sale\Internals\EO_Order setDateStatus(\Bitrix\Main\Type\DateTime|\Bitrix\Main\DB\SqlExpression $dateStatus)
	 * @method bool hasDateStatus()
	 * @method bool isDateStatusFilled()
	 * @method bool isDateStatusChanged()
	 * @method \Bitrix\Main\Type\DateTime remindActualDateStatus()
	 * @method \Bitrix\Main\Type\DateTime requireDateStatus()
	 * @method \Bitrix\Sale\Internals\EO_Order resetDateStatus()
	 * @method \Bitrix\Sale\Internals\EO_Order unsetDateStatus()
	 * @method \Bitrix\Main\Type\DateTime fillDateStatus()
	 * @method \Bitrix\Main\Type\DateTime getDateStatusShort()
	 * @method \Bitrix\Main\Type\DateTime remindActualDateStatusShort()
	 * @method \Bitrix\Main\Type\DateTime requireDateStatusShort()
	 * @method bool hasDateStatusShort()
	 * @method bool isDateStatusShortFilled()
	 * @method \Bitrix\Sale\Internals\EO_Order unsetDateStatusShort()
	 * @method \Bitrix\Main\Type\DateTime fillDateStatusShort()
	 * @method \int getEmpStatusId()
	 * @method \Bitrix\Sale\Internals\EO_Order setEmpStatusId(\int|\Bitrix\Main\DB\SqlExpression $empStatusId)
	 * @method bool hasEmpStatusId()
	 * @method bool isEmpStatusIdFilled()
	 * @method bool isEmpStatusIdChanged()
	 * @method \int remindActualEmpStatusId()
	 * @method \int requireEmpStatusId()
	 * @method \Bitrix\Sale\Internals\EO_Order resetEmpStatusId()
	 * @method \Bitrix\Sale\Internals\EO_Order unsetEmpStatusId()
	 * @method \int fillEmpStatusId()
	 * @method \Bitrix\Main\EO_User getEmpStatusBy()
	 * @method \Bitrix\Main\EO_User remindActualEmpStatusBy()
	 * @method \Bitrix\Main\EO_User requireEmpStatusBy()
	 * @method \Bitrix\Sale\Internals\EO_Order setEmpStatusBy(\Bitrix\Main\EO_User $object)
	 * @method \Bitrix\Sale\Internals\EO_Order resetEmpStatusBy()
	 * @method \Bitrix\Sale\Internals\EO_Order unsetEmpStatusBy()
	 * @method bool hasEmpStatusBy()
	 * @method bool isEmpStatusByFilled()
	 * @method bool isEmpStatusByChanged()
	 * @method \Bitrix\Main\EO_User fillEmpStatusBy()
	 * @method \boolean getMarked()
	 * @method \Bitrix\Sale\Internals\EO_Order setMarked(\boolean|\Bitrix\Main\DB\SqlExpression $marked)
	 * @method bool hasMarked()
	 * @method bool isMarkedFilled()
	 * @method bool isMarkedChanged()
	 * @method \boolean remindActualMarked()
	 * @method \boolean requireMarked()
	 * @method \Bitrix\Sale\Internals\EO_Order resetMarked()
	 * @method \Bitrix\Sale\Internals\EO_Order unsetMarked()
	 * @method \boolean fillMarked()
	 * @method \Bitrix\Main\Type\DateTime getDateMarked()
	 * @method \Bitrix\Sale\Internals\EO_Order setDateMarked(\Bitrix\Main\Type\DateTime|\Bitrix\Main\DB\SqlExpression $dateMarked)
	 * @method bool hasDateMarked()
	 * @method bool isDateMarkedFilled()
	 * @method bool isDateMarkedChanged()
	 * @method \Bitrix\Main\Type\DateTime remindActualDateMarked()
	 * @method \Bitrix\Main\Type\DateTime requireDateMarked()
	 * @method \Bitrix\Sale\Internals\EO_Order resetDateMarked()
	 * @method \Bitrix\Sale\Internals\EO_Order unsetDateMarked()
	 * @method \Bitrix\Main\Type\DateTime fillDateMarked()
	 * @method \int getEmpMarkedId()
	 * @method \Bitrix\Sale\Internals\EO_Order setEmpMarkedId(\int|\Bitrix\Main\DB\SqlExpression $empMarkedId)
	 * @method bool hasEmpMarkedId()
	 * @method bool isEmpMarkedIdFilled()
	 * @method bool isEmpMarkedIdChanged()
	 * @method \int remindActualEmpMarkedId()
	 * @method \int requireEmpMarkedId()
	 * @method \Bitrix\Sale\Internals\EO_Order resetEmpMarkedId()
	 * @method \Bitrix\Sale\Internals\EO_Order unsetEmpMarkedId()
	 * @method \int fillEmpMarkedId()
	 * @method \Bitrix\Main\EO_User getEmpMarkedBy()
	 * @method \Bitrix\Main\EO_User remindActualEmpMarkedBy()
	 * @method \Bitrix\Main\EO_User requireEmpMarkedBy()
	 * @method \Bitrix\Sale\Internals\EO_Order setEmpMarkedBy(\Bitrix\Main\EO_User $object)
	 * @method \Bitrix\Sale\Internals\EO_Order resetEmpMarkedBy()
	 * @method \Bitrix\Sale\Internals\EO_Order unsetEmpMarkedBy()
	 * @method bool hasEmpMarkedBy()
	 * @method bool isEmpMarkedByFilled()
	 * @method bool isEmpMarkedByChanged()
	 * @method \Bitrix\Main\EO_User fillEmpMarkedBy()
	 * @method \string getReasonMarked()
	 * @method \Bitrix\Sale\Internals\EO_Order setReasonMarked(\string|\Bitrix\Main\DB\SqlExpression $reasonMarked)
	 * @method bool hasReasonMarked()
	 * @method bool isReasonMarkedFilled()
	 * @method bool isReasonMarkedChanged()
	 * @method \string remindActualReasonMarked()
	 * @method \string requireReasonMarked()
	 * @method \Bitrix\Sale\Internals\EO_Order resetReasonMarked()
	 * @method \Bitrix\Sale\Internals\EO_Order unsetReasonMarked()
	 * @method \string fillReasonMarked()
	 * @method \float getPriceDelivery()
	 * @method \Bitrix\Sale\Internals\EO_Order setPriceDelivery(\float|\Bitrix\Main\DB\SqlExpression $priceDelivery)
	 * @method bool hasPriceDelivery()
	 * @method bool isPriceDeliveryFilled()
	 * @method bool isPriceDeliveryChanged()
	 * @method \float remindActualPriceDelivery()
	 * @method \float requirePriceDelivery()
	 * @method \Bitrix\Sale\Internals\EO_Order resetPriceDelivery()
	 * @method \Bitrix\Sale\Internals\EO_Order unsetPriceDelivery()
	 * @method \float fillPriceDelivery()
	 * @method \boolean getAllowDelivery()
	 * @method \Bitrix\Sale\Internals\EO_Order setAllowDelivery(\boolean|\Bitrix\Main\DB\SqlExpression $allowDelivery)
	 * @method bool hasAllowDelivery()
	 * @method bool isAllowDeliveryFilled()
	 * @method bool isAllowDeliveryChanged()
	 * @method \boolean remindActualAllowDelivery()
	 * @method \boolean requireAllowDelivery()
	 * @method \Bitrix\Sale\Internals\EO_Order resetAllowDelivery()
	 * @method \Bitrix\Sale\Internals\EO_Order unsetAllowDelivery()
	 * @method \boolean fillAllowDelivery()
	 * @method \Bitrix\Main\Type\DateTime getDateAllowDelivery()
	 * @method \Bitrix\Sale\Internals\EO_Order setDateAllowDelivery(\Bitrix\Main\Type\DateTime|\Bitrix\Main\DB\SqlExpression $dateAllowDelivery)
	 * @method bool hasDateAllowDelivery()
	 * @method bool isDateAllowDeliveryFilled()
	 * @method bool isDateAllowDeliveryChanged()
	 * @method \Bitrix\Main\Type\DateTime remindActualDateAllowDelivery()
	 * @method \Bitrix\Main\Type\DateTime requireDateAllowDelivery()
	 * @method \Bitrix\Sale\Internals\EO_Order resetDateAllowDelivery()
	 * @method \Bitrix\Sale\Internals\EO_Order unsetDateAllowDelivery()
	 * @method \Bitrix\Main\Type\DateTime fillDateAllowDelivery()
	 * @method \int getEmpAllowDeliveryId()
	 * @method \Bitrix\Sale\Internals\EO_Order setEmpAllowDeliveryId(\int|\Bitrix\Main\DB\SqlExpression $empAllowDeliveryId)
	 * @method bool hasEmpAllowDeliveryId()
	 * @method bool isEmpAllowDeliveryIdFilled()
	 * @method bool isEmpAllowDeliveryIdChanged()
	 * @method \int remindActualEmpAllowDeliveryId()
	 * @method \int requireEmpAllowDeliveryId()
	 * @method \Bitrix\Sale\Internals\EO_Order resetEmpAllowDeliveryId()
	 * @method \Bitrix\Sale\Internals\EO_Order unsetEmpAllowDeliveryId()
	 * @method \int fillEmpAllowDeliveryId()
	 * @method \boolean getReserved()
	 * @method \Bitrix\Sale\Internals\EO_Order setReserved(\boolean|\Bitrix\Main\DB\SqlExpression $reserved)
	 * @method bool hasReserved()
	 * @method bool isReservedFilled()
	 * @method bool isReservedChanged()
	 * @method \boolean remindActualReserved()
	 * @method \boolean requireReserved()
	 * @method \Bitrix\Sale\Internals\EO_Order resetReserved()
	 * @method \Bitrix\Sale\Internals\EO_Order unsetReserved()
	 * @method \boolean fillReserved()
	 * @method \float getPrice()
	 * @method \Bitrix\Sale\Internals\EO_Order setPrice(\float|\Bitrix\Main\DB\SqlExpression $price)
	 * @method bool hasPrice()
	 * @method bool isPriceFilled()
	 * @method bool isPriceChanged()
	 * @method \float remindActualPrice()
	 * @method \float requirePrice()
	 * @method \Bitrix\Sale\Internals\EO_Order resetPrice()
	 * @method \Bitrix\Sale\Internals\EO_Order unsetPrice()
	 * @method \float fillPrice()
	 * @method \string getCurrency()
	 * @method \Bitrix\Sale\Internals\EO_Order setCurrency(\string|\Bitrix\Main\DB\SqlExpression $currency)
	 * @method bool hasCurrency()
	 * @method bool isCurrencyFilled()
	 * @method bool isCurrencyChanged()
	 * @method \string remindActualCurrency()
	 * @method \string requireCurrency()
	 * @method \Bitrix\Sale\Internals\EO_Order resetCurrency()
	 * @method \Bitrix\Sale\Internals\EO_Order unsetCurrency()
	 * @method \string fillCurrency()
	 * @method \float getDiscountValue()
	 * @method \Bitrix\Sale\Internals\EO_Order setDiscountValue(\float|\Bitrix\Main\DB\SqlExpression $discountValue)
	 * @method bool hasDiscountValue()
	 * @method bool isDiscountValueFilled()
	 * @method bool isDiscountValueChanged()
	 * @method \float remindActualDiscountValue()
	 * @method \float requireDiscountValue()
	 * @method \Bitrix\Sale\Internals\EO_Order resetDiscountValue()
	 * @method \Bitrix\Sale\Internals\EO_Order unsetDiscountValue()
	 * @method \float fillDiscountValue()
	 * @method \string getDiscountAll()
	 * @method \string remindActualDiscountAll()
	 * @method \string requireDiscountAll()
	 * @method bool hasDiscountAll()
	 * @method bool isDiscountAllFilled()
	 * @method \Bitrix\Sale\Internals\EO_Order unsetDiscountAll()
	 * @method \string fillDiscountAll()
	 * @method \float getTaxValue()
	 * @method \Bitrix\Sale\Internals\EO_Order setTaxValue(\float|\Bitrix\Main\DB\SqlExpression $taxValue)
	 * @method bool hasTaxValue()
	 * @method bool isTaxValueFilled()
	 * @method bool isTaxValueChanged()
	 * @method \float remindActualTaxValue()
	 * @method \float requireTaxValue()
	 * @method \Bitrix\Sale\Internals\EO_Order resetTaxValue()
	 * @method \Bitrix\Sale\Internals\EO_Order unsetTaxValue()
	 * @method \float fillTaxValue()
	 * @method \float getSumPaid()
	 * @method \Bitrix\Sale\Internals\EO_Order setSumPaid(\float|\Bitrix\Main\DB\SqlExpression $sumPaid)
	 * @method bool hasSumPaid()
	 * @method bool isSumPaidFilled()
	 * @method bool isSumPaidChanged()
	 * @method \float remindActualSumPaid()
	 * @method \float requireSumPaid()
	 * @method \Bitrix\Sale\Internals\EO_Order resetSumPaid()
	 * @method \Bitrix\Sale\Internals\EO_Order unsetSumPaid()
	 * @method \float fillSumPaid()
	 * @method \string getSumPaidForrep()
	 * @method \string remindActualSumPaidForrep()
	 * @method \string requireSumPaidForrep()
	 * @method bool hasSumPaidForrep()
	 * @method bool isSumPaidForrepFilled()
	 * @method \Bitrix\Sale\Internals\EO_Order unsetSumPaidForrep()
	 * @method \string fillSumPaidForrep()
	 * @method \string getUserDescription()
	 * @method \Bitrix\Sale\Internals\EO_Order setUserDescription(\string|\Bitrix\Main\DB\SqlExpression $userDescription)
	 * @method bool hasUserDescription()
	 * @method bool isUserDescriptionFilled()
	 * @method bool isUserDescriptionChanged()
	 * @method \string remindActualUserDescription()
	 * @method \string requireUserDescription()
	 * @method \Bitrix\Sale\Internals\EO_Order resetUserDescription()
	 * @method \Bitrix\Sale\Internals\EO_Order unsetUserDescription()
	 * @method \string fillUserDescription()
	 * @method \string getPayVoucherNum()
	 * @method \Bitrix\Sale\Internals\EO_Order setPayVoucherNum(\string|\Bitrix\Main\DB\SqlExpression $payVoucherNum)
	 * @method bool hasPayVoucherNum()
	 * @method bool isPayVoucherNumFilled()
	 * @method bool isPayVoucherNumChanged()
	 * @method \string remindActualPayVoucherNum()
	 * @method \string requirePayVoucherNum()
	 * @method \Bitrix\Sale\Internals\EO_Order resetPayVoucherNum()
	 * @method \Bitrix\Sale\Internals\EO_Order unsetPayVoucherNum()
	 * @method \string fillPayVoucherNum()
	 * @method \Bitrix\Main\Type\Date getPayVoucherDate()
	 * @method \Bitrix\Sale\Internals\EO_Order setPayVoucherDate(\Bitrix\Main\Type\Date|\Bitrix\Main\DB\SqlExpression $payVoucherDate)
	 * @method bool hasPayVoucherDate()
	 * @method bool isPayVoucherDateFilled()
	 * @method bool isPayVoucherDateChanged()
	 * @method \Bitrix\Main\Type\Date remindActualPayVoucherDate()
	 * @method \Bitrix\Main\Type\Date requirePayVoucherDate()
	 * @method \Bitrix\Sale\Internals\EO_Order resetPayVoucherDate()
	 * @method \Bitrix\Sale\Internals\EO_Order unsetPayVoucherDate()
	 * @method \Bitrix\Main\Type\Date fillPayVoucherDate()
	 * @method \string getAdditionalInfo()
	 * @method \Bitrix\Sale\Internals\EO_Order setAdditionalInfo(\string|\Bitrix\Main\DB\SqlExpression $additionalInfo)
	 * @method bool hasAdditionalInfo()
	 * @method bool isAdditionalInfoFilled()
	 * @method bool isAdditionalInfoChanged()
	 * @method \string remindActualAdditionalInfo()
	 * @method \string requireAdditionalInfo()
	 * @method \Bitrix\Sale\Internals\EO_Order resetAdditionalInfo()
	 * @method \Bitrix\Sale\Internals\EO_Order unsetAdditionalInfo()
	 * @method \string fillAdditionalInfo()
	 * @method \string getComments()
	 * @method \Bitrix\Sale\Internals\EO_Order setComments(\string|\Bitrix\Main\DB\SqlExpression $comments)
	 * @method bool hasComments()
	 * @method bool isCommentsFilled()
	 * @method bool isCommentsChanged()
	 * @method \string remindActualComments()
	 * @method \string requireComments()
	 * @method \Bitrix\Sale\Internals\EO_Order resetComments()
	 * @method \Bitrix\Sale\Internals\EO_Order unsetComments()
	 * @method \string fillComments()
	 * @method \int getCompanyId()
	 * @method \Bitrix\Sale\Internals\EO_Order setCompanyId(\int|\Bitrix\Main\DB\SqlExpression $companyId)
	 * @method bool hasCompanyId()
	 * @method bool isCompanyIdFilled()
	 * @method bool isCompanyIdChanged()
	 * @method \int remindActualCompanyId()
	 * @method \int requireCompanyId()
	 * @method \Bitrix\Sale\Internals\EO_Order resetCompanyId()
	 * @method \Bitrix\Sale\Internals\EO_Order unsetCompanyId()
	 * @method \int fillCompanyId()
	 * @method \int getCreatedBy()
	 * @method \Bitrix\Sale\Internals\EO_Order setCreatedBy(\int|\Bitrix\Main\DB\SqlExpression $createdBy)
	 * @method bool hasCreatedBy()
	 * @method bool isCreatedByFilled()
	 * @method bool isCreatedByChanged()
	 * @method \int remindActualCreatedBy()
	 * @method \int requireCreatedBy()
	 * @method \Bitrix\Sale\Internals\EO_Order resetCreatedBy()
	 * @method \Bitrix\Sale\Internals\EO_Order unsetCreatedBy()
	 * @method \int fillCreatedBy()
	 * @method \Bitrix\Main\EO_User getCreatedUser()
	 * @method \Bitrix\Main\EO_User remindActualCreatedUser()
	 * @method \Bitrix\Main\EO_User requireCreatedUser()
	 * @method \Bitrix\Sale\Internals\EO_Order setCreatedUser(\Bitrix\Main\EO_User $object)
	 * @method \Bitrix\Sale\Internals\EO_Order resetCreatedUser()
	 * @method \Bitrix\Sale\Internals\EO_Order unsetCreatedUser()
	 * @method bool hasCreatedUser()
	 * @method bool isCreatedUserFilled()
	 * @method bool isCreatedUserChanged()
	 * @method \Bitrix\Main\EO_User fillCreatedUser()
	 * @method \int getResponsibleId()
	 * @method \Bitrix\Sale\Internals\EO_Order setResponsibleId(\int|\Bitrix\Main\DB\SqlExpression $responsibleId)
	 * @method bool hasResponsibleId()
	 * @method bool isResponsibleIdFilled()
	 * @method bool isResponsibleIdChanged()
	 * @method \int remindActualResponsibleId()
	 * @method \int requireResponsibleId()
	 * @method \Bitrix\Sale\Internals\EO_Order resetResponsibleId()
	 * @method \Bitrix\Sale\Internals\EO_Order unsetResponsibleId()
	 * @method \int fillResponsibleId()
	 * @method \Bitrix\Main\EO_User getResponsibleBy()
	 * @method \Bitrix\Main\EO_User remindActualResponsibleBy()
	 * @method \Bitrix\Main\EO_User requireResponsibleBy()
	 * @method \Bitrix\Sale\Internals\EO_Order setResponsibleBy(\Bitrix\Main\EO_User $object)
	 * @method \Bitrix\Sale\Internals\EO_Order resetResponsibleBy()
	 * @method \Bitrix\Sale\Internals\EO_Order unsetResponsibleBy()
	 * @method bool hasResponsibleBy()
	 * @method bool isResponsibleByFilled()
	 * @method bool isResponsibleByChanged()
	 * @method \Bitrix\Main\EO_User fillResponsibleBy()
	 * @method \string getStatGid()
	 * @method \Bitrix\Sale\Internals\EO_Order setStatGid(\string|\Bitrix\Main\DB\SqlExpression $statGid)
	 * @method bool hasStatGid()
	 * @method bool isStatGidFilled()
	 * @method bool isStatGidChanged()
	 * @method \string remindActualStatGid()
	 * @method \string requireStatGid()
	 * @method \Bitrix\Sale\Internals\EO_Order resetStatGid()
	 * @method \Bitrix\Sale\Internals\EO_Order unsetStatGid()
	 * @method \string fillStatGid()
	 * @method \Bitrix\Main\Type\Date getDatePayBefore()
	 * @method \Bitrix\Sale\Internals\EO_Order setDatePayBefore(\Bitrix\Main\Type\Date|\Bitrix\Main\DB\SqlExpression $datePayBefore)
	 * @method bool hasDatePayBefore()
	 * @method bool isDatePayBeforeFilled()
	 * @method bool isDatePayBeforeChanged()
	 * @method \Bitrix\Main\Type\Date remindActualDatePayBefore()
	 * @method \Bitrix\Main\Type\Date requireDatePayBefore()
	 * @method \Bitrix\Sale\Internals\EO_Order resetDatePayBefore()
	 * @method \Bitrix\Sale\Internals\EO_Order unsetDatePayBefore()
	 * @method \Bitrix\Main\Type\Date fillDatePayBefore()
	 * @method \Bitrix\Main\Type\Date getDateBill()
	 * @method \Bitrix\Sale\Internals\EO_Order setDateBill(\Bitrix\Main\Type\Date|\Bitrix\Main\DB\SqlExpression $dateBill)
	 * @method bool hasDateBill()
	 * @method bool isDateBillFilled()
	 * @method bool isDateBillChanged()
	 * @method \Bitrix\Main\Type\Date remindActualDateBill()
	 * @method \Bitrix\Main\Type\Date requireDateBill()
	 * @method \Bitrix\Sale\Internals\EO_Order resetDateBill()
	 * @method \Bitrix\Sale\Internals\EO_Order unsetDateBill()
	 * @method \Bitrix\Main\Type\Date fillDateBill()
	 * @method \boolean getIsRecurring()
	 * @method \Bitrix\Sale\Internals\EO_Order setIsRecurring(\boolean|\Bitrix\Main\DB\SqlExpression $isRecurring)
	 * @method bool hasIsRecurring()
	 * @method bool isIsRecurringFilled()
	 * @method bool isIsRecurringChanged()
	 * @method \boolean remindActualIsRecurring()
	 * @method \boolean requireIsRecurring()
	 * @method \Bitrix\Sale\Internals\EO_Order resetIsRecurring()
	 * @method \Bitrix\Sale\Internals\EO_Order unsetIsRecurring()
	 * @method \boolean fillIsRecurring()
	 * @method \int getRecurringId()
	 * @method \Bitrix\Sale\Internals\EO_Order setRecurringId(\int|\Bitrix\Main\DB\SqlExpression $recurringId)
	 * @method bool hasRecurringId()
	 * @method bool isRecurringIdFilled()
	 * @method bool isRecurringIdChanged()
	 * @method \int remindActualRecurringId()
	 * @method \int requireRecurringId()
	 * @method \Bitrix\Sale\Internals\EO_Order resetRecurringId()
	 * @method \Bitrix\Sale\Internals\EO_Order unsetRecurringId()
	 * @method \int fillRecurringId()
	 * @method \int getLockedBy()
	 * @method \Bitrix\Sale\Internals\EO_Order setLockedBy(\int|\Bitrix\Main\DB\SqlExpression $lockedBy)
	 * @method bool hasLockedBy()
	 * @method bool isLockedByFilled()
	 * @method bool isLockedByChanged()
	 * @method \int remindActualLockedBy()
	 * @method \int requireLockedBy()
	 * @method \Bitrix\Sale\Internals\EO_Order resetLockedBy()
	 * @method \Bitrix\Sale\Internals\EO_Order unsetLockedBy()
	 * @method \int fillLockedBy()
	 * @method \Bitrix\Main\EO_User getLockUser()
	 * @method \Bitrix\Main\EO_User remindActualLockUser()
	 * @method \Bitrix\Main\EO_User requireLockUser()
	 * @method \Bitrix\Sale\Internals\EO_Order setLockUser(\Bitrix\Main\EO_User $object)
	 * @method \Bitrix\Sale\Internals\EO_Order resetLockUser()
	 * @method \Bitrix\Sale\Internals\EO_Order unsetLockUser()
	 * @method bool hasLockUser()
	 * @method bool isLockUserFilled()
	 * @method bool isLockUserChanged()
	 * @method \Bitrix\Main\EO_User fillLockUser()
	 * @method \Bitrix\Main\Type\DateTime getDateLock()
	 * @method \Bitrix\Sale\Internals\EO_Order setDateLock(\Bitrix\Main\Type\DateTime|\Bitrix\Main\DB\SqlExpression $dateLock)
	 * @method bool hasDateLock()
	 * @method bool isDateLockFilled()
	 * @method bool isDateLockChanged()
	 * @method \Bitrix\Main\Type\DateTime remindActualDateLock()
	 * @method \Bitrix\Main\Type\DateTime requireDateLock()
	 * @method \Bitrix\Sale\Internals\EO_Order resetDateLock()
	 * @method \Bitrix\Sale\Internals\EO_Order unsetDateLock()
	 * @method \Bitrix\Main\Type\DateTime fillDateLock()
	 * @method \string getLockUserName()
	 * @method \string remindActualLockUserName()
	 * @method \string requireLockUserName()
	 * @method bool hasLockUserName()
	 * @method bool isLockUserNameFilled()
	 * @method \Bitrix\Sale\Internals\EO_Order unsetLockUserName()
	 * @method \string fillLockUserName()
	 * @method \string getLockStatus()
	 * @method \string remindActualLockStatus()
	 * @method \string requireLockStatus()
	 * @method bool hasLockStatus()
	 * @method bool isLockStatusFilled()
	 * @method \Bitrix\Sale\Internals\EO_Order unsetLockStatus()
	 * @method \string fillLockStatus()
	 * @method \Bitrix\Main\EO_UserGroup getUserGroup()
	 * @method \Bitrix\Main\EO_UserGroup remindActualUserGroup()
	 * @method \Bitrix\Main\EO_UserGroup requireUserGroup()
	 * @method \Bitrix\Sale\Internals\EO_Order setUserGroup(\Bitrix\Main\EO_UserGroup $object)
	 * @method \Bitrix\Sale\Internals\EO_Order resetUserGroup()
	 * @method \Bitrix\Sale\Internals\EO_Order unsetUserGroup()
	 * @method bool hasUserGroup()
	 * @method bool isUserGroupFilled()
	 * @method bool isUserGroupChanged()
	 * @method \Bitrix\Main\EO_UserGroup fillUserGroup()
	 * @method \Bitrix\Main\EO_User getResponsible()
	 * @method \Bitrix\Main\EO_User remindActualResponsible()
	 * @method \Bitrix\Main\EO_User requireResponsible()
	 * @method \Bitrix\Sale\Internals\EO_Order setResponsible(\Bitrix\Main\EO_User $object)
	 * @method \Bitrix\Sale\Internals\EO_Order resetResponsible()
	 * @method \Bitrix\Sale\Internals\EO_Order unsetResponsible()
	 * @method bool hasResponsible()
	 * @method bool isResponsibleFilled()
	 * @method bool isResponsibleChanged()
	 * @method \Bitrix\Main\EO_User fillResponsible()
	 * @method \Bitrix\Sale\Internals\EO_Basket getBasket()
	 * @method \Bitrix\Sale\Internals\EO_Basket remindActualBasket()
	 * @method \Bitrix\Sale\Internals\EO_Basket requireBasket()
	 * @method \Bitrix\Sale\Internals\EO_Order setBasket(\Bitrix\Sale\Internals\EO_Basket $object)
	 * @method \Bitrix\Sale\Internals\EO_Order resetBasket()
	 * @method \Bitrix\Sale\Internals\EO_Order unsetBasket()
	 * @method bool hasBasket()
	 * @method bool isBasketFilled()
	 * @method bool isBasketChanged()
	 * @method \Bitrix\Sale\Internals\EO_Basket fillBasket()
	 * @method \string getBasketPriceTotal()
	 * @method \string remindActualBasketPriceTotal()
	 * @method \string requireBasketPriceTotal()
	 * @method bool hasBasketPriceTotal()
	 * @method bool isBasketPriceTotalFilled()
	 * @method \Bitrix\Sale\Internals\EO_Order unsetBasketPriceTotal()
	 * @method \string fillBasketPriceTotal()
	 * @method \Bitrix\Sale\Internals\EO_Payment getPayment()
	 * @method \Bitrix\Sale\Internals\EO_Payment remindActualPayment()
	 * @method \Bitrix\Sale\Internals\EO_Payment requirePayment()
	 * @method \Bitrix\Sale\Internals\EO_Order setPayment(\Bitrix\Sale\Internals\EO_Payment $object)
	 * @method \Bitrix\Sale\Internals\EO_Order resetPayment()
	 * @method \Bitrix\Sale\Internals\EO_Order unsetPayment()
	 * @method bool hasPayment()
	 * @method bool isPaymentFilled()
	 * @method bool isPaymentChanged()
	 * @method \Bitrix\Sale\Internals\EO_Payment fillPayment()
	 * @method \Bitrix\Sale\Internals\EO_Shipment getShipment()
	 * @method \Bitrix\Sale\Internals\EO_Shipment remindActualShipment()
	 * @method \Bitrix\Sale\Internals\EO_Shipment requireShipment()
	 * @method \Bitrix\Sale\Internals\EO_Order setShipment(\Bitrix\Sale\Internals\EO_Shipment $object)
	 * @method \Bitrix\Sale\Internals\EO_Order resetShipment()
	 * @method \Bitrix\Sale\Internals\EO_Order unsetShipment()
	 * @method bool hasShipment()
	 * @method bool isShipmentFilled()
	 * @method bool isShipmentChanged()
	 * @method \Bitrix\Sale\Internals\EO_Shipment fillShipment()
	 * @method \Bitrix\Sale\Internals\EO_OrderPropsValue getProperty()
	 * @method \Bitrix\Sale\Internals\EO_OrderPropsValue remindActualProperty()
	 * @method \Bitrix\Sale\Internals\EO_OrderPropsValue requireProperty()
	 * @method \Bitrix\Sale\Internals\EO_Order setProperty(\Bitrix\Sale\Internals\EO_OrderPropsValue $object)
	 * @method \Bitrix\Sale\Internals\EO_Order resetProperty()
	 * @method \Bitrix\Sale\Internals\EO_Order unsetProperty()
	 * @method bool hasProperty()
	 * @method bool isPropertyFilled()
	 * @method bool isPropertyChanged()
	 * @method \Bitrix\Sale\Internals\EO_OrderPropsValue fillProperty()
	 * @method \boolean getRecountFlag()
	 * @method \Bitrix\Sale\Internals\EO_Order setRecountFlag(\boolean|\Bitrix\Main\DB\SqlExpression $recountFlag)
	 * @method bool hasRecountFlag()
	 * @method bool isRecountFlagFilled()
	 * @method bool isRecountFlagChanged()
	 * @method \boolean remindActualRecountFlag()
	 * @method \boolean requireRecountFlag()
	 * @method \Bitrix\Sale\Internals\EO_Order resetRecountFlag()
	 * @method \Bitrix\Sale\Internals\EO_Order unsetRecountFlag()
	 * @method \boolean fillRecountFlag()
	 * @method \int getAffiliateId()
	 * @method \Bitrix\Sale\Internals\EO_Order setAffiliateId(\int|\Bitrix\Main\DB\SqlExpression $affiliateId)
	 * @method bool hasAffiliateId()
	 * @method bool isAffiliateIdFilled()
	 * @method bool isAffiliateIdChanged()
	 * @method \int remindActualAffiliateId()
	 * @method \int requireAffiliateId()
	 * @method \Bitrix\Sale\Internals\EO_Order resetAffiliateId()
	 * @method \Bitrix\Sale\Internals\EO_Order unsetAffiliateId()
	 * @method \int fillAffiliateId()
	 * @method \string getDeliveryDocNum()
	 * @method \Bitrix\Sale\Internals\EO_Order setDeliveryDocNum(\string|\Bitrix\Main\DB\SqlExpression $deliveryDocNum)
	 * @method bool hasDeliveryDocNum()
	 * @method bool isDeliveryDocNumFilled()
	 * @method bool isDeliveryDocNumChanged()
	 * @method \string remindActualDeliveryDocNum()
	 * @method \string requireDeliveryDocNum()
	 * @method \Bitrix\Sale\Internals\EO_Order resetDeliveryDocNum()
	 * @method \Bitrix\Sale\Internals\EO_Order unsetDeliveryDocNum()
	 * @method \string fillDeliveryDocNum()
	 * @method \Bitrix\Main\Type\DateTime getDeliveryDocDate()
	 * @method \Bitrix\Sale\Internals\EO_Order setDeliveryDocDate(\Bitrix\Main\Type\DateTime|\Bitrix\Main\DB\SqlExpression $deliveryDocDate)
	 * @method bool hasDeliveryDocDate()
	 * @method bool isDeliveryDocDateFilled()
	 * @method bool isDeliveryDocDateChanged()
	 * @method \Bitrix\Main\Type\DateTime remindActualDeliveryDocDate()
	 * @method \Bitrix\Main\Type\DateTime requireDeliveryDocDate()
	 * @method \Bitrix\Sale\Internals\EO_Order resetDeliveryDocDate()
	 * @method \Bitrix\Sale\Internals\EO_Order unsetDeliveryDocDate()
	 * @method \Bitrix\Main\Type\DateTime fillDeliveryDocDate()
	 * @method \boolean getUpdated1c()
	 * @method \Bitrix\Sale\Internals\EO_Order setUpdated1c(\boolean|\Bitrix\Main\DB\SqlExpression $updated1c)
	 * @method bool hasUpdated1c()
	 * @method bool isUpdated1cFilled()
	 * @method bool isUpdated1cChanged()
	 * @method \boolean remindActualUpdated1c()
	 * @method \boolean requireUpdated1c()
	 * @method \Bitrix\Sale\Internals\EO_Order resetUpdated1c()
	 * @method \Bitrix\Sale\Internals\EO_Order unsetUpdated1c()
	 * @method \boolean fillUpdated1c()
	 * @method \string getOrderTopic()
	 * @method \Bitrix\Sale\Internals\EO_Order setOrderTopic(\string|\Bitrix\Main\DB\SqlExpression $orderTopic)
	 * @method bool hasOrderTopic()
	 * @method bool isOrderTopicFilled()
	 * @method bool isOrderTopicChanged()
	 * @method \string remindActualOrderTopic()
	 * @method \string requireOrderTopic()
	 * @method \Bitrix\Sale\Internals\EO_Order resetOrderTopic()
	 * @method \Bitrix\Sale\Internals\EO_Order unsetOrderTopic()
	 * @method \string fillOrderTopic()
	 * @method \string getXmlId()
	 * @method \Bitrix\Sale\Internals\EO_Order setXmlId(\string|\Bitrix\Main\DB\SqlExpression $xmlId)
	 * @method bool hasXmlId()
	 * @method bool isXmlIdFilled()
	 * @method bool isXmlIdChanged()
	 * @method \string remindActualXmlId()
	 * @method \string requireXmlId()
	 * @method \Bitrix\Sale\Internals\EO_Order resetXmlId()
	 * @method \Bitrix\Sale\Internals\EO_Order unsetXmlId()
	 * @method \string fillXmlId()
	 * @method \string getId1c()
	 * @method \Bitrix\Sale\Internals\EO_Order setId1c(\string|\Bitrix\Main\DB\SqlExpression $id1c)
	 * @method bool hasId1c()
	 * @method bool isId1cFilled()
	 * @method bool isId1cChanged()
	 * @method \string remindActualId1c()
	 * @method \string requireId1c()
	 * @method \Bitrix\Sale\Internals\EO_Order resetId1c()
	 * @method \Bitrix\Sale\Internals\EO_Order unsetId1c()
	 * @method \string fillId1c()
	 * @method \string getVersion1c()
	 * @method \Bitrix\Sale\Internals\EO_Order setVersion1c(\string|\Bitrix\Main\DB\SqlExpression $version1c)
	 * @method bool hasVersion1c()
	 * @method bool isVersion1cFilled()
	 * @method bool isVersion1cChanged()
	 * @method \string remindActualVersion1c()
	 * @method \string requireVersion1c()
	 * @method \Bitrix\Sale\Internals\EO_Order resetVersion1c()
	 * @method \Bitrix\Sale\Internals\EO_Order unsetVersion1c()
	 * @method \string fillVersion1c()
	 * @method \int getVersion()
	 * @method \Bitrix\Sale\Internals\EO_Order setVersion(\int|\Bitrix\Main\DB\SqlExpression $version)
	 * @method bool hasVersion()
	 * @method bool isVersionFilled()
	 * @method bool isVersionChanged()
	 * @method \int remindActualVersion()
	 * @method \int requireVersion()
	 * @method \Bitrix\Sale\Internals\EO_Order resetVersion()
	 * @method \Bitrix\Sale\Internals\EO_Order unsetVersion()
	 * @method \int fillVersion()
	 * @method \boolean getExternalOrder()
	 * @method \Bitrix\Sale\Internals\EO_Order setExternalOrder(\boolean|\Bitrix\Main\DB\SqlExpression $externalOrder)
	 * @method bool hasExternalOrder()
	 * @method bool isExternalOrderFilled()
	 * @method bool isExternalOrderChanged()
	 * @method \boolean remindActualExternalOrder()
	 * @method \boolean requireExternalOrder()
	 * @method \Bitrix\Sale\Internals\EO_Order resetExternalOrder()
	 * @method \Bitrix\Sale\Internals\EO_Order unsetExternalOrder()
	 * @method \boolean fillExternalOrder()
	 * @method \int getStoreId()
	 * @method \Bitrix\Sale\Internals\EO_Order setStoreId(\int|\Bitrix\Main\DB\SqlExpression $storeId)
	 * @method bool hasStoreId()
	 * @method bool isStoreIdFilled()
	 * @method bool isStoreIdChanged()
	 * @method \int remindActualStoreId()
	 * @method \int requireStoreId()
	 * @method \Bitrix\Sale\Internals\EO_Order resetStoreId()
	 * @method \Bitrix\Sale\Internals\EO_Order unsetStoreId()
	 * @method \int fillStoreId()
	 * @method \boolean getCanceled()
	 * @method \Bitrix\Sale\Internals\EO_Order setCanceled(\boolean|\Bitrix\Main\DB\SqlExpression $canceled)
	 * @method bool hasCanceled()
	 * @method bool isCanceledFilled()
	 * @method bool isCanceledChanged()
	 * @method \boolean remindActualCanceled()
	 * @method \boolean requireCanceled()
	 * @method \Bitrix\Sale\Internals\EO_Order resetCanceled()
	 * @method \Bitrix\Sale\Internals\EO_Order unsetCanceled()
	 * @method \boolean fillCanceled()
	 * @method \int getEmpCanceledId()
	 * @method \Bitrix\Sale\Internals\EO_Order setEmpCanceledId(\int|\Bitrix\Main\DB\SqlExpression $empCanceledId)
	 * @method bool hasEmpCanceledId()
	 * @method bool isEmpCanceledIdFilled()
	 * @method bool isEmpCanceledIdChanged()
	 * @method \int remindActualEmpCanceledId()
	 * @method \int requireEmpCanceledId()
	 * @method \Bitrix\Sale\Internals\EO_Order resetEmpCanceledId()
	 * @method \Bitrix\Sale\Internals\EO_Order unsetEmpCanceledId()
	 * @method \int fillEmpCanceledId()
	 * @method \Bitrix\Main\EO_User getEmpCanceledBy()
	 * @method \Bitrix\Main\EO_User remindActualEmpCanceledBy()
	 * @method \Bitrix\Main\EO_User requireEmpCanceledBy()
	 * @method \Bitrix\Sale\Internals\EO_Order setEmpCanceledBy(\Bitrix\Main\EO_User $object)
	 * @method \Bitrix\Sale\Internals\EO_Order resetEmpCanceledBy()
	 * @method \Bitrix\Sale\Internals\EO_Order unsetEmpCanceledBy()
	 * @method bool hasEmpCanceledBy()
	 * @method bool isEmpCanceledByFilled()
	 * @method bool isEmpCanceledByChanged()
	 * @method \Bitrix\Main\EO_User fillEmpCanceledBy()
	 * @method \Bitrix\Main\Type\DateTime getDateCanceled()
	 * @method \Bitrix\Sale\Internals\EO_Order setDateCanceled(\Bitrix\Main\Type\DateTime|\Bitrix\Main\DB\SqlExpression $dateCanceled)
	 * @method bool hasDateCanceled()
	 * @method bool isDateCanceledFilled()
	 * @method bool isDateCanceledChanged()
	 * @method \Bitrix\Main\Type\DateTime remindActualDateCanceled()
	 * @method \Bitrix\Main\Type\DateTime requireDateCanceled()
	 * @method \Bitrix\Sale\Internals\EO_Order resetDateCanceled()
	 * @method \Bitrix\Sale\Internals\EO_Order unsetDateCanceled()
	 * @method \Bitrix\Main\Type\DateTime fillDateCanceled()
	 * @method \string getDateCanceledShort()
	 * @method \string remindActualDateCanceledShort()
	 * @method \string requireDateCanceledShort()
	 * @method bool hasDateCanceledShort()
	 * @method bool isDateCanceledShortFilled()
	 * @method \Bitrix\Sale\Internals\EO_Order unsetDateCanceledShort()
	 * @method \string fillDateCanceledShort()
	 * @method \string getReasonCanceled()
	 * @method \Bitrix\Sale\Internals\EO_Order setReasonCanceled(\string|\Bitrix\Main\DB\SqlExpression $reasonCanceled)
	 * @method bool hasReasonCanceled()
	 * @method bool isReasonCanceledFilled()
	 * @method bool isReasonCanceledChanged()
	 * @method \string remindActualReasonCanceled()
	 * @method \string requireReasonCanceled()
	 * @method \Bitrix\Sale\Internals\EO_Order resetReasonCanceled()
	 * @method \Bitrix\Sale\Internals\EO_Order unsetReasonCanceled()
	 * @method \string fillReasonCanceled()
	 * @method \string getBxUserId()
	 * @method \Bitrix\Sale\Internals\EO_Order setBxUserId(\string|\Bitrix\Main\DB\SqlExpression $bxUserId)
	 * @method bool hasBxUserId()
	 * @method bool isBxUserIdFilled()
	 * @method bool isBxUserIdChanged()
	 * @method \string remindActualBxUserId()
	 * @method \string requireBxUserId()
	 * @method \Bitrix\Sale\Internals\EO_Order resetBxUserId()
	 * @method \Bitrix\Sale\Internals\EO_Order unsetBxUserId()
	 * @method \string fillBxUserId()
	 * @method \string getSearchContent()
	 * @method \Bitrix\Sale\Internals\EO_Order setSearchContent(\string|\Bitrix\Main\DB\SqlExpression $searchContent)
	 * @method bool hasSearchContent()
	 * @method bool isSearchContentFilled()
	 * @method bool isSearchContentChanged()
	 * @method \string remindActualSearchContent()
	 * @method \string requireSearchContent()
	 * @method \Bitrix\Sale\Internals\EO_Order resetSearchContent()
	 * @method \Bitrix\Sale\Internals\EO_Order unsetSearchContent()
	 * @method \string fillSearchContent()
	 * @method \boolean getRunning()
	 * @method \Bitrix\Sale\Internals\EO_Order setRunning(\boolean|\Bitrix\Main\DB\SqlExpression $running)
	 * @method bool hasRunning()
	 * @method bool isRunningFilled()
	 * @method bool isRunningChanged()
	 * @method \boolean remindActualRunning()
	 * @method \boolean requireRunning()
	 * @method \Bitrix\Sale\Internals\EO_Order resetRunning()
	 * @method \Bitrix\Sale\Internals\EO_Order unsetRunning()
	 * @method \boolean fillRunning()
	 * @method \Bitrix\Sale\Internals\EO_OrderCoupons getOrderCoupons()
	 * @method \Bitrix\Sale\Internals\EO_OrderCoupons remindActualOrderCoupons()
	 * @method \Bitrix\Sale\Internals\EO_OrderCoupons requireOrderCoupons()
	 * @method \Bitrix\Sale\Internals\EO_Order setOrderCoupons(\Bitrix\Sale\Internals\EO_OrderCoupons $object)
	 * @method \Bitrix\Sale\Internals\EO_Order resetOrderCoupons()
	 * @method \Bitrix\Sale\Internals\EO_Order unsetOrderCoupons()
	 * @method bool hasOrderCoupons()
	 * @method bool isOrderCouponsFilled()
	 * @method bool isOrderCouponsChanged()
	 * @method \Bitrix\Sale\Internals\EO_OrderCoupons fillOrderCoupons()
	 * @method \Bitrix\Sale\Internals\EO_OrderDiscountData getOrderDiscountData()
	 * @method \Bitrix\Sale\Internals\EO_OrderDiscountData remindActualOrderDiscountData()
	 * @method \Bitrix\Sale\Internals\EO_OrderDiscountData requireOrderDiscountData()
	 * @method \Bitrix\Sale\Internals\EO_Order setOrderDiscountData(\Bitrix\Sale\Internals\EO_OrderDiscountData $object)
	 * @method \Bitrix\Sale\Internals\EO_Order resetOrderDiscountData()
	 * @method \Bitrix\Sale\Internals\EO_Order unsetOrderDiscountData()
	 * @method bool hasOrderDiscountData()
	 * @method bool isOrderDiscountDataFilled()
	 * @method bool isOrderDiscountDataChanged()
	 * @method \Bitrix\Sale\Internals\EO_OrderDiscountData fillOrderDiscountData()
	 * @method \Bitrix\Sale\Internals\EO_OrderRules getOrderDiscountRules()
	 * @method \Bitrix\Sale\Internals\EO_OrderRules remindActualOrderDiscountRules()
	 * @method \Bitrix\Sale\Internals\EO_OrderRules requireOrderDiscountRules()
	 * @method \Bitrix\Sale\Internals\EO_Order setOrderDiscountRules(\Bitrix\Sale\Internals\EO_OrderRules $object)
	 * @method \Bitrix\Sale\Internals\EO_Order resetOrderDiscountRules()
	 * @method \Bitrix\Sale\Internals\EO_Order unsetOrderDiscountRules()
	 * @method bool hasOrderDiscountRules()
	 * @method bool isOrderDiscountRulesFilled()
	 * @method bool isOrderDiscountRulesChanged()
	 * @method \Bitrix\Sale\Internals\EO_OrderRules fillOrderDiscountRules()
	 * @method \string getByRecommendation()
	 * @method \string remindActualByRecommendation()
	 * @method \string requireByRecommendation()
	 * @method bool hasByRecommendation()
	 * @method bool isByRecommendationFilled()
	 * @method \Bitrix\Sale\Internals\EO_Order unsetByRecommendation()
	 * @method \string fillByRecommendation()
	 * @method \Bitrix\Sale\TradingPlatform\EO_Order getTradingPlatform()
	 * @method \Bitrix\Sale\TradingPlatform\EO_Order remindActualTradingPlatform()
	 * @method \Bitrix\Sale\TradingPlatform\EO_Order requireTradingPlatform()
	 * @method \Bitrix\Sale\Internals\EO_Order setTradingPlatform(\Bitrix\Sale\TradingPlatform\EO_Order $object)
	 * @method \Bitrix\Sale\Internals\EO_Order resetTradingPlatform()
	 * @method \Bitrix\Sale\Internals\EO_Order unsetTradingPlatform()
	 * @method bool hasTradingPlatform()
	 * @method bool isTradingPlatformFilled()
	 * @method bool isTradingPlatformChanged()
	 * @method \Bitrix\Sale\TradingPlatform\EO_Order fillTradingPlatform()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Sale\Internals\EO_Order set($fieldName, $value)
	 * @method \Bitrix\Sale\Internals\EO_Order reset($fieldName)
	 * @method \Bitrix\Sale\Internals\EO_Order unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Sale\Internals\EO_Order wakeUp($data)
	 */
	class EO_Order {
		/* @var \Bitrix\Sale\Internals\OrderTable */
		static public $dataClass = '\Bitrix\Sale\Internals\OrderTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Sale\Internals {
	/**
	 * EO_Order_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getIdList()
	 * @method \string[] getLidList()
	 * @method \string[] fillLid()
	 * @method \string[] getAccountNumberList()
	 * @method \string[] fillAccountNumber()
	 * @method \string[] getTrackingNumberList()
	 * @method \string[] fillTrackingNumber()
	 * @method \int[] getPaySystemIdList()
	 * @method \int[] fillPaySystemId()
	 * @method \int[] getDeliveryIdList()
	 * @method \int[] fillDeliveryId()
	 * @method \Bitrix\Main\Type\DateTime[] getDateInsertList()
	 * @method \Bitrix\Main\Type\DateTime[] fillDateInsert()
	 * @method \Bitrix\Main\Type\DateTime[] getDateInsertShortList()
	 * @method \Bitrix\Main\Type\DateTime[] fillDateInsertShort()
	 * @method \Bitrix\Main\Type\DateTime[] getDateInsertFormatList()
	 * @method \Bitrix\Main\Type\DateTime[] fillDateInsertFormat()
	 * @method \Bitrix\Main\Type\DateTime[] getDateUpdateList()
	 * @method \Bitrix\Main\Type\DateTime[] fillDateUpdate()
	 * @method \Bitrix\Main\Type\DateTime[] getDateUpdateShortList()
	 * @method \Bitrix\Main\Type\DateTime[] fillDateUpdateShort()
	 * @method \string[] getProductsQuantList()
	 * @method \string[] fillProductsQuant()
	 * @method \string[] getPersonTypeIdList()
	 * @method \string[] fillPersonTypeId()
	 * @method \int[] getUserIdList()
	 * @method \int[] fillUserId()
	 * @method \Bitrix\Main\EO_User[] getUserList()
	 * @method \Bitrix\Sale\Internals\EO_Order_Collection getUserCollection()
	 * @method \Bitrix\Main\EO_User_Collection fillUser()
	 * @method \boolean[] getPayedList()
	 * @method \boolean[] fillPayed()
	 * @method \boolean[] getIsSyncB24List()
	 * @method \boolean[] fillIsSyncB24()
	 * @method \Bitrix\Main\Type\DateTime[] getDatePayedList()
	 * @method \Bitrix\Main\Type\DateTime[] fillDatePayed()
	 * @method \int[] getEmpPayedIdList()
	 * @method \int[] fillEmpPayedId()
	 * @method \boolean[] getDeductedList()
	 * @method \boolean[] fillDeducted()
	 * @method \Bitrix\Main\Type\DateTime[] getDateDeductedList()
	 * @method \Bitrix\Main\Type\DateTime[] fillDateDeducted()
	 * @method \int[] getEmpDeductedIdList()
	 * @method \int[] fillEmpDeductedId()
	 * @method \string[] getReasonUndoDeductedList()
	 * @method \string[] fillReasonUndoDeducted()
	 * @method \string[] getStatusIdList()
	 * @method \string[] fillStatusId()
	 * @method \Bitrix\Sale\Internals\EO_StatusLang[] getStatusList()
	 * @method \Bitrix\Sale\Internals\EO_Order_Collection getStatusCollection()
	 * @method \Bitrix\Sale\Internals\EO_StatusLang_Collection fillStatus()
	 * @method \Bitrix\Main\Type\DateTime[] getDateStatusList()
	 * @method \Bitrix\Main\Type\DateTime[] fillDateStatus()
	 * @method \Bitrix\Main\Type\DateTime[] getDateStatusShortList()
	 * @method \Bitrix\Main\Type\DateTime[] fillDateStatusShort()
	 * @method \int[] getEmpStatusIdList()
	 * @method \int[] fillEmpStatusId()
	 * @method \Bitrix\Main\EO_User[] getEmpStatusByList()
	 * @method \Bitrix\Sale\Internals\EO_Order_Collection getEmpStatusByCollection()
	 * @method \Bitrix\Main\EO_User_Collection fillEmpStatusBy()
	 * @method \boolean[] getMarkedList()
	 * @method \boolean[] fillMarked()
	 * @method \Bitrix\Main\Type\DateTime[] getDateMarkedList()
	 * @method \Bitrix\Main\Type\DateTime[] fillDateMarked()
	 * @method \int[] getEmpMarkedIdList()
	 * @method \int[] fillEmpMarkedId()
	 * @method \Bitrix\Main\EO_User[] getEmpMarkedByList()
	 * @method \Bitrix\Sale\Internals\EO_Order_Collection getEmpMarkedByCollection()
	 * @method \Bitrix\Main\EO_User_Collection fillEmpMarkedBy()
	 * @method \string[] getReasonMarkedList()
	 * @method \string[] fillReasonMarked()
	 * @method \float[] getPriceDeliveryList()
	 * @method \float[] fillPriceDelivery()
	 * @method \boolean[] getAllowDeliveryList()
	 * @method \boolean[] fillAllowDelivery()
	 * @method \Bitrix\Main\Type\DateTime[] getDateAllowDeliveryList()
	 * @method \Bitrix\Main\Type\DateTime[] fillDateAllowDelivery()
	 * @method \int[] getEmpAllowDeliveryIdList()
	 * @method \int[] fillEmpAllowDeliveryId()
	 * @method \boolean[] getReservedList()
	 * @method \boolean[] fillReserved()
	 * @method \float[] getPriceList()
	 * @method \float[] fillPrice()
	 * @method \string[] getCurrencyList()
	 * @method \string[] fillCurrency()
	 * @method \float[] getDiscountValueList()
	 * @method \float[] fillDiscountValue()
	 * @method \string[] getDiscountAllList()
	 * @method \string[] fillDiscountAll()
	 * @method \float[] getTaxValueList()
	 * @method \float[] fillTaxValue()
	 * @method \float[] getSumPaidList()
	 * @method \float[] fillSumPaid()
	 * @method \string[] getSumPaidForrepList()
	 * @method \string[] fillSumPaidForrep()
	 * @method \string[] getUserDescriptionList()
	 * @method \string[] fillUserDescription()
	 * @method \string[] getPayVoucherNumList()
	 * @method \string[] fillPayVoucherNum()
	 * @method \Bitrix\Main\Type\Date[] getPayVoucherDateList()
	 * @method \Bitrix\Main\Type\Date[] fillPayVoucherDate()
	 * @method \string[] getAdditionalInfoList()
	 * @method \string[] fillAdditionalInfo()
	 * @method \string[] getCommentsList()
	 * @method \string[] fillComments()
	 * @method \int[] getCompanyIdList()
	 * @method \int[] fillCompanyId()
	 * @method \int[] getCreatedByList()
	 * @method \int[] fillCreatedBy()
	 * @method \Bitrix\Main\EO_User[] getCreatedUserList()
	 * @method \Bitrix\Sale\Internals\EO_Order_Collection getCreatedUserCollection()
	 * @method \Bitrix\Main\EO_User_Collection fillCreatedUser()
	 * @method \int[] getResponsibleIdList()
	 * @method \int[] fillResponsibleId()
	 * @method \Bitrix\Main\EO_User[] getResponsibleByList()
	 * @method \Bitrix\Sale\Internals\EO_Order_Collection getResponsibleByCollection()
	 * @method \Bitrix\Main\EO_User_Collection fillResponsibleBy()
	 * @method \string[] getStatGidList()
	 * @method \string[] fillStatGid()
	 * @method \Bitrix\Main\Type\Date[] getDatePayBeforeList()
	 * @method \Bitrix\Main\Type\Date[] fillDatePayBefore()
	 * @method \Bitrix\Main\Type\Date[] getDateBillList()
	 * @method \Bitrix\Main\Type\Date[] fillDateBill()
	 * @method \boolean[] getIsRecurringList()
	 * @method \boolean[] fillIsRecurring()
	 * @method \int[] getRecurringIdList()
	 * @method \int[] fillRecurringId()
	 * @method \int[] getLockedByList()
	 * @method \int[] fillLockedBy()
	 * @method \Bitrix\Main\EO_User[] getLockUserList()
	 * @method \Bitrix\Sale\Internals\EO_Order_Collection getLockUserCollection()
	 * @method \Bitrix\Main\EO_User_Collection fillLockUser()
	 * @method \Bitrix\Main\Type\DateTime[] getDateLockList()
	 * @method \Bitrix\Main\Type\DateTime[] fillDateLock()
	 * @method \string[] getLockUserNameList()
	 * @method \string[] fillLockUserName()
	 * @method \string[] getLockStatusList()
	 * @method \string[] fillLockStatus()
	 * @method \Bitrix\Main\EO_UserGroup[] getUserGroupList()
	 * @method \Bitrix\Sale\Internals\EO_Order_Collection getUserGroupCollection()
	 * @method \Bitrix\Main\EO_UserGroup_Collection fillUserGroup()
	 * @method \Bitrix\Main\EO_User[] getResponsibleList()
	 * @method \Bitrix\Sale\Internals\EO_Order_Collection getResponsibleCollection()
	 * @method \Bitrix\Main\EO_User_Collection fillResponsible()
	 * @method \Bitrix\Sale\Internals\EO_Basket[] getBasketList()
	 * @method \Bitrix\Sale\Internals\EO_Order_Collection getBasketCollection()
	 * @method \Bitrix\Sale\Internals\EO_Basket_Collection fillBasket()
	 * @method \string[] getBasketPriceTotalList()
	 * @method \string[] fillBasketPriceTotal()
	 * @method \Bitrix\Sale\Internals\EO_Payment[] getPaymentList()
	 * @method \Bitrix\Sale\Internals\EO_Order_Collection getPaymentCollection()
	 * @method \Bitrix\Sale\Internals\EO_Payment_Collection fillPayment()
	 * @method \Bitrix\Sale\Internals\EO_Shipment[] getShipmentList()
	 * @method \Bitrix\Sale\Internals\EO_Order_Collection getShipmentCollection()
	 * @method \Bitrix\Sale\Internals\EO_Shipment_Collection fillShipment()
	 * @method \Bitrix\Sale\Internals\EO_OrderPropsValue[] getPropertyList()
	 * @method \Bitrix\Sale\Internals\EO_Order_Collection getPropertyCollection()
	 * @method \Bitrix\Sale\Internals\EO_OrderPropsValue_Collection fillProperty()
	 * @method \boolean[] getRecountFlagList()
	 * @method \boolean[] fillRecountFlag()
	 * @method \int[] getAffiliateIdList()
	 * @method \int[] fillAffiliateId()
	 * @method \string[] getDeliveryDocNumList()
	 * @method \string[] fillDeliveryDocNum()
	 * @method \Bitrix\Main\Type\DateTime[] getDeliveryDocDateList()
	 * @method \Bitrix\Main\Type\DateTime[] fillDeliveryDocDate()
	 * @method \boolean[] getUpdated1cList()
	 * @method \boolean[] fillUpdated1c()
	 * @method \string[] getOrderTopicList()
	 * @method \string[] fillOrderTopic()
	 * @method \string[] getXmlIdList()
	 * @method \string[] fillXmlId()
	 * @method \string[] getId1cList()
	 * @method \string[] fillId1c()
	 * @method \string[] getVersion1cList()
	 * @method \string[] fillVersion1c()
	 * @method \int[] getVersionList()
	 * @method \int[] fillVersion()
	 * @method \boolean[] getExternalOrderList()
	 * @method \boolean[] fillExternalOrder()
	 * @method \int[] getStoreIdList()
	 * @method \int[] fillStoreId()
	 * @method \boolean[] getCanceledList()
	 * @method \boolean[] fillCanceled()
	 * @method \int[] getEmpCanceledIdList()
	 * @method \int[] fillEmpCanceledId()
	 * @method \Bitrix\Main\EO_User[] getEmpCanceledByList()
	 * @method \Bitrix\Sale\Internals\EO_Order_Collection getEmpCanceledByCollection()
	 * @method \Bitrix\Main\EO_User_Collection fillEmpCanceledBy()
	 * @method \Bitrix\Main\Type\DateTime[] getDateCanceledList()
	 * @method \Bitrix\Main\Type\DateTime[] fillDateCanceled()
	 * @method \string[] getDateCanceledShortList()
	 * @method \string[] fillDateCanceledShort()
	 * @method \string[] getReasonCanceledList()
	 * @method \string[] fillReasonCanceled()
	 * @method \string[] getBxUserIdList()
	 * @method \string[] fillBxUserId()
	 * @method \string[] getSearchContentList()
	 * @method \string[] fillSearchContent()
	 * @method \boolean[] getRunningList()
	 * @method \boolean[] fillRunning()
	 * @method \Bitrix\Sale\Internals\EO_OrderCoupons[] getOrderCouponsList()
	 * @method \Bitrix\Sale\Internals\EO_Order_Collection getOrderCouponsCollection()
	 * @method \Bitrix\Sale\Internals\EO_OrderCoupons_Collection fillOrderCoupons()
	 * @method \Bitrix\Sale\Internals\EO_OrderDiscountData[] getOrderDiscountDataList()
	 * @method \Bitrix\Sale\Internals\EO_Order_Collection getOrderDiscountDataCollection()
	 * @method \Bitrix\Sale\Internals\EO_OrderDiscountData_Collection fillOrderDiscountData()
	 * @method \Bitrix\Sale\Internals\EO_OrderRules[] getOrderDiscountRulesList()
	 * @method \Bitrix\Sale\Internals\EO_Order_Collection getOrderDiscountRulesCollection()
	 * @method \Bitrix\Sale\Internals\EO_OrderRules_Collection fillOrderDiscountRules()
	 * @method \string[] getByRecommendationList()
	 * @method \string[] fillByRecommendation()
	 * @method \Bitrix\Sale\TradingPlatform\EO_Order[] getTradingPlatformList()
	 * @method \Bitrix\Sale\Internals\EO_Order_Collection getTradingPlatformCollection()
	 * @method \Bitrix\Sale\TradingPlatform\EO_Order_Collection fillTradingPlatform()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Sale\Internals\EO_Order $object)
	 * @method bool has(\Bitrix\Sale\Internals\EO_Order $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Sale\Internals\EO_Order getByPrimary($primary)
	 * @method \Bitrix\Sale\Internals\EO_Order[] getAll()
	 * @method bool remove(\Bitrix\Sale\Internals\EO_Order $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Sale\Internals\EO_Order_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Sale\Internals\EO_Order current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 * @method EO_Order_Collection merge(?EO_Order_Collection $collection)
	 * @method bool isEmpty()
	 */
	class EO_Order_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Sale\Internals\OrderTable */
		static public $dataClass = '\Bitrix\Sale\Internals\OrderTable';
	}
}
namespace Bitrix\Sale\Internals {
	/**
	 * Common methods:
	 * ---------------
	 *
	 * @method EO_Order_Result exec()
	 * @method \Bitrix\Sale\Internals\EO_Order fetchObject()
	 * @method \Bitrix\Sale\Internals\EO_Order_Collection fetchCollection()
	 *
	 * Custom methods:
	 * ---------------
	 *
	 */
	class EO_Order_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Sale\Internals\EO_Order fetchObject()
	 * @method \Bitrix\Sale\Internals\EO_Order_Collection fetchCollection()
	 */
	class EO_Order_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Sale\Internals\EO_Order createObject($setDefaultValues = true)
	 * @method \Bitrix\Sale\Internals\EO_Order_Collection createCollection()
	 * @method \Bitrix\Sale\Internals\EO_Order wakeUpObject($row)
	 * @method \Bitrix\Sale\Internals\EO_Order_Collection wakeUpCollection($rows)
	 */
	class EO_Order_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Sale\Internals\FuserTable:sale\lib\internals\fuser.php */
namespace Bitrix\Sale\Internals {
	/**
	 * EO_Fuser
	 * @see \Bitrix\Sale\Internals\FuserTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getId()
	 * @method \Bitrix\Sale\Internals\EO_Fuser setId(\int|\Bitrix\Main\DB\SqlExpression $id)
	 * @method bool hasId()
	 * @method bool isIdFilled()
	 * @method bool isIdChanged()
	 * @method \Bitrix\Main\Type\DateTime getDateInsert()
	 * @method \Bitrix\Sale\Internals\EO_Fuser setDateInsert(\Bitrix\Main\Type\DateTime|\Bitrix\Main\DB\SqlExpression $dateInsert)
	 * @method bool hasDateInsert()
	 * @method bool isDateInsertFilled()
	 * @method bool isDateInsertChanged()
	 * @method \Bitrix\Main\Type\DateTime remindActualDateInsert()
	 * @method \Bitrix\Main\Type\DateTime requireDateInsert()
	 * @method \Bitrix\Sale\Internals\EO_Fuser resetDateInsert()
	 * @method \Bitrix\Sale\Internals\EO_Fuser unsetDateInsert()
	 * @method \Bitrix\Main\Type\DateTime fillDateInsert()
	 * @method \Bitrix\Main\Type\DateTime getDateIns()
	 * @method \Bitrix\Main\Type\DateTime remindActualDateIns()
	 * @method \Bitrix\Main\Type\DateTime requireDateIns()
	 * @method bool hasDateIns()
	 * @method bool isDateInsFilled()
	 * @method \Bitrix\Sale\Internals\EO_Fuser unsetDateIns()
	 * @method \Bitrix\Main\Type\DateTime fillDateIns()
	 * @method \Bitrix\Main\Type\DateTime getDateUpdate()
	 * @method \Bitrix\Sale\Internals\EO_Fuser setDateUpdate(\Bitrix\Main\Type\DateTime|\Bitrix\Main\DB\SqlExpression $dateUpdate)
	 * @method bool hasDateUpdate()
	 * @method bool isDateUpdateFilled()
	 * @method bool isDateUpdateChanged()
	 * @method \Bitrix\Main\Type\DateTime remindActualDateUpdate()
	 * @method \Bitrix\Main\Type\DateTime requireDateUpdate()
	 * @method \Bitrix\Sale\Internals\EO_Fuser resetDateUpdate()
	 * @method \Bitrix\Sale\Internals\EO_Fuser unsetDateUpdate()
	 * @method \Bitrix\Main\Type\DateTime fillDateUpdate()
	 * @method \Bitrix\Main\Type\DateTime getDateUpd()
	 * @method \Bitrix\Main\Type\DateTime remindActualDateUpd()
	 * @method \Bitrix\Main\Type\DateTime requireDateUpd()
	 * @method bool hasDateUpd()
	 * @method bool isDateUpdFilled()
	 * @method \Bitrix\Sale\Internals\EO_Fuser unsetDateUpd()
	 * @method \Bitrix\Main\Type\DateTime fillDateUpd()
	 * @method \int getUserId()
	 * @method \Bitrix\Sale\Internals\EO_Fuser setUserId(\int|\Bitrix\Main\DB\SqlExpression $userId)
	 * @method bool hasUserId()
	 * @method bool isUserIdFilled()
	 * @method bool isUserIdChanged()
	 * @method \int remindActualUserId()
	 * @method \int requireUserId()
	 * @method \Bitrix\Sale\Internals\EO_Fuser resetUserId()
	 * @method \Bitrix\Sale\Internals\EO_Fuser unsetUserId()
	 * @method \int fillUserId()
	 * @method \Bitrix\Main\EO_User getUser()
	 * @method \Bitrix\Main\EO_User remindActualUser()
	 * @method \Bitrix\Main\EO_User requireUser()
	 * @method \Bitrix\Sale\Internals\EO_Fuser setUser(\Bitrix\Main\EO_User $object)
	 * @method \Bitrix\Sale\Internals\EO_Fuser resetUser()
	 * @method \Bitrix\Sale\Internals\EO_Fuser unsetUser()
	 * @method bool hasUser()
	 * @method bool isUserFilled()
	 * @method bool isUserChanged()
	 * @method \Bitrix\Main\EO_User fillUser()
	 * @method \string getCode()
	 * @method \Bitrix\Sale\Internals\EO_Fuser setCode(\string|\Bitrix\Main\DB\SqlExpression $code)
	 * @method bool hasCode()
	 * @method bool isCodeFilled()
	 * @method bool isCodeChanged()
	 * @method \string remindActualCode()
	 * @method \string requireCode()
	 * @method \Bitrix\Sale\Internals\EO_Fuser resetCode()
	 * @method \Bitrix\Sale\Internals\EO_Fuser unsetCode()
	 * @method \string fillCode()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Sale\Internals\EO_Fuser set($fieldName, $value)
	 * @method \Bitrix\Sale\Internals\EO_Fuser reset($fieldName)
	 * @method \Bitrix\Sale\Internals\EO_Fuser unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Sale\Internals\EO_Fuser wakeUp($data)
	 */
	class EO_Fuser {
		/* @var \Bitrix\Sale\Internals\FuserTable */
		static public $dataClass = '\Bitrix\Sale\Internals\FuserTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Sale\Internals {
	/**
	 * EO_Fuser_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getIdList()
	 * @method \Bitrix\Main\Type\DateTime[] getDateInsertList()
	 * @method \Bitrix\Main\Type\DateTime[] fillDateInsert()
	 * @method \Bitrix\Main\Type\DateTime[] getDateInsList()
	 * @method \Bitrix\Main\Type\DateTime[] fillDateIns()
	 * @method \Bitrix\Main\Type\DateTime[] getDateUpdateList()
	 * @method \Bitrix\Main\Type\DateTime[] fillDateUpdate()
	 * @method \Bitrix\Main\Type\DateTime[] getDateUpdList()
	 * @method \Bitrix\Main\Type\DateTime[] fillDateUpd()
	 * @method \int[] getUserIdList()
	 * @method \int[] fillUserId()
	 * @method \Bitrix\Main\EO_User[] getUserList()
	 * @method \Bitrix\Sale\Internals\EO_Fuser_Collection getUserCollection()
	 * @method \Bitrix\Main\EO_User_Collection fillUser()
	 * @method \string[] getCodeList()
	 * @method \string[] fillCode()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Sale\Internals\EO_Fuser $object)
	 * @method bool has(\Bitrix\Sale\Internals\EO_Fuser $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Sale\Internals\EO_Fuser getByPrimary($primary)
	 * @method \Bitrix\Sale\Internals\EO_Fuser[] getAll()
	 * @method bool remove(\Bitrix\Sale\Internals\EO_Fuser $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Sale\Internals\EO_Fuser_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Sale\Internals\EO_Fuser current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 * @method EO_Fuser_Collection merge(?EO_Fuser_Collection $collection)
	 * @method bool isEmpty()
	 */
	class EO_Fuser_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Sale\Internals\FuserTable */
		static public $dataClass = '\Bitrix\Sale\Internals\FuserTable';
	}
}
namespace Bitrix\Sale\Internals {
	/**
	 * Common methods:
	 * ---------------
	 *
	 * @method EO_Fuser_Result exec()
	 * @method \Bitrix\Sale\Internals\EO_Fuser fetchObject()
	 * @method \Bitrix\Sale\Internals\EO_Fuser_Collection fetchCollection()
	 *
	 * Custom methods:
	 * ---------------
	 *
	 */
	class EO_Fuser_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Sale\Internals\EO_Fuser fetchObject()
	 * @method \Bitrix\Sale\Internals\EO_Fuser_Collection fetchCollection()
	 */
	class EO_Fuser_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Sale\Internals\EO_Fuser createObject($setDefaultValues = true)
	 * @method \Bitrix\Sale\Internals\EO_Fuser_Collection createCollection()
	 * @method \Bitrix\Sale\Internals\EO_Fuser wakeUpObject($row)
	 * @method \Bitrix\Sale\Internals\EO_Fuser_Collection wakeUpCollection($rows)
	 */
	class EO_Fuser_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Sale\Internals\Product2ProductTable:sale\lib\internals\product2product.php */
namespace Bitrix\Sale\Internals {
	/**
	 * EO_Product2Product
	 * @see \Bitrix\Sale\Internals\Product2ProductTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getId()
	 * @method \Bitrix\Sale\Internals\EO_Product2Product setId(\int|\Bitrix\Main\DB\SqlExpression $id)
	 * @method bool hasId()
	 * @method bool isIdFilled()
	 * @method bool isIdChanged()
	 * @method \int getProductId()
	 * @method \Bitrix\Sale\Internals\EO_Product2Product setProductId(\int|\Bitrix\Main\DB\SqlExpression $productId)
	 * @method bool hasProductId()
	 * @method bool isProductIdFilled()
	 * @method bool isProductIdChanged()
	 * @method \int remindActualProductId()
	 * @method \int requireProductId()
	 * @method \Bitrix\Sale\Internals\EO_Product2Product resetProductId()
	 * @method \Bitrix\Sale\Internals\EO_Product2Product unsetProductId()
	 * @method \int fillProductId()
	 * @method \int getParentProductId()
	 * @method \Bitrix\Sale\Internals\EO_Product2Product setParentProductId(\int|\Bitrix\Main\DB\SqlExpression $parentProductId)
	 * @method bool hasParentProductId()
	 * @method bool isParentProductIdFilled()
	 * @method bool isParentProductIdChanged()
	 * @method \int remindActualParentProductId()
	 * @method \int requireParentProductId()
	 * @method \Bitrix\Sale\Internals\EO_Product2Product resetParentProductId()
	 * @method \Bitrix\Sale\Internals\EO_Product2Product unsetParentProductId()
	 * @method \int fillParentProductId()
	 * @method \int getCnt()
	 * @method \Bitrix\Sale\Internals\EO_Product2Product setCnt(\int|\Bitrix\Main\DB\SqlExpression $cnt)
	 * @method bool hasCnt()
	 * @method bool isCntFilled()
	 * @method bool isCntChanged()
	 * @method \int remindActualCnt()
	 * @method \int requireCnt()
	 * @method \Bitrix\Sale\Internals\EO_Product2Product resetCnt()
	 * @method \Bitrix\Sale\Internals\EO_Product2Product unsetCnt()
	 * @method \int fillCnt()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Sale\Internals\EO_Product2Product set($fieldName, $value)
	 * @method \Bitrix\Sale\Internals\EO_Product2Product reset($fieldName)
	 * @method \Bitrix\Sale\Internals\EO_Product2Product unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Sale\Internals\EO_Product2Product wakeUp($data)
	 */
	class EO_Product2Product {
		/* @var \Bitrix\Sale\Internals\Product2ProductTable */
		static public $dataClass = '\Bitrix\Sale\Internals\Product2ProductTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Sale\Internals {
	/**
	 * EO_Product2Product_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getIdList()
	 * @method \int[] getProductIdList()
	 * @method \int[] fillProductId()
	 * @method \int[] getParentProductIdList()
	 * @method \int[] fillParentProductId()
	 * @method \int[] getCntList()
	 * @method \int[] fillCnt()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Sale\Internals\EO_Product2Product $object)
	 * @method bool has(\Bitrix\Sale\Internals\EO_Product2Product $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Sale\Internals\EO_Product2Product getByPrimary($primary)
	 * @method \Bitrix\Sale\Internals\EO_Product2Product[] getAll()
	 * @method bool remove(\Bitrix\Sale\Internals\EO_Product2Product $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Sale\Internals\EO_Product2Product_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Sale\Internals\EO_Product2Product current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 * @method EO_Product2Product_Collection merge(?EO_Product2Product_Collection $collection)
	 * @method bool isEmpty()
	 */
	class EO_Product2Product_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Sale\Internals\Product2ProductTable */
		static public $dataClass = '\Bitrix\Sale\Internals\Product2ProductTable';
	}
}
namespace Bitrix\Sale\Internals {
	/**
	 * Common methods:
	 * ---------------
	 *
	 * @method EO_Product2Product_Result exec()
	 * @method \Bitrix\Sale\Internals\EO_Product2Product fetchObject()
	 * @method \Bitrix\Sale\Internals\EO_Product2Product_Collection fetchCollection()
	 *
	 * Custom methods:
	 * ---------------
	 *
	 */
	class EO_Product2Product_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Sale\Internals\EO_Product2Product fetchObject()
	 * @method \Bitrix\Sale\Internals\EO_Product2Product_Collection fetchCollection()
	 */
	class EO_Product2Product_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Sale\Internals\EO_Product2Product createObject($setDefaultValues = true)
	 * @method \Bitrix\Sale\Internals\EO_Product2Product_Collection createCollection()
	 * @method \Bitrix\Sale\Internals\EO_Product2Product wakeUpObject($row)
	 * @method \Bitrix\Sale\Internals\EO_Product2Product_Collection wakeUpCollection($rows)
	 */
	class EO_Product2Product_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Sale\Internals\StoreProductTable:sale\lib\internals\storeproduct.php */
namespace Bitrix\Sale\Internals {
	/**
	 * EO_StoreProduct
	 * @see \Bitrix\Sale\Internals\StoreProductTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getId()
	 * @method \Bitrix\Sale\Internals\EO_StoreProduct setId(\int|\Bitrix\Main\DB\SqlExpression $id)
	 * @method bool hasId()
	 * @method bool isIdFilled()
	 * @method bool isIdChanged()
	 * @method \int getProductId()
	 * @method \Bitrix\Sale\Internals\EO_StoreProduct setProductId(\int|\Bitrix\Main\DB\SqlExpression $productId)
	 * @method bool hasProductId()
	 * @method bool isProductIdFilled()
	 * @method bool isProductIdChanged()
	 * @method \int remindActualProductId()
	 * @method \int requireProductId()
	 * @method \Bitrix\Sale\Internals\EO_StoreProduct resetProductId()
	 * @method \Bitrix\Sale\Internals\EO_StoreProduct unsetProductId()
	 * @method \int fillProductId()
	 * @method \Bitrix\Sale\Internals\EO_Product getSaleProduct()
	 * @method \Bitrix\Sale\Internals\EO_Product remindActualSaleProduct()
	 * @method \Bitrix\Sale\Internals\EO_Product requireSaleProduct()
	 * @method \Bitrix\Sale\Internals\EO_StoreProduct setSaleProduct(\Bitrix\Sale\Internals\EO_Product $object)
	 * @method \Bitrix\Sale\Internals\EO_StoreProduct resetSaleProduct()
	 * @method \Bitrix\Sale\Internals\EO_StoreProduct unsetSaleProduct()
	 * @method bool hasSaleProduct()
	 * @method bool isSaleProductFilled()
	 * @method bool isSaleProductChanged()
	 * @method \Bitrix\Sale\Internals\EO_Product fillSaleProduct()
	 * @method \float getAmount()
	 * @method \Bitrix\Sale\Internals\EO_StoreProduct setAmount(\float|\Bitrix\Main\DB\SqlExpression $amount)
	 * @method bool hasAmount()
	 * @method bool isAmountFilled()
	 * @method bool isAmountChanged()
	 * @method \float remindActualAmount()
	 * @method \float requireAmount()
	 * @method \Bitrix\Sale\Internals\EO_StoreProduct resetAmount()
	 * @method \Bitrix\Sale\Internals\EO_StoreProduct unsetAmount()
	 * @method \float fillAmount()
	 * @method \int getStoreId()
	 * @method \Bitrix\Sale\Internals\EO_StoreProduct setStoreId(\int|\Bitrix\Main\DB\SqlExpression $storeId)
	 * @method bool hasStoreId()
	 * @method bool isStoreIdFilled()
	 * @method bool isStoreIdChanged()
	 * @method \int remindActualStoreId()
	 * @method \int requireStoreId()
	 * @method \Bitrix\Sale\Internals\EO_StoreProduct resetStoreId()
	 * @method \Bitrix\Sale\Internals\EO_StoreProduct unsetStoreId()
	 * @method \int fillStoreId()
	 * @method \Bitrix\Catalog\EO_Store getStore()
	 * @method \Bitrix\Catalog\EO_Store remindActualStore()
	 * @method \Bitrix\Catalog\EO_Store requireStore()
	 * @method \Bitrix\Sale\Internals\EO_StoreProduct setStore(\Bitrix\Catalog\EO_Store $object)
	 * @method \Bitrix\Sale\Internals\EO_StoreProduct resetStore()
	 * @method \Bitrix\Sale\Internals\EO_StoreProduct unsetStore()
	 * @method bool hasStore()
	 * @method bool isStoreFilled()
	 * @method bool isStoreChanged()
	 * @method \Bitrix\Catalog\EO_Store fillStore()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Sale\Internals\EO_StoreProduct set($fieldName, $value)
	 * @method \Bitrix\Sale\Internals\EO_StoreProduct reset($fieldName)
	 * @method \Bitrix\Sale\Internals\EO_StoreProduct unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Sale\Internals\EO_StoreProduct wakeUp($data)
	 */
	class EO_StoreProduct {
		/* @var \Bitrix\Sale\Internals\StoreProductTable */
		static public $dataClass = '\Bitrix\Sale\Internals\StoreProductTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Sale\Internals {
	/**
	 * EO_StoreProduct_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getIdList()
	 * @method \int[] getProductIdList()
	 * @method \int[] fillProductId()
	 * @method \Bitrix\Sale\Internals\EO_Product[] getSaleProductList()
	 * @method \Bitrix\Sale\Internals\EO_StoreProduct_Collection getSaleProductCollection()
	 * @method \Bitrix\Sale\Internals\EO_Product_Collection fillSaleProduct()
	 * @method \float[] getAmountList()
	 * @method \float[] fillAmount()
	 * @method \int[] getStoreIdList()
	 * @method \int[] fillStoreId()
	 * @method \Bitrix\Catalog\EO_Store[] getStoreList()
	 * @method \Bitrix\Sale\Internals\EO_StoreProduct_Collection getStoreCollection()
	 * @method \Bitrix\Catalog\EO_Store_Collection fillStore()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Sale\Internals\EO_StoreProduct $object)
	 * @method bool has(\Bitrix\Sale\Internals\EO_StoreProduct $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Sale\Internals\EO_StoreProduct getByPrimary($primary)
	 * @method \Bitrix\Sale\Internals\EO_StoreProduct[] getAll()
	 * @method bool remove(\Bitrix\Sale\Internals\EO_StoreProduct $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Sale\Internals\EO_StoreProduct_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Sale\Internals\EO_StoreProduct current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 * @method EO_StoreProduct_Collection merge(?EO_StoreProduct_Collection $collection)
	 * @method bool isEmpty()
	 */
	class EO_StoreProduct_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Sale\Internals\StoreProductTable */
		static public $dataClass = '\Bitrix\Sale\Internals\StoreProductTable';
	}
}
namespace Bitrix\Sale\Internals {
	/**
	 * Common methods:
	 * ---------------
	 *
	 * @method EO_StoreProduct_Result exec()
	 * @method \Bitrix\Sale\Internals\EO_StoreProduct fetchObject()
	 * @method \Bitrix\Sale\Internals\EO_StoreProduct_Collection fetchCollection()
	 *
	 * Custom methods:
	 * ---------------
	 *
	 */
	class EO_StoreProduct_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Sale\Internals\EO_StoreProduct fetchObject()
	 * @method \Bitrix\Sale\Internals\EO_StoreProduct_Collection fetchCollection()
	 */
	class EO_StoreProduct_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Sale\Internals\EO_StoreProduct createObject($setDefaultValues = true)
	 * @method \Bitrix\Sale\Internals\EO_StoreProduct_Collection createCollection()
	 * @method \Bitrix\Sale\Internals\EO_StoreProduct wakeUpObject($row)
	 * @method \Bitrix\Sale\Internals\EO_StoreProduct_Collection wakeUpCollection($rows)
	 */
	class EO_StoreProduct_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Sale\Internals\PersonTypeTable:sale\lib\internals\persontype.php */
namespace Bitrix\Sale\Internals {
	/**
	 * EO_PersonType
	 * @see \Bitrix\Sale\Internals\PersonTypeTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getId()
	 * @method \Bitrix\Sale\Internals\EO_PersonType setId(\int|\Bitrix\Main\DB\SqlExpression $id)
	 * @method bool hasId()
	 * @method bool isIdFilled()
	 * @method bool isIdChanged()
	 * @method \string getLid()
	 * @method \Bitrix\Sale\Internals\EO_PersonType setLid(\string|\Bitrix\Main\DB\SqlExpression $lid)
	 * @method bool hasLid()
	 * @method bool isLidFilled()
	 * @method bool isLidChanged()
	 * @method \string remindActualLid()
	 * @method \string requireLid()
	 * @method \Bitrix\Sale\Internals\EO_PersonType resetLid()
	 * @method \Bitrix\Sale\Internals\EO_PersonType unsetLid()
	 * @method \string fillLid()
	 * @method \Bitrix\Sale\Internals\EO_PersonTypeSite getPersonTypeSite()
	 * @method \Bitrix\Sale\Internals\EO_PersonTypeSite remindActualPersonTypeSite()
	 * @method \Bitrix\Sale\Internals\EO_PersonTypeSite requirePersonTypeSite()
	 * @method \Bitrix\Sale\Internals\EO_PersonType setPersonTypeSite(\Bitrix\Sale\Internals\EO_PersonTypeSite $object)
	 * @method \Bitrix\Sale\Internals\EO_PersonType resetPersonTypeSite()
	 * @method \Bitrix\Sale\Internals\EO_PersonType unsetPersonTypeSite()
	 * @method bool hasPersonTypeSite()
	 * @method bool isPersonTypeSiteFilled()
	 * @method bool isPersonTypeSiteChanged()
	 * @method \Bitrix\Sale\Internals\EO_PersonTypeSite fillPersonTypeSite()
	 * @method \string getName()
	 * @method \Bitrix\Sale\Internals\EO_PersonType setName(\string|\Bitrix\Main\DB\SqlExpression $name)
	 * @method bool hasName()
	 * @method bool isNameFilled()
	 * @method bool isNameChanged()
	 * @method \string remindActualName()
	 * @method \string requireName()
	 * @method \Bitrix\Sale\Internals\EO_PersonType resetName()
	 * @method \Bitrix\Sale\Internals\EO_PersonType unsetName()
	 * @method \string fillName()
	 * @method \string getCode()
	 * @method \Bitrix\Sale\Internals\EO_PersonType setCode(\string|\Bitrix\Main\DB\SqlExpression $code)
	 * @method bool hasCode()
	 * @method bool isCodeFilled()
	 * @method bool isCodeChanged()
	 * @method \string remindActualCode()
	 * @method \string requireCode()
	 * @method \Bitrix\Sale\Internals\EO_PersonType resetCode()
	 * @method \Bitrix\Sale\Internals\EO_PersonType unsetCode()
	 * @method \string fillCode()
	 * @method \int getSort()
	 * @method \Bitrix\Sale\Internals\EO_PersonType setSort(\int|\Bitrix\Main\DB\SqlExpression $sort)
	 * @method bool hasSort()
	 * @method bool isSortFilled()
	 * @method bool isSortChanged()
	 * @method \int remindActualSort()
	 * @method \int requireSort()
	 * @method \Bitrix\Sale\Internals\EO_PersonType resetSort()
	 * @method \Bitrix\Sale\Internals\EO_PersonType unsetSort()
	 * @method \int fillSort()
	 * @method \boolean getActive()
	 * @method \Bitrix\Sale\Internals\EO_PersonType setActive(\boolean|\Bitrix\Main\DB\SqlExpression $active)
	 * @method bool hasActive()
	 * @method bool isActiveFilled()
	 * @method bool isActiveChanged()
	 * @method \boolean remindActualActive()
	 * @method \boolean requireActive()
	 * @method \Bitrix\Sale\Internals\EO_PersonType resetActive()
	 * @method \Bitrix\Sale\Internals\EO_PersonType unsetActive()
	 * @method \boolean fillActive()
	 * @method \string getXmlId()
	 * @method \Bitrix\Sale\Internals\EO_PersonType setXmlId(\string|\Bitrix\Main\DB\SqlExpression $xmlId)
	 * @method bool hasXmlId()
	 * @method bool isXmlIdFilled()
	 * @method bool isXmlIdChanged()
	 * @method \string remindActualXmlId()
	 * @method \string requireXmlId()
	 * @method \Bitrix\Sale\Internals\EO_PersonType resetXmlId()
	 * @method \Bitrix\Sale\Internals\EO_PersonType unsetXmlId()
	 * @method \string fillXmlId()
	 * @method \string getEntityRegistryType()
	 * @method \Bitrix\Sale\Internals\EO_PersonType setEntityRegistryType(\string|\Bitrix\Main\DB\SqlExpression $entityRegistryType)
	 * @method bool hasEntityRegistryType()
	 * @method bool isEntityRegistryTypeFilled()
	 * @method bool isEntityRegistryTypeChanged()
	 * @method \string remindActualEntityRegistryType()
	 * @method \string requireEntityRegistryType()
	 * @method \Bitrix\Sale\Internals\EO_PersonType resetEntityRegistryType()
	 * @method \Bitrix\Sale\Internals\EO_PersonType unsetEntityRegistryType()
	 * @method \string fillEntityRegistryType()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Sale\Internals\EO_PersonType set($fieldName, $value)
	 * @method \Bitrix\Sale\Internals\EO_PersonType reset($fieldName)
	 * @method \Bitrix\Sale\Internals\EO_PersonType unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Sale\Internals\EO_PersonType wakeUp($data)
	 */
	class EO_PersonType {
		/* @var \Bitrix\Sale\Internals\PersonTypeTable */
		static public $dataClass = '\Bitrix\Sale\Internals\PersonTypeTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Sale\Internals {
	/**
	 * EO_PersonType_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getIdList()
	 * @method \string[] getLidList()
	 * @method \string[] fillLid()
	 * @method \Bitrix\Sale\Internals\EO_PersonTypeSite[] getPersonTypeSiteList()
	 * @method \Bitrix\Sale\Internals\EO_PersonType_Collection getPersonTypeSiteCollection()
	 * @method \Bitrix\Sale\Internals\EO_PersonTypeSite_Collection fillPersonTypeSite()
	 * @method \string[] getNameList()
	 * @method \string[] fillName()
	 * @method \string[] getCodeList()
	 * @method \string[] fillCode()
	 * @method \int[] getSortList()
	 * @method \int[] fillSort()
	 * @method \boolean[] getActiveList()
	 * @method \boolean[] fillActive()
	 * @method \string[] getXmlIdList()
	 * @method \string[] fillXmlId()
	 * @method \string[] getEntityRegistryTypeList()
	 * @method \string[] fillEntityRegistryType()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Sale\Internals\EO_PersonType $object)
	 * @method bool has(\Bitrix\Sale\Internals\EO_PersonType $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Sale\Internals\EO_PersonType getByPrimary($primary)
	 * @method \Bitrix\Sale\Internals\EO_PersonType[] getAll()
	 * @method bool remove(\Bitrix\Sale\Internals\EO_PersonType $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Sale\Internals\EO_PersonType_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Sale\Internals\EO_PersonType current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 * @method EO_PersonType_Collection merge(?EO_PersonType_Collection $collection)
	 * @method bool isEmpty()
	 */
	class EO_PersonType_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Sale\Internals\PersonTypeTable */
		static public $dataClass = '\Bitrix\Sale\Internals\PersonTypeTable';
	}
}
namespace Bitrix\Sale\Internals {
	/**
	 * Common methods:
	 * ---------------
	 *
	 * @method EO_PersonType_Result exec()
	 * @method \Bitrix\Sale\Internals\EO_PersonType fetchObject()
	 * @method \Bitrix\Sale\Internals\EO_PersonType_Collection fetchCollection()
	 *
	 * Custom methods:
	 * ---------------
	 *
	 */
	class EO_PersonType_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Sale\Internals\EO_PersonType fetchObject()
	 * @method \Bitrix\Sale\Internals\EO_PersonType_Collection fetchCollection()
	 */
	class EO_PersonType_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Sale\Internals\EO_PersonType createObject($setDefaultValues = true)
	 * @method \Bitrix\Sale\Internals\EO_PersonType_Collection createCollection()
	 * @method \Bitrix\Sale\Internals\EO_PersonType wakeUpObject($row)
	 * @method \Bitrix\Sale\Internals\EO_PersonType_Collection wakeUpCollection($rows)
	 */
	class EO_PersonType_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Sale\Internals\ProductTable:sale\lib\internals\product.php */
namespace Bitrix\Sale\Internals {
	/**
	 * EO_Product
	 * @see \Bitrix\Sale\Internals\ProductTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getId()
	 * @method \Bitrix\Sale\Internals\EO_Product setId(\int|\Bitrix\Main\DB\SqlExpression $id)
	 * @method bool hasId()
	 * @method bool isIdFilled()
	 * @method bool isIdChanged()
	 * @method \int getTimestampX()
	 * @method \Bitrix\Sale\Internals\EO_Product setTimestampX(\int|\Bitrix\Main\DB\SqlExpression $timestampX)
	 * @method bool hasTimestampX()
	 * @method bool isTimestampXFilled()
	 * @method bool isTimestampXChanged()
	 * @method \int remindActualTimestampX()
	 * @method \int requireTimestampX()
	 * @method \Bitrix\Sale\Internals\EO_Product resetTimestampX()
	 * @method \Bitrix\Sale\Internals\EO_Product unsetTimestampX()
	 * @method \int fillTimestampX()
	 * @method \Bitrix\Main\Type\DateTime getDateUpdated()
	 * @method \Bitrix\Main\Type\DateTime remindActualDateUpdated()
	 * @method \Bitrix\Main\Type\DateTime requireDateUpdated()
	 * @method bool hasDateUpdated()
	 * @method bool isDateUpdatedFilled()
	 * @method \Bitrix\Sale\Internals\EO_Product unsetDateUpdated()
	 * @method \Bitrix\Main\Type\DateTime fillDateUpdated()
	 * @method \float getQuantity()
	 * @method \Bitrix\Sale\Internals\EO_Product setQuantity(\float|\Bitrix\Main\DB\SqlExpression $quantity)
	 * @method bool hasQuantity()
	 * @method bool isQuantityFilled()
	 * @method bool isQuantityChanged()
	 * @method \float remindActualQuantity()
	 * @method \float requireQuantity()
	 * @method \Bitrix\Sale\Internals\EO_Product resetQuantity()
	 * @method \Bitrix\Sale\Internals\EO_Product unsetQuantity()
	 * @method \float fillQuantity()
	 * @method \int getMeasure()
	 * @method \Bitrix\Sale\Internals\EO_Product setMeasure(\int|\Bitrix\Main\DB\SqlExpression $measure)
	 * @method bool hasMeasure()
	 * @method bool isMeasureFilled()
	 * @method bool isMeasureChanged()
	 * @method \int remindActualMeasure()
	 * @method \int requireMeasure()
	 * @method \Bitrix\Sale\Internals\EO_Product resetMeasure()
	 * @method \Bitrix\Sale\Internals\EO_Product unsetMeasure()
	 * @method \int fillMeasure()
	 * @method \float getPurchasingPrice()
	 * @method \Bitrix\Sale\Internals\EO_Product setPurchasingPrice(\float|\Bitrix\Main\DB\SqlExpression $purchasingPrice)
	 * @method bool hasPurchasingPrice()
	 * @method bool isPurchasingPriceFilled()
	 * @method bool isPurchasingPriceChanged()
	 * @method \float remindActualPurchasingPrice()
	 * @method \float requirePurchasingPrice()
	 * @method \Bitrix\Sale\Internals\EO_Product resetPurchasingPrice()
	 * @method \Bitrix\Sale\Internals\EO_Product unsetPurchasingPrice()
	 * @method \float fillPurchasingPrice()
	 * @method \string getPurchasingCurrency()
	 * @method \Bitrix\Sale\Internals\EO_Product setPurchasingCurrency(\string|\Bitrix\Main\DB\SqlExpression $purchasingCurrency)
	 * @method bool hasPurchasingCurrency()
	 * @method bool isPurchasingCurrencyFilled()
	 * @method bool isPurchasingCurrencyChanged()
	 * @method \string remindActualPurchasingCurrency()
	 * @method \string requirePurchasingCurrency()
	 * @method \Bitrix\Sale\Internals\EO_Product resetPurchasingCurrency()
	 * @method \Bitrix\Sale\Internals\EO_Product unsetPurchasingCurrency()
	 * @method \string fillPurchasingCurrency()
	 * @method \Bitrix\Iblock\EO_Element getIblock()
	 * @method \Bitrix\Iblock\EO_Element remindActualIblock()
	 * @method \Bitrix\Iblock\EO_Element requireIblock()
	 * @method \Bitrix\Sale\Internals\EO_Product setIblock(\Bitrix\Iblock\EO_Element $object)
	 * @method \Bitrix\Sale\Internals\EO_Product resetIblock()
	 * @method \Bitrix\Sale\Internals\EO_Product unsetIblock()
	 * @method bool hasIblock()
	 * @method bool isIblockFilled()
	 * @method bool isIblockChanged()
	 * @method \Bitrix\Iblock\EO_Element fillIblock()
	 * @method \string getName()
	 * @method \string remindActualName()
	 * @method \string requireName()
	 * @method bool hasName()
	 * @method bool isNameFilled()
	 * @method \Bitrix\Sale\Internals\EO_Product unsetName()
	 * @method \string fillName()
	 * @method \string getNameWithIdent()
	 * @method \string remindActualNameWithIdent()
	 * @method \string requireNameWithIdent()
	 * @method bool hasNameWithIdent()
	 * @method bool isNameWithIdentFilled()
	 * @method \Bitrix\Sale\Internals\EO_Product unsetNameWithIdent()
	 * @method \string fillNameWithIdent()
	 * @method \boolean getActive()
	 * @method \boolean remindActualActive()
	 * @method \boolean requireActive()
	 * @method bool hasActive()
	 * @method bool isActiveFilled()
	 * @method \Bitrix\Sale\Internals\EO_Product unsetActive()
	 * @method \boolean fillActive()
	 * @method \float getWeight()
	 * @method \Bitrix\Sale\Internals\EO_Product setWeight(\float|\Bitrix\Main\DB\SqlExpression $weight)
	 * @method bool hasWeight()
	 * @method bool isWeightFilled()
	 * @method bool isWeightChanged()
	 * @method \float remindActualWeight()
	 * @method \float requireWeight()
	 * @method \Bitrix\Sale\Internals\EO_Product resetWeight()
	 * @method \Bitrix\Sale\Internals\EO_Product unsetWeight()
	 * @method \float fillWeight()
	 * @method \float getWeightInSiteUnits()
	 * @method \float remindActualWeightInSiteUnits()
	 * @method \float requireWeightInSiteUnits()
	 * @method bool hasWeightInSiteUnits()
	 * @method bool isWeightInSiteUnitsFilled()
	 * @method \Bitrix\Sale\Internals\EO_Product unsetWeightInSiteUnits()
	 * @method \float fillWeightInSiteUnits()
	 * @method \float getPrice()
	 * @method \float remindActualPrice()
	 * @method \float requirePrice()
	 * @method bool hasPrice()
	 * @method bool isPriceFilled()
	 * @method \Bitrix\Sale\Internals\EO_Product unsetPrice()
	 * @method \float fillPrice()
	 * @method \string getCurrency()
	 * @method \string remindActualCurrency()
	 * @method \string requireCurrency()
	 * @method bool hasCurrency()
	 * @method bool isCurrencyFilled()
	 * @method \Bitrix\Sale\Internals\EO_Product unsetCurrency()
	 * @method \string fillCurrency()
	 * @method \float getSummaryPrice()
	 * @method \float remindActualSummaryPrice()
	 * @method \float requireSummaryPrice()
	 * @method bool hasSummaryPrice()
	 * @method bool isSummaryPriceFilled()
	 * @method \Bitrix\Sale\Internals\EO_Product unsetSummaryPrice()
	 * @method \float fillSummaryPrice()
	 * @method \float getCurrentCurrencyRate()
	 * @method \float remindActualCurrentCurrencyRate()
	 * @method \float requireCurrentCurrencyRate()
	 * @method bool hasCurrentCurrencyRate()
	 * @method bool isCurrentCurrencyRateFilled()
	 * @method \Bitrix\Sale\Internals\EO_Product unsetCurrentCurrencyRate()
	 * @method \float fillCurrentCurrencyRate()
	 * @method \float getCurrentCurrencyRateCnt()
	 * @method \float remindActualCurrentCurrencyRateCnt()
	 * @method \float requireCurrentCurrencyRateCnt()
	 * @method bool hasCurrentCurrencyRateCnt()
	 * @method bool isCurrentCurrencyRateCntFilled()
	 * @method \Bitrix\Sale\Internals\EO_Product unsetCurrentCurrencyRateCnt()
	 * @method \float fillCurrentCurrencyRateCnt()
	 * @method \float getCurrentSiteCurrencyRate()
	 * @method \float remindActualCurrentSiteCurrencyRate()
	 * @method \float requireCurrentSiteCurrencyRate()
	 * @method bool hasCurrentSiteCurrencyRate()
	 * @method bool isCurrentSiteCurrencyRateFilled()
	 * @method \Bitrix\Sale\Internals\EO_Product unsetCurrentSiteCurrencyRate()
	 * @method \float fillCurrentSiteCurrencyRate()
	 * @method \float getCurrentSiteCurrencyRateCnt()
	 * @method \float remindActualCurrentSiteCurrencyRateCnt()
	 * @method \float requireCurrentSiteCurrencyRateCnt()
	 * @method bool hasCurrentSiteCurrencyRateCnt()
	 * @method bool isCurrentSiteCurrencyRateCntFilled()
	 * @method \Bitrix\Sale\Internals\EO_Product unsetCurrentSiteCurrencyRateCnt()
	 * @method \float fillCurrentSiteCurrencyRateCnt()
	 * @method \float getPurchasingCurrencyRate()
	 * @method \float remindActualPurchasingCurrencyRate()
	 * @method \float requirePurchasingCurrencyRate()
	 * @method bool hasPurchasingCurrencyRate()
	 * @method bool isPurchasingCurrencyRateFilled()
	 * @method \Bitrix\Sale\Internals\EO_Product unsetPurchasingCurrencyRate()
	 * @method \float fillPurchasingCurrencyRate()
	 * @method \float getPurchasingCurrencyRateCnt()
	 * @method \float remindActualPurchasingCurrencyRateCnt()
	 * @method \float requirePurchasingCurrencyRateCnt()
	 * @method bool hasPurchasingCurrencyRateCnt()
	 * @method bool isPurchasingCurrencyRateCntFilled()
	 * @method \Bitrix\Sale\Internals\EO_Product unsetPurchasingCurrencyRateCnt()
	 * @method \float fillPurchasingCurrencyRateCnt()
	 * @method \float getPriceInSiteCurrency()
	 * @method \float remindActualPriceInSiteCurrency()
	 * @method \float requirePriceInSiteCurrency()
	 * @method bool hasPriceInSiteCurrency()
	 * @method bool isPriceInSiteCurrencyFilled()
	 * @method \Bitrix\Sale\Internals\EO_Product unsetPriceInSiteCurrency()
	 * @method \float fillPriceInSiteCurrency()
	 * @method \float getPurchasingPriceInSiteCurrency()
	 * @method \float remindActualPurchasingPriceInSiteCurrency()
	 * @method \float requirePurchasingPriceInSiteCurrency()
	 * @method bool hasPurchasingPriceInSiteCurrency()
	 * @method bool isPurchasingPriceInSiteCurrencyFilled()
	 * @method \Bitrix\Sale\Internals\EO_Product unsetPurchasingPriceInSiteCurrency()
	 * @method \float fillPurchasingPriceInSiteCurrency()
	 * @method \float getSummaryPriceInSiteCurrency()
	 * @method \float remindActualSummaryPriceInSiteCurrency()
	 * @method \float requireSummaryPriceInSiteCurrency()
	 * @method bool hasSummaryPriceInSiteCurrency()
	 * @method bool isSummaryPriceInSiteCurrencyFilled()
	 * @method \Bitrix\Sale\Internals\EO_Product unsetSummaryPriceInSiteCurrency()
	 * @method \float fillSummaryPriceInSiteCurrency()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Sale\Internals\EO_Product set($fieldName, $value)
	 * @method \Bitrix\Sale\Internals\EO_Product reset($fieldName)
	 * @method \Bitrix\Sale\Internals\EO_Product unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Sale\Internals\EO_Product wakeUp($data)
	 */
	class EO_Product {
		/* @var \Bitrix\Sale\Internals\ProductTable */
		static public $dataClass = '\Bitrix\Sale\Internals\ProductTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Sale\Internals {
	/**
	 * EO_Product_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getIdList()
	 * @method \int[] getTimestampXList()
	 * @method \int[] fillTimestampX()
	 * @method \Bitrix\Main\Type\DateTime[] getDateUpdatedList()
	 * @method \Bitrix\Main\Type\DateTime[] fillDateUpdated()
	 * @method \float[] getQuantityList()
	 * @method \float[] fillQuantity()
	 * @method \int[] getMeasureList()
	 * @method \int[] fillMeasure()
	 * @method \float[] getPurchasingPriceList()
	 * @method \float[] fillPurchasingPrice()
	 * @method \string[] getPurchasingCurrencyList()
	 * @method \string[] fillPurchasingCurrency()
	 * @method \Bitrix\Iblock\EO_Element[] getIblockList()
	 * @method \Bitrix\Sale\Internals\EO_Product_Collection getIblockCollection()
	 * @method \Bitrix\Iblock\EO_Element_Collection fillIblock()
	 * @method \string[] getNameList()
	 * @method \string[] fillName()
	 * @method \string[] getNameWithIdentList()
	 * @method \string[] fillNameWithIdent()
	 * @method \boolean[] getActiveList()
	 * @method \boolean[] fillActive()
	 * @method \float[] getWeightList()
	 * @method \float[] fillWeight()
	 * @method \float[] getWeightInSiteUnitsList()
	 * @method \float[] fillWeightInSiteUnits()
	 * @method \float[] getPriceList()
	 * @method \float[] fillPrice()
	 * @method \string[] getCurrencyList()
	 * @method \string[] fillCurrency()
	 * @method \float[] getSummaryPriceList()
	 * @method \float[] fillSummaryPrice()
	 * @method \float[] getCurrentCurrencyRateList()
	 * @method \float[] fillCurrentCurrencyRate()
	 * @method \float[] getCurrentCurrencyRateCntList()
	 * @method \float[] fillCurrentCurrencyRateCnt()
	 * @method \float[] getCurrentSiteCurrencyRateList()
	 * @method \float[] fillCurrentSiteCurrencyRate()
	 * @method \float[] getCurrentSiteCurrencyRateCntList()
	 * @method \float[] fillCurrentSiteCurrencyRateCnt()
	 * @method \float[] getPurchasingCurrencyRateList()
	 * @method \float[] fillPurchasingCurrencyRate()
	 * @method \float[] getPurchasingCurrencyRateCntList()
	 * @method \float[] fillPurchasingCurrencyRateCnt()
	 * @method \float[] getPriceInSiteCurrencyList()
	 * @method \float[] fillPriceInSiteCurrency()
	 * @method \float[] getPurchasingPriceInSiteCurrencyList()
	 * @method \float[] fillPurchasingPriceInSiteCurrency()
	 * @method \float[] getSummaryPriceInSiteCurrencyList()
	 * @method \float[] fillSummaryPriceInSiteCurrency()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Sale\Internals\EO_Product $object)
	 * @method bool has(\Bitrix\Sale\Internals\EO_Product $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Sale\Internals\EO_Product getByPrimary($primary)
	 * @method \Bitrix\Sale\Internals\EO_Product[] getAll()
	 * @method bool remove(\Bitrix\Sale\Internals\EO_Product $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Sale\Internals\EO_Product_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Sale\Internals\EO_Product current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 * @method EO_Product_Collection merge(?EO_Product_Collection $collection)
	 * @method bool isEmpty()
	 */
	class EO_Product_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Sale\Internals\ProductTable */
		static public $dataClass = '\Bitrix\Sale\Internals\ProductTable';
	}
}
namespace Bitrix\Sale\Internals {
	/**
	 * Common methods:
	 * ---------------
	 *
	 * @method EO_Product_Result exec()
	 * @method \Bitrix\Sale\Internals\EO_Product fetchObject()
	 * @method \Bitrix\Sale\Internals\EO_Product_Collection fetchCollection()
	 *
	 * Custom methods:
	 * ---------------
	 *
	 */
	class EO_Product_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Sale\Internals\EO_Product fetchObject()
	 * @method \Bitrix\Sale\Internals\EO_Product_Collection fetchCollection()
	 */
	class EO_Product_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Sale\Internals\EO_Product createObject($setDefaultValues = true)
	 * @method \Bitrix\Sale\Internals\EO_Product_Collection createCollection()
	 * @method \Bitrix\Sale\Internals\EO_Product wakeUpObject($row)
	 * @method \Bitrix\Sale\Internals\EO_Product_Collection wakeUpCollection($rows)
	 */
	class EO_Product_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Sale\Internals\SectionTable:sale\lib\internals\section.php */
namespace Bitrix\Sale\Internals {
	/**
	 * EO_Section
	 * @see \Bitrix\Sale\Internals\SectionTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getId()
	 * @method \Bitrix\Sale\Internals\EO_Section setId(\int|\Bitrix\Main\DB\SqlExpression $id)
	 * @method bool hasId()
	 * @method bool isIdFilled()
	 * @method bool isIdChanged()
	 * @method \string getName()
	 * @method \Bitrix\Sale\Internals\EO_Section setName(\string|\Bitrix\Main\DB\SqlExpression $name)
	 * @method bool hasName()
	 * @method bool isNameFilled()
	 * @method bool isNameChanged()
	 * @method \string remindActualName()
	 * @method \string requireName()
	 * @method \Bitrix\Sale\Internals\EO_Section resetName()
	 * @method \Bitrix\Sale\Internals\EO_Section unsetName()
	 * @method \string fillName()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Sale\Internals\EO_Section set($fieldName, $value)
	 * @method \Bitrix\Sale\Internals\EO_Section reset($fieldName)
	 * @method \Bitrix\Sale\Internals\EO_Section unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Sale\Internals\EO_Section wakeUp($data)
	 */
	class EO_Section {
		/* @var \Bitrix\Sale\Internals\SectionTable */
		static public $dataClass = '\Bitrix\Sale\Internals\SectionTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Sale\Internals {
	/**
	 * EO_Section_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getIdList()
	 * @method \string[] getNameList()
	 * @method \string[] fillName()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Sale\Internals\EO_Section $object)
	 * @method bool has(\Bitrix\Sale\Internals\EO_Section $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Sale\Internals\EO_Section getByPrimary($primary)
	 * @method \Bitrix\Sale\Internals\EO_Section[] getAll()
	 * @method bool remove(\Bitrix\Sale\Internals\EO_Section $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Sale\Internals\EO_Section_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Sale\Internals\EO_Section current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 * @method EO_Section_Collection merge(?EO_Section_Collection $collection)
	 * @method bool isEmpty()
	 */
	class EO_Section_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Sale\Internals\SectionTable */
		static public $dataClass = '\Bitrix\Sale\Internals\SectionTable';
	}
}
namespace Bitrix\Sale\Internals {
	/**
	 * Common methods:
	 * ---------------
	 *
	 * @method EO_Section_Result exec()
	 * @method \Bitrix\Sale\Internals\EO_Section fetchObject()
	 * @method \Bitrix\Sale\Internals\EO_Section_Collection fetchCollection()
	 *
	 * Custom methods:
	 * ---------------
	 *
	 */
	class EO_Section_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Sale\Internals\EO_Section fetchObject()
	 * @method \Bitrix\Sale\Internals\EO_Section_Collection fetchCollection()
	 */
	class EO_Section_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Sale\Internals\EO_Section createObject($setDefaultValues = true)
	 * @method \Bitrix\Sale\Internals\EO_Section_Collection createCollection()
	 * @method \Bitrix\Sale\Internals\EO_Section wakeUpObject($row)
	 * @method \Bitrix\Sale\Internals\EO_Section_Collection wakeUpCollection($rows)
	 */
	class EO_Section_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Sale\Internals\OrderProcessingTable:sale\lib\internals\orderprocessing.php */
namespace Bitrix\Sale\Internals {
	/**
	 * EO_OrderProcessing
	 * @see \Bitrix\Sale\Internals\OrderProcessingTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getOrderId()
	 * @method \Bitrix\Sale\Internals\EO_OrderProcessing setOrderId(\int|\Bitrix\Main\DB\SqlExpression $orderId)
	 * @method bool hasOrderId()
	 * @method bool isOrderIdFilled()
	 * @method bool isOrderIdChanged()
	 * @method \boolean getProductsAdded()
	 * @method \Bitrix\Sale\Internals\EO_OrderProcessing setProductsAdded(\boolean|\Bitrix\Main\DB\SqlExpression $productsAdded)
	 * @method bool hasProductsAdded()
	 * @method bool isProductsAddedFilled()
	 * @method bool isProductsAddedChanged()
	 * @method \boolean remindActualProductsAdded()
	 * @method \boolean requireProductsAdded()
	 * @method \Bitrix\Sale\Internals\EO_OrderProcessing resetProductsAdded()
	 * @method \Bitrix\Sale\Internals\EO_OrderProcessing unsetProductsAdded()
	 * @method \boolean fillProductsAdded()
	 * @method \boolean getProductsRemoved()
	 * @method \Bitrix\Sale\Internals\EO_OrderProcessing setProductsRemoved(\boolean|\Bitrix\Main\DB\SqlExpression $productsRemoved)
	 * @method bool hasProductsRemoved()
	 * @method bool isProductsRemovedFilled()
	 * @method bool isProductsRemovedChanged()
	 * @method \boolean remindActualProductsRemoved()
	 * @method \boolean requireProductsRemoved()
	 * @method \Bitrix\Sale\Internals\EO_OrderProcessing resetProductsRemoved()
	 * @method \Bitrix\Sale\Internals\EO_OrderProcessing unsetProductsRemoved()
	 * @method \boolean fillProductsRemoved()
	 * @method \Bitrix\Sale\Internals\EO_Order getOrder()
	 * @method \Bitrix\Sale\Internals\EO_Order remindActualOrder()
	 * @method \Bitrix\Sale\Internals\EO_Order requireOrder()
	 * @method \Bitrix\Sale\Internals\EO_OrderProcessing setOrder(\Bitrix\Sale\Internals\EO_Order $object)
	 * @method \Bitrix\Sale\Internals\EO_OrderProcessing resetOrder()
	 * @method \Bitrix\Sale\Internals\EO_OrderProcessing unsetOrder()
	 * @method bool hasOrder()
	 * @method bool isOrderFilled()
	 * @method bool isOrderChanged()
	 * @method \Bitrix\Sale\Internals\EO_Order fillOrder()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Sale\Internals\EO_OrderProcessing set($fieldName, $value)
	 * @method \Bitrix\Sale\Internals\EO_OrderProcessing reset($fieldName)
	 * @method \Bitrix\Sale\Internals\EO_OrderProcessing unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Sale\Internals\EO_OrderProcessing wakeUp($data)
	 */
	class EO_OrderProcessing {
		/* @var \Bitrix\Sale\Internals\OrderProcessingTable */
		static public $dataClass = '\Bitrix\Sale\Internals\OrderProcessingTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Sale\Internals {
	/**
	 * EO_OrderProcessing_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getOrderIdList()
	 * @method \boolean[] getProductsAddedList()
	 * @method \boolean[] fillProductsAdded()
	 * @method \boolean[] getProductsRemovedList()
	 * @method \boolean[] fillProductsRemoved()
	 * @method \Bitrix\Sale\Internals\EO_Order[] getOrderList()
	 * @method \Bitrix\Sale\Internals\EO_OrderProcessing_Collection getOrderCollection()
	 * @method \Bitrix\Sale\Internals\EO_Order_Collection fillOrder()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Sale\Internals\EO_OrderProcessing $object)
	 * @method bool has(\Bitrix\Sale\Internals\EO_OrderProcessing $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Sale\Internals\EO_OrderProcessing getByPrimary($primary)
	 * @method \Bitrix\Sale\Internals\EO_OrderProcessing[] getAll()
	 * @method bool remove(\Bitrix\Sale\Internals\EO_OrderProcessing $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Sale\Internals\EO_OrderProcessing_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Sale\Internals\EO_OrderProcessing current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 * @method EO_OrderProcessing_Collection merge(?EO_OrderProcessing_Collection $collection)
	 * @method bool isEmpty()
	 */
	class EO_OrderProcessing_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Sale\Internals\OrderProcessingTable */
		static public $dataClass = '\Bitrix\Sale\Internals\OrderProcessingTable';
	}
}
namespace Bitrix\Sale\Internals {
	/**
	 * Common methods:
	 * ---------------
	 *
	 * @method EO_OrderProcessing_Result exec()
	 * @method \Bitrix\Sale\Internals\EO_OrderProcessing fetchObject()
	 * @method \Bitrix\Sale\Internals\EO_OrderProcessing_Collection fetchCollection()
	 *
	 * Custom methods:
	 * ---------------
	 *
	 */
	class EO_OrderProcessing_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Sale\Internals\EO_OrderProcessing fetchObject()
	 * @method \Bitrix\Sale\Internals\EO_OrderProcessing_Collection fetchCollection()
	 */
	class EO_OrderProcessing_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Sale\Internals\EO_OrderProcessing createObject($setDefaultValues = true)
	 * @method \Bitrix\Sale\Internals\EO_OrderProcessing_Collection createCollection()
	 * @method \Bitrix\Sale\Internals\EO_OrderProcessing wakeUpObject($row)
	 * @method \Bitrix\Sale\Internals\EO_OrderProcessing_Collection wakeUpCollection($rows)
	 */
	class EO_OrderProcessing_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Sale\Internals\GoodsSectionTable:sale\lib\internals\goodssection.php */
namespace Bitrix\Sale\Internals {
	/**
	 * EO_GoodsSection
	 * @see \Bitrix\Sale\Internals\GoodsSectionTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getIblockElementId()
	 * @method \Bitrix\Sale\Internals\EO_GoodsSection setIblockElementId(\int|\Bitrix\Main\DB\SqlExpression $iblockElementId)
	 * @method bool hasIblockElementId()
	 * @method bool isIblockElementIdFilled()
	 * @method bool isIblockElementIdChanged()
	 * @method \Bitrix\Sale\Internals\EO_Product getProduct()
	 * @method \Bitrix\Sale\Internals\EO_Product remindActualProduct()
	 * @method \Bitrix\Sale\Internals\EO_Product requireProduct()
	 * @method \Bitrix\Sale\Internals\EO_GoodsSection setProduct(\Bitrix\Sale\Internals\EO_Product $object)
	 * @method \Bitrix\Sale\Internals\EO_GoodsSection resetProduct()
	 * @method \Bitrix\Sale\Internals\EO_GoodsSection unsetProduct()
	 * @method bool hasProduct()
	 * @method bool isProductFilled()
	 * @method bool isProductChanged()
	 * @method \Bitrix\Sale\Internals\EO_Product fillProduct()
	 * @method \int getIblockSectionId()
	 * @method \Bitrix\Sale\Internals\EO_GoodsSection setIblockSectionId(\int|\Bitrix\Main\DB\SqlExpression $iblockSectionId)
	 * @method bool hasIblockSectionId()
	 * @method bool isIblockSectionIdFilled()
	 * @method bool isIblockSectionIdChanged()
	 * @method \Bitrix\Sale\Internals\EO_Section getSect()
	 * @method \Bitrix\Sale\Internals\EO_Section remindActualSect()
	 * @method \Bitrix\Sale\Internals\EO_Section requireSect()
	 * @method \Bitrix\Sale\Internals\EO_GoodsSection setSect(\Bitrix\Sale\Internals\EO_Section $object)
	 * @method \Bitrix\Sale\Internals\EO_GoodsSection resetSect()
	 * @method \Bitrix\Sale\Internals\EO_GoodsSection unsetSect()
	 * @method bool hasSect()
	 * @method bool isSectFilled()
	 * @method bool isSectChanged()
	 * @method \Bitrix\Sale\Internals\EO_Section fillSect()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Sale\Internals\EO_GoodsSection set($fieldName, $value)
	 * @method \Bitrix\Sale\Internals\EO_GoodsSection reset($fieldName)
	 * @method \Bitrix\Sale\Internals\EO_GoodsSection unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Sale\Internals\EO_GoodsSection wakeUp($data)
	 */
	class EO_GoodsSection {
		/* @var \Bitrix\Sale\Internals\GoodsSectionTable */
		static public $dataClass = '\Bitrix\Sale\Internals\GoodsSectionTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Sale\Internals {
	/**
	 * EO_GoodsSection_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getIblockElementIdList()
	 * @method \Bitrix\Sale\Internals\EO_Product[] getProductList()
	 * @method \Bitrix\Sale\Internals\EO_GoodsSection_Collection getProductCollection()
	 * @method \Bitrix\Sale\Internals\EO_Product_Collection fillProduct()
	 * @method \int[] getIblockSectionIdList()
	 * @method \Bitrix\Sale\Internals\EO_Section[] getSectList()
	 * @method \Bitrix\Sale\Internals\EO_GoodsSection_Collection getSectCollection()
	 * @method \Bitrix\Sale\Internals\EO_Section_Collection fillSect()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Sale\Internals\EO_GoodsSection $object)
	 * @method bool has(\Bitrix\Sale\Internals\EO_GoodsSection $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Sale\Internals\EO_GoodsSection getByPrimary($primary)
	 * @method \Bitrix\Sale\Internals\EO_GoodsSection[] getAll()
	 * @method bool remove(\Bitrix\Sale\Internals\EO_GoodsSection $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Sale\Internals\EO_GoodsSection_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Sale\Internals\EO_GoodsSection current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 * @method EO_GoodsSection_Collection merge(?EO_GoodsSection_Collection $collection)
	 * @method bool isEmpty()
	 */
	class EO_GoodsSection_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Sale\Internals\GoodsSectionTable */
		static public $dataClass = '\Bitrix\Sale\Internals\GoodsSectionTable';
	}
}
namespace Bitrix\Sale\Internals {
	/**
	 * Common methods:
	 * ---------------
	 *
	 * @method EO_GoodsSection_Result exec()
	 * @method \Bitrix\Sale\Internals\EO_GoodsSection fetchObject()
	 * @method \Bitrix\Sale\Internals\EO_GoodsSection_Collection fetchCollection()
	 *
	 * Custom methods:
	 * ---------------
	 *
	 */
	class EO_GoodsSection_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Sale\Internals\EO_GoodsSection fetchObject()
	 * @method \Bitrix\Sale\Internals\EO_GoodsSection_Collection fetchCollection()
	 */
	class EO_GoodsSection_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Sale\Internals\EO_GoodsSection createObject($setDefaultValues = true)
	 * @method \Bitrix\Sale\Internals\EO_GoodsSection_Collection createCollection()
	 * @method \Bitrix\Sale\Internals\EO_GoodsSection wakeUpObject($row)
	 * @method \Bitrix\Sale\Internals\EO_GoodsSection_Collection wakeUpCollection($rows)
	 */
	class EO_GoodsSection_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Sale\Cashbox\Internals\CashboxTable:sale\lib\cashbox\internals\cashbox.php */
namespace Bitrix\Sale\Cashbox\Internals {
	/**
	 * EO_Cashbox
	 * @see \Bitrix\Sale\Cashbox\Internals\CashboxTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getId()
	 * @method \Bitrix\Sale\Cashbox\Internals\EO_Cashbox setId(\int|\Bitrix\Main\DB\SqlExpression $id)
	 * @method bool hasId()
	 * @method bool isIdFilled()
	 * @method bool isIdChanged()
	 * @method \string getName()
	 * @method \Bitrix\Sale\Cashbox\Internals\EO_Cashbox setName(\string|\Bitrix\Main\DB\SqlExpression $name)
	 * @method bool hasName()
	 * @method bool isNameFilled()
	 * @method bool isNameChanged()
	 * @method \string remindActualName()
	 * @method \string requireName()
	 * @method \Bitrix\Sale\Cashbox\Internals\EO_Cashbox resetName()
	 * @method \Bitrix\Sale\Cashbox\Internals\EO_Cashbox unsetName()
	 * @method \string fillName()
	 * @method \boolean getActive()
	 * @method \Bitrix\Sale\Cashbox\Internals\EO_Cashbox setActive(\boolean|\Bitrix\Main\DB\SqlExpression $active)
	 * @method bool hasActive()
	 * @method bool isActiveFilled()
	 * @method bool isActiveChanged()
	 * @method \boolean remindActualActive()
	 * @method \boolean requireActive()
	 * @method \Bitrix\Sale\Cashbox\Internals\EO_Cashbox resetActive()
	 * @method \Bitrix\Sale\Cashbox\Internals\EO_Cashbox unsetActive()
	 * @method \boolean fillActive()
	 * @method \string getHandler()
	 * @method \Bitrix\Sale\Cashbox\Internals\EO_Cashbox setHandler(\string|\Bitrix\Main\DB\SqlExpression $handler)
	 * @method bool hasHandler()
	 * @method bool isHandlerFilled()
	 * @method bool isHandlerChanged()
	 * @method \string remindActualHandler()
	 * @method \string requireHandler()
	 * @method \Bitrix\Sale\Cashbox\Internals\EO_Cashbox resetHandler()
	 * @method \Bitrix\Sale\Cashbox\Internals\EO_Cashbox unsetHandler()
	 * @method \string fillHandler()
	 * @method \string getEmail()
	 * @method \Bitrix\Sale\Cashbox\Internals\EO_Cashbox setEmail(\string|\Bitrix\Main\DB\SqlExpression $email)
	 * @method bool hasEmail()
	 * @method bool isEmailFilled()
	 * @method bool isEmailChanged()
	 * @method \string remindActualEmail()
	 * @method \string requireEmail()
	 * @method \Bitrix\Sale\Cashbox\Internals\EO_Cashbox resetEmail()
	 * @method \Bitrix\Sale\Cashbox\Internals\EO_Cashbox unsetEmail()
	 * @method \string fillEmail()
	 * @method \int getSort()
	 * @method \Bitrix\Sale\Cashbox\Internals\EO_Cashbox setSort(\int|\Bitrix\Main\DB\SqlExpression $sort)
	 * @method bool hasSort()
	 * @method bool isSortFilled()
	 * @method bool isSortChanged()
	 * @method \int remindActualSort()
	 * @method \int requireSort()
	 * @method \Bitrix\Sale\Cashbox\Internals\EO_Cashbox resetSort()
	 * @method \Bitrix\Sale\Cashbox\Internals\EO_Cashbox unsetSort()
	 * @method \int fillSort()
	 * @method \Bitrix\Main\Type\DateTime getDateCreate()
	 * @method \Bitrix\Sale\Cashbox\Internals\EO_Cashbox setDateCreate(\Bitrix\Main\Type\DateTime|\Bitrix\Main\DB\SqlExpression $dateCreate)
	 * @method bool hasDateCreate()
	 * @method bool isDateCreateFilled()
	 * @method bool isDateCreateChanged()
	 * @method \Bitrix\Main\Type\DateTime remindActualDateCreate()
	 * @method \Bitrix\Main\Type\DateTime requireDateCreate()
	 * @method \Bitrix\Sale\Cashbox\Internals\EO_Cashbox resetDateCreate()
	 * @method \Bitrix\Sale\Cashbox\Internals\EO_Cashbox unsetDateCreate()
	 * @method \Bitrix\Main\Type\DateTime fillDateCreate()
	 * @method \Bitrix\Main\Type\DateTime getDateLastCheck()
	 * @method \Bitrix\Sale\Cashbox\Internals\EO_Cashbox setDateLastCheck(\Bitrix\Main\Type\DateTime|\Bitrix\Main\DB\SqlExpression $dateLastCheck)
	 * @method bool hasDateLastCheck()
	 * @method bool isDateLastCheckFilled()
	 * @method bool isDateLastCheckChanged()
	 * @method \Bitrix\Main\Type\DateTime remindActualDateLastCheck()
	 * @method \Bitrix\Main\Type\DateTime requireDateLastCheck()
	 * @method \Bitrix\Sale\Cashbox\Internals\EO_Cashbox resetDateLastCheck()
	 * @method \Bitrix\Sale\Cashbox\Internals\EO_Cashbox unsetDateLastCheck()
	 * @method \Bitrix\Main\Type\DateTime fillDateLastCheck()
	 * @method \string getKkmId()
	 * @method \Bitrix\Sale\Cashbox\Internals\EO_Cashbox setKkmId(\string|\Bitrix\Main\DB\SqlExpression $kkmId)
	 * @method bool hasKkmId()
	 * @method bool isKkmIdFilled()
	 * @method bool isKkmIdChanged()
	 * @method \string remindActualKkmId()
	 * @method \string requireKkmId()
	 * @method \Bitrix\Sale\Cashbox\Internals\EO_Cashbox resetKkmId()
	 * @method \Bitrix\Sale\Cashbox\Internals\EO_Cashbox unsetKkmId()
	 * @method \string fillKkmId()
	 * @method \string getOfd()
	 * @method \Bitrix\Sale\Cashbox\Internals\EO_Cashbox setOfd(\string|\Bitrix\Main\DB\SqlExpression $ofd)
	 * @method bool hasOfd()
	 * @method bool isOfdFilled()
	 * @method bool isOfdChanged()
	 * @method \string remindActualOfd()
	 * @method \string requireOfd()
	 * @method \Bitrix\Sale\Cashbox\Internals\EO_Cashbox resetOfd()
	 * @method \Bitrix\Sale\Cashbox\Internals\EO_Cashbox unsetOfd()
	 * @method \string fillOfd()
	 * @method \string getNumberKkm()
	 * @method \Bitrix\Sale\Cashbox\Internals\EO_Cashbox setNumberKkm(\string|\Bitrix\Main\DB\SqlExpression $numberKkm)
	 * @method bool hasNumberKkm()
	 * @method bool isNumberKkmFilled()
	 * @method bool isNumberKkmChanged()
	 * @method \string remindActualNumberKkm()
	 * @method \string requireNumberKkm()
	 * @method \Bitrix\Sale\Cashbox\Internals\EO_Cashbox resetNumberKkm()
	 * @method \Bitrix\Sale\Cashbox\Internals\EO_Cashbox unsetNumberKkm()
	 * @method \string fillNumberKkm()
	 * @method \string getSettings()
	 * @method \Bitrix\Sale\Cashbox\Internals\EO_Cashbox setSettings(\string|\Bitrix\Main\DB\SqlExpression $settings)
	 * @method bool hasSettings()
	 * @method bool isSettingsFilled()
	 * @method bool isSettingsChanged()
	 * @method \string remindActualSettings()
	 * @method \string requireSettings()
	 * @method \Bitrix\Sale\Cashbox\Internals\EO_Cashbox resetSettings()
	 * @method \Bitrix\Sale\Cashbox\Internals\EO_Cashbox unsetSettings()
	 * @method \string fillSettings()
	 * @method \string getOfdSettings()
	 * @method \Bitrix\Sale\Cashbox\Internals\EO_Cashbox setOfdSettings(\string|\Bitrix\Main\DB\SqlExpression $ofdSettings)
	 * @method bool hasOfdSettings()
	 * @method bool isOfdSettingsFilled()
	 * @method bool isOfdSettingsChanged()
	 * @method \string remindActualOfdSettings()
	 * @method \string requireOfdSettings()
	 * @method \Bitrix\Sale\Cashbox\Internals\EO_Cashbox resetOfdSettings()
	 * @method \Bitrix\Sale\Cashbox\Internals\EO_Cashbox unsetOfdSettings()
	 * @method \string fillOfdSettings()
	 * @method \boolean getUseOffline()
	 * @method \Bitrix\Sale\Cashbox\Internals\EO_Cashbox setUseOffline(\boolean|\Bitrix\Main\DB\SqlExpression $useOffline)
	 * @method bool hasUseOffline()
	 * @method bool isUseOfflineFilled()
	 * @method bool isUseOfflineChanged()
	 * @method \boolean remindActualUseOffline()
	 * @method \boolean requireUseOffline()
	 * @method \Bitrix\Sale\Cashbox\Internals\EO_Cashbox resetUseOffline()
	 * @method \Bitrix\Sale\Cashbox\Internals\EO_Cashbox unsetUseOffline()
	 * @method \boolean fillUseOffline()
	 * @method \boolean getEnabled()
	 * @method \Bitrix\Sale\Cashbox\Internals\EO_Cashbox setEnabled(\boolean|\Bitrix\Main\DB\SqlExpression $enabled)
	 * @method bool hasEnabled()
	 * @method bool isEnabledFilled()
	 * @method bool isEnabledChanged()
	 * @method \boolean remindActualEnabled()
	 * @method \boolean requireEnabled()
	 * @method \Bitrix\Sale\Cashbox\Internals\EO_Cashbox resetEnabled()
	 * @method \Bitrix\Sale\Cashbox\Internals\EO_Cashbox unsetEnabled()
	 * @method \boolean fillEnabled()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Sale\Cashbox\Internals\EO_Cashbox set($fieldName, $value)
	 * @method \Bitrix\Sale\Cashbox\Internals\EO_Cashbox reset($fieldName)
	 * @method \Bitrix\Sale\Cashbox\Internals\EO_Cashbox unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Sale\Cashbox\Internals\EO_Cashbox wakeUp($data)
	 */
	class EO_Cashbox {
		/* @var \Bitrix\Sale\Cashbox\Internals\CashboxTable */
		static public $dataClass = '\Bitrix\Sale\Cashbox\Internals\CashboxTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Sale\Cashbox\Internals {
	/**
	 * EO_Cashbox_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getIdList()
	 * @method \string[] getNameList()
	 * @method \string[] fillName()
	 * @method \boolean[] getActiveList()
	 * @method \boolean[] fillActive()
	 * @method \string[] getHandlerList()
	 * @method \string[] fillHandler()
	 * @method \string[] getEmailList()
	 * @method \string[] fillEmail()
	 * @method \int[] getSortList()
	 * @method \int[] fillSort()
	 * @method \Bitrix\Main\Type\DateTime[] getDateCreateList()
	 * @method \Bitrix\Main\Type\DateTime[] fillDateCreate()
	 * @method \Bitrix\Main\Type\DateTime[] getDateLastCheckList()
	 * @method \Bitrix\Main\Type\DateTime[] fillDateLastCheck()
	 * @method \string[] getKkmIdList()
	 * @method \string[] fillKkmId()
	 * @method \string[] getOfdList()
	 * @method \string[] fillOfd()
	 * @method \string[] getNumberKkmList()
	 * @method \string[] fillNumberKkm()
	 * @method \string[] getSettingsList()
	 * @method \string[] fillSettings()
	 * @method \string[] getOfdSettingsList()
	 * @method \string[] fillOfdSettings()
	 * @method \boolean[] getUseOfflineList()
	 * @method \boolean[] fillUseOffline()
	 * @method \boolean[] getEnabledList()
	 * @method \boolean[] fillEnabled()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Sale\Cashbox\Internals\EO_Cashbox $object)
	 * @method bool has(\Bitrix\Sale\Cashbox\Internals\EO_Cashbox $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Sale\Cashbox\Internals\EO_Cashbox getByPrimary($primary)
	 * @method \Bitrix\Sale\Cashbox\Internals\EO_Cashbox[] getAll()
	 * @method bool remove(\Bitrix\Sale\Cashbox\Internals\EO_Cashbox $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Sale\Cashbox\Internals\EO_Cashbox_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Sale\Cashbox\Internals\EO_Cashbox current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 * @method EO_Cashbox_Collection merge(?EO_Cashbox_Collection $collection)
	 * @method bool isEmpty()
	 */
	class EO_Cashbox_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Sale\Cashbox\Internals\CashboxTable */
		static public $dataClass = '\Bitrix\Sale\Cashbox\Internals\CashboxTable';
	}
}
namespace Bitrix\Sale\Cashbox\Internals {
	/**
	 * Common methods:
	 * ---------------
	 *
	 * @method EO_Cashbox_Result exec()
	 * @method \Bitrix\Sale\Cashbox\Internals\EO_Cashbox fetchObject()
	 * @method \Bitrix\Sale\Cashbox\Internals\EO_Cashbox_Collection fetchCollection()
	 *
	 * Custom methods:
	 * ---------------
	 *
	 */
	class EO_Cashbox_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Sale\Cashbox\Internals\EO_Cashbox fetchObject()
	 * @method \Bitrix\Sale\Cashbox\Internals\EO_Cashbox_Collection fetchCollection()
	 */
	class EO_Cashbox_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Sale\Cashbox\Internals\EO_Cashbox createObject($setDefaultValues = true)
	 * @method \Bitrix\Sale\Cashbox\Internals\EO_Cashbox_Collection createCollection()
	 * @method \Bitrix\Sale\Cashbox\Internals\EO_Cashbox wakeUpObject($row)
	 * @method \Bitrix\Sale\Cashbox\Internals\EO_Cashbox_Collection wakeUpCollection($rows)
	 */
	class EO_Cashbox_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Sale\Cashbox\Internals\CashboxCheckTable:sale\lib\cashbox\internals\cashboxcheck.php */
namespace Bitrix\Sale\Cashbox\Internals {
	/**
	 * EO_CashboxCheck
	 * @see \Bitrix\Sale\Cashbox\Internals\CashboxCheckTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getId()
	 * @method \Bitrix\Sale\Cashbox\Internals\EO_CashboxCheck setId(\int|\Bitrix\Main\DB\SqlExpression $id)
	 * @method bool hasId()
	 * @method bool isIdFilled()
	 * @method bool isIdChanged()
	 * @method \int getPaymentId()
	 * @method \Bitrix\Sale\Cashbox\Internals\EO_CashboxCheck setPaymentId(\int|\Bitrix\Main\DB\SqlExpression $paymentId)
	 * @method bool hasPaymentId()
	 * @method bool isPaymentIdFilled()
	 * @method bool isPaymentIdChanged()
	 * @method \int remindActualPaymentId()
	 * @method \int requirePaymentId()
	 * @method \Bitrix\Sale\Cashbox\Internals\EO_CashboxCheck resetPaymentId()
	 * @method \Bitrix\Sale\Cashbox\Internals\EO_CashboxCheck unsetPaymentId()
	 * @method \int fillPaymentId()
	 * @method \Bitrix\Sale\Internals\EO_Payment getPayment()
	 * @method \Bitrix\Sale\Internals\EO_Payment remindActualPayment()
	 * @method \Bitrix\Sale\Internals\EO_Payment requirePayment()
	 * @method \Bitrix\Sale\Cashbox\Internals\EO_CashboxCheck setPayment(\Bitrix\Sale\Internals\EO_Payment $object)
	 * @method \Bitrix\Sale\Cashbox\Internals\EO_CashboxCheck resetPayment()
	 * @method \Bitrix\Sale\Cashbox\Internals\EO_CashboxCheck unsetPayment()
	 * @method bool hasPayment()
	 * @method bool isPaymentFilled()
	 * @method bool isPaymentChanged()
	 * @method \Bitrix\Sale\Internals\EO_Payment fillPayment()
	 * @method \int getShipmentId()
	 * @method \Bitrix\Sale\Cashbox\Internals\EO_CashboxCheck setShipmentId(\int|\Bitrix\Main\DB\SqlExpression $shipmentId)
	 * @method bool hasShipmentId()
	 * @method bool isShipmentIdFilled()
	 * @method bool isShipmentIdChanged()
	 * @method \int remindActualShipmentId()
	 * @method \int requireShipmentId()
	 * @method \Bitrix\Sale\Cashbox\Internals\EO_CashboxCheck resetShipmentId()
	 * @method \Bitrix\Sale\Cashbox\Internals\EO_CashboxCheck unsetShipmentId()
	 * @method \int fillShipmentId()
	 * @method \int getOrderId()
	 * @method \Bitrix\Sale\Cashbox\Internals\EO_CashboxCheck setOrderId(\int|\Bitrix\Main\DB\SqlExpression $orderId)
	 * @method bool hasOrderId()
	 * @method bool isOrderIdFilled()
	 * @method bool isOrderIdChanged()
	 * @method \int remindActualOrderId()
	 * @method \int requireOrderId()
	 * @method \Bitrix\Sale\Cashbox\Internals\EO_CashboxCheck resetOrderId()
	 * @method \Bitrix\Sale\Cashbox\Internals\EO_CashboxCheck unsetOrderId()
	 * @method \int fillOrderId()
	 * @method \string getExternalUuid()
	 * @method \Bitrix\Sale\Cashbox\Internals\EO_CashboxCheck setExternalUuid(\string|\Bitrix\Main\DB\SqlExpression $externalUuid)
	 * @method bool hasExternalUuid()
	 * @method bool isExternalUuidFilled()
	 * @method bool isExternalUuidChanged()
	 * @method \string remindActualExternalUuid()
	 * @method \string requireExternalUuid()
	 * @method \Bitrix\Sale\Cashbox\Internals\EO_CashboxCheck resetExternalUuid()
	 * @method \Bitrix\Sale\Cashbox\Internals\EO_CashboxCheck unsetExternalUuid()
	 * @method \string fillExternalUuid()
	 * @method \int getCashboxId()
	 * @method \Bitrix\Sale\Cashbox\Internals\EO_CashboxCheck setCashboxId(\int|\Bitrix\Main\DB\SqlExpression $cashboxId)
	 * @method bool hasCashboxId()
	 * @method bool isCashboxIdFilled()
	 * @method bool isCashboxIdChanged()
	 * @method \int remindActualCashboxId()
	 * @method \int requireCashboxId()
	 * @method \Bitrix\Sale\Cashbox\Internals\EO_CashboxCheck resetCashboxId()
	 * @method \Bitrix\Sale\Cashbox\Internals\EO_CashboxCheck unsetCashboxId()
	 * @method \int fillCashboxId()
	 * @method \int getCntFailPrint()
	 * @method \Bitrix\Sale\Cashbox\Internals\EO_CashboxCheck setCntFailPrint(\int|\Bitrix\Main\DB\SqlExpression $cntFailPrint)
	 * @method bool hasCntFailPrint()
	 * @method bool isCntFailPrintFilled()
	 * @method bool isCntFailPrintChanged()
	 * @method \int remindActualCntFailPrint()
	 * @method \int requireCntFailPrint()
	 * @method \Bitrix\Sale\Cashbox\Internals\EO_CashboxCheck resetCntFailPrint()
	 * @method \Bitrix\Sale\Cashbox\Internals\EO_CashboxCheck unsetCntFailPrint()
	 * @method \int fillCntFailPrint()
	 * @method \Bitrix\Sale\Cashbox\Internals\EO_Cashbox getCashbox()
	 * @method \Bitrix\Sale\Cashbox\Internals\EO_Cashbox remindActualCashbox()
	 * @method \Bitrix\Sale\Cashbox\Internals\EO_Cashbox requireCashbox()
	 * @method \Bitrix\Sale\Cashbox\Internals\EO_CashboxCheck setCashbox(\Bitrix\Sale\Cashbox\Internals\EO_Cashbox $object)
	 * @method \Bitrix\Sale\Cashbox\Internals\EO_CashboxCheck resetCashbox()
	 * @method \Bitrix\Sale\Cashbox\Internals\EO_CashboxCheck unsetCashbox()
	 * @method bool hasCashbox()
	 * @method bool isCashboxFilled()
	 * @method bool isCashboxChanged()
	 * @method \Bitrix\Sale\Cashbox\Internals\EO_Cashbox fillCashbox()
	 * @method \Bitrix\Main\Type\DateTime getDateCreate()
	 * @method \Bitrix\Sale\Cashbox\Internals\EO_CashboxCheck setDateCreate(\Bitrix\Main\Type\DateTime|\Bitrix\Main\DB\SqlExpression $dateCreate)
	 * @method bool hasDateCreate()
	 * @method bool isDateCreateFilled()
	 * @method bool isDateCreateChanged()
	 * @method \Bitrix\Main\Type\DateTime remindActualDateCreate()
	 * @method \Bitrix\Main\Type\DateTime requireDateCreate()
	 * @method \Bitrix\Sale\Cashbox\Internals\EO_CashboxCheck resetDateCreate()
	 * @method \Bitrix\Sale\Cashbox\Internals\EO_CashboxCheck unsetDateCreate()
	 * @method \Bitrix\Main\Type\DateTime fillDateCreate()
	 * @method \Bitrix\Main\Type\DateTime getDatePrintStart()
	 * @method \Bitrix\Sale\Cashbox\Internals\EO_CashboxCheck setDatePrintStart(\Bitrix\Main\Type\DateTime|\Bitrix\Main\DB\SqlExpression $datePrintStart)
	 * @method bool hasDatePrintStart()
	 * @method bool isDatePrintStartFilled()
	 * @method bool isDatePrintStartChanged()
	 * @method \Bitrix\Main\Type\DateTime remindActualDatePrintStart()
	 * @method \Bitrix\Main\Type\DateTime requireDatePrintStart()
	 * @method \Bitrix\Sale\Cashbox\Internals\EO_CashboxCheck resetDatePrintStart()
	 * @method \Bitrix\Sale\Cashbox\Internals\EO_CashboxCheck unsetDatePrintStart()
	 * @method \Bitrix\Main\Type\DateTime fillDatePrintStart()
	 * @method \Bitrix\Main\Type\DateTime getDatePrintEnd()
	 * @method \Bitrix\Sale\Cashbox\Internals\EO_CashboxCheck setDatePrintEnd(\Bitrix\Main\Type\DateTime|\Bitrix\Main\DB\SqlExpression $datePrintEnd)
	 * @method bool hasDatePrintEnd()
	 * @method bool isDatePrintEndFilled()
	 * @method bool isDatePrintEndChanged()
	 * @method \Bitrix\Main\Type\DateTime remindActualDatePrintEnd()
	 * @method \Bitrix\Main\Type\DateTime requireDatePrintEnd()
	 * @method \Bitrix\Sale\Cashbox\Internals\EO_CashboxCheck resetDatePrintEnd()
	 * @method \Bitrix\Sale\Cashbox\Internals\EO_CashboxCheck unsetDatePrintEnd()
	 * @method \Bitrix\Main\Type\DateTime fillDatePrintEnd()
	 * @method \float getSum()
	 * @method \Bitrix\Sale\Cashbox\Internals\EO_CashboxCheck setSum(\float|\Bitrix\Main\DB\SqlExpression $sum)
	 * @method bool hasSum()
	 * @method bool isSumFilled()
	 * @method bool isSumChanged()
	 * @method \float remindActualSum()
	 * @method \float requireSum()
	 * @method \Bitrix\Sale\Cashbox\Internals\EO_CashboxCheck resetSum()
	 * @method \Bitrix\Sale\Cashbox\Internals\EO_CashboxCheck unsetSum()
	 * @method \float fillSum()
	 * @method \string getCurrency()
	 * @method \Bitrix\Sale\Cashbox\Internals\EO_CashboxCheck setCurrency(\string|\Bitrix\Main\DB\SqlExpression $currency)
	 * @method bool hasCurrency()
	 * @method bool isCurrencyFilled()
	 * @method bool isCurrencyChanged()
	 * @method \string remindActualCurrency()
	 * @method \string requireCurrency()
	 * @method \Bitrix\Sale\Cashbox\Internals\EO_CashboxCheck resetCurrency()
	 * @method \Bitrix\Sale\Cashbox\Internals\EO_CashboxCheck unsetCurrency()
	 * @method \string fillCurrency()
	 * @method \string getLinkParams()
	 * @method \Bitrix\Sale\Cashbox\Internals\EO_CashboxCheck setLinkParams(\string|\Bitrix\Main\DB\SqlExpression $linkParams)
	 * @method bool hasLinkParams()
	 * @method bool isLinkParamsFilled()
	 * @method bool isLinkParamsChanged()
	 * @method \string remindActualLinkParams()
	 * @method \string requireLinkParams()
	 * @method \Bitrix\Sale\Cashbox\Internals\EO_CashboxCheck resetLinkParams()
	 * @method \Bitrix\Sale\Cashbox\Internals\EO_CashboxCheck unsetLinkParams()
	 * @method \string fillLinkParams()
	 * @method \string getType()
	 * @method \Bitrix\Sale\Cashbox\Internals\EO_CashboxCheck setType(\string|\Bitrix\Main\DB\SqlExpression $type)
	 * @method bool hasType()
	 * @method bool isTypeFilled()
	 * @method bool isTypeChanged()
	 * @method \string remindActualType()
	 * @method \string requireType()
	 * @method \Bitrix\Sale\Cashbox\Internals\EO_CashboxCheck resetType()
	 * @method \Bitrix\Sale\Cashbox\Internals\EO_CashboxCheck unsetType()
	 * @method \string fillType()
	 * @method \string getStatus()
	 * @method \Bitrix\Sale\Cashbox\Internals\EO_CashboxCheck setStatus(\string|\Bitrix\Main\DB\SqlExpression $status)
	 * @method bool hasStatus()
	 * @method bool isStatusFilled()
	 * @method bool isStatusChanged()
	 * @method \string remindActualStatus()
	 * @method \string requireStatus()
	 * @method \Bitrix\Sale\Cashbox\Internals\EO_CashboxCheck resetStatus()
	 * @method \Bitrix\Sale\Cashbox\Internals\EO_CashboxCheck unsetStatus()
	 * @method \string fillStatus()
	 * @method \Bitrix\Sale\Cashbox\Internals\EO_Check2Cashbox getCheck2cashbox()
	 * @method \Bitrix\Sale\Cashbox\Internals\EO_Check2Cashbox remindActualCheck2cashbox()
	 * @method \Bitrix\Sale\Cashbox\Internals\EO_Check2Cashbox requireCheck2cashbox()
	 * @method \Bitrix\Sale\Cashbox\Internals\EO_CashboxCheck setCheck2cashbox(\Bitrix\Sale\Cashbox\Internals\EO_Check2Cashbox $object)
	 * @method \Bitrix\Sale\Cashbox\Internals\EO_CashboxCheck resetCheck2cashbox()
	 * @method \Bitrix\Sale\Cashbox\Internals\EO_CashboxCheck unsetCheck2cashbox()
	 * @method bool hasCheck2cashbox()
	 * @method bool isCheck2cashboxFilled()
	 * @method bool isCheck2cashboxChanged()
	 * @method \Bitrix\Sale\Cashbox\Internals\EO_Check2Cashbox fillCheck2cashbox()
	 * @method \string getEntityRegistryType()
	 * @method \Bitrix\Sale\Cashbox\Internals\EO_CashboxCheck setEntityRegistryType(\string|\Bitrix\Main\DB\SqlExpression $entityRegistryType)
	 * @method bool hasEntityRegistryType()
	 * @method bool isEntityRegistryTypeFilled()
	 * @method bool isEntityRegistryTypeChanged()
	 * @method \string remindActualEntityRegistryType()
	 * @method \string requireEntityRegistryType()
	 * @method \Bitrix\Sale\Cashbox\Internals\EO_CashboxCheck resetEntityRegistryType()
	 * @method \Bitrix\Sale\Cashbox\Internals\EO_CashboxCheck unsetEntityRegistryType()
	 * @method \string fillEntityRegistryType()
	 * @method \string getErrorMessage()
	 * @method \Bitrix\Sale\Cashbox\Internals\EO_CashboxCheck setErrorMessage(\string|\Bitrix\Main\DB\SqlExpression $errorMessage)
	 * @method bool hasErrorMessage()
	 * @method bool isErrorMessageFilled()
	 * @method bool isErrorMessageChanged()
	 * @method \string remindActualErrorMessage()
	 * @method \string requireErrorMessage()
	 * @method \Bitrix\Sale\Cashbox\Internals\EO_CashboxCheck resetErrorMessage()
	 * @method \Bitrix\Sale\Cashbox\Internals\EO_CashboxCheck unsetErrorMessage()
	 * @method \string fillErrorMessage()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Sale\Cashbox\Internals\EO_CashboxCheck set($fieldName, $value)
	 * @method \Bitrix\Sale\Cashbox\Internals\EO_CashboxCheck reset($fieldName)
	 * @method \Bitrix\Sale\Cashbox\Internals\EO_CashboxCheck unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Sale\Cashbox\Internals\EO_CashboxCheck wakeUp($data)
	 */
	class EO_CashboxCheck {
		/* @var \Bitrix\Sale\Cashbox\Internals\CashboxCheckTable */
		static public $dataClass = '\Bitrix\Sale\Cashbox\Internals\CashboxCheckTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Sale\Cashbox\Internals {
	/**
	 * EO_CashboxCheck_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getIdList()
	 * @method \int[] getPaymentIdList()
	 * @method \int[] fillPaymentId()
	 * @method \Bitrix\Sale\Internals\EO_Payment[] getPaymentList()
	 * @method \Bitrix\Sale\Cashbox\Internals\EO_CashboxCheck_Collection getPaymentCollection()
	 * @method \Bitrix\Sale\Internals\EO_Payment_Collection fillPayment()
	 * @method \int[] getShipmentIdList()
	 * @method \int[] fillShipmentId()
	 * @method \int[] getOrderIdList()
	 * @method \int[] fillOrderId()
	 * @method \string[] getExternalUuidList()
	 * @method \string[] fillExternalUuid()
	 * @method \int[] getCashboxIdList()
	 * @method \int[] fillCashboxId()
	 * @method \int[] getCntFailPrintList()
	 * @method \int[] fillCntFailPrint()
	 * @method \Bitrix\Sale\Cashbox\Internals\EO_Cashbox[] getCashboxList()
	 * @method \Bitrix\Sale\Cashbox\Internals\EO_CashboxCheck_Collection getCashboxCollection()
	 * @method \Bitrix\Sale\Cashbox\Internals\EO_Cashbox_Collection fillCashbox()
	 * @method \Bitrix\Main\Type\DateTime[] getDateCreateList()
	 * @method \Bitrix\Main\Type\DateTime[] fillDateCreate()
	 * @method \Bitrix\Main\Type\DateTime[] getDatePrintStartList()
	 * @method \Bitrix\Main\Type\DateTime[] fillDatePrintStart()
	 * @method \Bitrix\Main\Type\DateTime[] getDatePrintEndList()
	 * @method \Bitrix\Main\Type\DateTime[] fillDatePrintEnd()
	 * @method \float[] getSumList()
	 * @method \float[] fillSum()
	 * @method \string[] getCurrencyList()
	 * @method \string[] fillCurrency()
	 * @method \string[] getLinkParamsList()
	 * @method \string[] fillLinkParams()
	 * @method \string[] getTypeList()
	 * @method \string[] fillType()
	 * @method \string[] getStatusList()
	 * @method \string[] fillStatus()
	 * @method \Bitrix\Sale\Cashbox\Internals\EO_Check2Cashbox[] getCheck2cashboxList()
	 * @method \Bitrix\Sale\Cashbox\Internals\EO_CashboxCheck_Collection getCheck2cashboxCollection()
	 * @method \Bitrix\Sale\Cashbox\Internals\EO_Check2Cashbox_Collection fillCheck2cashbox()
	 * @method \string[] getEntityRegistryTypeList()
	 * @method \string[] fillEntityRegistryType()
	 * @method \string[] getErrorMessageList()
	 * @method \string[] fillErrorMessage()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Sale\Cashbox\Internals\EO_CashboxCheck $object)
	 * @method bool has(\Bitrix\Sale\Cashbox\Internals\EO_CashboxCheck $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Sale\Cashbox\Internals\EO_CashboxCheck getByPrimary($primary)
	 * @method \Bitrix\Sale\Cashbox\Internals\EO_CashboxCheck[] getAll()
	 * @method bool remove(\Bitrix\Sale\Cashbox\Internals\EO_CashboxCheck $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Sale\Cashbox\Internals\EO_CashboxCheck_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Sale\Cashbox\Internals\EO_CashboxCheck current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 * @method EO_CashboxCheck_Collection merge(?EO_CashboxCheck_Collection $collection)
	 * @method bool isEmpty()
	 */
	class EO_CashboxCheck_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Sale\Cashbox\Internals\CashboxCheckTable */
		static public $dataClass = '\Bitrix\Sale\Cashbox\Internals\CashboxCheckTable';
	}
}
namespace Bitrix\Sale\Cashbox\Internals {
	/**
	 * Common methods:
	 * ---------------
	 *
	 * @method EO_CashboxCheck_Result exec()
	 * @method \Bitrix\Sale\Cashbox\Internals\EO_CashboxCheck fetchObject()
	 * @method \Bitrix\Sale\Cashbox\Internals\EO_CashboxCheck_Collection fetchCollection()
	 *
	 * Custom methods:
	 * ---------------
	 *
	 */
	class EO_CashboxCheck_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Sale\Cashbox\Internals\EO_CashboxCheck fetchObject()
	 * @method \Bitrix\Sale\Cashbox\Internals\EO_CashboxCheck_Collection fetchCollection()
	 */
	class EO_CashboxCheck_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Sale\Cashbox\Internals\EO_CashboxCheck createObject($setDefaultValues = true)
	 * @method \Bitrix\Sale\Cashbox\Internals\EO_CashboxCheck_Collection createCollection()
	 * @method \Bitrix\Sale\Cashbox\Internals\EO_CashboxCheck wakeUpObject($row)
	 * @method \Bitrix\Sale\Cashbox\Internals\EO_CashboxCheck_Collection wakeUpCollection($rows)
	 */
	class EO_CashboxCheck_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Sale\Cashbox\Internals\CashboxCheckCorrectionTable:sale\lib\cashbox\internals\cashboxcheckcorrection.php */
namespace Bitrix\Sale\Cashbox\Internals {
	/**
	 * EO_CashboxCheckCorrection
	 * @see \Bitrix\Sale\Cashbox\Internals\CashboxCheckCorrectionTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getId()
	 * @method \Bitrix\Sale\Cashbox\Internals\EO_CashboxCheckCorrection setId(\int|\Bitrix\Main\DB\SqlExpression $id)
	 * @method bool hasId()
	 * @method bool isIdFilled()
	 * @method bool isIdChanged()
	 * @method \int getCheckId()
	 * @method \Bitrix\Sale\Cashbox\Internals\EO_CashboxCheckCorrection setCheckId(\int|\Bitrix\Main\DB\SqlExpression $checkId)
	 * @method bool hasCheckId()
	 * @method bool isCheckIdFilled()
	 * @method bool isCheckIdChanged()
	 * @method \int remindActualCheckId()
	 * @method \int requireCheckId()
	 * @method \Bitrix\Sale\Cashbox\Internals\EO_CashboxCheckCorrection resetCheckId()
	 * @method \Bitrix\Sale\Cashbox\Internals\EO_CashboxCheckCorrection unsetCheckId()
	 * @method \int fillCheckId()
	 * @method \Bitrix\Sale\Cashbox\Internals\EO_CashboxCheck getCheck()
	 * @method \Bitrix\Sale\Cashbox\Internals\EO_CashboxCheck remindActualCheck()
	 * @method \Bitrix\Sale\Cashbox\Internals\EO_CashboxCheck requireCheck()
	 * @method \Bitrix\Sale\Cashbox\Internals\EO_CashboxCheckCorrection setCheck(\Bitrix\Sale\Cashbox\Internals\EO_CashboxCheck $object)
	 * @method \Bitrix\Sale\Cashbox\Internals\EO_CashboxCheckCorrection resetCheck()
	 * @method \Bitrix\Sale\Cashbox\Internals\EO_CashboxCheckCorrection unsetCheck()
	 * @method bool hasCheck()
	 * @method bool isCheckFilled()
	 * @method bool isCheckChanged()
	 * @method \Bitrix\Sale\Cashbox\Internals\EO_CashboxCheck fillCheck()
	 * @method \string getCorrectionType()
	 * @method \Bitrix\Sale\Cashbox\Internals\EO_CashboxCheckCorrection setCorrectionType(\string|\Bitrix\Main\DB\SqlExpression $correctionType)
	 * @method bool hasCorrectionType()
	 * @method bool isCorrectionTypeFilled()
	 * @method bool isCorrectionTypeChanged()
	 * @method \string remindActualCorrectionType()
	 * @method \string requireCorrectionType()
	 * @method \Bitrix\Sale\Cashbox\Internals\EO_CashboxCheckCorrection resetCorrectionType()
	 * @method \Bitrix\Sale\Cashbox\Internals\EO_CashboxCheckCorrection unsetCorrectionType()
	 * @method \string fillCorrectionType()
	 * @method \string getDocumentNumber()
	 * @method \Bitrix\Sale\Cashbox\Internals\EO_CashboxCheckCorrection setDocumentNumber(\string|\Bitrix\Main\DB\SqlExpression $documentNumber)
	 * @method bool hasDocumentNumber()
	 * @method bool isDocumentNumberFilled()
	 * @method bool isDocumentNumberChanged()
	 * @method \string remindActualDocumentNumber()
	 * @method \string requireDocumentNumber()
	 * @method \Bitrix\Sale\Cashbox\Internals\EO_CashboxCheckCorrection resetDocumentNumber()
	 * @method \Bitrix\Sale\Cashbox\Internals\EO_CashboxCheckCorrection unsetDocumentNumber()
	 * @method \string fillDocumentNumber()
	 * @method \Bitrix\Main\Type\Date getDocumentDate()
	 * @method \Bitrix\Sale\Cashbox\Internals\EO_CashboxCheckCorrection setDocumentDate(\Bitrix\Main\Type\Date|\Bitrix\Main\DB\SqlExpression $documentDate)
	 * @method bool hasDocumentDate()
	 * @method bool isDocumentDateFilled()
	 * @method bool isDocumentDateChanged()
	 * @method \Bitrix\Main\Type\Date remindActualDocumentDate()
	 * @method \Bitrix\Main\Type\Date requireDocumentDate()
	 * @method \Bitrix\Sale\Cashbox\Internals\EO_CashboxCheckCorrection resetDocumentDate()
	 * @method \Bitrix\Sale\Cashbox\Internals\EO_CashboxCheckCorrection unsetDocumentDate()
	 * @method \Bitrix\Main\Type\Date fillDocumentDate()
	 * @method \string getDescription()
	 * @method \Bitrix\Sale\Cashbox\Internals\EO_CashboxCheckCorrection setDescription(\string|\Bitrix\Main\DB\SqlExpression $description)
	 * @method bool hasDescription()
	 * @method bool isDescriptionFilled()
	 * @method bool isDescriptionChanged()
	 * @method \string remindActualDescription()
	 * @method \string requireDescription()
	 * @method \Bitrix\Sale\Cashbox\Internals\EO_CashboxCheckCorrection resetDescription()
	 * @method \Bitrix\Sale\Cashbox\Internals\EO_CashboxCheckCorrection unsetDescription()
	 * @method \string fillDescription()
	 * @method \string getCorrectionPayment()
	 * @method \Bitrix\Sale\Cashbox\Internals\EO_CashboxCheckCorrection setCorrectionPayment(\string|\Bitrix\Main\DB\SqlExpression $correctionPayment)
	 * @method bool hasCorrectionPayment()
	 * @method bool isCorrectionPaymentFilled()
	 * @method bool isCorrectionPaymentChanged()
	 * @method \string remindActualCorrectionPayment()
	 * @method \string requireCorrectionPayment()
	 * @method \Bitrix\Sale\Cashbox\Internals\EO_CashboxCheckCorrection resetCorrectionPayment()
	 * @method \Bitrix\Sale\Cashbox\Internals\EO_CashboxCheckCorrection unsetCorrectionPayment()
	 * @method \string fillCorrectionPayment()
	 * @method \string getCorrectionVat()
	 * @method \Bitrix\Sale\Cashbox\Internals\EO_CashboxCheckCorrection setCorrectionVat(\string|\Bitrix\Main\DB\SqlExpression $correctionVat)
	 * @method bool hasCorrectionVat()
	 * @method bool isCorrectionVatFilled()
	 * @method bool isCorrectionVatChanged()
	 * @method \string remindActualCorrectionVat()
	 * @method \string requireCorrectionVat()
	 * @method \Bitrix\Sale\Cashbox\Internals\EO_CashboxCheckCorrection resetCorrectionVat()
	 * @method \Bitrix\Sale\Cashbox\Internals\EO_CashboxCheckCorrection unsetCorrectionVat()
	 * @method \string fillCorrectionVat()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Sale\Cashbox\Internals\EO_CashboxCheckCorrection set($fieldName, $value)
	 * @method \Bitrix\Sale\Cashbox\Internals\EO_CashboxCheckCorrection reset($fieldName)
	 * @method \Bitrix\Sale\Cashbox\Internals\EO_CashboxCheckCorrection unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Sale\Cashbox\Internals\EO_CashboxCheckCorrection wakeUp($data)
	 */
	class EO_CashboxCheckCorrection {
		/* @var \Bitrix\Sale\Cashbox\Internals\CashboxCheckCorrectionTable */
		static public $dataClass = '\Bitrix\Sale\Cashbox\Internals\CashboxCheckCorrectionTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Sale\Cashbox\Internals {
	/**
	 * EO_CashboxCheckCorrection_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getIdList()
	 * @method \int[] getCheckIdList()
	 * @method \int[] fillCheckId()
	 * @method \Bitrix\Sale\Cashbox\Internals\EO_CashboxCheck[] getCheckList()
	 * @method \Bitrix\Sale\Cashbox\Internals\EO_CashboxCheckCorrection_Collection getCheckCollection()
	 * @method \Bitrix\Sale\Cashbox\Internals\EO_CashboxCheck_Collection fillCheck()
	 * @method \string[] getCorrectionTypeList()
	 * @method \string[] fillCorrectionType()
	 * @method \string[] getDocumentNumberList()
	 * @method \string[] fillDocumentNumber()
	 * @method \Bitrix\Main\Type\Date[] getDocumentDateList()
	 * @method \Bitrix\Main\Type\Date[] fillDocumentDate()
	 * @method \string[] getDescriptionList()
	 * @method \string[] fillDescription()
	 * @method \string[] getCorrectionPaymentList()
	 * @method \string[] fillCorrectionPayment()
	 * @method \string[] getCorrectionVatList()
	 * @method \string[] fillCorrectionVat()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Sale\Cashbox\Internals\EO_CashboxCheckCorrection $object)
	 * @method bool has(\Bitrix\Sale\Cashbox\Internals\EO_CashboxCheckCorrection $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Sale\Cashbox\Internals\EO_CashboxCheckCorrection getByPrimary($primary)
	 * @method \Bitrix\Sale\Cashbox\Internals\EO_CashboxCheckCorrection[] getAll()
	 * @method bool remove(\Bitrix\Sale\Cashbox\Internals\EO_CashboxCheckCorrection $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Sale\Cashbox\Internals\EO_CashboxCheckCorrection_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Sale\Cashbox\Internals\EO_CashboxCheckCorrection current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 * @method EO_CashboxCheckCorrection_Collection merge(?EO_CashboxCheckCorrection_Collection $collection)
	 * @method bool isEmpty()
	 */
	class EO_CashboxCheckCorrection_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Sale\Cashbox\Internals\CashboxCheckCorrectionTable */
		static public $dataClass = '\Bitrix\Sale\Cashbox\Internals\CashboxCheckCorrectionTable';
	}
}
namespace Bitrix\Sale\Cashbox\Internals {
	/**
	 * Common methods:
	 * ---------------
	 *
	 * @method EO_CashboxCheckCorrection_Result exec()
	 * @method \Bitrix\Sale\Cashbox\Internals\EO_CashboxCheckCorrection fetchObject()
	 * @method \Bitrix\Sale\Cashbox\Internals\EO_CashboxCheckCorrection_Collection fetchCollection()
	 *
	 * Custom methods:
	 * ---------------
	 *
	 */
	class EO_CashboxCheckCorrection_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Sale\Cashbox\Internals\EO_CashboxCheckCorrection fetchObject()
	 * @method \Bitrix\Sale\Cashbox\Internals\EO_CashboxCheckCorrection_Collection fetchCollection()
	 */
	class EO_CashboxCheckCorrection_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Sale\Cashbox\Internals\EO_CashboxCheckCorrection createObject($setDefaultValues = true)
	 * @method \Bitrix\Sale\Cashbox\Internals\EO_CashboxCheckCorrection_Collection createCollection()
	 * @method \Bitrix\Sale\Cashbox\Internals\EO_CashboxCheckCorrection wakeUpObject($row)
	 * @method \Bitrix\Sale\Cashbox\Internals\EO_CashboxCheckCorrection_Collection wakeUpCollection($rows)
	 */
	class EO_CashboxCheckCorrection_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Sale\Cashbox\Internals\CashboxConnectTable:sale\lib\cashbox\internals\cashboxconnect.php */
namespace Bitrix\Sale\Cashbox\Internals {
	/**
	 * EO_CashboxConnect
	 * @see \Bitrix\Sale\Cashbox\Internals\CashboxConnectTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \string getHash()
	 * @method \Bitrix\Sale\Cashbox\Internals\EO_CashboxConnect setHash(\string|\Bitrix\Main\DB\SqlExpression $hash)
	 * @method bool hasHash()
	 * @method bool isHashFilled()
	 * @method bool isHashChanged()
	 * @method \boolean getActive()
	 * @method \Bitrix\Sale\Cashbox\Internals\EO_CashboxConnect setActive(\boolean|\Bitrix\Main\DB\SqlExpression $active)
	 * @method bool hasActive()
	 * @method bool isActiveFilled()
	 * @method bool isActiveChanged()
	 * @method \boolean remindActualActive()
	 * @method \boolean requireActive()
	 * @method \Bitrix\Sale\Cashbox\Internals\EO_CashboxConnect resetActive()
	 * @method \Bitrix\Sale\Cashbox\Internals\EO_CashboxConnect unsetActive()
	 * @method \boolean fillActive()
	 * @method \Bitrix\Main\Type\DateTime getDateCreate()
	 * @method \Bitrix\Sale\Cashbox\Internals\EO_CashboxConnect setDateCreate(\Bitrix\Main\Type\DateTime|\Bitrix\Main\DB\SqlExpression $dateCreate)
	 * @method bool hasDateCreate()
	 * @method bool isDateCreateFilled()
	 * @method bool isDateCreateChanged()
	 * @method \Bitrix\Main\Type\DateTime remindActualDateCreate()
	 * @method \Bitrix\Main\Type\DateTime requireDateCreate()
	 * @method \Bitrix\Sale\Cashbox\Internals\EO_CashboxConnect resetDateCreate()
	 * @method \Bitrix\Sale\Cashbox\Internals\EO_CashboxConnect unsetDateCreate()
	 * @method \Bitrix\Main\Type\DateTime fillDateCreate()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Sale\Cashbox\Internals\EO_CashboxConnect set($fieldName, $value)
	 * @method \Bitrix\Sale\Cashbox\Internals\EO_CashboxConnect reset($fieldName)
	 * @method \Bitrix\Sale\Cashbox\Internals\EO_CashboxConnect unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Sale\Cashbox\Internals\EO_CashboxConnect wakeUp($data)
	 */
	class EO_CashboxConnect {
		/* @var \Bitrix\Sale\Cashbox\Internals\CashboxConnectTable */
		static public $dataClass = '\Bitrix\Sale\Cashbox\Internals\CashboxConnectTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Sale\Cashbox\Internals {
	/**
	 * EO_CashboxConnect_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \string[] getHashList()
	 * @method \boolean[] getActiveList()
	 * @method \boolean[] fillActive()
	 * @method \Bitrix\Main\Type\DateTime[] getDateCreateList()
	 * @method \Bitrix\Main\Type\DateTime[] fillDateCreate()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Sale\Cashbox\Internals\EO_CashboxConnect $object)
	 * @method bool has(\Bitrix\Sale\Cashbox\Internals\EO_CashboxConnect $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Sale\Cashbox\Internals\EO_CashboxConnect getByPrimary($primary)
	 * @method \Bitrix\Sale\Cashbox\Internals\EO_CashboxConnect[] getAll()
	 * @method bool remove(\Bitrix\Sale\Cashbox\Internals\EO_CashboxConnect $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Sale\Cashbox\Internals\EO_CashboxConnect_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Sale\Cashbox\Internals\EO_CashboxConnect current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 * @method EO_CashboxConnect_Collection merge(?EO_CashboxConnect_Collection $collection)
	 * @method bool isEmpty()
	 */
	class EO_CashboxConnect_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Sale\Cashbox\Internals\CashboxConnectTable */
		static public $dataClass = '\Bitrix\Sale\Cashbox\Internals\CashboxConnectTable';
	}
}
namespace Bitrix\Sale\Cashbox\Internals {
	/**
	 * Common methods:
	 * ---------------
	 *
	 * @method EO_CashboxConnect_Result exec()
	 * @method \Bitrix\Sale\Cashbox\Internals\EO_CashboxConnect fetchObject()
	 * @method \Bitrix\Sale\Cashbox\Internals\EO_CashboxConnect_Collection fetchCollection()
	 *
	 * Custom methods:
	 * ---------------
	 *
	 */
	class EO_CashboxConnect_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Sale\Cashbox\Internals\EO_CashboxConnect fetchObject()
	 * @method \Bitrix\Sale\Cashbox\Internals\EO_CashboxConnect_Collection fetchCollection()
	 */
	class EO_CashboxConnect_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Sale\Cashbox\Internals\EO_CashboxConnect createObject($setDefaultValues = true)
	 * @method \Bitrix\Sale\Cashbox\Internals\EO_CashboxConnect_Collection createCollection()
	 * @method \Bitrix\Sale\Cashbox\Internals\EO_CashboxConnect wakeUpObject($row)
	 * @method \Bitrix\Sale\Cashbox\Internals\EO_CashboxConnect_Collection wakeUpCollection($rows)
	 */
	class EO_CashboxConnect_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Sale\Cashbox\Internals\CashboxErrLogTable:sale\lib\cashbox\internals\cashboxerrlog.php */
namespace Bitrix\Sale\Cashbox\Internals {
	/**
	 * EO_CashboxErrLog
	 * @see \Bitrix\Sale\Cashbox\Internals\CashboxErrLogTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getId()
	 * @method \Bitrix\Sale\Cashbox\Internals\EO_CashboxErrLog setId(\int|\Bitrix\Main\DB\SqlExpression $id)
	 * @method bool hasId()
	 * @method bool isIdFilled()
	 * @method bool isIdChanged()
	 * @method \int getCashboxId()
	 * @method \Bitrix\Sale\Cashbox\Internals\EO_CashboxErrLog setCashboxId(\int|\Bitrix\Main\DB\SqlExpression $cashboxId)
	 * @method bool hasCashboxId()
	 * @method bool isCashboxIdFilled()
	 * @method bool isCashboxIdChanged()
	 * @method \int remindActualCashboxId()
	 * @method \int requireCashboxId()
	 * @method \Bitrix\Sale\Cashbox\Internals\EO_CashboxErrLog resetCashboxId()
	 * @method \Bitrix\Sale\Cashbox\Internals\EO_CashboxErrLog unsetCashboxId()
	 * @method \int fillCashboxId()
	 * @method \Bitrix\Main\Type\DateTime getDateInsert()
	 * @method \Bitrix\Sale\Cashbox\Internals\EO_CashboxErrLog setDateInsert(\Bitrix\Main\Type\DateTime|\Bitrix\Main\DB\SqlExpression $dateInsert)
	 * @method bool hasDateInsert()
	 * @method bool isDateInsertFilled()
	 * @method bool isDateInsertChanged()
	 * @method \Bitrix\Main\Type\DateTime remindActualDateInsert()
	 * @method \Bitrix\Main\Type\DateTime requireDateInsert()
	 * @method \Bitrix\Sale\Cashbox\Internals\EO_CashboxErrLog resetDateInsert()
	 * @method \Bitrix\Sale\Cashbox\Internals\EO_CashboxErrLog unsetDateInsert()
	 * @method \Bitrix\Main\Type\DateTime fillDateInsert()
	 * @method \string getMessage()
	 * @method \Bitrix\Sale\Cashbox\Internals\EO_CashboxErrLog setMessage(\string|\Bitrix\Main\DB\SqlExpression $message)
	 * @method bool hasMessage()
	 * @method bool isMessageFilled()
	 * @method bool isMessageChanged()
	 * @method \string remindActualMessage()
	 * @method \string requireMessage()
	 * @method \Bitrix\Sale\Cashbox\Internals\EO_CashboxErrLog resetMessage()
	 * @method \Bitrix\Sale\Cashbox\Internals\EO_CashboxErrLog unsetMessage()
	 * @method \string fillMessage()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Sale\Cashbox\Internals\EO_CashboxErrLog set($fieldName, $value)
	 * @method \Bitrix\Sale\Cashbox\Internals\EO_CashboxErrLog reset($fieldName)
	 * @method \Bitrix\Sale\Cashbox\Internals\EO_CashboxErrLog unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Sale\Cashbox\Internals\EO_CashboxErrLog wakeUp($data)
	 */
	class EO_CashboxErrLog {
		/* @var \Bitrix\Sale\Cashbox\Internals\CashboxErrLogTable */
		static public $dataClass = '\Bitrix\Sale\Cashbox\Internals\CashboxErrLogTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Sale\Cashbox\Internals {
	/**
	 * EO_CashboxErrLog_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getIdList()
	 * @method \int[] getCashboxIdList()
	 * @method \int[] fillCashboxId()
	 * @method \Bitrix\Main\Type\DateTime[] getDateInsertList()
	 * @method \Bitrix\Main\Type\DateTime[] fillDateInsert()
	 * @method \string[] getMessageList()
	 * @method \string[] fillMessage()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Sale\Cashbox\Internals\EO_CashboxErrLog $object)
	 * @method bool has(\Bitrix\Sale\Cashbox\Internals\EO_CashboxErrLog $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Sale\Cashbox\Internals\EO_CashboxErrLog getByPrimary($primary)
	 * @method \Bitrix\Sale\Cashbox\Internals\EO_CashboxErrLog[] getAll()
	 * @method bool remove(\Bitrix\Sale\Cashbox\Internals\EO_CashboxErrLog $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Sale\Cashbox\Internals\EO_CashboxErrLog_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Sale\Cashbox\Internals\EO_CashboxErrLog current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 * @method EO_CashboxErrLog_Collection merge(?EO_CashboxErrLog_Collection $collection)
	 * @method bool isEmpty()
	 */
	class EO_CashboxErrLog_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Sale\Cashbox\Internals\CashboxErrLogTable */
		static public $dataClass = '\Bitrix\Sale\Cashbox\Internals\CashboxErrLogTable';
	}
}
namespace Bitrix\Sale\Cashbox\Internals {
	/**
	 * Common methods:
	 * ---------------
	 *
	 * @method EO_CashboxErrLog_Result exec()
	 * @method \Bitrix\Sale\Cashbox\Internals\EO_CashboxErrLog fetchObject()
	 * @method \Bitrix\Sale\Cashbox\Internals\EO_CashboxErrLog_Collection fetchCollection()
	 *
	 * Custom methods:
	 * ---------------
	 *
	 */
	class EO_CashboxErrLog_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Sale\Cashbox\Internals\EO_CashboxErrLog fetchObject()
	 * @method \Bitrix\Sale\Cashbox\Internals\EO_CashboxErrLog_Collection fetchCollection()
	 */
	class EO_CashboxErrLog_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Sale\Cashbox\Internals\EO_CashboxErrLog createObject($setDefaultValues = true)
	 * @method \Bitrix\Sale\Cashbox\Internals\EO_CashboxErrLog_Collection createCollection()
	 * @method \Bitrix\Sale\Cashbox\Internals\EO_CashboxErrLog wakeUpObject($row)
	 * @method \Bitrix\Sale\Cashbox\Internals\EO_CashboxErrLog_Collection wakeUpCollection($rows)
	 */
	class EO_CashboxErrLog_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Sale\Cashbox\Internals\CashboxZReportTable:sale\lib\cashbox\internals\cashboxzreport.php */
namespace Bitrix\Sale\Cashbox\Internals {
	/**
	 * EO_CashboxZReport
	 * @see \Bitrix\Sale\Cashbox\Internals\CashboxZReportTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getId()
	 * @method \Bitrix\Sale\Cashbox\Internals\EO_CashboxZReport setId(\int|\Bitrix\Main\DB\SqlExpression $id)
	 * @method bool hasId()
	 * @method bool isIdFilled()
	 * @method bool isIdChanged()
	 * @method \string getLinkParams()
	 * @method \Bitrix\Sale\Cashbox\Internals\EO_CashboxZReport setLinkParams(\string|\Bitrix\Main\DB\SqlExpression $linkParams)
	 * @method bool hasLinkParams()
	 * @method bool isLinkParamsFilled()
	 * @method bool isLinkParamsChanged()
	 * @method \string remindActualLinkParams()
	 * @method \string requireLinkParams()
	 * @method \Bitrix\Sale\Cashbox\Internals\EO_CashboxZReport resetLinkParams()
	 * @method \Bitrix\Sale\Cashbox\Internals\EO_CashboxZReport unsetLinkParams()
	 * @method \string fillLinkParams()
	 * @method \int getCntFailPrint()
	 * @method \Bitrix\Sale\Cashbox\Internals\EO_CashboxZReport setCntFailPrint(\int|\Bitrix\Main\DB\SqlExpression $cntFailPrint)
	 * @method bool hasCntFailPrint()
	 * @method bool isCntFailPrintFilled()
	 * @method bool isCntFailPrintChanged()
	 * @method \int remindActualCntFailPrint()
	 * @method \int requireCntFailPrint()
	 * @method \Bitrix\Sale\Cashbox\Internals\EO_CashboxZReport resetCntFailPrint()
	 * @method \Bitrix\Sale\Cashbox\Internals\EO_CashboxZReport unsetCntFailPrint()
	 * @method \int fillCntFailPrint()
	 * @method \int getCashboxId()
	 * @method \Bitrix\Sale\Cashbox\Internals\EO_CashboxZReport setCashboxId(\int|\Bitrix\Main\DB\SqlExpression $cashboxId)
	 * @method bool hasCashboxId()
	 * @method bool isCashboxIdFilled()
	 * @method bool isCashboxIdChanged()
	 * @method \int remindActualCashboxId()
	 * @method \int requireCashboxId()
	 * @method \Bitrix\Sale\Cashbox\Internals\EO_CashboxZReport resetCashboxId()
	 * @method \Bitrix\Sale\Cashbox\Internals\EO_CashboxZReport unsetCashboxId()
	 * @method \int fillCashboxId()
	 * @method \Bitrix\Main\Type\DateTime getDateCreate()
	 * @method \Bitrix\Sale\Cashbox\Internals\EO_CashboxZReport setDateCreate(\Bitrix\Main\Type\DateTime|\Bitrix\Main\DB\SqlExpression $dateCreate)
	 * @method bool hasDateCreate()
	 * @method bool isDateCreateFilled()
	 * @method bool isDateCreateChanged()
	 * @method \Bitrix\Main\Type\DateTime remindActualDateCreate()
	 * @method \Bitrix\Main\Type\DateTime requireDateCreate()
	 * @method \Bitrix\Sale\Cashbox\Internals\EO_CashboxZReport resetDateCreate()
	 * @method \Bitrix\Sale\Cashbox\Internals\EO_CashboxZReport unsetDateCreate()
	 * @method \Bitrix\Main\Type\DateTime fillDateCreate()
	 * @method \Bitrix\Main\Type\DateTime getDatePrintStart()
	 * @method \Bitrix\Sale\Cashbox\Internals\EO_CashboxZReport setDatePrintStart(\Bitrix\Main\Type\DateTime|\Bitrix\Main\DB\SqlExpression $datePrintStart)
	 * @method bool hasDatePrintStart()
	 * @method bool isDatePrintStartFilled()
	 * @method bool isDatePrintStartChanged()
	 * @method \Bitrix\Main\Type\DateTime remindActualDatePrintStart()
	 * @method \Bitrix\Main\Type\DateTime requireDatePrintStart()
	 * @method \Bitrix\Sale\Cashbox\Internals\EO_CashboxZReport resetDatePrintStart()
	 * @method \Bitrix\Sale\Cashbox\Internals\EO_CashboxZReport unsetDatePrintStart()
	 * @method \Bitrix\Main\Type\DateTime fillDatePrintStart()
	 * @method \Bitrix\Main\Type\DateTime getDatePrintEnd()
	 * @method \Bitrix\Sale\Cashbox\Internals\EO_CashboxZReport setDatePrintEnd(\Bitrix\Main\Type\DateTime|\Bitrix\Main\DB\SqlExpression $datePrintEnd)
	 * @method bool hasDatePrintEnd()
	 * @method bool isDatePrintEndFilled()
	 * @method bool isDatePrintEndChanged()
	 * @method \Bitrix\Main\Type\DateTime remindActualDatePrintEnd()
	 * @method \Bitrix\Main\Type\DateTime requireDatePrintEnd()
	 * @method \Bitrix\Sale\Cashbox\Internals\EO_CashboxZReport resetDatePrintEnd()
	 * @method \Bitrix\Sale\Cashbox\Internals\EO_CashboxZReport unsetDatePrintEnd()
	 * @method \Bitrix\Main\Type\DateTime fillDatePrintEnd()
	 * @method \string getStatus()
	 * @method \Bitrix\Sale\Cashbox\Internals\EO_CashboxZReport setStatus(\string|\Bitrix\Main\DB\SqlExpression $status)
	 * @method bool hasStatus()
	 * @method bool isStatusFilled()
	 * @method bool isStatusChanged()
	 * @method \string remindActualStatus()
	 * @method \string requireStatus()
	 * @method \Bitrix\Sale\Cashbox\Internals\EO_CashboxZReport resetStatus()
	 * @method \Bitrix\Sale\Cashbox\Internals\EO_CashboxZReport unsetStatus()
	 * @method \string fillStatus()
	 * @method \float getCashSum()
	 * @method \Bitrix\Sale\Cashbox\Internals\EO_CashboxZReport setCashSum(\float|\Bitrix\Main\DB\SqlExpression $cashSum)
	 * @method bool hasCashSum()
	 * @method bool isCashSumFilled()
	 * @method bool isCashSumChanged()
	 * @method \float remindActualCashSum()
	 * @method \float requireCashSum()
	 * @method \Bitrix\Sale\Cashbox\Internals\EO_CashboxZReport resetCashSum()
	 * @method \Bitrix\Sale\Cashbox\Internals\EO_CashboxZReport unsetCashSum()
	 * @method \float fillCashSum()
	 * @method \float getCashlessSum()
	 * @method \Bitrix\Sale\Cashbox\Internals\EO_CashboxZReport setCashlessSum(\float|\Bitrix\Main\DB\SqlExpression $cashlessSum)
	 * @method bool hasCashlessSum()
	 * @method bool isCashlessSumFilled()
	 * @method bool isCashlessSumChanged()
	 * @method \float remindActualCashlessSum()
	 * @method \float requireCashlessSum()
	 * @method \Bitrix\Sale\Cashbox\Internals\EO_CashboxZReport resetCashlessSum()
	 * @method \Bitrix\Sale\Cashbox\Internals\EO_CashboxZReport unsetCashlessSum()
	 * @method \float fillCashlessSum()
	 * @method \float getCumulativeSum()
	 * @method \Bitrix\Sale\Cashbox\Internals\EO_CashboxZReport setCumulativeSum(\float|\Bitrix\Main\DB\SqlExpression $cumulativeSum)
	 * @method bool hasCumulativeSum()
	 * @method bool isCumulativeSumFilled()
	 * @method bool isCumulativeSumChanged()
	 * @method \float remindActualCumulativeSum()
	 * @method \float requireCumulativeSum()
	 * @method \Bitrix\Sale\Cashbox\Internals\EO_CashboxZReport resetCumulativeSum()
	 * @method \Bitrix\Sale\Cashbox\Internals\EO_CashboxZReport unsetCumulativeSum()
	 * @method \float fillCumulativeSum()
	 * @method \string getCurrency()
	 * @method \Bitrix\Sale\Cashbox\Internals\EO_CashboxZReport setCurrency(\string|\Bitrix\Main\DB\SqlExpression $currency)
	 * @method bool hasCurrency()
	 * @method bool isCurrencyFilled()
	 * @method bool isCurrencyChanged()
	 * @method \string remindActualCurrency()
	 * @method \string requireCurrency()
	 * @method \Bitrix\Sale\Cashbox\Internals\EO_CashboxZReport resetCurrency()
	 * @method \Bitrix\Sale\Cashbox\Internals\EO_CashboxZReport unsetCurrency()
	 * @method \string fillCurrency()
	 * @method \float getReturnedSum()
	 * @method \Bitrix\Sale\Cashbox\Internals\EO_CashboxZReport setReturnedSum(\float|\Bitrix\Main\DB\SqlExpression $returnedSum)
	 * @method bool hasReturnedSum()
	 * @method bool isReturnedSumFilled()
	 * @method bool isReturnedSumChanged()
	 * @method \float remindActualReturnedSum()
	 * @method \float requireReturnedSum()
	 * @method \Bitrix\Sale\Cashbox\Internals\EO_CashboxZReport resetReturnedSum()
	 * @method \Bitrix\Sale\Cashbox\Internals\EO_CashboxZReport unsetReturnedSum()
	 * @method \float fillReturnedSum()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Sale\Cashbox\Internals\EO_CashboxZReport set($fieldName, $value)
	 * @method \Bitrix\Sale\Cashbox\Internals\EO_CashboxZReport reset($fieldName)
	 * @method \Bitrix\Sale\Cashbox\Internals\EO_CashboxZReport unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Sale\Cashbox\Internals\EO_CashboxZReport wakeUp($data)
	 */
	class EO_CashboxZReport {
		/* @var \Bitrix\Sale\Cashbox\Internals\CashboxZReportTable */
		static public $dataClass = '\Bitrix\Sale\Cashbox\Internals\CashboxZReportTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Sale\Cashbox\Internals {
	/**
	 * EO_CashboxZReport_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getIdList()
	 * @method \string[] getLinkParamsList()
	 * @method \string[] fillLinkParams()
	 * @method \int[] getCntFailPrintList()
	 * @method \int[] fillCntFailPrint()
	 * @method \int[] getCashboxIdList()
	 * @method \int[] fillCashboxId()
	 * @method \Bitrix\Main\Type\DateTime[] getDateCreateList()
	 * @method \Bitrix\Main\Type\DateTime[] fillDateCreate()
	 * @method \Bitrix\Main\Type\DateTime[] getDatePrintStartList()
	 * @method \Bitrix\Main\Type\DateTime[] fillDatePrintStart()
	 * @method \Bitrix\Main\Type\DateTime[] getDatePrintEndList()
	 * @method \Bitrix\Main\Type\DateTime[] fillDatePrintEnd()
	 * @method \string[] getStatusList()
	 * @method \string[] fillStatus()
	 * @method \float[] getCashSumList()
	 * @method \float[] fillCashSum()
	 * @method \float[] getCashlessSumList()
	 * @method \float[] fillCashlessSum()
	 * @method \float[] getCumulativeSumList()
	 * @method \float[] fillCumulativeSum()
	 * @method \string[] getCurrencyList()
	 * @method \string[] fillCurrency()
	 * @method \float[] getReturnedSumList()
	 * @method \float[] fillReturnedSum()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Sale\Cashbox\Internals\EO_CashboxZReport $object)
	 * @method bool has(\Bitrix\Sale\Cashbox\Internals\EO_CashboxZReport $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Sale\Cashbox\Internals\EO_CashboxZReport getByPrimary($primary)
	 * @method \Bitrix\Sale\Cashbox\Internals\EO_CashboxZReport[] getAll()
	 * @method bool remove(\Bitrix\Sale\Cashbox\Internals\EO_CashboxZReport $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Sale\Cashbox\Internals\EO_CashboxZReport_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Sale\Cashbox\Internals\EO_CashboxZReport current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 * @method EO_CashboxZReport_Collection merge(?EO_CashboxZReport_Collection $collection)
	 * @method bool isEmpty()
	 */
	class EO_CashboxZReport_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Sale\Cashbox\Internals\CashboxZReportTable */
		static public $dataClass = '\Bitrix\Sale\Cashbox\Internals\CashboxZReportTable';
	}
}
namespace Bitrix\Sale\Cashbox\Internals {
	/**
	 * Common methods:
	 * ---------------
	 *
	 * @method EO_CashboxZReport_Result exec()
	 * @method \Bitrix\Sale\Cashbox\Internals\EO_CashboxZReport fetchObject()
	 * @method \Bitrix\Sale\Cashbox\Internals\EO_CashboxZReport_Collection fetchCollection()
	 *
	 * Custom methods:
	 * ---------------
	 *
	 */
	class EO_CashboxZReport_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Sale\Cashbox\Internals\EO_CashboxZReport fetchObject()
	 * @method \Bitrix\Sale\Cashbox\Internals\EO_CashboxZReport_Collection fetchCollection()
	 */
	class EO_CashboxZReport_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Sale\Cashbox\Internals\EO_CashboxZReport createObject($setDefaultValues = true)
	 * @method \Bitrix\Sale\Cashbox\Internals\EO_CashboxZReport_Collection createCollection()
	 * @method \Bitrix\Sale\Cashbox\Internals\EO_CashboxZReport wakeUpObject($row)
	 * @method \Bitrix\Sale\Cashbox\Internals\EO_CashboxZReport_Collection wakeUpCollection($rows)
	 */
	class EO_CashboxZReport_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Sale\Cashbox\Internals\Check2CashboxTable:sale\lib\cashbox\internals\check2cashbox.php */
namespace Bitrix\Sale\Cashbox\Internals {
	/**
	 * EO_Check2Cashbox
	 * @see \Bitrix\Sale\Cashbox\Internals\Check2CashboxTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getId()
	 * @method \Bitrix\Sale\Cashbox\Internals\EO_Check2Cashbox setId(\int|\Bitrix\Main\DB\SqlExpression $id)
	 * @method bool hasId()
	 * @method bool isIdFilled()
	 * @method bool isIdChanged()
	 * @method \int getCheckId()
	 * @method \Bitrix\Sale\Cashbox\Internals\EO_Check2Cashbox setCheckId(\int|\Bitrix\Main\DB\SqlExpression $checkId)
	 * @method bool hasCheckId()
	 * @method bool isCheckIdFilled()
	 * @method bool isCheckIdChanged()
	 * @method \int remindActualCheckId()
	 * @method \int requireCheckId()
	 * @method \Bitrix\Sale\Cashbox\Internals\EO_Check2Cashbox resetCheckId()
	 * @method \Bitrix\Sale\Cashbox\Internals\EO_Check2Cashbox unsetCheckId()
	 * @method \int fillCheckId()
	 * @method \int getCashboxId()
	 * @method \Bitrix\Sale\Cashbox\Internals\EO_Check2Cashbox setCashboxId(\int|\Bitrix\Main\DB\SqlExpression $cashboxId)
	 * @method bool hasCashboxId()
	 * @method bool isCashboxIdFilled()
	 * @method bool isCashboxIdChanged()
	 * @method \int remindActualCashboxId()
	 * @method \int requireCashboxId()
	 * @method \Bitrix\Sale\Cashbox\Internals\EO_Check2Cashbox resetCashboxId()
	 * @method \Bitrix\Sale\Cashbox\Internals\EO_Check2Cashbox unsetCashboxId()
	 * @method \int fillCashboxId()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Sale\Cashbox\Internals\EO_Check2Cashbox set($fieldName, $value)
	 * @method \Bitrix\Sale\Cashbox\Internals\EO_Check2Cashbox reset($fieldName)
	 * @method \Bitrix\Sale\Cashbox\Internals\EO_Check2Cashbox unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Sale\Cashbox\Internals\EO_Check2Cashbox wakeUp($data)
	 */
	class EO_Check2Cashbox {
		/* @var \Bitrix\Sale\Cashbox\Internals\Check2CashboxTable */
		static public $dataClass = '\Bitrix\Sale\Cashbox\Internals\Check2CashboxTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Sale\Cashbox\Internals {
	/**
	 * EO_Check2Cashbox_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getIdList()
	 * @method \int[] getCheckIdList()
	 * @method \int[] fillCheckId()
	 * @method \int[] getCashboxIdList()
	 * @method \int[] fillCashboxId()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Sale\Cashbox\Internals\EO_Check2Cashbox $object)
	 * @method bool has(\Bitrix\Sale\Cashbox\Internals\EO_Check2Cashbox $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Sale\Cashbox\Internals\EO_Check2Cashbox getByPrimary($primary)
	 * @method \Bitrix\Sale\Cashbox\Internals\EO_Check2Cashbox[] getAll()
	 * @method bool remove(\Bitrix\Sale\Cashbox\Internals\EO_Check2Cashbox $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Sale\Cashbox\Internals\EO_Check2Cashbox_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Sale\Cashbox\Internals\EO_Check2Cashbox current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 * @method EO_Check2Cashbox_Collection merge(?EO_Check2Cashbox_Collection $collection)
	 * @method bool isEmpty()
	 */
	class EO_Check2Cashbox_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Sale\Cashbox\Internals\Check2CashboxTable */
		static public $dataClass = '\Bitrix\Sale\Cashbox\Internals\Check2CashboxTable';
	}
}
namespace Bitrix\Sale\Cashbox\Internals {
	/**
	 * Common methods:
	 * ---------------
	 *
	 * @method EO_Check2Cashbox_Result exec()
	 * @method \Bitrix\Sale\Cashbox\Internals\EO_Check2Cashbox fetchObject()
	 * @method \Bitrix\Sale\Cashbox\Internals\EO_Check2Cashbox_Collection fetchCollection()
	 *
	 * Custom methods:
	 * ---------------
	 *
	 */
	class EO_Check2Cashbox_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Sale\Cashbox\Internals\EO_Check2Cashbox fetchObject()
	 * @method \Bitrix\Sale\Cashbox\Internals\EO_Check2Cashbox_Collection fetchCollection()
	 */
	class EO_Check2Cashbox_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Sale\Cashbox\Internals\EO_Check2Cashbox createObject($setDefaultValues = true)
	 * @method \Bitrix\Sale\Cashbox\Internals\EO_Check2Cashbox_Collection createCollection()
	 * @method \Bitrix\Sale\Cashbox\Internals\EO_Check2Cashbox wakeUpObject($row)
	 * @method \Bitrix\Sale\Cashbox\Internals\EO_Check2Cashbox_Collection wakeUpCollection($rows)
	 */
	class EO_Check2Cashbox_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Sale\Cashbox\Internals\CheckRelatedEntitiesTable:sale\lib\cashbox\internals\checkrelatedentities.php */
namespace Bitrix\Sale\Cashbox\Internals {
	/**
	 * EO_CheckRelatedEntities
	 * @see \Bitrix\Sale\Cashbox\Internals\CheckRelatedEntitiesTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getId()
	 * @method \Bitrix\Sale\Cashbox\Internals\EO_CheckRelatedEntities setId(\int|\Bitrix\Main\DB\SqlExpression $id)
	 * @method bool hasId()
	 * @method bool isIdFilled()
	 * @method bool isIdChanged()
	 * @method \int getCheckId()
	 * @method \Bitrix\Sale\Cashbox\Internals\EO_CheckRelatedEntities setCheckId(\int|\Bitrix\Main\DB\SqlExpression $checkId)
	 * @method bool hasCheckId()
	 * @method bool isCheckIdFilled()
	 * @method bool isCheckIdChanged()
	 * @method \int remindActualCheckId()
	 * @method \int requireCheckId()
	 * @method \Bitrix\Sale\Cashbox\Internals\EO_CheckRelatedEntities resetCheckId()
	 * @method \Bitrix\Sale\Cashbox\Internals\EO_CheckRelatedEntities unsetCheckId()
	 * @method \int fillCheckId()
	 * @method \int getEntityId()
	 * @method \Bitrix\Sale\Cashbox\Internals\EO_CheckRelatedEntities setEntityId(\int|\Bitrix\Main\DB\SqlExpression $entityId)
	 * @method bool hasEntityId()
	 * @method bool isEntityIdFilled()
	 * @method bool isEntityIdChanged()
	 * @method \int remindActualEntityId()
	 * @method \int requireEntityId()
	 * @method \Bitrix\Sale\Cashbox\Internals\EO_CheckRelatedEntities resetEntityId()
	 * @method \Bitrix\Sale\Cashbox\Internals\EO_CheckRelatedEntities unsetEntityId()
	 * @method \int fillEntityId()
	 * @method \string getEntityType()
	 * @method \Bitrix\Sale\Cashbox\Internals\EO_CheckRelatedEntities setEntityType(\string|\Bitrix\Main\DB\SqlExpression $entityType)
	 * @method bool hasEntityType()
	 * @method bool isEntityTypeFilled()
	 * @method bool isEntityTypeChanged()
	 * @method \string remindActualEntityType()
	 * @method \string requireEntityType()
	 * @method \Bitrix\Sale\Cashbox\Internals\EO_CheckRelatedEntities resetEntityType()
	 * @method \Bitrix\Sale\Cashbox\Internals\EO_CheckRelatedEntities unsetEntityType()
	 * @method \string fillEntityType()
	 * @method \string getEntityCheckType()
	 * @method \Bitrix\Sale\Cashbox\Internals\EO_CheckRelatedEntities setEntityCheckType(\string|\Bitrix\Main\DB\SqlExpression $entityCheckType)
	 * @method bool hasEntityCheckType()
	 * @method bool isEntityCheckTypeFilled()
	 * @method bool isEntityCheckTypeChanged()
	 * @method \string remindActualEntityCheckType()
	 * @method \string requireEntityCheckType()
	 * @method \Bitrix\Sale\Cashbox\Internals\EO_CheckRelatedEntities resetEntityCheckType()
	 * @method \Bitrix\Sale\Cashbox\Internals\EO_CheckRelatedEntities unsetEntityCheckType()
	 * @method \string fillEntityCheckType()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Sale\Cashbox\Internals\EO_CheckRelatedEntities set($fieldName, $value)
	 * @method \Bitrix\Sale\Cashbox\Internals\EO_CheckRelatedEntities reset($fieldName)
	 * @method \Bitrix\Sale\Cashbox\Internals\EO_CheckRelatedEntities unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Sale\Cashbox\Internals\EO_CheckRelatedEntities wakeUp($data)
	 */
	class EO_CheckRelatedEntities {
		/* @var \Bitrix\Sale\Cashbox\Internals\CheckRelatedEntitiesTable */
		static public $dataClass = '\Bitrix\Sale\Cashbox\Internals\CheckRelatedEntitiesTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Sale\Cashbox\Internals {
	/**
	 * EO_CheckRelatedEntities_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getIdList()
	 * @method \int[] getCheckIdList()
	 * @method \int[] fillCheckId()
	 * @method \int[] getEntityIdList()
	 * @method \int[] fillEntityId()
	 * @method \string[] getEntityTypeList()
	 * @method \string[] fillEntityType()
	 * @method \string[] getEntityCheckTypeList()
	 * @method \string[] fillEntityCheckType()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Sale\Cashbox\Internals\EO_CheckRelatedEntities $object)
	 * @method bool has(\Bitrix\Sale\Cashbox\Internals\EO_CheckRelatedEntities $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Sale\Cashbox\Internals\EO_CheckRelatedEntities getByPrimary($primary)
	 * @method \Bitrix\Sale\Cashbox\Internals\EO_CheckRelatedEntities[] getAll()
	 * @method bool remove(\Bitrix\Sale\Cashbox\Internals\EO_CheckRelatedEntities $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Sale\Cashbox\Internals\EO_CheckRelatedEntities_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Sale\Cashbox\Internals\EO_CheckRelatedEntities current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 * @method EO_CheckRelatedEntities_Collection merge(?EO_CheckRelatedEntities_Collection $collection)
	 * @method bool isEmpty()
	 */
	class EO_CheckRelatedEntities_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Sale\Cashbox\Internals\CheckRelatedEntitiesTable */
		static public $dataClass = '\Bitrix\Sale\Cashbox\Internals\CheckRelatedEntitiesTable';
	}
}
namespace Bitrix\Sale\Cashbox\Internals {
	/**
	 * Common methods:
	 * ---------------
	 *
	 * @method EO_CheckRelatedEntities_Result exec()
	 * @method \Bitrix\Sale\Cashbox\Internals\EO_CheckRelatedEntities fetchObject()
	 * @method \Bitrix\Sale\Cashbox\Internals\EO_CheckRelatedEntities_Collection fetchCollection()
	 *
	 * Custom methods:
	 * ---------------
	 *
	 */
	class EO_CheckRelatedEntities_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Sale\Cashbox\Internals\EO_CheckRelatedEntities fetchObject()
	 * @method \Bitrix\Sale\Cashbox\Internals\EO_CheckRelatedEntities_Collection fetchCollection()
	 */
	class EO_CheckRelatedEntities_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Sale\Cashbox\Internals\EO_CheckRelatedEntities createObject($setDefaultValues = true)
	 * @method \Bitrix\Sale\Cashbox\Internals\EO_CheckRelatedEntities_Collection createCollection()
	 * @method \Bitrix\Sale\Cashbox\Internals\EO_CheckRelatedEntities wakeUpObject($row)
	 * @method \Bitrix\Sale\Cashbox\Internals\EO_CheckRelatedEntities_Collection wakeUpCollection($rows)
	 */
	class EO_CheckRelatedEntities_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Sale\Cashbox\Internals\KkmModelTable:sale\lib\cashbox\internals\kkmmodel.php */
namespace Bitrix\Sale\Cashbox\Internals {
	/**
	 * EO_KkmModel
	 * @see \Bitrix\Sale\Cashbox\Internals\KkmModelTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getId()
	 * @method \Bitrix\Sale\Cashbox\Internals\EO_KkmModel setId(\int|\Bitrix\Main\DB\SqlExpression $id)
	 * @method bool hasId()
	 * @method bool isIdFilled()
	 * @method bool isIdChanged()
	 * @method \string getName()
	 * @method \Bitrix\Sale\Cashbox\Internals\EO_KkmModel setName(\string|\Bitrix\Main\DB\SqlExpression $name)
	 * @method bool hasName()
	 * @method bool isNameFilled()
	 * @method bool isNameChanged()
	 * @method \string remindActualName()
	 * @method \string requireName()
	 * @method \Bitrix\Sale\Cashbox\Internals\EO_KkmModel resetName()
	 * @method \Bitrix\Sale\Cashbox\Internals\EO_KkmModel unsetName()
	 * @method \string fillName()
	 * @method \string getSettings()
	 * @method \Bitrix\Sale\Cashbox\Internals\EO_KkmModel setSettings(\string|\Bitrix\Main\DB\SqlExpression $settings)
	 * @method bool hasSettings()
	 * @method bool isSettingsFilled()
	 * @method bool isSettingsChanged()
	 * @method \string remindActualSettings()
	 * @method \string requireSettings()
	 * @method \Bitrix\Sale\Cashbox\Internals\EO_KkmModel resetSettings()
	 * @method \Bitrix\Sale\Cashbox\Internals\EO_KkmModel unsetSettings()
	 * @method \string fillSettings()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Sale\Cashbox\Internals\EO_KkmModel set($fieldName, $value)
	 * @method \Bitrix\Sale\Cashbox\Internals\EO_KkmModel reset($fieldName)
	 * @method \Bitrix\Sale\Cashbox\Internals\EO_KkmModel unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Sale\Cashbox\Internals\EO_KkmModel wakeUp($data)
	 */
	class EO_KkmModel {
		/* @var \Bitrix\Sale\Cashbox\Internals\KkmModelTable */
		static public $dataClass = '\Bitrix\Sale\Cashbox\Internals\KkmModelTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Sale\Cashbox\Internals {
	/**
	 * EO_KkmModel_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getIdList()
	 * @method \string[] getNameList()
	 * @method \string[] fillName()
	 * @method \string[] getSettingsList()
	 * @method \string[] fillSettings()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Sale\Cashbox\Internals\EO_KkmModel $object)
	 * @method bool has(\Bitrix\Sale\Cashbox\Internals\EO_KkmModel $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Sale\Cashbox\Internals\EO_KkmModel getByPrimary($primary)
	 * @method \Bitrix\Sale\Cashbox\Internals\EO_KkmModel[] getAll()
	 * @method bool remove(\Bitrix\Sale\Cashbox\Internals\EO_KkmModel $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Sale\Cashbox\Internals\EO_KkmModel_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Sale\Cashbox\Internals\EO_KkmModel current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 * @method EO_KkmModel_Collection merge(?EO_KkmModel_Collection $collection)
	 * @method bool isEmpty()
	 */
	class EO_KkmModel_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Sale\Cashbox\Internals\KkmModelTable */
		static public $dataClass = '\Bitrix\Sale\Cashbox\Internals\KkmModelTable';
	}
}
namespace Bitrix\Sale\Cashbox\Internals {
	/**
	 * Common methods:
	 * ---------------
	 *
	 * @method EO_KkmModel_Result exec()
	 * @method \Bitrix\Sale\Cashbox\Internals\EO_KkmModel fetchObject()
	 * @method \Bitrix\Sale\Cashbox\Internals\EO_KkmModel_Collection fetchCollection()
	 *
	 * Custom methods:
	 * ---------------
	 *
	 */
	class EO_KkmModel_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Sale\Cashbox\Internals\EO_KkmModel fetchObject()
	 * @method \Bitrix\Sale\Cashbox\Internals\EO_KkmModel_Collection fetchCollection()
	 */
	class EO_KkmModel_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Sale\Cashbox\Internals\EO_KkmModel createObject($setDefaultValues = true)
	 * @method \Bitrix\Sale\Cashbox\Internals\EO_KkmModel_Collection createCollection()
	 * @method \Bitrix\Sale\Cashbox\Internals\EO_KkmModel wakeUpObject($row)
	 * @method \Bitrix\Sale\Cashbox\Internals\EO_KkmModel_Collection wakeUpCollection($rows)
	 */
	class EO_KkmModel_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Sale\Delivery\DeliveryLocationTable:sale\lib\delivery\deliverylocation.php */
namespace Bitrix\Sale\Delivery {
	/**
	 * EO_DeliveryLocation
	 * @see \Bitrix\Sale\Delivery\DeliveryLocationTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getDeliveryId()
	 * @method \Bitrix\Sale\Delivery\EO_DeliveryLocation setDeliveryId(\int|\Bitrix\Main\DB\SqlExpression $deliveryId)
	 * @method bool hasDeliveryId()
	 * @method bool isDeliveryIdFilled()
	 * @method bool isDeliveryIdChanged()
	 * @method \string getLocationCode()
	 * @method \Bitrix\Sale\Delivery\EO_DeliveryLocation setLocationCode(\string|\Bitrix\Main\DB\SqlExpression $locationCode)
	 * @method bool hasLocationCode()
	 * @method bool isLocationCodeFilled()
	 * @method bool isLocationCodeChanged()
	 * @method \string getLocationType()
	 * @method \Bitrix\Sale\Delivery\EO_DeliveryLocation setLocationType(\string|\Bitrix\Main\DB\SqlExpression $locationType)
	 * @method bool hasLocationType()
	 * @method bool isLocationTypeFilled()
	 * @method bool isLocationTypeChanged()
	 * @method \Bitrix\Sale\Location\EO_Location getLocation()
	 * @method \Bitrix\Sale\Location\EO_Location remindActualLocation()
	 * @method \Bitrix\Sale\Location\EO_Location requireLocation()
	 * @method \Bitrix\Sale\Delivery\EO_DeliveryLocation setLocation(\Bitrix\Sale\Location\EO_Location $object)
	 * @method \Bitrix\Sale\Delivery\EO_DeliveryLocation resetLocation()
	 * @method \Bitrix\Sale\Delivery\EO_DeliveryLocation unsetLocation()
	 * @method bool hasLocation()
	 * @method bool isLocationFilled()
	 * @method bool isLocationChanged()
	 * @method \Bitrix\Sale\Location\EO_Location fillLocation()
	 * @method \Bitrix\Sale\Location\EO_Group getGroup()
	 * @method \Bitrix\Sale\Location\EO_Group remindActualGroup()
	 * @method \Bitrix\Sale\Location\EO_Group requireGroup()
	 * @method \Bitrix\Sale\Delivery\EO_DeliveryLocation setGroup(\Bitrix\Sale\Location\EO_Group $object)
	 * @method \Bitrix\Sale\Delivery\EO_DeliveryLocation resetGroup()
	 * @method \Bitrix\Sale\Delivery\EO_DeliveryLocation unsetGroup()
	 * @method bool hasGroup()
	 * @method bool isGroupFilled()
	 * @method bool isGroupChanged()
	 * @method \Bitrix\Sale\Location\EO_Group fillGroup()
	 * @method \Bitrix\Sale\Delivery\Services\EO_NNM_Object getDelivery()
	 * @method \Bitrix\Sale\Delivery\Services\EO_NNM_Object remindActualDelivery()
	 * @method \Bitrix\Sale\Delivery\Services\EO_NNM_Object requireDelivery()
	 * @method \Bitrix\Sale\Delivery\EO_DeliveryLocation setDelivery(\Bitrix\Sale\Delivery\Services\EO_NNM_Object $object)
	 * @method \Bitrix\Sale\Delivery\EO_DeliveryLocation resetDelivery()
	 * @method \Bitrix\Sale\Delivery\EO_DeliveryLocation unsetDelivery()
	 * @method bool hasDelivery()
	 * @method bool isDeliveryFilled()
	 * @method bool isDeliveryChanged()
	 * @method \Bitrix\Sale\Delivery\Services\EO_NNM_Object fillDelivery()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Sale\Delivery\EO_DeliveryLocation set($fieldName, $value)
	 * @method \Bitrix\Sale\Delivery\EO_DeliveryLocation reset($fieldName)
	 * @method \Bitrix\Sale\Delivery\EO_DeliveryLocation unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Sale\Delivery\EO_DeliveryLocation wakeUp($data)
	 */
	class EO_DeliveryLocation {
		/* @var \Bitrix\Sale\Delivery\DeliveryLocationTable */
		static public $dataClass = '\Bitrix\Sale\Delivery\DeliveryLocationTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Sale\Delivery {
	/**
	 * EO_DeliveryLocation_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getDeliveryIdList()
	 * @method \string[] getLocationCodeList()
	 * @method \string[] getLocationTypeList()
	 * @method \Bitrix\Sale\Location\EO_Location[] getLocationList()
	 * @method \Bitrix\Sale\Delivery\EO_DeliveryLocation_Collection getLocationCollection()
	 * @method \Bitrix\Sale\Location\EO_Location_Collection fillLocation()
	 * @method \Bitrix\Sale\Location\EO_Group[] getGroupList()
	 * @method \Bitrix\Sale\Delivery\EO_DeliveryLocation_Collection getGroupCollection()
	 * @method \Bitrix\Sale\Location\EO_Group_Collection fillGroup()
	 * @method \Bitrix\Sale\Delivery\Services\EO_NNM_Object[] getDeliveryList()
	 * @method \Bitrix\Sale\Delivery\EO_DeliveryLocation_Collection getDeliveryCollection()
	 * @method \Bitrix\Sale\Delivery\Services\EO__Collection fillDelivery()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Sale\Delivery\EO_DeliveryLocation $object)
	 * @method bool has(\Bitrix\Sale\Delivery\EO_DeliveryLocation $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Sale\Delivery\EO_DeliveryLocation getByPrimary($primary)
	 * @method \Bitrix\Sale\Delivery\EO_DeliveryLocation[] getAll()
	 * @method bool remove(\Bitrix\Sale\Delivery\EO_DeliveryLocation $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Sale\Delivery\EO_DeliveryLocation_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Sale\Delivery\EO_DeliveryLocation current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 * @method EO_DeliveryLocation_Collection merge(?EO_DeliveryLocation_Collection $collection)
	 * @method bool isEmpty()
	 */
	class EO_DeliveryLocation_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Sale\Delivery\DeliveryLocationTable */
		static public $dataClass = '\Bitrix\Sale\Delivery\DeliveryLocationTable';
	}
}
namespace Bitrix\Sale\Delivery {
	/**
	 * Common methods:
	 * ---------------
	 *
	 * @method EO_DeliveryLocation_Result exec()
	 * @method \Bitrix\Sale\Delivery\EO_DeliveryLocation fetchObject()
	 * @method \Bitrix\Sale\Delivery\EO_DeliveryLocation_Collection fetchCollection()
	 *
	 * Custom methods:
	 * ---------------
	 *
	 */
	class EO_DeliveryLocation_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Sale\Delivery\EO_DeliveryLocation fetchObject()
	 * @method \Bitrix\Sale\Delivery\EO_DeliveryLocation_Collection fetchCollection()
	 */
	class EO_DeliveryLocation_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Sale\Delivery\EO_DeliveryLocation createObject($setDefaultValues = true)
	 * @method \Bitrix\Sale\Delivery\EO_DeliveryLocation_Collection createCollection()
	 * @method \Bitrix\Sale\Delivery\EO_DeliveryLocation wakeUpObject($row)
	 * @method \Bitrix\Sale\Delivery\EO_DeliveryLocation_Collection wakeUpCollection($rows)
	 */
	class EO_DeliveryLocation_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Sale\Delivery\DeliveryLocationExcludeTable:sale\lib\delivery\deliverylocationexclude.php */
namespace Bitrix\Sale\Delivery {
	/**
	 * EO_DeliveryLocationExclude
	 * @see \Bitrix\Sale\Delivery\DeliveryLocationExcludeTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getDeliveryId()
	 * @method \Bitrix\Sale\Delivery\EO_DeliveryLocationExclude setDeliveryId(\int|\Bitrix\Main\DB\SqlExpression $deliveryId)
	 * @method bool hasDeliveryId()
	 * @method bool isDeliveryIdFilled()
	 * @method bool isDeliveryIdChanged()
	 * @method \string getLocationCode()
	 * @method \Bitrix\Sale\Delivery\EO_DeliveryLocationExclude setLocationCode(\string|\Bitrix\Main\DB\SqlExpression $locationCode)
	 * @method bool hasLocationCode()
	 * @method bool isLocationCodeFilled()
	 * @method bool isLocationCodeChanged()
	 * @method \string getLocationType()
	 * @method \Bitrix\Sale\Delivery\EO_DeliveryLocationExclude setLocationType(\string|\Bitrix\Main\DB\SqlExpression $locationType)
	 * @method bool hasLocationType()
	 * @method bool isLocationTypeFilled()
	 * @method bool isLocationTypeChanged()
	 * @method \Bitrix\Sale\Location\EO_Location getLocation()
	 * @method \Bitrix\Sale\Location\EO_Location remindActualLocation()
	 * @method \Bitrix\Sale\Location\EO_Location requireLocation()
	 * @method \Bitrix\Sale\Delivery\EO_DeliveryLocationExclude setLocation(\Bitrix\Sale\Location\EO_Location $object)
	 * @method \Bitrix\Sale\Delivery\EO_DeliveryLocationExclude resetLocation()
	 * @method \Bitrix\Sale\Delivery\EO_DeliveryLocationExclude unsetLocation()
	 * @method bool hasLocation()
	 * @method bool isLocationFilled()
	 * @method bool isLocationChanged()
	 * @method \Bitrix\Sale\Location\EO_Location fillLocation()
	 * @method \Bitrix\Sale\Location\EO_Group getGroup()
	 * @method \Bitrix\Sale\Location\EO_Group remindActualGroup()
	 * @method \Bitrix\Sale\Location\EO_Group requireGroup()
	 * @method \Bitrix\Sale\Delivery\EO_DeliveryLocationExclude setGroup(\Bitrix\Sale\Location\EO_Group $object)
	 * @method \Bitrix\Sale\Delivery\EO_DeliveryLocationExclude resetGroup()
	 * @method \Bitrix\Sale\Delivery\EO_DeliveryLocationExclude unsetGroup()
	 * @method bool hasGroup()
	 * @method bool isGroupFilled()
	 * @method bool isGroupChanged()
	 * @method \Bitrix\Sale\Location\EO_Group fillGroup()
	 * @method \Bitrix\Sale\Delivery\Services\EO_NNM_Object getDelivery()
	 * @method \Bitrix\Sale\Delivery\Services\EO_NNM_Object remindActualDelivery()
	 * @method \Bitrix\Sale\Delivery\Services\EO_NNM_Object requireDelivery()
	 * @method \Bitrix\Sale\Delivery\EO_DeliveryLocationExclude setDelivery(\Bitrix\Sale\Delivery\Services\EO_NNM_Object $object)
	 * @method \Bitrix\Sale\Delivery\EO_DeliveryLocationExclude resetDelivery()
	 * @method \Bitrix\Sale\Delivery\EO_DeliveryLocationExclude unsetDelivery()
	 * @method bool hasDelivery()
	 * @method bool isDeliveryFilled()
	 * @method bool isDeliveryChanged()
	 * @method \Bitrix\Sale\Delivery\Services\EO_NNM_Object fillDelivery()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Sale\Delivery\EO_DeliveryLocationExclude set($fieldName, $value)
	 * @method \Bitrix\Sale\Delivery\EO_DeliveryLocationExclude reset($fieldName)
	 * @method \Bitrix\Sale\Delivery\EO_DeliveryLocationExclude unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Sale\Delivery\EO_DeliveryLocationExclude wakeUp($data)
	 */
	class EO_DeliveryLocationExclude {
		/* @var \Bitrix\Sale\Delivery\DeliveryLocationExcludeTable */
		static public $dataClass = '\Bitrix\Sale\Delivery\DeliveryLocationExcludeTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Sale\Delivery {
	/**
	 * EO_DeliveryLocationExclude_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getDeliveryIdList()
	 * @method \string[] getLocationCodeList()
	 * @method \string[] getLocationTypeList()
	 * @method \Bitrix\Sale\Location\EO_Location[] getLocationList()
	 * @method \Bitrix\Sale\Delivery\EO_DeliveryLocationExclude_Collection getLocationCollection()
	 * @method \Bitrix\Sale\Location\EO_Location_Collection fillLocation()
	 * @method \Bitrix\Sale\Location\EO_Group[] getGroupList()
	 * @method \Bitrix\Sale\Delivery\EO_DeliveryLocationExclude_Collection getGroupCollection()
	 * @method \Bitrix\Sale\Location\EO_Group_Collection fillGroup()
	 * @method \Bitrix\Sale\Delivery\Services\EO_NNM_Object[] getDeliveryList()
	 * @method \Bitrix\Sale\Delivery\EO_DeliveryLocationExclude_Collection getDeliveryCollection()
	 * @method \Bitrix\Sale\Delivery\Services\EO__Collection fillDelivery()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Sale\Delivery\EO_DeliveryLocationExclude $object)
	 * @method bool has(\Bitrix\Sale\Delivery\EO_DeliveryLocationExclude $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Sale\Delivery\EO_DeliveryLocationExclude getByPrimary($primary)
	 * @method \Bitrix\Sale\Delivery\EO_DeliveryLocationExclude[] getAll()
	 * @method bool remove(\Bitrix\Sale\Delivery\EO_DeliveryLocationExclude $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Sale\Delivery\EO_DeliveryLocationExclude_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Sale\Delivery\EO_DeliveryLocationExclude current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 * @method EO_DeliveryLocationExclude_Collection merge(?EO_DeliveryLocationExclude_Collection $collection)
	 * @method bool isEmpty()
	 */
	class EO_DeliveryLocationExclude_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Sale\Delivery\DeliveryLocationExcludeTable */
		static public $dataClass = '\Bitrix\Sale\Delivery\DeliveryLocationExcludeTable';
	}
}
namespace Bitrix\Sale\Delivery {
	/**
	 * Common methods:
	 * ---------------
	 *
	 * @method EO_DeliveryLocationExclude_Result exec()
	 * @method \Bitrix\Sale\Delivery\EO_DeliveryLocationExclude fetchObject()
	 * @method \Bitrix\Sale\Delivery\EO_DeliveryLocationExclude_Collection fetchCollection()
	 *
	 * Custom methods:
	 * ---------------
	 *
	 */
	class EO_DeliveryLocationExclude_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Sale\Delivery\EO_DeliveryLocationExclude fetchObject()
	 * @method \Bitrix\Sale\Delivery\EO_DeliveryLocationExclude_Collection fetchCollection()
	 */
	class EO_DeliveryLocationExclude_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Sale\Delivery\EO_DeliveryLocationExclude createObject($setDefaultValues = true)
	 * @method \Bitrix\Sale\Delivery\EO_DeliveryLocationExclude_Collection createCollection()
	 * @method \Bitrix\Sale\Delivery\EO_DeliveryLocationExclude wakeUpObject($row)
	 * @method \Bitrix\Sale\Delivery\EO_DeliveryLocationExclude_Collection wakeUpCollection($rows)
	 */
	class EO_DeliveryLocationExclude_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Sale\Delivery\ExtraServices\Table:sale\lib\delivery\extra_services\table.php */
namespace Bitrix\Sale\Delivery\ExtraServices {
	/**
	 * EO_NNM_Object
	 * @see \Bitrix\Sale\Delivery\ExtraServices\Table
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getId()
	 * @method \Bitrix\Sale\Delivery\ExtraServices\EO_NNM_Object setId(\int|\Bitrix\Main\DB\SqlExpression $id)
	 * @method bool hasId()
	 * @method bool isIdFilled()
	 * @method bool isIdChanged()
	 * @method \string getCode()
	 * @method \Bitrix\Sale\Delivery\ExtraServices\EO_NNM_Object setCode(\string|\Bitrix\Main\DB\SqlExpression $code)
	 * @method bool hasCode()
	 * @method bool isCodeFilled()
	 * @method bool isCodeChanged()
	 * @method \string remindActualCode()
	 * @method \string requireCode()
	 * @method \Bitrix\Sale\Delivery\ExtraServices\EO_NNM_Object resetCode()
	 * @method \Bitrix\Sale\Delivery\ExtraServices\EO_NNM_Object unsetCode()
	 * @method \string fillCode()
	 * @method \string getName()
	 * @method \Bitrix\Sale\Delivery\ExtraServices\EO_NNM_Object setName(\string|\Bitrix\Main\DB\SqlExpression $name)
	 * @method bool hasName()
	 * @method bool isNameFilled()
	 * @method bool isNameChanged()
	 * @method \string remindActualName()
	 * @method \string requireName()
	 * @method \Bitrix\Sale\Delivery\ExtraServices\EO_NNM_Object resetName()
	 * @method \Bitrix\Sale\Delivery\ExtraServices\EO_NNM_Object unsetName()
	 * @method \string fillName()
	 * @method \string getDescription()
	 * @method \Bitrix\Sale\Delivery\ExtraServices\EO_NNM_Object setDescription(\string|\Bitrix\Main\DB\SqlExpression $description)
	 * @method bool hasDescription()
	 * @method bool isDescriptionFilled()
	 * @method bool isDescriptionChanged()
	 * @method \string remindActualDescription()
	 * @method \string requireDescription()
	 * @method \Bitrix\Sale\Delivery\ExtraServices\EO_NNM_Object resetDescription()
	 * @method \Bitrix\Sale\Delivery\ExtraServices\EO_NNM_Object unsetDescription()
	 * @method \string fillDescription()
	 * @method \string getClassName()
	 * @method \Bitrix\Sale\Delivery\ExtraServices\EO_NNM_Object setClassName(\string|\Bitrix\Main\DB\SqlExpression $className)
	 * @method bool hasClassName()
	 * @method bool isClassNameFilled()
	 * @method bool isClassNameChanged()
	 * @method \string remindActualClassName()
	 * @method \string requireClassName()
	 * @method \Bitrix\Sale\Delivery\ExtraServices\EO_NNM_Object resetClassName()
	 * @method \Bitrix\Sale\Delivery\ExtraServices\EO_NNM_Object unsetClassName()
	 * @method \string fillClassName()
	 * @method array getParams()
	 * @method \Bitrix\Sale\Delivery\ExtraServices\EO_NNM_Object setParams(array|\Bitrix\Main\DB\SqlExpression $params)
	 * @method bool hasParams()
	 * @method bool isParamsFilled()
	 * @method bool isParamsChanged()
	 * @method array remindActualParams()
	 * @method array requireParams()
	 * @method \Bitrix\Sale\Delivery\ExtraServices\EO_NNM_Object resetParams()
	 * @method \Bitrix\Sale\Delivery\ExtraServices\EO_NNM_Object unsetParams()
	 * @method array fillParams()
	 * @method \string getRights()
	 * @method \Bitrix\Sale\Delivery\ExtraServices\EO_NNM_Object setRights(\string|\Bitrix\Main\DB\SqlExpression $rights)
	 * @method bool hasRights()
	 * @method bool isRightsFilled()
	 * @method bool isRightsChanged()
	 * @method \string remindActualRights()
	 * @method \string requireRights()
	 * @method \Bitrix\Sale\Delivery\ExtraServices\EO_NNM_Object resetRights()
	 * @method \Bitrix\Sale\Delivery\ExtraServices\EO_NNM_Object unsetRights()
	 * @method \string fillRights()
	 * @method \int getDeliveryId()
	 * @method \Bitrix\Sale\Delivery\ExtraServices\EO_NNM_Object setDeliveryId(\int|\Bitrix\Main\DB\SqlExpression $deliveryId)
	 * @method bool hasDeliveryId()
	 * @method bool isDeliveryIdFilled()
	 * @method bool isDeliveryIdChanged()
	 * @method \int remindActualDeliveryId()
	 * @method \int requireDeliveryId()
	 * @method \Bitrix\Sale\Delivery\ExtraServices\EO_NNM_Object resetDeliveryId()
	 * @method \Bitrix\Sale\Delivery\ExtraServices\EO_NNM_Object unsetDeliveryId()
	 * @method \int fillDeliveryId()
	 * @method \string getInitValue()
	 * @method \Bitrix\Sale\Delivery\ExtraServices\EO_NNM_Object setInitValue(\string|\Bitrix\Main\DB\SqlExpression $initValue)
	 * @method bool hasInitValue()
	 * @method bool isInitValueFilled()
	 * @method bool isInitValueChanged()
	 * @method \string remindActualInitValue()
	 * @method \string requireInitValue()
	 * @method \Bitrix\Sale\Delivery\ExtraServices\EO_NNM_Object resetInitValue()
	 * @method \Bitrix\Sale\Delivery\ExtraServices\EO_NNM_Object unsetInitValue()
	 * @method \string fillInitValue()
	 * @method \string getActive()
	 * @method \Bitrix\Sale\Delivery\ExtraServices\EO_NNM_Object setActive(\string|\Bitrix\Main\DB\SqlExpression $active)
	 * @method bool hasActive()
	 * @method bool isActiveFilled()
	 * @method bool isActiveChanged()
	 * @method \string remindActualActive()
	 * @method \string requireActive()
	 * @method \Bitrix\Sale\Delivery\ExtraServices\EO_NNM_Object resetActive()
	 * @method \Bitrix\Sale\Delivery\ExtraServices\EO_NNM_Object unsetActive()
	 * @method \string fillActive()
	 * @method \int getSort()
	 * @method \Bitrix\Sale\Delivery\ExtraServices\EO_NNM_Object setSort(\int|\Bitrix\Main\DB\SqlExpression $sort)
	 * @method bool hasSort()
	 * @method bool isSortFilled()
	 * @method bool isSortChanged()
	 * @method \int remindActualSort()
	 * @method \int requireSort()
	 * @method \Bitrix\Sale\Delivery\ExtraServices\EO_NNM_Object resetSort()
	 * @method \Bitrix\Sale\Delivery\ExtraServices\EO_NNM_Object unsetSort()
	 * @method \int fillSort()
	 * @method \Bitrix\Sale\Delivery\Services\EO_NNM_Object getDeliveryService()
	 * @method \Bitrix\Sale\Delivery\Services\EO_NNM_Object remindActualDeliveryService()
	 * @method \Bitrix\Sale\Delivery\Services\EO_NNM_Object requireDeliveryService()
	 * @method \Bitrix\Sale\Delivery\ExtraServices\EO_NNM_Object setDeliveryService(\Bitrix\Sale\Delivery\Services\EO_NNM_Object $object)
	 * @method \Bitrix\Sale\Delivery\ExtraServices\EO_NNM_Object resetDeliveryService()
	 * @method \Bitrix\Sale\Delivery\ExtraServices\EO_NNM_Object unsetDeliveryService()
	 * @method bool hasDeliveryService()
	 * @method bool isDeliveryServiceFilled()
	 * @method bool isDeliveryServiceChanged()
	 * @method \Bitrix\Sale\Delivery\Services\EO_NNM_Object fillDeliveryService()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Sale\Delivery\ExtraServices\EO_NNM_Object set($fieldName, $value)
	 * @method \Bitrix\Sale\Delivery\ExtraServices\EO_NNM_Object reset($fieldName)
	 * @method \Bitrix\Sale\Delivery\ExtraServices\EO_NNM_Object unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Sale\Delivery\ExtraServices\EO_NNM_Object wakeUp($data)
	 */
	class EO_NNM_Object {
		/* @var \Bitrix\Sale\Delivery\ExtraServices\Table */
		static public $dataClass = '\Bitrix\Sale\Delivery\ExtraServices\Table';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Sale\Delivery\ExtraServices {
	/**
	 * EO__Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getIdList()
	 * @method \string[] getCodeList()
	 * @method \string[] fillCode()
	 * @method \string[] getNameList()
	 * @method \string[] fillName()
	 * @method \string[] getDescriptionList()
	 * @method \string[] fillDescription()
	 * @method \string[] getClassNameList()
	 * @method \string[] fillClassName()
	 * @method array[] getParamsList()
	 * @method array[] fillParams()
	 * @method \string[] getRightsList()
	 * @method \string[] fillRights()
	 * @method \int[] getDeliveryIdList()
	 * @method \int[] fillDeliveryId()
	 * @method \string[] getInitValueList()
	 * @method \string[] fillInitValue()
	 * @method \string[] getActiveList()
	 * @method \string[] fillActive()
	 * @method \int[] getSortList()
	 * @method \int[] fillSort()
	 * @method \Bitrix\Sale\Delivery\Services\EO_NNM_Object[] getDeliveryServiceList()
	 * @method \Bitrix\Sale\Delivery\ExtraServices\EO__Collection getDeliveryServiceCollection()
	 * @method \Bitrix\Sale\Delivery\Services\EO__Collection fillDeliveryService()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Sale\Delivery\ExtraServices\EO_NNM_Object $object)
	 * @method bool has(\Bitrix\Sale\Delivery\ExtraServices\EO_NNM_Object $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Sale\Delivery\ExtraServices\EO_NNM_Object getByPrimary($primary)
	 * @method \Bitrix\Sale\Delivery\ExtraServices\EO_NNM_Object[] getAll()
	 * @method bool remove(\Bitrix\Sale\Delivery\ExtraServices\EO_NNM_Object $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Sale\Delivery\ExtraServices\EO__Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Sale\Delivery\ExtraServices\EO_NNM_Object current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 * @method EO__Collection merge(?EO__Collection $collection)
	 * @method bool isEmpty()
	 */
	class EO__Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Sale\Delivery\ExtraServices\Table */
		static public $dataClass = '\Bitrix\Sale\Delivery\ExtraServices\Table';
	}
}
namespace Bitrix\Sale\Delivery\ExtraServices {
	/**
	 * Common methods:
	 * ---------------
	 *
	 * @method EO__Result exec()
	 * @method \Bitrix\Sale\Delivery\ExtraServices\EO_NNM_Object fetchObject()
	 * @method \Bitrix\Sale\Delivery\ExtraServices\EO__Collection fetchCollection()
	 *
	 * Custom methods:
	 * ---------------
	 *
	 */
	class EO__Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Sale\Delivery\ExtraServices\EO_NNM_Object fetchObject()
	 * @method \Bitrix\Sale\Delivery\ExtraServices\EO__Collection fetchCollection()
	 */
	class EO__Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Sale\Delivery\ExtraServices\EO_NNM_Object createObject($setDefaultValues = true)
	 * @method \Bitrix\Sale\Delivery\ExtraServices\EO__Collection createCollection()
	 * @method \Bitrix\Sale\Delivery\ExtraServices\EO_NNM_Object wakeUpObject($row)
	 * @method \Bitrix\Sale\Delivery\ExtraServices\EO__Collection wakeUpCollection($rows)
	 */
	class EO__Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Sale\Delivery\Requests\RequestTable:sale\lib\delivery\requests\request.php */
namespace Bitrix\Sale\Delivery\Requests {
	/**
	 * EO_Request
	 * @see \Bitrix\Sale\Delivery\Requests\RequestTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getId()
	 * @method \Bitrix\Sale\Delivery\Requests\EO_Request setId(\int|\Bitrix\Main\DB\SqlExpression $id)
	 * @method bool hasId()
	 * @method bool isIdFilled()
	 * @method bool isIdChanged()
	 * @method \Bitrix\Main\Type\DateTime getDate()
	 * @method \Bitrix\Sale\Delivery\Requests\EO_Request setDate(\Bitrix\Main\Type\DateTime|\Bitrix\Main\DB\SqlExpression $date)
	 * @method bool hasDate()
	 * @method bool isDateFilled()
	 * @method bool isDateChanged()
	 * @method \Bitrix\Main\Type\DateTime remindActualDate()
	 * @method \Bitrix\Main\Type\DateTime requireDate()
	 * @method \Bitrix\Sale\Delivery\Requests\EO_Request resetDate()
	 * @method \Bitrix\Sale\Delivery\Requests\EO_Request unsetDate()
	 * @method \Bitrix\Main\Type\DateTime fillDate()
	 * @method \int getDeliveryId()
	 * @method \Bitrix\Sale\Delivery\Requests\EO_Request setDeliveryId(\int|\Bitrix\Main\DB\SqlExpression $deliveryId)
	 * @method bool hasDeliveryId()
	 * @method bool isDeliveryIdFilled()
	 * @method bool isDeliveryIdChanged()
	 * @method \int remindActualDeliveryId()
	 * @method \int requireDeliveryId()
	 * @method \Bitrix\Sale\Delivery\Requests\EO_Request resetDeliveryId()
	 * @method \Bitrix\Sale\Delivery\Requests\EO_Request unsetDeliveryId()
	 * @method \int fillDeliveryId()
	 * @method \int getStatus()
	 * @method \Bitrix\Sale\Delivery\Requests\EO_Request setStatus(\int|\Bitrix\Main\DB\SqlExpression $status)
	 * @method bool hasStatus()
	 * @method bool isStatusFilled()
	 * @method bool isStatusChanged()
	 * @method \int remindActualStatus()
	 * @method \int requireStatus()
	 * @method \Bitrix\Sale\Delivery\Requests\EO_Request resetStatus()
	 * @method \Bitrix\Sale\Delivery\Requests\EO_Request unsetStatus()
	 * @method \int fillStatus()
	 * @method \int getCreatedBy()
	 * @method \Bitrix\Sale\Delivery\Requests\EO_Request setCreatedBy(\int|\Bitrix\Main\DB\SqlExpression $createdBy)
	 * @method bool hasCreatedBy()
	 * @method bool isCreatedByFilled()
	 * @method bool isCreatedByChanged()
	 * @method \int remindActualCreatedBy()
	 * @method \int requireCreatedBy()
	 * @method \Bitrix\Sale\Delivery\Requests\EO_Request resetCreatedBy()
	 * @method \Bitrix\Sale\Delivery\Requests\EO_Request unsetCreatedBy()
	 * @method \int fillCreatedBy()
	 * @method \string getExternalId()
	 * @method \Bitrix\Sale\Delivery\Requests\EO_Request setExternalId(\string|\Bitrix\Main\DB\SqlExpression $externalId)
	 * @method bool hasExternalId()
	 * @method bool isExternalIdFilled()
	 * @method bool isExternalIdChanged()
	 * @method \string remindActualExternalId()
	 * @method \string requireExternalId()
	 * @method \Bitrix\Sale\Delivery\Requests\EO_Request resetExternalId()
	 * @method \Bitrix\Sale\Delivery\Requests\EO_Request unsetExternalId()
	 * @method \string fillExternalId()
	 * @method \string getExternalStatus()
	 * @method \Bitrix\Sale\Delivery\Requests\EO_Request setExternalStatus(\string|\Bitrix\Main\DB\SqlExpression $externalStatus)
	 * @method bool hasExternalStatus()
	 * @method bool isExternalStatusFilled()
	 * @method bool isExternalStatusChanged()
	 * @method \string remindActualExternalStatus()
	 * @method \string requireExternalStatus()
	 * @method \Bitrix\Sale\Delivery\Requests\EO_Request resetExternalStatus()
	 * @method \Bitrix\Sale\Delivery\Requests\EO_Request unsetExternalStatus()
	 * @method \string fillExternalStatus()
	 * @method \string getExternalStatusSemantic()
	 * @method \Bitrix\Sale\Delivery\Requests\EO_Request setExternalStatusSemantic(\string|\Bitrix\Main\DB\SqlExpression $externalStatusSemantic)
	 * @method bool hasExternalStatusSemantic()
	 * @method bool isExternalStatusSemanticFilled()
	 * @method bool isExternalStatusSemanticChanged()
	 * @method \string remindActualExternalStatusSemantic()
	 * @method \string requireExternalStatusSemantic()
	 * @method \Bitrix\Sale\Delivery\Requests\EO_Request resetExternalStatusSemantic()
	 * @method \Bitrix\Sale\Delivery\Requests\EO_Request unsetExternalStatusSemantic()
	 * @method \string fillExternalStatusSemantic()
	 * @method \Bitrix\Sale\Delivery\Services\EO_NNM_Object getDelivery()
	 * @method \Bitrix\Sale\Delivery\Services\EO_NNM_Object remindActualDelivery()
	 * @method \Bitrix\Sale\Delivery\Services\EO_NNM_Object requireDelivery()
	 * @method \Bitrix\Sale\Delivery\Requests\EO_Request setDelivery(\Bitrix\Sale\Delivery\Services\EO_NNM_Object $object)
	 * @method \Bitrix\Sale\Delivery\Requests\EO_Request resetDelivery()
	 * @method \Bitrix\Sale\Delivery\Requests\EO_Request unsetDelivery()
	 * @method bool hasDelivery()
	 * @method bool isDeliveryFilled()
	 * @method bool isDeliveryChanged()
	 * @method \Bitrix\Sale\Delivery\Services\EO_NNM_Object fillDelivery()
	 * @method array getExternalProperties()
	 * @method \Bitrix\Sale\Delivery\Requests\EO_Request setExternalProperties(array|\Bitrix\Main\DB\SqlExpression $externalProperties)
	 * @method bool hasExternalProperties()
	 * @method bool isExternalPropertiesFilled()
	 * @method bool isExternalPropertiesChanged()
	 * @method array remindActualExternalProperties()
	 * @method array requireExternalProperties()
	 * @method \Bitrix\Sale\Delivery\Requests\EO_Request resetExternalProperties()
	 * @method \Bitrix\Sale\Delivery\Requests\EO_Request unsetExternalProperties()
	 * @method array fillExternalProperties()
	 * @method \Bitrix\Sale\Delivery\Requests\EO_Shipment_Collection getShipments()
	 * @method \Bitrix\Sale\Delivery\Requests\EO_Shipment_Collection requireShipments()
	 * @method \Bitrix\Sale\Delivery\Requests\EO_Shipment_Collection fillShipments()
	 * @method bool hasShipments()
	 * @method bool isShipmentsFilled()
	 * @method bool isShipmentsChanged()
	 * @method void addToShipments(\Bitrix\Sale\Delivery\Requests\EO_Shipment $shipment)
	 * @method void removeFromShipments(\Bitrix\Sale\Delivery\Requests\EO_Shipment $shipment)
	 * @method void removeAllShipments()
	 * @method \Bitrix\Sale\Delivery\Requests\EO_Request resetShipments()
	 * @method \Bitrix\Sale\Delivery\Requests\EO_Request unsetShipments()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Sale\Delivery\Requests\EO_Request set($fieldName, $value)
	 * @method \Bitrix\Sale\Delivery\Requests\EO_Request reset($fieldName)
	 * @method \Bitrix\Sale\Delivery\Requests\EO_Request unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Sale\Delivery\Requests\EO_Request wakeUp($data)
	 */
	class EO_Request {
		/* @var \Bitrix\Sale\Delivery\Requests\RequestTable */
		static public $dataClass = '\Bitrix\Sale\Delivery\Requests\RequestTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Sale\Delivery\Requests {
	/**
	 * EO_Request_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getIdList()
	 * @method \Bitrix\Main\Type\DateTime[] getDateList()
	 * @method \Bitrix\Main\Type\DateTime[] fillDate()
	 * @method \int[] getDeliveryIdList()
	 * @method \int[] fillDeliveryId()
	 * @method \int[] getStatusList()
	 * @method \int[] fillStatus()
	 * @method \int[] getCreatedByList()
	 * @method \int[] fillCreatedBy()
	 * @method \string[] getExternalIdList()
	 * @method \string[] fillExternalId()
	 * @method \string[] getExternalStatusList()
	 * @method \string[] fillExternalStatus()
	 * @method \string[] getExternalStatusSemanticList()
	 * @method \string[] fillExternalStatusSemantic()
	 * @method \Bitrix\Sale\Delivery\Services\EO_NNM_Object[] getDeliveryList()
	 * @method \Bitrix\Sale\Delivery\Requests\EO_Request_Collection getDeliveryCollection()
	 * @method \Bitrix\Sale\Delivery\Services\EO__Collection fillDelivery()
	 * @method array[] getExternalPropertiesList()
	 * @method array[] fillExternalProperties()
	 * @method \Bitrix\Sale\Delivery\Requests\EO_Shipment_Collection[] getShipmentsList()
	 * @method \Bitrix\Sale\Delivery\Requests\EO_Shipment_Collection getShipmentsCollection()
	 * @method \Bitrix\Sale\Delivery\Requests\EO_Shipment_Collection fillShipments()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Sale\Delivery\Requests\EO_Request $object)
	 * @method bool has(\Bitrix\Sale\Delivery\Requests\EO_Request $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Sale\Delivery\Requests\EO_Request getByPrimary($primary)
	 * @method \Bitrix\Sale\Delivery\Requests\EO_Request[] getAll()
	 * @method bool remove(\Bitrix\Sale\Delivery\Requests\EO_Request $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Sale\Delivery\Requests\EO_Request_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Sale\Delivery\Requests\EO_Request current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 * @method EO_Request_Collection merge(?EO_Request_Collection $collection)
	 * @method bool isEmpty()
	 */
	class EO_Request_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Sale\Delivery\Requests\RequestTable */
		static public $dataClass = '\Bitrix\Sale\Delivery\Requests\RequestTable';
	}
}
namespace Bitrix\Sale\Delivery\Requests {
	/**
	 * Common methods:
	 * ---------------
	 *
	 * @method EO_Request_Result exec()
	 * @method \Bitrix\Sale\Delivery\Requests\EO_Request fetchObject()
	 * @method \Bitrix\Sale\Delivery\Requests\EO_Request_Collection fetchCollection()
	 *
	 * Custom methods:
	 * ---------------
	 *
	 */
	class EO_Request_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Sale\Delivery\Requests\EO_Request fetchObject()
	 * @method \Bitrix\Sale\Delivery\Requests\EO_Request_Collection fetchCollection()
	 */
	class EO_Request_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Sale\Delivery\Requests\EO_Request createObject($setDefaultValues = true)
	 * @method \Bitrix\Sale\Delivery\Requests\EO_Request_Collection createCollection()
	 * @method \Bitrix\Sale\Delivery\Requests\EO_Request wakeUpObject($row)
	 * @method \Bitrix\Sale\Delivery\Requests\EO_Request_Collection wakeUpCollection($rows)
	 */
	class EO_Request_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Sale\Delivery\Requests\ShipmentTable:sale\lib\delivery\requests\shipment.php */
namespace Bitrix\Sale\Delivery\Requests {
	/**
	 * EO_Shipment
	 * @see \Bitrix\Sale\Delivery\Requests\ShipmentTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getId()
	 * @method \Bitrix\Sale\Delivery\Requests\EO_Shipment setId(\int|\Bitrix\Main\DB\SqlExpression $id)
	 * @method bool hasId()
	 * @method bool isIdFilled()
	 * @method bool isIdChanged()
	 * @method \int getShipmentId()
	 * @method \Bitrix\Sale\Delivery\Requests\EO_Shipment setShipmentId(\int|\Bitrix\Main\DB\SqlExpression $shipmentId)
	 * @method bool hasShipmentId()
	 * @method bool isShipmentIdFilled()
	 * @method bool isShipmentIdChanged()
	 * @method \int remindActualShipmentId()
	 * @method \int requireShipmentId()
	 * @method \Bitrix\Sale\Delivery\Requests\EO_Shipment resetShipmentId()
	 * @method \Bitrix\Sale\Delivery\Requests\EO_Shipment unsetShipmentId()
	 * @method \int fillShipmentId()
	 * @method \int getRequestId()
	 * @method \Bitrix\Sale\Delivery\Requests\EO_Shipment setRequestId(\int|\Bitrix\Main\DB\SqlExpression $requestId)
	 * @method bool hasRequestId()
	 * @method bool isRequestIdFilled()
	 * @method bool isRequestIdChanged()
	 * @method \int remindActualRequestId()
	 * @method \int requireRequestId()
	 * @method \Bitrix\Sale\Delivery\Requests\EO_Shipment resetRequestId()
	 * @method \Bitrix\Sale\Delivery\Requests\EO_Shipment unsetRequestId()
	 * @method \int fillRequestId()
	 * @method \string getExternalId()
	 * @method \Bitrix\Sale\Delivery\Requests\EO_Shipment setExternalId(\string|\Bitrix\Main\DB\SqlExpression $externalId)
	 * @method bool hasExternalId()
	 * @method bool isExternalIdFilled()
	 * @method bool isExternalIdChanged()
	 * @method \string remindActualExternalId()
	 * @method \string requireExternalId()
	 * @method \Bitrix\Sale\Delivery\Requests\EO_Shipment resetExternalId()
	 * @method \Bitrix\Sale\Delivery\Requests\EO_Shipment unsetExternalId()
	 * @method \string fillExternalId()
	 * @method \string getErrorDescription()
	 * @method \Bitrix\Sale\Delivery\Requests\EO_Shipment setErrorDescription(\string|\Bitrix\Main\DB\SqlExpression $errorDescription)
	 * @method bool hasErrorDescription()
	 * @method bool isErrorDescriptionFilled()
	 * @method bool isErrorDescriptionChanged()
	 * @method \string remindActualErrorDescription()
	 * @method \string requireErrorDescription()
	 * @method \Bitrix\Sale\Delivery\Requests\EO_Shipment resetErrorDescription()
	 * @method \Bitrix\Sale\Delivery\Requests\EO_Shipment unsetErrorDescription()
	 * @method \string fillErrorDescription()
	 * @method \Bitrix\Sale\Internals\EO_Shipment getShipment()
	 * @method \Bitrix\Sale\Internals\EO_Shipment remindActualShipment()
	 * @method \Bitrix\Sale\Internals\EO_Shipment requireShipment()
	 * @method \Bitrix\Sale\Delivery\Requests\EO_Shipment setShipment(\Bitrix\Sale\Internals\EO_Shipment $object)
	 * @method \Bitrix\Sale\Delivery\Requests\EO_Shipment resetShipment()
	 * @method \Bitrix\Sale\Delivery\Requests\EO_Shipment unsetShipment()
	 * @method bool hasShipment()
	 * @method bool isShipmentFilled()
	 * @method bool isShipmentChanged()
	 * @method \Bitrix\Sale\Internals\EO_Shipment fillShipment()
	 * @method \Bitrix\Sale\Delivery\Requests\EO_Request getRequest()
	 * @method \Bitrix\Sale\Delivery\Requests\EO_Request remindActualRequest()
	 * @method \Bitrix\Sale\Delivery\Requests\EO_Request requireRequest()
	 * @method \Bitrix\Sale\Delivery\Requests\EO_Shipment setRequest(\Bitrix\Sale\Delivery\Requests\EO_Request $object)
	 * @method \Bitrix\Sale\Delivery\Requests\EO_Shipment resetRequest()
	 * @method \Bitrix\Sale\Delivery\Requests\EO_Shipment unsetRequest()
	 * @method bool hasRequest()
	 * @method bool isRequestFilled()
	 * @method bool isRequestChanged()
	 * @method \Bitrix\Sale\Delivery\Requests\EO_Request fillRequest()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Sale\Delivery\Requests\EO_Shipment set($fieldName, $value)
	 * @method \Bitrix\Sale\Delivery\Requests\EO_Shipment reset($fieldName)
	 * @method \Bitrix\Sale\Delivery\Requests\EO_Shipment unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Sale\Delivery\Requests\EO_Shipment wakeUp($data)
	 */
	class EO_Shipment {
		/* @var \Bitrix\Sale\Delivery\Requests\ShipmentTable */
		static public $dataClass = '\Bitrix\Sale\Delivery\Requests\ShipmentTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Sale\Delivery\Requests {
	/**
	 * EO_Shipment_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getIdList()
	 * @method \int[] getShipmentIdList()
	 * @method \int[] fillShipmentId()
	 * @method \int[] getRequestIdList()
	 * @method \int[] fillRequestId()
	 * @method \string[] getExternalIdList()
	 * @method \string[] fillExternalId()
	 * @method \string[] getErrorDescriptionList()
	 * @method \string[] fillErrorDescription()
	 * @method \Bitrix\Sale\Internals\EO_Shipment[] getShipmentList()
	 * @method \Bitrix\Sale\Delivery\Requests\EO_Shipment_Collection getShipmentCollection()
	 * @method \Bitrix\Sale\Internals\EO_Shipment_Collection fillShipment()
	 * @method \Bitrix\Sale\Delivery\Requests\EO_Request[] getRequestList()
	 * @method \Bitrix\Sale\Delivery\Requests\EO_Shipment_Collection getRequestCollection()
	 * @method \Bitrix\Sale\Delivery\Requests\EO_Request_Collection fillRequest()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Sale\Delivery\Requests\EO_Shipment $object)
	 * @method bool has(\Bitrix\Sale\Delivery\Requests\EO_Shipment $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Sale\Delivery\Requests\EO_Shipment getByPrimary($primary)
	 * @method \Bitrix\Sale\Delivery\Requests\EO_Shipment[] getAll()
	 * @method bool remove(\Bitrix\Sale\Delivery\Requests\EO_Shipment $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Sale\Delivery\Requests\EO_Shipment_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Sale\Delivery\Requests\EO_Shipment current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 * @method EO_Shipment_Collection merge(?EO_Shipment_Collection $collection)
	 * @method bool isEmpty()
	 */
	class EO_Shipment_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Sale\Delivery\Requests\ShipmentTable */
		static public $dataClass = '\Bitrix\Sale\Delivery\Requests\ShipmentTable';
	}
}
namespace Bitrix\Sale\Delivery\Requests {
	/**
	 * Common methods:
	 * ---------------
	 *
	 * @method EO_Shipment_Result exec()
	 * @method \Bitrix\Sale\Delivery\Requests\EO_Shipment fetchObject()
	 * @method \Bitrix\Sale\Delivery\Requests\EO_Shipment_Collection fetchCollection()
	 *
	 * Custom methods:
	 * ---------------
	 *
	 */
	class EO_Shipment_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Sale\Delivery\Requests\EO_Shipment fetchObject()
	 * @method \Bitrix\Sale\Delivery\Requests\EO_Shipment_Collection fetchCollection()
	 */
	class EO_Shipment_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Sale\Delivery\Requests\EO_Shipment createObject($setDefaultValues = true)
	 * @method \Bitrix\Sale\Delivery\Requests\EO_Shipment_Collection createCollection()
	 * @method \Bitrix\Sale\Delivery\Requests\EO_Shipment wakeUpObject($row)
	 * @method \Bitrix\Sale\Delivery\Requests\EO_Shipment_Collection wakeUpCollection($rows)
	 */
	class EO_Shipment_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Sale\Delivery\Rest\Internals\DeliveryRestHandlerTable:sale\lib\delivery\rest\internals\deliveryresthandlertable.php */
namespace Bitrix\Sale\Delivery\Rest\Internals {
	/**
	 * EO_DeliveryRestHandler
	 * @see \Bitrix\Sale\Delivery\Rest\Internals\DeliveryRestHandlerTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getId()
	 * @method \Bitrix\Sale\Delivery\Rest\Internals\EO_DeliveryRestHandler setId(\int|\Bitrix\Main\DB\SqlExpression $id)
	 * @method bool hasId()
	 * @method bool isIdFilled()
	 * @method bool isIdChanged()
	 * @method \string getName()
	 * @method \Bitrix\Sale\Delivery\Rest\Internals\EO_DeliveryRestHandler setName(\string|\Bitrix\Main\DB\SqlExpression $name)
	 * @method bool hasName()
	 * @method bool isNameFilled()
	 * @method bool isNameChanged()
	 * @method \string remindActualName()
	 * @method \string requireName()
	 * @method \Bitrix\Sale\Delivery\Rest\Internals\EO_DeliveryRestHandler resetName()
	 * @method \Bitrix\Sale\Delivery\Rest\Internals\EO_DeliveryRestHandler unsetName()
	 * @method \string fillName()
	 * @method \string getCode()
	 * @method \Bitrix\Sale\Delivery\Rest\Internals\EO_DeliveryRestHandler setCode(\string|\Bitrix\Main\DB\SqlExpression $code)
	 * @method bool hasCode()
	 * @method bool isCodeFilled()
	 * @method bool isCodeChanged()
	 * @method \string remindActualCode()
	 * @method \string requireCode()
	 * @method \Bitrix\Sale\Delivery\Rest\Internals\EO_DeliveryRestHandler resetCode()
	 * @method \Bitrix\Sale\Delivery\Rest\Internals\EO_DeliveryRestHandler unsetCode()
	 * @method \string fillCode()
	 * @method \int getSort()
	 * @method \Bitrix\Sale\Delivery\Rest\Internals\EO_DeliveryRestHandler setSort(\int|\Bitrix\Main\DB\SqlExpression $sort)
	 * @method bool hasSort()
	 * @method bool isSortFilled()
	 * @method bool isSortChanged()
	 * @method \int remindActualSort()
	 * @method \int requireSort()
	 * @method \Bitrix\Sale\Delivery\Rest\Internals\EO_DeliveryRestHandler resetSort()
	 * @method \Bitrix\Sale\Delivery\Rest\Internals\EO_DeliveryRestHandler unsetSort()
	 * @method \int fillSort()
	 * @method \string getDescription()
	 * @method \Bitrix\Sale\Delivery\Rest\Internals\EO_DeliveryRestHandler setDescription(\string|\Bitrix\Main\DB\SqlExpression $description)
	 * @method bool hasDescription()
	 * @method bool isDescriptionFilled()
	 * @method bool isDescriptionChanged()
	 * @method \string remindActualDescription()
	 * @method \string requireDescription()
	 * @method \Bitrix\Sale\Delivery\Rest\Internals\EO_DeliveryRestHandler resetDescription()
	 * @method \Bitrix\Sale\Delivery\Rest\Internals\EO_DeliveryRestHandler unsetDescription()
	 * @method \string fillDescription()
	 * @method \string getSettings()
	 * @method \Bitrix\Sale\Delivery\Rest\Internals\EO_DeliveryRestHandler setSettings(\string|\Bitrix\Main\DB\SqlExpression $settings)
	 * @method bool hasSettings()
	 * @method bool isSettingsFilled()
	 * @method bool isSettingsChanged()
	 * @method \string remindActualSettings()
	 * @method \string requireSettings()
	 * @method \Bitrix\Sale\Delivery\Rest\Internals\EO_DeliveryRestHandler resetSettings()
	 * @method \Bitrix\Sale\Delivery\Rest\Internals\EO_DeliveryRestHandler unsetSettings()
	 * @method \string fillSettings()
	 * @method \string getProfiles()
	 * @method \Bitrix\Sale\Delivery\Rest\Internals\EO_DeliveryRestHandler setProfiles(\string|\Bitrix\Main\DB\SqlExpression $profiles)
	 * @method bool hasProfiles()
	 * @method bool isProfilesFilled()
	 * @method bool isProfilesChanged()
	 * @method \string remindActualProfiles()
	 * @method \string requireProfiles()
	 * @method \Bitrix\Sale\Delivery\Rest\Internals\EO_DeliveryRestHandler resetProfiles()
	 * @method \Bitrix\Sale\Delivery\Rest\Internals\EO_DeliveryRestHandler unsetProfiles()
	 * @method \string fillProfiles()
	 * @method \string getAppId()
	 * @method \Bitrix\Sale\Delivery\Rest\Internals\EO_DeliveryRestHandler setAppId(\string|\Bitrix\Main\DB\SqlExpression $appId)
	 * @method bool hasAppId()
	 * @method bool isAppIdFilled()
	 * @method bool isAppIdChanged()
	 * @method \string remindActualAppId()
	 * @method \string requireAppId()
	 * @method \Bitrix\Sale\Delivery\Rest\Internals\EO_DeliveryRestHandler resetAppId()
	 * @method \Bitrix\Sale\Delivery\Rest\Internals\EO_DeliveryRestHandler unsetAppId()
	 * @method \string fillAppId()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Sale\Delivery\Rest\Internals\EO_DeliveryRestHandler set($fieldName, $value)
	 * @method \Bitrix\Sale\Delivery\Rest\Internals\EO_DeliveryRestHandler reset($fieldName)
	 * @method \Bitrix\Sale\Delivery\Rest\Internals\EO_DeliveryRestHandler unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Sale\Delivery\Rest\Internals\EO_DeliveryRestHandler wakeUp($data)
	 */
	class EO_DeliveryRestHandler {
		/* @var \Bitrix\Sale\Delivery\Rest\Internals\DeliveryRestHandlerTable */
		static public $dataClass = '\Bitrix\Sale\Delivery\Rest\Internals\DeliveryRestHandlerTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Sale\Delivery\Rest\Internals {
	/**
	 * EO_DeliveryRestHandler_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getIdList()
	 * @method \string[] getNameList()
	 * @method \string[] fillName()
	 * @method \string[] getCodeList()
	 * @method \string[] fillCode()
	 * @method \int[] getSortList()
	 * @method \int[] fillSort()
	 * @method \string[] getDescriptionList()
	 * @method \string[] fillDescription()
	 * @method \string[] getSettingsList()
	 * @method \string[] fillSettings()
	 * @method \string[] getProfilesList()
	 * @method \string[] fillProfiles()
	 * @method \string[] getAppIdList()
	 * @method \string[] fillAppId()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Sale\Delivery\Rest\Internals\EO_DeliveryRestHandler $object)
	 * @method bool has(\Bitrix\Sale\Delivery\Rest\Internals\EO_DeliveryRestHandler $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Sale\Delivery\Rest\Internals\EO_DeliveryRestHandler getByPrimary($primary)
	 * @method \Bitrix\Sale\Delivery\Rest\Internals\EO_DeliveryRestHandler[] getAll()
	 * @method bool remove(\Bitrix\Sale\Delivery\Rest\Internals\EO_DeliveryRestHandler $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Sale\Delivery\Rest\Internals\EO_DeliveryRestHandler_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Sale\Delivery\Rest\Internals\EO_DeliveryRestHandler current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 * @method EO_DeliveryRestHandler_Collection merge(?EO_DeliveryRestHandler_Collection $collection)
	 * @method bool isEmpty()
	 */
	class EO_DeliveryRestHandler_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Sale\Delivery\Rest\Internals\DeliveryRestHandlerTable */
		static public $dataClass = '\Bitrix\Sale\Delivery\Rest\Internals\DeliveryRestHandlerTable';
	}
}
namespace Bitrix\Sale\Delivery\Rest\Internals {
	/**
	 * Common methods:
	 * ---------------
	 *
	 * @method EO_DeliveryRestHandler_Result exec()
	 * @method \Bitrix\Sale\Delivery\Rest\Internals\EO_DeliveryRestHandler fetchObject()
	 * @method \Bitrix\Sale\Delivery\Rest\Internals\EO_DeliveryRestHandler_Collection fetchCollection()
	 *
	 * Custom methods:
	 * ---------------
	 *
	 */
	class EO_DeliveryRestHandler_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Sale\Delivery\Rest\Internals\EO_DeliveryRestHandler fetchObject()
	 * @method \Bitrix\Sale\Delivery\Rest\Internals\EO_DeliveryRestHandler_Collection fetchCollection()
	 */
	class EO_DeliveryRestHandler_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Sale\Delivery\Rest\Internals\EO_DeliveryRestHandler createObject($setDefaultValues = true)
	 * @method \Bitrix\Sale\Delivery\Rest\Internals\EO_DeliveryRestHandler_Collection createCollection()
	 * @method \Bitrix\Sale\Delivery\Rest\Internals\EO_DeliveryRestHandler wakeUpObject($row)
	 * @method \Bitrix\Sale\Delivery\Rest\Internals\EO_DeliveryRestHandler_Collection wakeUpCollection($rows)
	 */
	class EO_DeliveryRestHandler_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Sale\Delivery\Services\Table:sale\lib\delivery\services\table.php */
namespace Bitrix\Sale\Delivery\Services {
	/**
	 * EO_NNM_Object
	 * @see \Bitrix\Sale\Delivery\Services\Table
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getId()
	 * @method \Bitrix\Sale\Delivery\Services\EO_NNM_Object setId(\int|\Bitrix\Main\DB\SqlExpression $id)
	 * @method bool hasId()
	 * @method bool isIdFilled()
	 * @method bool isIdChanged()
	 * @method \string getCode()
	 * @method \Bitrix\Sale\Delivery\Services\EO_NNM_Object setCode(\string|\Bitrix\Main\DB\SqlExpression $code)
	 * @method bool hasCode()
	 * @method bool isCodeFilled()
	 * @method bool isCodeChanged()
	 * @method \string remindActualCode()
	 * @method \string requireCode()
	 * @method \Bitrix\Sale\Delivery\Services\EO_NNM_Object resetCode()
	 * @method \Bitrix\Sale\Delivery\Services\EO_NNM_Object unsetCode()
	 * @method \string fillCode()
	 * @method \int getParentId()
	 * @method \Bitrix\Sale\Delivery\Services\EO_NNM_Object setParentId(\int|\Bitrix\Main\DB\SqlExpression $parentId)
	 * @method bool hasParentId()
	 * @method bool isParentIdFilled()
	 * @method bool isParentIdChanged()
	 * @method \int remindActualParentId()
	 * @method \int requireParentId()
	 * @method \Bitrix\Sale\Delivery\Services\EO_NNM_Object resetParentId()
	 * @method \Bitrix\Sale\Delivery\Services\EO_NNM_Object unsetParentId()
	 * @method \int fillParentId()
	 * @method \Bitrix\Sale\Delivery\Services\EO_NNM_Object getParent()
	 * @method \Bitrix\Sale\Delivery\Services\EO_NNM_Object remindActualParent()
	 * @method \Bitrix\Sale\Delivery\Services\EO_NNM_Object requireParent()
	 * @method \Bitrix\Sale\Delivery\Services\EO_NNM_Object setParent(\Bitrix\Sale\Delivery\Services\EO_NNM_Object $object)
	 * @method \Bitrix\Sale\Delivery\Services\EO_NNM_Object resetParent()
	 * @method \Bitrix\Sale\Delivery\Services\EO_NNM_Object unsetParent()
	 * @method bool hasParent()
	 * @method bool isParentFilled()
	 * @method bool isParentChanged()
	 * @method \Bitrix\Sale\Delivery\Services\EO_NNM_Object fillParent()
	 * @method \string getName()
	 * @method \Bitrix\Sale\Delivery\Services\EO_NNM_Object setName(\string|\Bitrix\Main\DB\SqlExpression $name)
	 * @method bool hasName()
	 * @method bool isNameFilled()
	 * @method bool isNameChanged()
	 * @method \string remindActualName()
	 * @method \string requireName()
	 * @method \Bitrix\Sale\Delivery\Services\EO_NNM_Object resetName()
	 * @method \Bitrix\Sale\Delivery\Services\EO_NNM_Object unsetName()
	 * @method \string fillName()
	 * @method \boolean getActive()
	 * @method \Bitrix\Sale\Delivery\Services\EO_NNM_Object setActive(\boolean|\Bitrix\Main\DB\SqlExpression $active)
	 * @method bool hasActive()
	 * @method bool isActiveFilled()
	 * @method bool isActiveChanged()
	 * @method \boolean remindActualActive()
	 * @method \boolean requireActive()
	 * @method \Bitrix\Sale\Delivery\Services\EO_NNM_Object resetActive()
	 * @method \Bitrix\Sale\Delivery\Services\EO_NNM_Object unsetActive()
	 * @method \boolean fillActive()
	 * @method \string getDescription()
	 * @method \Bitrix\Sale\Delivery\Services\EO_NNM_Object setDescription(\string|\Bitrix\Main\DB\SqlExpression $description)
	 * @method bool hasDescription()
	 * @method bool isDescriptionFilled()
	 * @method bool isDescriptionChanged()
	 * @method \string remindActualDescription()
	 * @method \string requireDescription()
	 * @method \Bitrix\Sale\Delivery\Services\EO_NNM_Object resetDescription()
	 * @method \Bitrix\Sale\Delivery\Services\EO_NNM_Object unsetDescription()
	 * @method \string fillDescription()
	 * @method \int getSort()
	 * @method \Bitrix\Sale\Delivery\Services\EO_NNM_Object setSort(\int|\Bitrix\Main\DB\SqlExpression $sort)
	 * @method bool hasSort()
	 * @method bool isSortFilled()
	 * @method bool isSortChanged()
	 * @method \int remindActualSort()
	 * @method \int requireSort()
	 * @method \Bitrix\Sale\Delivery\Services\EO_NNM_Object resetSort()
	 * @method \Bitrix\Sale\Delivery\Services\EO_NNM_Object unsetSort()
	 * @method \int fillSort()
	 * @method \int getLogotip()
	 * @method \Bitrix\Sale\Delivery\Services\EO_NNM_Object setLogotip(\int|\Bitrix\Main\DB\SqlExpression $logotip)
	 * @method bool hasLogotip()
	 * @method bool isLogotipFilled()
	 * @method bool isLogotipChanged()
	 * @method \int remindActualLogotip()
	 * @method \int requireLogotip()
	 * @method \Bitrix\Sale\Delivery\Services\EO_NNM_Object resetLogotip()
	 * @method \Bitrix\Sale\Delivery\Services\EO_NNM_Object unsetLogotip()
	 * @method \int fillLogotip()
	 * @method \string getConfig()
	 * @method \Bitrix\Sale\Delivery\Services\EO_NNM_Object setConfig(\string|\Bitrix\Main\DB\SqlExpression $config)
	 * @method bool hasConfig()
	 * @method bool isConfigFilled()
	 * @method bool isConfigChanged()
	 * @method \string remindActualConfig()
	 * @method \string requireConfig()
	 * @method \Bitrix\Sale\Delivery\Services\EO_NNM_Object resetConfig()
	 * @method \Bitrix\Sale\Delivery\Services\EO_NNM_Object unsetConfig()
	 * @method \string fillConfig()
	 * @method \string getClassName()
	 * @method \Bitrix\Sale\Delivery\Services\EO_NNM_Object setClassName(\string|\Bitrix\Main\DB\SqlExpression $className)
	 * @method bool hasClassName()
	 * @method bool isClassNameFilled()
	 * @method bool isClassNameChanged()
	 * @method \string remindActualClassName()
	 * @method \string requireClassName()
	 * @method \Bitrix\Sale\Delivery\Services\EO_NNM_Object resetClassName()
	 * @method \Bitrix\Sale\Delivery\Services\EO_NNM_Object unsetClassName()
	 * @method \string fillClassName()
	 * @method \string getCurrency()
	 * @method \Bitrix\Sale\Delivery\Services\EO_NNM_Object setCurrency(\string|\Bitrix\Main\DB\SqlExpression $currency)
	 * @method bool hasCurrency()
	 * @method bool isCurrencyFilled()
	 * @method bool isCurrencyChanged()
	 * @method \string remindActualCurrency()
	 * @method \string requireCurrency()
	 * @method \Bitrix\Sale\Delivery\Services\EO_NNM_Object resetCurrency()
	 * @method \Bitrix\Sale\Delivery\Services\EO_NNM_Object unsetCurrency()
	 * @method \string fillCurrency()
	 * @method \string getTrackingParams()
	 * @method \Bitrix\Sale\Delivery\Services\EO_NNM_Object setTrackingParams(\string|\Bitrix\Main\DB\SqlExpression $trackingParams)
	 * @method bool hasTrackingParams()
	 * @method bool isTrackingParamsFilled()
	 * @method bool isTrackingParamsChanged()
	 * @method \string remindActualTrackingParams()
	 * @method \string requireTrackingParams()
	 * @method \Bitrix\Sale\Delivery\Services\EO_NNM_Object resetTrackingParams()
	 * @method \Bitrix\Sale\Delivery\Services\EO_NNM_Object unsetTrackingParams()
	 * @method \string fillTrackingParams()
	 * @method \boolean getAllowEditShipment()
	 * @method \Bitrix\Sale\Delivery\Services\EO_NNM_Object setAllowEditShipment(\boolean|\Bitrix\Main\DB\SqlExpression $allowEditShipment)
	 * @method bool hasAllowEditShipment()
	 * @method bool isAllowEditShipmentFilled()
	 * @method bool isAllowEditShipmentChanged()
	 * @method \boolean remindActualAllowEditShipment()
	 * @method \boolean requireAllowEditShipment()
	 * @method \Bitrix\Sale\Delivery\Services\EO_NNM_Object resetAllowEditShipment()
	 * @method \Bitrix\Sale\Delivery\Services\EO_NNM_Object unsetAllowEditShipment()
	 * @method \boolean fillAllowEditShipment()
	 * @method \int getVatId()
	 * @method \Bitrix\Sale\Delivery\Services\EO_NNM_Object setVatId(\int|\Bitrix\Main\DB\SqlExpression $vatId)
	 * @method bool hasVatId()
	 * @method bool isVatIdFilled()
	 * @method bool isVatIdChanged()
	 * @method \int remindActualVatId()
	 * @method \int requireVatId()
	 * @method \Bitrix\Sale\Delivery\Services\EO_NNM_Object resetVatId()
	 * @method \Bitrix\Sale\Delivery\Services\EO_NNM_Object unsetVatId()
	 * @method \int fillVatId()
	 * @method \string getXmlId()
	 * @method \Bitrix\Sale\Delivery\Services\EO_NNM_Object setXmlId(\string|\Bitrix\Main\DB\SqlExpression $xmlId)
	 * @method bool hasXmlId()
	 * @method bool isXmlIdFilled()
	 * @method bool isXmlIdChanged()
	 * @method \string remindActualXmlId()
	 * @method \string requireXmlId()
	 * @method \Bitrix\Sale\Delivery\Services\EO_NNM_Object resetXmlId()
	 * @method \Bitrix\Sale\Delivery\Services\EO_NNM_Object unsetXmlId()
	 * @method \string fillXmlId()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Sale\Delivery\Services\EO_NNM_Object set($fieldName, $value)
	 * @method \Bitrix\Sale\Delivery\Services\EO_NNM_Object reset($fieldName)
	 * @method \Bitrix\Sale\Delivery\Services\EO_NNM_Object unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Sale\Delivery\Services\EO_NNM_Object wakeUp($data)
	 */
	class EO_NNM_Object {
		/* @var \Bitrix\Sale\Delivery\Services\Table */
		static public $dataClass = '\Bitrix\Sale\Delivery\Services\Table';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Sale\Delivery\Services {
	/**
	 * EO__Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getIdList()
	 * @method \string[] getCodeList()
	 * @method \string[] fillCode()
	 * @method \int[] getParentIdList()
	 * @method \int[] fillParentId()
	 * @method \Bitrix\Sale\Delivery\Services\EO_NNM_Object[] getParentList()
	 * @method \Bitrix\Sale\Delivery\Services\EO__Collection getParentCollection()
	 * @method \Bitrix\Sale\Delivery\Services\EO__Collection fillParent()
	 * @method \string[] getNameList()
	 * @method \string[] fillName()
	 * @method \boolean[] getActiveList()
	 * @method \boolean[] fillActive()
	 * @method \string[] getDescriptionList()
	 * @method \string[] fillDescription()
	 * @method \int[] getSortList()
	 * @method \int[] fillSort()
	 * @method \int[] getLogotipList()
	 * @method \int[] fillLogotip()
	 * @method \string[] getConfigList()
	 * @method \string[] fillConfig()
	 * @method \string[] getClassNameList()
	 * @method \string[] fillClassName()
	 * @method \string[] getCurrencyList()
	 * @method \string[] fillCurrency()
	 * @method \string[] getTrackingParamsList()
	 * @method \string[] fillTrackingParams()
	 * @method \boolean[] getAllowEditShipmentList()
	 * @method \boolean[] fillAllowEditShipment()
	 * @method \int[] getVatIdList()
	 * @method \int[] fillVatId()
	 * @method \string[] getXmlIdList()
	 * @method \string[] fillXmlId()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Sale\Delivery\Services\EO_NNM_Object $object)
	 * @method bool has(\Bitrix\Sale\Delivery\Services\EO_NNM_Object $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Sale\Delivery\Services\EO_NNM_Object getByPrimary($primary)
	 * @method \Bitrix\Sale\Delivery\Services\EO_NNM_Object[] getAll()
	 * @method bool remove(\Bitrix\Sale\Delivery\Services\EO_NNM_Object $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Sale\Delivery\Services\EO__Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Sale\Delivery\Services\EO_NNM_Object current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 * @method EO__Collection merge(?EO__Collection $collection)
	 * @method bool isEmpty()
	 */
	class EO__Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Sale\Delivery\Services\Table */
		static public $dataClass = '\Bitrix\Sale\Delivery\Services\Table';
	}
}
namespace Bitrix\Sale\Delivery\Services {
	/**
	 * Common methods:
	 * ---------------
	 *
	 * @method EO__Result exec()
	 * @method \Bitrix\Sale\Delivery\Services\EO_NNM_Object fetchObject()
	 * @method \Bitrix\Sale\Delivery\Services\EO__Collection fetchCollection()
	 *
	 * Custom methods:
	 * ---------------
	 *
	 */
	class EO__Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Sale\Delivery\Services\EO_NNM_Object fetchObject()
	 * @method \Bitrix\Sale\Delivery\Services\EO__Collection fetchCollection()
	 */
	class EO__Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Sale\Delivery\Services\EO_NNM_Object createObject($setDefaultValues = true)
	 * @method \Bitrix\Sale\Delivery\Services\EO__Collection createCollection()
	 * @method \Bitrix\Sale\Delivery\Services\EO_NNM_Object wakeUpObject($row)
	 * @method \Bitrix\Sale\Delivery\Services\EO__Collection wakeUpCollection($rows)
	 */
	class EO__Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Sale\Discount\Gift\RelatedDataTable:sale\lib\discount\gift\relateddata.php */
namespace Bitrix\Sale\Discount\Gift {
	/**
	 * EO_RelatedData
	 * @see \Bitrix\Sale\Discount\Gift\RelatedDataTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getId()
	 * @method \Bitrix\Sale\Discount\Gift\EO_RelatedData setId(\int|\Bitrix\Main\DB\SqlExpression $id)
	 * @method bool hasId()
	 * @method bool isIdFilled()
	 * @method bool isIdChanged()
	 * @method \int getDiscountId()
	 * @method \Bitrix\Sale\Discount\Gift\EO_RelatedData setDiscountId(\int|\Bitrix\Main\DB\SqlExpression $discountId)
	 * @method bool hasDiscountId()
	 * @method bool isDiscountIdFilled()
	 * @method bool isDiscountIdChanged()
	 * @method \int remindActualDiscountId()
	 * @method \int requireDiscountId()
	 * @method \Bitrix\Sale\Discount\Gift\EO_RelatedData resetDiscountId()
	 * @method \Bitrix\Sale\Discount\Gift\EO_RelatedData unsetDiscountId()
	 * @method \int fillDiscountId()
	 * @method \Bitrix\Sale\Internals\EO_Discount getDiscount()
	 * @method \Bitrix\Sale\Internals\EO_Discount remindActualDiscount()
	 * @method \Bitrix\Sale\Internals\EO_Discount requireDiscount()
	 * @method \Bitrix\Sale\Discount\Gift\EO_RelatedData setDiscount(\Bitrix\Sale\Internals\EO_Discount $object)
	 * @method \Bitrix\Sale\Discount\Gift\EO_RelatedData resetDiscount()
	 * @method \Bitrix\Sale\Discount\Gift\EO_RelatedData unsetDiscount()
	 * @method bool hasDiscount()
	 * @method bool isDiscountFilled()
	 * @method bool isDiscountChanged()
	 * @method \Bitrix\Sale\Internals\EO_Discount fillDiscount()
	 * @method \Bitrix\Sale\Internals\EO_DiscountGroup getDiscountGroup()
	 * @method \Bitrix\Sale\Internals\EO_DiscountGroup remindActualDiscountGroup()
	 * @method \Bitrix\Sale\Internals\EO_DiscountGroup requireDiscountGroup()
	 * @method \Bitrix\Sale\Discount\Gift\EO_RelatedData setDiscountGroup(\Bitrix\Sale\Internals\EO_DiscountGroup $object)
	 * @method \Bitrix\Sale\Discount\Gift\EO_RelatedData resetDiscountGroup()
	 * @method \Bitrix\Sale\Discount\Gift\EO_RelatedData unsetDiscountGroup()
	 * @method bool hasDiscountGroup()
	 * @method bool isDiscountGroupFilled()
	 * @method bool isDiscountGroupChanged()
	 * @method \Bitrix\Sale\Internals\EO_DiscountGroup fillDiscountGroup()
	 * @method \int getElementId()
	 * @method \Bitrix\Sale\Discount\Gift\EO_RelatedData setElementId(\int|\Bitrix\Main\DB\SqlExpression $elementId)
	 * @method bool hasElementId()
	 * @method bool isElementIdFilled()
	 * @method bool isElementIdChanged()
	 * @method \int remindActualElementId()
	 * @method \int requireElementId()
	 * @method \Bitrix\Sale\Discount\Gift\EO_RelatedData resetElementId()
	 * @method \Bitrix\Sale\Discount\Gift\EO_RelatedData unsetElementId()
	 * @method \int fillElementId()
	 * @method \int getSectionId()
	 * @method \Bitrix\Sale\Discount\Gift\EO_RelatedData setSectionId(\int|\Bitrix\Main\DB\SqlExpression $sectionId)
	 * @method bool hasSectionId()
	 * @method bool isSectionIdFilled()
	 * @method bool isSectionIdChanged()
	 * @method \int remindActualSectionId()
	 * @method \int requireSectionId()
	 * @method \Bitrix\Sale\Discount\Gift\EO_RelatedData resetSectionId()
	 * @method \Bitrix\Sale\Discount\Gift\EO_RelatedData unsetSectionId()
	 * @method \int fillSectionId()
	 * @method \int getMainProductSectionId()
	 * @method \Bitrix\Sale\Discount\Gift\EO_RelatedData setMainProductSectionId(\int|\Bitrix\Main\DB\SqlExpression $mainProductSectionId)
	 * @method bool hasMainProductSectionId()
	 * @method bool isMainProductSectionIdFilled()
	 * @method bool isMainProductSectionIdChanged()
	 * @method \int remindActualMainProductSectionId()
	 * @method \int requireMainProductSectionId()
	 * @method \Bitrix\Sale\Discount\Gift\EO_RelatedData resetMainProductSectionId()
	 * @method \Bitrix\Sale\Discount\Gift\EO_RelatedData unsetMainProductSectionId()
	 * @method \int fillMainProductSectionId()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Sale\Discount\Gift\EO_RelatedData set($fieldName, $value)
	 * @method \Bitrix\Sale\Discount\Gift\EO_RelatedData reset($fieldName)
	 * @method \Bitrix\Sale\Discount\Gift\EO_RelatedData unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Sale\Discount\Gift\EO_RelatedData wakeUp($data)
	 */
	class EO_RelatedData {
		/* @var \Bitrix\Sale\Discount\Gift\RelatedDataTable */
		static public $dataClass = '\Bitrix\Sale\Discount\Gift\RelatedDataTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Sale\Discount\Gift {
	/**
	 * EO_RelatedData_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getIdList()
	 * @method \int[] getDiscountIdList()
	 * @method \int[] fillDiscountId()
	 * @method \Bitrix\Sale\Internals\EO_Discount[] getDiscountList()
	 * @method \Bitrix\Sale\Discount\Gift\EO_RelatedData_Collection getDiscountCollection()
	 * @method \Bitrix\Sale\Internals\EO_Discount_Collection fillDiscount()
	 * @method \Bitrix\Sale\Internals\EO_DiscountGroup[] getDiscountGroupList()
	 * @method \Bitrix\Sale\Discount\Gift\EO_RelatedData_Collection getDiscountGroupCollection()
	 * @method \Bitrix\Sale\Internals\EO_DiscountGroup_Collection fillDiscountGroup()
	 * @method \int[] getElementIdList()
	 * @method \int[] fillElementId()
	 * @method \int[] getSectionIdList()
	 * @method \int[] fillSectionId()
	 * @method \int[] getMainProductSectionIdList()
	 * @method \int[] fillMainProductSectionId()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Sale\Discount\Gift\EO_RelatedData $object)
	 * @method bool has(\Bitrix\Sale\Discount\Gift\EO_RelatedData $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Sale\Discount\Gift\EO_RelatedData getByPrimary($primary)
	 * @method \Bitrix\Sale\Discount\Gift\EO_RelatedData[] getAll()
	 * @method bool remove(\Bitrix\Sale\Discount\Gift\EO_RelatedData $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Sale\Discount\Gift\EO_RelatedData_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Sale\Discount\Gift\EO_RelatedData current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 * @method EO_RelatedData_Collection merge(?EO_RelatedData_Collection $collection)
	 * @method bool isEmpty()
	 */
	class EO_RelatedData_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Sale\Discount\Gift\RelatedDataTable */
		static public $dataClass = '\Bitrix\Sale\Discount\Gift\RelatedDataTable';
	}
}
namespace Bitrix\Sale\Discount\Gift {
	/**
	 * Common methods:
	 * ---------------
	 *
	 * @method EO_RelatedData_Result exec()
	 * @method \Bitrix\Sale\Discount\Gift\EO_RelatedData fetchObject()
	 * @method \Bitrix\Sale\Discount\Gift\EO_RelatedData_Collection fetchCollection()
	 *
	 * Custom methods:
	 * ---------------
	 *
	 */
	class EO_RelatedData_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Sale\Discount\Gift\EO_RelatedData fetchObject()
	 * @method \Bitrix\Sale\Discount\Gift\EO_RelatedData_Collection fetchCollection()
	 */
	class EO_RelatedData_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Sale\Discount\Gift\EO_RelatedData createObject($setDefaultValues = true)
	 * @method \Bitrix\Sale\Discount\Gift\EO_RelatedData_Collection createCollection()
	 * @method \Bitrix\Sale\Discount\Gift\EO_RelatedData wakeUpObject($row)
	 * @method \Bitrix\Sale\Discount\Gift\EO_RelatedData_Collection wakeUpCollection($rows)
	 */
	class EO_RelatedData_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Sale\Discount\Index\IndexElementTable:sale\lib\discount\index\indexelement.php */
namespace Bitrix\Sale\Discount\Index {
	/**
	 * EO_IndexElement
	 * @see \Bitrix\Sale\Discount\Index\IndexElementTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getId()
	 * @method \Bitrix\Sale\Discount\Index\EO_IndexElement setId(\int|\Bitrix\Main\DB\SqlExpression $id)
	 * @method bool hasId()
	 * @method bool isIdFilled()
	 * @method bool isIdChanged()
	 * @method \int getDiscountId()
	 * @method \Bitrix\Sale\Discount\Index\EO_IndexElement setDiscountId(\int|\Bitrix\Main\DB\SqlExpression $discountId)
	 * @method bool hasDiscountId()
	 * @method bool isDiscountIdFilled()
	 * @method bool isDiscountIdChanged()
	 * @method \int remindActualDiscountId()
	 * @method \int requireDiscountId()
	 * @method \Bitrix\Sale\Discount\Index\EO_IndexElement resetDiscountId()
	 * @method \Bitrix\Sale\Discount\Index\EO_IndexElement unsetDiscountId()
	 * @method \int fillDiscountId()
	 * @method \Bitrix\Sale\Internals\EO_Discount getDiscount()
	 * @method \Bitrix\Sale\Internals\EO_Discount remindActualDiscount()
	 * @method \Bitrix\Sale\Internals\EO_Discount requireDiscount()
	 * @method \Bitrix\Sale\Discount\Index\EO_IndexElement setDiscount(\Bitrix\Sale\Internals\EO_Discount $object)
	 * @method \Bitrix\Sale\Discount\Index\EO_IndexElement resetDiscount()
	 * @method \Bitrix\Sale\Discount\Index\EO_IndexElement unsetDiscount()
	 * @method bool hasDiscount()
	 * @method bool isDiscountFilled()
	 * @method bool isDiscountChanged()
	 * @method \Bitrix\Sale\Internals\EO_Discount fillDiscount()
	 * @method \Bitrix\Sale\Internals\EO_DiscountGroup getDiscountGroup()
	 * @method \Bitrix\Sale\Internals\EO_DiscountGroup remindActualDiscountGroup()
	 * @method \Bitrix\Sale\Internals\EO_DiscountGroup requireDiscountGroup()
	 * @method \Bitrix\Sale\Discount\Index\EO_IndexElement setDiscountGroup(\Bitrix\Sale\Internals\EO_DiscountGroup $object)
	 * @method \Bitrix\Sale\Discount\Index\EO_IndexElement resetDiscountGroup()
	 * @method \Bitrix\Sale\Discount\Index\EO_IndexElement unsetDiscountGroup()
	 * @method bool hasDiscountGroup()
	 * @method bool isDiscountGroupFilled()
	 * @method bool isDiscountGroupChanged()
	 * @method \Bitrix\Sale\Internals\EO_DiscountGroup fillDiscountGroup()
	 * @method \int getElementId()
	 * @method \Bitrix\Sale\Discount\Index\EO_IndexElement setElementId(\int|\Bitrix\Main\DB\SqlExpression $elementId)
	 * @method bool hasElementId()
	 * @method bool isElementIdFilled()
	 * @method bool isElementIdChanged()
	 * @method \int remindActualElementId()
	 * @method \int requireElementId()
	 * @method \Bitrix\Sale\Discount\Index\EO_IndexElement resetElementId()
	 * @method \Bitrix\Sale\Discount\Index\EO_IndexElement unsetElementId()
	 * @method \int fillElementId()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Sale\Discount\Index\EO_IndexElement set($fieldName, $value)
	 * @method \Bitrix\Sale\Discount\Index\EO_IndexElement reset($fieldName)
	 * @method \Bitrix\Sale\Discount\Index\EO_IndexElement unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Sale\Discount\Index\EO_IndexElement wakeUp($data)
	 */
	class EO_IndexElement {
		/* @var \Bitrix\Sale\Discount\Index\IndexElementTable */
		static public $dataClass = '\Bitrix\Sale\Discount\Index\IndexElementTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Sale\Discount\Index {
	/**
	 * EO_IndexElement_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getIdList()
	 * @method \int[] getDiscountIdList()
	 * @method \int[] fillDiscountId()
	 * @method \Bitrix\Sale\Internals\EO_Discount[] getDiscountList()
	 * @method \Bitrix\Sale\Discount\Index\EO_IndexElement_Collection getDiscountCollection()
	 * @method \Bitrix\Sale\Internals\EO_Discount_Collection fillDiscount()
	 * @method \Bitrix\Sale\Internals\EO_DiscountGroup[] getDiscountGroupList()
	 * @method \Bitrix\Sale\Discount\Index\EO_IndexElement_Collection getDiscountGroupCollection()
	 * @method \Bitrix\Sale\Internals\EO_DiscountGroup_Collection fillDiscountGroup()
	 * @method \int[] getElementIdList()
	 * @method \int[] fillElementId()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Sale\Discount\Index\EO_IndexElement $object)
	 * @method bool has(\Bitrix\Sale\Discount\Index\EO_IndexElement $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Sale\Discount\Index\EO_IndexElement getByPrimary($primary)
	 * @method \Bitrix\Sale\Discount\Index\EO_IndexElement[] getAll()
	 * @method bool remove(\Bitrix\Sale\Discount\Index\EO_IndexElement $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Sale\Discount\Index\EO_IndexElement_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Sale\Discount\Index\EO_IndexElement current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 * @method EO_IndexElement_Collection merge(?EO_IndexElement_Collection $collection)
	 * @method bool isEmpty()
	 */
	class EO_IndexElement_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Sale\Discount\Index\IndexElementTable */
		static public $dataClass = '\Bitrix\Sale\Discount\Index\IndexElementTable';
	}
}
namespace Bitrix\Sale\Discount\Index {
	/**
	 * Common methods:
	 * ---------------
	 *
	 * @method EO_IndexElement_Result exec()
	 * @method \Bitrix\Sale\Discount\Index\EO_IndexElement fetchObject()
	 * @method \Bitrix\Sale\Discount\Index\EO_IndexElement_Collection fetchCollection()
	 *
	 * Custom methods:
	 * ---------------
	 *
	 */
	class EO_IndexElement_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Sale\Discount\Index\EO_IndexElement fetchObject()
	 * @method \Bitrix\Sale\Discount\Index\EO_IndexElement_Collection fetchCollection()
	 */
	class EO_IndexElement_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Sale\Discount\Index\EO_IndexElement createObject($setDefaultValues = true)
	 * @method \Bitrix\Sale\Discount\Index\EO_IndexElement_Collection createCollection()
	 * @method \Bitrix\Sale\Discount\Index\EO_IndexElement wakeUpObject($row)
	 * @method \Bitrix\Sale\Discount\Index\EO_IndexElement_Collection wakeUpCollection($rows)
	 */
	class EO_IndexElement_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Sale\Discount\Index\IndexSectionTable:sale\lib\discount\index\indexsection.php */
namespace Bitrix\Sale\Discount\Index {
	/**
	 * EO_IndexSection
	 * @see \Bitrix\Sale\Discount\Index\IndexSectionTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getId()
	 * @method \Bitrix\Sale\Discount\Index\EO_IndexSection setId(\int|\Bitrix\Main\DB\SqlExpression $id)
	 * @method bool hasId()
	 * @method bool isIdFilled()
	 * @method bool isIdChanged()
	 * @method \int getDiscountId()
	 * @method \Bitrix\Sale\Discount\Index\EO_IndexSection setDiscountId(\int|\Bitrix\Main\DB\SqlExpression $discountId)
	 * @method bool hasDiscountId()
	 * @method bool isDiscountIdFilled()
	 * @method bool isDiscountIdChanged()
	 * @method \int remindActualDiscountId()
	 * @method \int requireDiscountId()
	 * @method \Bitrix\Sale\Discount\Index\EO_IndexSection resetDiscountId()
	 * @method \Bitrix\Sale\Discount\Index\EO_IndexSection unsetDiscountId()
	 * @method \int fillDiscountId()
	 * @method \Bitrix\Sale\Internals\EO_Discount getDiscount()
	 * @method \Bitrix\Sale\Internals\EO_Discount remindActualDiscount()
	 * @method \Bitrix\Sale\Internals\EO_Discount requireDiscount()
	 * @method \Bitrix\Sale\Discount\Index\EO_IndexSection setDiscount(\Bitrix\Sale\Internals\EO_Discount $object)
	 * @method \Bitrix\Sale\Discount\Index\EO_IndexSection resetDiscount()
	 * @method \Bitrix\Sale\Discount\Index\EO_IndexSection unsetDiscount()
	 * @method bool hasDiscount()
	 * @method bool isDiscountFilled()
	 * @method bool isDiscountChanged()
	 * @method \Bitrix\Sale\Internals\EO_Discount fillDiscount()
	 * @method \Bitrix\Sale\Internals\EO_DiscountGroup getDiscountGroup()
	 * @method \Bitrix\Sale\Internals\EO_DiscountGroup remindActualDiscountGroup()
	 * @method \Bitrix\Sale\Internals\EO_DiscountGroup requireDiscountGroup()
	 * @method \Bitrix\Sale\Discount\Index\EO_IndexSection setDiscountGroup(\Bitrix\Sale\Internals\EO_DiscountGroup $object)
	 * @method \Bitrix\Sale\Discount\Index\EO_IndexSection resetDiscountGroup()
	 * @method \Bitrix\Sale\Discount\Index\EO_IndexSection unsetDiscountGroup()
	 * @method bool hasDiscountGroup()
	 * @method bool isDiscountGroupFilled()
	 * @method bool isDiscountGroupChanged()
	 * @method \Bitrix\Sale\Internals\EO_DiscountGroup fillDiscountGroup()
	 * @method \int getSectionId()
	 * @method \Bitrix\Sale\Discount\Index\EO_IndexSection setSectionId(\int|\Bitrix\Main\DB\SqlExpression $sectionId)
	 * @method bool hasSectionId()
	 * @method bool isSectionIdFilled()
	 * @method bool isSectionIdChanged()
	 * @method \int remindActualSectionId()
	 * @method \int requireSectionId()
	 * @method \Bitrix\Sale\Discount\Index\EO_IndexSection resetSectionId()
	 * @method \Bitrix\Sale\Discount\Index\EO_IndexSection unsetSectionId()
	 * @method \int fillSectionId()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Sale\Discount\Index\EO_IndexSection set($fieldName, $value)
	 * @method \Bitrix\Sale\Discount\Index\EO_IndexSection reset($fieldName)
	 * @method \Bitrix\Sale\Discount\Index\EO_IndexSection unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Sale\Discount\Index\EO_IndexSection wakeUp($data)
	 */
	class EO_IndexSection {
		/* @var \Bitrix\Sale\Discount\Index\IndexSectionTable */
		static public $dataClass = '\Bitrix\Sale\Discount\Index\IndexSectionTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Sale\Discount\Index {
	/**
	 * EO_IndexSection_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getIdList()
	 * @method \int[] getDiscountIdList()
	 * @method \int[] fillDiscountId()
	 * @method \Bitrix\Sale\Internals\EO_Discount[] getDiscountList()
	 * @method \Bitrix\Sale\Discount\Index\EO_IndexSection_Collection getDiscountCollection()
	 * @method \Bitrix\Sale\Internals\EO_Discount_Collection fillDiscount()
	 * @method \Bitrix\Sale\Internals\EO_DiscountGroup[] getDiscountGroupList()
	 * @method \Bitrix\Sale\Discount\Index\EO_IndexSection_Collection getDiscountGroupCollection()
	 * @method \Bitrix\Sale\Internals\EO_DiscountGroup_Collection fillDiscountGroup()
	 * @method \int[] getSectionIdList()
	 * @method \int[] fillSectionId()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Sale\Discount\Index\EO_IndexSection $object)
	 * @method bool has(\Bitrix\Sale\Discount\Index\EO_IndexSection $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Sale\Discount\Index\EO_IndexSection getByPrimary($primary)
	 * @method \Bitrix\Sale\Discount\Index\EO_IndexSection[] getAll()
	 * @method bool remove(\Bitrix\Sale\Discount\Index\EO_IndexSection $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Sale\Discount\Index\EO_IndexSection_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Sale\Discount\Index\EO_IndexSection current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 * @method EO_IndexSection_Collection merge(?EO_IndexSection_Collection $collection)
	 * @method bool isEmpty()
	 */
	class EO_IndexSection_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Sale\Discount\Index\IndexSectionTable */
		static public $dataClass = '\Bitrix\Sale\Discount\Index\IndexSectionTable';
	}
}
namespace Bitrix\Sale\Discount\Index {
	/**
	 * Common methods:
	 * ---------------
	 *
	 * @method EO_IndexSection_Result exec()
	 * @method \Bitrix\Sale\Discount\Index\EO_IndexSection fetchObject()
	 * @method \Bitrix\Sale\Discount\Index\EO_IndexSection_Collection fetchCollection()
	 *
	 * Custom methods:
	 * ---------------
	 *
	 */
	class EO_IndexSection_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Sale\Discount\Index\EO_IndexSection fetchObject()
	 * @method \Bitrix\Sale\Discount\Index\EO_IndexSection_Collection fetchCollection()
	 */
	class EO_IndexSection_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Sale\Discount\Index\EO_IndexSection createObject($setDefaultValues = true)
	 * @method \Bitrix\Sale\Discount\Index\EO_IndexSection_Collection createCollection()
	 * @method \Bitrix\Sale\Discount\Index\EO_IndexSection wakeUpObject($row)
	 * @method \Bitrix\Sale\Discount\Index\EO_IndexSection_Collection wakeUpCollection($rows)
	 */
	class EO_IndexSection_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Sale\Domain\Verification\Internals\DomainVerificationTable:sale\lib\domain\verification\internals\domainverification.php */
namespace Bitrix\Sale\Domain\Verification\Internals {
	/**
	 * EO_DomainVerification
	 * @see \Bitrix\Sale\Domain\Verification\Internals\DomainVerificationTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getId()
	 * @method \Bitrix\Sale\Domain\Verification\Internals\EO_DomainVerification setId(\int|\Bitrix\Main\DB\SqlExpression $id)
	 * @method bool hasId()
	 * @method bool isIdFilled()
	 * @method bool isIdChanged()
	 * @method \string getDomain()
	 * @method \Bitrix\Sale\Domain\Verification\Internals\EO_DomainVerification setDomain(\string|\Bitrix\Main\DB\SqlExpression $domain)
	 * @method bool hasDomain()
	 * @method bool isDomainFilled()
	 * @method bool isDomainChanged()
	 * @method \string remindActualDomain()
	 * @method \string requireDomain()
	 * @method \Bitrix\Sale\Domain\Verification\Internals\EO_DomainVerification resetDomain()
	 * @method \Bitrix\Sale\Domain\Verification\Internals\EO_DomainVerification unsetDomain()
	 * @method \string fillDomain()
	 * @method \string getPath()
	 * @method \Bitrix\Sale\Domain\Verification\Internals\EO_DomainVerification setPath(\string|\Bitrix\Main\DB\SqlExpression $path)
	 * @method bool hasPath()
	 * @method bool isPathFilled()
	 * @method bool isPathChanged()
	 * @method \string remindActualPath()
	 * @method \string requirePath()
	 * @method \Bitrix\Sale\Domain\Verification\Internals\EO_DomainVerification resetPath()
	 * @method \Bitrix\Sale\Domain\Verification\Internals\EO_DomainVerification unsetPath()
	 * @method \string fillPath()
	 * @method \string getContent()
	 * @method \Bitrix\Sale\Domain\Verification\Internals\EO_DomainVerification setContent(\string|\Bitrix\Main\DB\SqlExpression $content)
	 * @method bool hasContent()
	 * @method bool isContentFilled()
	 * @method bool isContentChanged()
	 * @method \string remindActualContent()
	 * @method \string requireContent()
	 * @method \Bitrix\Sale\Domain\Verification\Internals\EO_DomainVerification resetContent()
	 * @method \Bitrix\Sale\Domain\Verification\Internals\EO_DomainVerification unsetContent()
	 * @method \string fillContent()
	 * @method \string getEntity()
	 * @method \Bitrix\Sale\Domain\Verification\Internals\EO_DomainVerification setEntity(\string|\Bitrix\Main\DB\SqlExpression $entity)
	 * @method bool hasEntity()
	 * @method bool isEntityFilled()
	 * @method bool isEntityChanged()
	 * @method \string remindActualEntity()
	 * @method \string requireEntity()
	 * @method \Bitrix\Sale\Domain\Verification\Internals\EO_DomainVerification resetEntity()
	 * @method \Bitrix\Sale\Domain\Verification\Internals\EO_DomainVerification unsetEntity()
	 * @method \string fillEntity()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Sale\Domain\Verification\Internals\EO_DomainVerification set($fieldName, $value)
	 * @method \Bitrix\Sale\Domain\Verification\Internals\EO_DomainVerification reset($fieldName)
	 * @method \Bitrix\Sale\Domain\Verification\Internals\EO_DomainVerification unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Sale\Domain\Verification\Internals\EO_DomainVerification wakeUp($data)
	 */
	class EO_DomainVerification {
		/* @var \Bitrix\Sale\Domain\Verification\Internals\DomainVerificationTable */
		static public $dataClass = '\Bitrix\Sale\Domain\Verification\Internals\DomainVerificationTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Sale\Domain\Verification\Internals {
	/**
	 * EO_DomainVerification_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getIdList()
	 * @method \string[] getDomainList()
	 * @method \string[] fillDomain()
	 * @method \string[] getPathList()
	 * @method \string[] fillPath()
	 * @method \string[] getContentList()
	 * @method \string[] fillContent()
	 * @method \string[] getEntityList()
	 * @method \string[] fillEntity()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Sale\Domain\Verification\Internals\EO_DomainVerification $object)
	 * @method bool has(\Bitrix\Sale\Domain\Verification\Internals\EO_DomainVerification $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Sale\Domain\Verification\Internals\EO_DomainVerification getByPrimary($primary)
	 * @method \Bitrix\Sale\Domain\Verification\Internals\EO_DomainVerification[] getAll()
	 * @method bool remove(\Bitrix\Sale\Domain\Verification\Internals\EO_DomainVerification $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Sale\Domain\Verification\Internals\EO_DomainVerification_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Sale\Domain\Verification\Internals\EO_DomainVerification current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 * @method EO_DomainVerification_Collection merge(?EO_DomainVerification_Collection $collection)
	 * @method bool isEmpty()
	 */
	class EO_DomainVerification_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Sale\Domain\Verification\Internals\DomainVerificationTable */
		static public $dataClass = '\Bitrix\Sale\Domain\Verification\Internals\DomainVerificationTable';
	}
}
namespace Bitrix\Sale\Domain\Verification\Internals {
	/**
	 * Common methods:
	 * ---------------
	 *
	 * @method EO_DomainVerification_Result exec()
	 * @method \Bitrix\Sale\Domain\Verification\Internals\EO_DomainVerification fetchObject()
	 * @method \Bitrix\Sale\Domain\Verification\Internals\EO_DomainVerification_Collection fetchCollection()
	 *
	 * Custom methods:
	 * ---------------
	 *
	 */
	class EO_DomainVerification_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Sale\Domain\Verification\Internals\EO_DomainVerification fetchObject()
	 * @method \Bitrix\Sale\Domain\Verification\Internals\EO_DomainVerification_Collection fetchCollection()
	 */
	class EO_DomainVerification_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Sale\Domain\Verification\Internals\EO_DomainVerification createObject($setDefaultValues = true)
	 * @method \Bitrix\Sale\Domain\Verification\Internals\EO_DomainVerification_Collection createCollection()
	 * @method \Bitrix\Sale\Domain\Verification\Internals\EO_DomainVerification wakeUpObject($row)
	 * @method \Bitrix\Sale\Domain\Verification\Internals\EO_DomainVerification_Collection wakeUpCollection($rows)
	 */
	class EO_DomainVerification_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Sale\Exchange\Integration\Entity\B24IntegrationBindTable:sale\lib\exchange\integration\entity\b24integrationbindtable.php */
namespace Bitrix\Sale\Exchange\Integration\Entity {
	/**
	 * EO_B24IntegrationBind
	 * @see \Bitrix\Sale\Exchange\Integration\Entity\B24IntegrationBindTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getId()
	 * @method \Bitrix\Sale\Exchange\Integration\Entity\EO_B24IntegrationBind setId(\int|\Bitrix\Main\DB\SqlExpression $id)
	 * @method bool hasId()
	 * @method bool isIdFilled()
	 * @method bool isIdChanged()
	 * @method \int remindActualId()
	 * @method \int requireId()
	 * @method \Bitrix\Sale\Exchange\Integration\Entity\EO_B24IntegrationBind resetId()
	 * @method \Bitrix\Sale\Exchange\Integration\Entity\EO_B24IntegrationBind unsetId()
	 * @method \int fillId()
	 * @method \int getSrcEntityTypeId()
	 * @method \Bitrix\Sale\Exchange\Integration\Entity\EO_B24IntegrationBind setSrcEntityTypeId(\int|\Bitrix\Main\DB\SqlExpression $srcEntityTypeId)
	 * @method bool hasSrcEntityTypeId()
	 * @method bool isSrcEntityTypeIdFilled()
	 * @method bool isSrcEntityTypeIdChanged()
	 * @method \int getSrcEntityId()
	 * @method \Bitrix\Sale\Exchange\Integration\Entity\EO_B24IntegrationBind setSrcEntityId(\int|\Bitrix\Main\DB\SqlExpression $srcEntityId)
	 * @method bool hasSrcEntityId()
	 * @method bool isSrcEntityIdFilled()
	 * @method bool isSrcEntityIdChanged()
	 * @method \int getDstEntityTypeId()
	 * @method \Bitrix\Sale\Exchange\Integration\Entity\EO_B24IntegrationBind setDstEntityTypeId(\int|\Bitrix\Main\DB\SqlExpression $dstEntityTypeId)
	 * @method bool hasDstEntityTypeId()
	 * @method bool isDstEntityTypeIdFilled()
	 * @method bool isDstEntityTypeIdChanged()
	 * @method \int getDstEntityId()
	 * @method \Bitrix\Sale\Exchange\Integration\Entity\EO_B24IntegrationBind setDstEntityId(\int|\Bitrix\Main\DB\SqlExpression $dstEntityId)
	 * @method bool hasDstEntityId()
	 * @method bool isDstEntityIdFilled()
	 * @method bool isDstEntityIdChanged()
	 * @method \Bitrix\Main\Type\DateTime getCreatedTime()
	 * @method \Bitrix\Sale\Exchange\Integration\Entity\EO_B24IntegrationBind setCreatedTime(\Bitrix\Main\Type\DateTime|\Bitrix\Main\DB\SqlExpression $createdTime)
	 * @method bool hasCreatedTime()
	 * @method bool isCreatedTimeFilled()
	 * @method bool isCreatedTimeChanged()
	 * @method \Bitrix\Main\Type\DateTime remindActualCreatedTime()
	 * @method \Bitrix\Main\Type\DateTime requireCreatedTime()
	 * @method \Bitrix\Sale\Exchange\Integration\Entity\EO_B24IntegrationBind resetCreatedTime()
	 * @method \Bitrix\Sale\Exchange\Integration\Entity\EO_B24IntegrationBind unsetCreatedTime()
	 * @method \Bitrix\Main\Type\DateTime fillCreatedTime()
	 * @method \Bitrix\Main\Type\DateTime getLastUpdatedTime()
	 * @method \Bitrix\Sale\Exchange\Integration\Entity\EO_B24IntegrationBind setLastUpdatedTime(\Bitrix\Main\Type\DateTime|\Bitrix\Main\DB\SqlExpression $lastUpdatedTime)
	 * @method bool hasLastUpdatedTime()
	 * @method bool isLastUpdatedTimeFilled()
	 * @method bool isLastUpdatedTimeChanged()
	 * @method \Bitrix\Main\Type\DateTime remindActualLastUpdatedTime()
	 * @method \Bitrix\Main\Type\DateTime requireLastUpdatedTime()
	 * @method \Bitrix\Sale\Exchange\Integration\Entity\EO_B24IntegrationBind resetLastUpdatedTime()
	 * @method \Bitrix\Sale\Exchange\Integration\Entity\EO_B24IntegrationBind unsetLastUpdatedTime()
	 * @method \Bitrix\Main\Type\DateTime fillLastUpdatedTime()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Sale\Exchange\Integration\Entity\EO_B24IntegrationBind set($fieldName, $value)
	 * @method \Bitrix\Sale\Exchange\Integration\Entity\EO_B24IntegrationBind reset($fieldName)
	 * @method \Bitrix\Sale\Exchange\Integration\Entity\EO_B24IntegrationBind unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Sale\Exchange\Integration\Entity\EO_B24IntegrationBind wakeUp($data)
	 */
	class EO_B24IntegrationBind {
		/* @var \Bitrix\Sale\Exchange\Integration\Entity\B24IntegrationBindTable */
		static public $dataClass = '\Bitrix\Sale\Exchange\Integration\Entity\B24IntegrationBindTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Sale\Exchange\Integration\Entity {
	/**
	 * EO_B24IntegrationBind_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getIdList()
	 * @method \int[] fillId()
	 * @method \int[] getSrcEntityTypeIdList()
	 * @method \int[] getSrcEntityIdList()
	 * @method \int[] getDstEntityTypeIdList()
	 * @method \int[] getDstEntityIdList()
	 * @method \Bitrix\Main\Type\DateTime[] getCreatedTimeList()
	 * @method \Bitrix\Main\Type\DateTime[] fillCreatedTime()
	 * @method \Bitrix\Main\Type\DateTime[] getLastUpdatedTimeList()
	 * @method \Bitrix\Main\Type\DateTime[] fillLastUpdatedTime()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Sale\Exchange\Integration\Entity\EO_B24IntegrationBind $object)
	 * @method bool has(\Bitrix\Sale\Exchange\Integration\Entity\EO_B24IntegrationBind $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Sale\Exchange\Integration\Entity\EO_B24IntegrationBind getByPrimary($primary)
	 * @method \Bitrix\Sale\Exchange\Integration\Entity\EO_B24IntegrationBind[] getAll()
	 * @method bool remove(\Bitrix\Sale\Exchange\Integration\Entity\EO_B24IntegrationBind $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Sale\Exchange\Integration\Entity\EO_B24IntegrationBind_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Sale\Exchange\Integration\Entity\EO_B24IntegrationBind current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 * @method EO_B24IntegrationBind_Collection merge(?EO_B24IntegrationBind_Collection $collection)
	 * @method bool isEmpty()
	 */
	class EO_B24IntegrationBind_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Sale\Exchange\Integration\Entity\B24IntegrationBindTable */
		static public $dataClass = '\Bitrix\Sale\Exchange\Integration\Entity\B24IntegrationBindTable';
	}
}
namespace Bitrix\Sale\Exchange\Integration\Entity {
	/**
	 * Common methods:
	 * ---------------
	 *
	 * @method EO_B24IntegrationBind_Result exec()
	 * @method \Bitrix\Sale\Exchange\Integration\Entity\EO_B24IntegrationBind fetchObject()
	 * @method \Bitrix\Sale\Exchange\Integration\Entity\EO_B24IntegrationBind_Collection fetchCollection()
	 *
	 * Custom methods:
	 * ---------------
	 *
	 */
	class EO_B24IntegrationBind_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Sale\Exchange\Integration\Entity\EO_B24IntegrationBind fetchObject()
	 * @method \Bitrix\Sale\Exchange\Integration\Entity\EO_B24IntegrationBind_Collection fetchCollection()
	 */
	class EO_B24IntegrationBind_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Sale\Exchange\Integration\Entity\EO_B24IntegrationBind createObject($setDefaultValues = true)
	 * @method \Bitrix\Sale\Exchange\Integration\Entity\EO_B24IntegrationBind_Collection createCollection()
	 * @method \Bitrix\Sale\Exchange\Integration\Entity\EO_B24IntegrationBind wakeUpObject($row)
	 * @method \Bitrix\Sale\Exchange\Integration\Entity\EO_B24IntegrationBind_Collection wakeUpCollection($rows)
	 */
	class EO_B24IntegrationBind_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Sale\Exchange\Integration\Entity\B24IntegrationRelationTable:sale\lib\exchange\integration\entity\b24integrationrelationtable.php */
namespace Bitrix\Sale\Exchange\Integration\Entity {
	/**
	 * EO_B24IntegrationRelation
	 * @see \Bitrix\Sale\Exchange\Integration\Entity\B24IntegrationRelationTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getSrcEntityTypeId()
	 * @method \Bitrix\Sale\Exchange\Integration\Entity\EO_B24IntegrationRelation setSrcEntityTypeId(\int|\Bitrix\Main\DB\SqlExpression $srcEntityTypeId)
	 * @method bool hasSrcEntityTypeId()
	 * @method bool isSrcEntityTypeIdFilled()
	 * @method bool isSrcEntityTypeIdChanged()
	 * @method \int getSrcEntityId()
	 * @method \Bitrix\Sale\Exchange\Integration\Entity\EO_B24IntegrationRelation setSrcEntityId(\int|\Bitrix\Main\DB\SqlExpression $srcEntityId)
	 * @method bool hasSrcEntityId()
	 * @method bool isSrcEntityIdFilled()
	 * @method bool isSrcEntityIdChanged()
	 * @method \int getDstEntityTypeId()
	 * @method \Bitrix\Sale\Exchange\Integration\Entity\EO_B24IntegrationRelation setDstEntityTypeId(\int|\Bitrix\Main\DB\SqlExpression $dstEntityTypeId)
	 * @method bool hasDstEntityTypeId()
	 * @method bool isDstEntityTypeIdFilled()
	 * @method bool isDstEntityTypeIdChanged()
	 * @method \int getDstEntityId()
	 * @method \Bitrix\Sale\Exchange\Integration\Entity\EO_B24IntegrationRelation setDstEntityId(\int|\Bitrix\Main\DB\SqlExpression $dstEntityId)
	 * @method bool hasDstEntityId()
	 * @method bool isDstEntityIdFilled()
	 * @method bool isDstEntityIdChanged()
	 * @method \Bitrix\Main\Type\DateTime getCreatedTime()
	 * @method \Bitrix\Sale\Exchange\Integration\Entity\EO_B24IntegrationRelation setCreatedTime(\Bitrix\Main\Type\DateTime|\Bitrix\Main\DB\SqlExpression $createdTime)
	 * @method bool hasCreatedTime()
	 * @method bool isCreatedTimeFilled()
	 * @method bool isCreatedTimeChanged()
	 * @method \Bitrix\Main\Type\DateTime remindActualCreatedTime()
	 * @method \Bitrix\Main\Type\DateTime requireCreatedTime()
	 * @method \Bitrix\Sale\Exchange\Integration\Entity\EO_B24IntegrationRelation resetCreatedTime()
	 * @method \Bitrix\Sale\Exchange\Integration\Entity\EO_B24IntegrationRelation unsetCreatedTime()
	 * @method \Bitrix\Main\Type\DateTime fillCreatedTime()
	 * @method \Bitrix\Main\Type\DateTime getLastUpdatedTime()
	 * @method \Bitrix\Sale\Exchange\Integration\Entity\EO_B24IntegrationRelation setLastUpdatedTime(\Bitrix\Main\Type\DateTime|\Bitrix\Main\DB\SqlExpression $lastUpdatedTime)
	 * @method bool hasLastUpdatedTime()
	 * @method bool isLastUpdatedTimeFilled()
	 * @method bool isLastUpdatedTimeChanged()
	 * @method \Bitrix\Main\Type\DateTime remindActualLastUpdatedTime()
	 * @method \Bitrix\Main\Type\DateTime requireLastUpdatedTime()
	 * @method \Bitrix\Sale\Exchange\Integration\Entity\EO_B24IntegrationRelation resetLastUpdatedTime()
	 * @method \Bitrix\Sale\Exchange\Integration\Entity\EO_B24IntegrationRelation unsetLastUpdatedTime()
	 * @method \Bitrix\Main\Type\DateTime fillLastUpdatedTime()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Sale\Exchange\Integration\Entity\EO_B24IntegrationRelation set($fieldName, $value)
	 * @method \Bitrix\Sale\Exchange\Integration\Entity\EO_B24IntegrationRelation reset($fieldName)
	 * @method \Bitrix\Sale\Exchange\Integration\Entity\EO_B24IntegrationRelation unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Sale\Exchange\Integration\Entity\EO_B24IntegrationRelation wakeUp($data)
	 */
	class EO_B24IntegrationRelation {
		/* @var \Bitrix\Sale\Exchange\Integration\Entity\B24IntegrationRelationTable */
		static public $dataClass = '\Bitrix\Sale\Exchange\Integration\Entity\B24IntegrationRelationTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Sale\Exchange\Integration\Entity {
	/**
	 * EO_B24IntegrationRelation_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getSrcEntityTypeIdList()
	 * @method \int[] getSrcEntityIdList()
	 * @method \int[] getDstEntityTypeIdList()
	 * @method \int[] getDstEntityIdList()
	 * @method \Bitrix\Main\Type\DateTime[] getCreatedTimeList()
	 * @method \Bitrix\Main\Type\DateTime[] fillCreatedTime()
	 * @method \Bitrix\Main\Type\DateTime[] getLastUpdatedTimeList()
	 * @method \Bitrix\Main\Type\DateTime[] fillLastUpdatedTime()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Sale\Exchange\Integration\Entity\EO_B24IntegrationRelation $object)
	 * @method bool has(\Bitrix\Sale\Exchange\Integration\Entity\EO_B24IntegrationRelation $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Sale\Exchange\Integration\Entity\EO_B24IntegrationRelation getByPrimary($primary)
	 * @method \Bitrix\Sale\Exchange\Integration\Entity\EO_B24IntegrationRelation[] getAll()
	 * @method bool remove(\Bitrix\Sale\Exchange\Integration\Entity\EO_B24IntegrationRelation $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Sale\Exchange\Integration\Entity\EO_B24IntegrationRelation_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Sale\Exchange\Integration\Entity\EO_B24IntegrationRelation current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 * @method EO_B24IntegrationRelation_Collection merge(?EO_B24IntegrationRelation_Collection $collection)
	 * @method bool isEmpty()
	 */
	class EO_B24IntegrationRelation_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Sale\Exchange\Integration\Entity\B24IntegrationRelationTable */
		static public $dataClass = '\Bitrix\Sale\Exchange\Integration\Entity\B24IntegrationRelationTable';
	}
}
namespace Bitrix\Sale\Exchange\Integration\Entity {
	/**
	 * Common methods:
	 * ---------------
	 *
	 * @method EO_B24IntegrationRelation_Result exec()
	 * @method \Bitrix\Sale\Exchange\Integration\Entity\EO_B24IntegrationRelation fetchObject()
	 * @method \Bitrix\Sale\Exchange\Integration\Entity\EO_B24IntegrationRelation_Collection fetchCollection()
	 *
	 * Custom methods:
	 * ---------------
	 *
	 */
	class EO_B24IntegrationRelation_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Sale\Exchange\Integration\Entity\EO_B24IntegrationRelation fetchObject()
	 * @method \Bitrix\Sale\Exchange\Integration\Entity\EO_B24IntegrationRelation_Collection fetchCollection()
	 */
	class EO_B24IntegrationRelation_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Sale\Exchange\Integration\Entity\EO_B24IntegrationRelation createObject($setDefaultValues = true)
	 * @method \Bitrix\Sale\Exchange\Integration\Entity\EO_B24IntegrationRelation_Collection createCollection()
	 * @method \Bitrix\Sale\Exchange\Integration\Entity\EO_B24IntegrationRelation wakeUpObject($row)
	 * @method \Bitrix\Sale\Exchange\Integration\Entity\EO_B24IntegrationRelation_Collection wakeUpCollection($rows)
	 */
	class EO_B24IntegrationRelation_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Sale\Exchange\Integration\Entity\B24IntegrationStatProviderTable:sale\lib\exchange\integration\entity\b24integrationstatprovidertable.php */
namespace Bitrix\Sale\Exchange\Integration\Entity {
	/**
	 * EO_B24IntegrationStatProvider
	 * @see \Bitrix\Sale\Exchange\Integration\Entity\B24IntegrationStatProviderTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getId()
	 * @method \Bitrix\Sale\Exchange\Integration\Entity\EO_B24IntegrationStatProvider setId(\int|\Bitrix\Main\DB\SqlExpression $id)
	 * @method bool hasId()
	 * @method bool isIdFilled()
	 * @method bool isIdChanged()
	 * @method \string getName()
	 * @method \Bitrix\Sale\Exchange\Integration\Entity\EO_B24IntegrationStatProvider setName(\string|\Bitrix\Main\DB\SqlExpression $name)
	 * @method bool hasName()
	 * @method bool isNameFilled()
	 * @method bool isNameChanged()
	 * @method \string remindActualName()
	 * @method \string requireName()
	 * @method \Bitrix\Sale\Exchange\Integration\Entity\EO_B24IntegrationStatProvider resetName()
	 * @method \Bitrix\Sale\Exchange\Integration\Entity\EO_B24IntegrationStatProvider unsetName()
	 * @method \string fillName()
	 * @method \string getExternalServerHost()
	 * @method \Bitrix\Sale\Exchange\Integration\Entity\EO_B24IntegrationStatProvider setExternalServerHost(\string|\Bitrix\Main\DB\SqlExpression $externalServerHost)
	 * @method bool hasExternalServerHost()
	 * @method bool isExternalServerHostFilled()
	 * @method bool isExternalServerHostChanged()
	 * @method \string remindActualExternalServerHost()
	 * @method \string requireExternalServerHost()
	 * @method \Bitrix\Sale\Exchange\Integration\Entity\EO_B24IntegrationStatProvider resetExternalServerHost()
	 * @method \Bitrix\Sale\Exchange\Integration\Entity\EO_B24IntegrationStatProvider unsetExternalServerHost()
	 * @method \string fillExternalServerHost()
	 * @method \string getXmlId()
	 * @method \Bitrix\Sale\Exchange\Integration\Entity\EO_B24IntegrationStatProvider setXmlId(\string|\Bitrix\Main\DB\SqlExpression $xmlId)
	 * @method bool hasXmlId()
	 * @method bool isXmlIdFilled()
	 * @method bool isXmlIdChanged()
	 * @method \string remindActualXmlId()
	 * @method \string requireXmlId()
	 * @method \Bitrix\Sale\Exchange\Integration\Entity\EO_B24IntegrationStatProvider resetXmlId()
	 * @method \Bitrix\Sale\Exchange\Integration\Entity\EO_B24IntegrationStatProvider unsetXmlId()
	 * @method \string fillXmlId()
	 * @method \Bitrix\Main\Type\DateTime getTimestampX()
	 * @method \Bitrix\Sale\Exchange\Integration\Entity\EO_B24IntegrationStatProvider setTimestampX(\Bitrix\Main\Type\DateTime|\Bitrix\Main\DB\SqlExpression $timestampX)
	 * @method bool hasTimestampX()
	 * @method bool isTimestampXFilled()
	 * @method bool isTimestampXChanged()
	 * @method \Bitrix\Main\Type\DateTime remindActualTimestampX()
	 * @method \Bitrix\Main\Type\DateTime requireTimestampX()
	 * @method \Bitrix\Sale\Exchange\Integration\Entity\EO_B24IntegrationStatProvider resetTimestampX()
	 * @method \Bitrix\Sale\Exchange\Integration\Entity\EO_B24IntegrationStatProvider unsetTimestampX()
	 * @method \Bitrix\Main\Type\DateTime fillTimestampX()
	 * @method \string getSettings()
	 * @method \Bitrix\Sale\Exchange\Integration\Entity\EO_B24IntegrationStatProvider setSettings(\string|\Bitrix\Main\DB\SqlExpression $settings)
	 * @method bool hasSettings()
	 * @method bool isSettingsFilled()
	 * @method bool isSettingsChanged()
	 * @method \string remindActualSettings()
	 * @method \string requireSettings()
	 * @method \Bitrix\Sale\Exchange\Integration\Entity\EO_B24IntegrationStatProvider resetSettings()
	 * @method \Bitrix\Sale\Exchange\Integration\Entity\EO_B24IntegrationStatProvider unsetSettings()
	 * @method \string fillSettings()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Sale\Exchange\Integration\Entity\EO_B24IntegrationStatProvider set($fieldName, $value)
	 * @method \Bitrix\Sale\Exchange\Integration\Entity\EO_B24IntegrationStatProvider reset($fieldName)
	 * @method \Bitrix\Sale\Exchange\Integration\Entity\EO_B24IntegrationStatProvider unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Sale\Exchange\Integration\Entity\EO_B24IntegrationStatProvider wakeUp($data)
	 */
	class EO_B24IntegrationStatProvider {
		/* @var \Bitrix\Sale\Exchange\Integration\Entity\B24IntegrationStatProviderTable */
		static public $dataClass = '\Bitrix\Sale\Exchange\Integration\Entity\B24IntegrationStatProviderTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Sale\Exchange\Integration\Entity {
	/**
	 * EO_B24IntegrationStatProvider_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getIdList()
	 * @method \string[] getNameList()
	 * @method \string[] fillName()
	 * @method \string[] getExternalServerHostList()
	 * @method \string[] fillExternalServerHost()
	 * @method \string[] getXmlIdList()
	 * @method \string[] fillXmlId()
	 * @method \Bitrix\Main\Type\DateTime[] getTimestampXList()
	 * @method \Bitrix\Main\Type\DateTime[] fillTimestampX()
	 * @method \string[] getSettingsList()
	 * @method \string[] fillSettings()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Sale\Exchange\Integration\Entity\EO_B24IntegrationStatProvider $object)
	 * @method bool has(\Bitrix\Sale\Exchange\Integration\Entity\EO_B24IntegrationStatProvider $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Sale\Exchange\Integration\Entity\EO_B24IntegrationStatProvider getByPrimary($primary)
	 * @method \Bitrix\Sale\Exchange\Integration\Entity\EO_B24IntegrationStatProvider[] getAll()
	 * @method bool remove(\Bitrix\Sale\Exchange\Integration\Entity\EO_B24IntegrationStatProvider $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Sale\Exchange\Integration\Entity\EO_B24IntegrationStatProvider_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Sale\Exchange\Integration\Entity\EO_B24IntegrationStatProvider current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 * @method EO_B24IntegrationStatProvider_Collection merge(?EO_B24IntegrationStatProvider_Collection $collection)
	 * @method bool isEmpty()
	 */
	class EO_B24IntegrationStatProvider_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Sale\Exchange\Integration\Entity\B24IntegrationStatProviderTable */
		static public $dataClass = '\Bitrix\Sale\Exchange\Integration\Entity\B24IntegrationStatProviderTable';
	}
}
namespace Bitrix\Sale\Exchange\Integration\Entity {
	/**
	 * Common methods:
	 * ---------------
	 *
	 * @method EO_B24IntegrationStatProvider_Result exec()
	 * @method \Bitrix\Sale\Exchange\Integration\Entity\EO_B24IntegrationStatProvider fetchObject()
	 * @method \Bitrix\Sale\Exchange\Integration\Entity\EO_B24IntegrationStatProvider_Collection fetchCollection()
	 *
	 * Custom methods:
	 * ---------------
	 *
	 */
	class EO_B24IntegrationStatProvider_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Sale\Exchange\Integration\Entity\EO_B24IntegrationStatProvider fetchObject()
	 * @method \Bitrix\Sale\Exchange\Integration\Entity\EO_B24IntegrationStatProvider_Collection fetchCollection()
	 */
	class EO_B24IntegrationStatProvider_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Sale\Exchange\Integration\Entity\EO_B24IntegrationStatProvider createObject($setDefaultValues = true)
	 * @method \Bitrix\Sale\Exchange\Integration\Entity\EO_B24IntegrationStatProvider_Collection createCollection()
	 * @method \Bitrix\Sale\Exchange\Integration\Entity\EO_B24IntegrationStatProvider wakeUpObject($row)
	 * @method \Bitrix\Sale\Exchange\Integration\Entity\EO_B24IntegrationStatProvider_Collection wakeUpCollection($rows)
	 */
	class EO_B24IntegrationStatProvider_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Sale\Exchange\Integration\Entity\B24integrationStatTable:sale\lib\exchange\integration\entity\b24integrationstattable.php */
namespace Bitrix\Sale\Exchange\Integration\Entity {
	/**
	 * EO_B24integrationStat
	 * @see \Bitrix\Sale\Exchange\Integration\Entity\B24integrationStatTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getId()
	 * @method \Bitrix\Sale\Exchange\Integration\Entity\EO_B24integrationStat setId(\int|\Bitrix\Main\DB\SqlExpression $id)
	 * @method bool hasId()
	 * @method bool isIdFilled()
	 * @method bool isIdChanged()
	 * @method \string getEntityTypeId()
	 * @method \Bitrix\Sale\Exchange\Integration\Entity\EO_B24integrationStat setEntityTypeId(\string|\Bitrix\Main\DB\SqlExpression $entityTypeId)
	 * @method bool hasEntityTypeId()
	 * @method bool isEntityTypeIdFilled()
	 * @method bool isEntityTypeIdChanged()
	 * @method \string remindActualEntityTypeId()
	 * @method \string requireEntityTypeId()
	 * @method \Bitrix\Sale\Exchange\Integration\Entity\EO_B24integrationStat resetEntityTypeId()
	 * @method \Bitrix\Sale\Exchange\Integration\Entity\EO_B24integrationStat unsetEntityTypeId()
	 * @method \string fillEntityTypeId()
	 * @method \int getEntityId()
	 * @method \Bitrix\Sale\Exchange\Integration\Entity\EO_B24integrationStat setEntityId(\int|\Bitrix\Main\DB\SqlExpression $entityId)
	 * @method bool hasEntityId()
	 * @method bool isEntityIdFilled()
	 * @method bool isEntityIdChanged()
	 * @method \int remindActualEntityId()
	 * @method \int requireEntityId()
	 * @method \Bitrix\Sale\Exchange\Integration\Entity\EO_B24integrationStat resetEntityId()
	 * @method \Bitrix\Sale\Exchange\Integration\Entity\EO_B24integrationStat unsetEntityId()
	 * @method \int fillEntityId()
	 * @method \Bitrix\Main\Type\DateTime getDateUpdate()
	 * @method \Bitrix\Sale\Exchange\Integration\Entity\EO_B24integrationStat setDateUpdate(\Bitrix\Main\Type\DateTime|\Bitrix\Main\DB\SqlExpression $dateUpdate)
	 * @method bool hasDateUpdate()
	 * @method bool isDateUpdateFilled()
	 * @method bool isDateUpdateChanged()
	 * @method \Bitrix\Main\Type\DateTime remindActualDateUpdate()
	 * @method \Bitrix\Main\Type\DateTime requireDateUpdate()
	 * @method \Bitrix\Sale\Exchange\Integration\Entity\EO_B24integrationStat resetDateUpdate()
	 * @method \Bitrix\Sale\Exchange\Integration\Entity\EO_B24integrationStat unsetDateUpdate()
	 * @method \Bitrix\Main\Type\DateTime fillDateUpdate()
	 * @method \Bitrix\Main\Type\DateTime getTimestampX()
	 * @method \Bitrix\Sale\Exchange\Integration\Entity\EO_B24integrationStat setTimestampX(\Bitrix\Main\Type\DateTime|\Bitrix\Main\DB\SqlExpression $timestampX)
	 * @method bool hasTimestampX()
	 * @method bool isTimestampXFilled()
	 * @method bool isTimestampXChanged()
	 * @method \Bitrix\Main\Type\DateTime remindActualTimestampX()
	 * @method \Bitrix\Main\Type\DateTime requireTimestampX()
	 * @method \Bitrix\Sale\Exchange\Integration\Entity\EO_B24integrationStat resetTimestampX()
	 * @method \Bitrix\Sale\Exchange\Integration\Entity\EO_B24integrationStat unsetTimestampX()
	 * @method \Bitrix\Main\Type\DateTime fillTimestampX()
	 * @method \int getProviderId()
	 * @method \Bitrix\Sale\Exchange\Integration\Entity\EO_B24integrationStat setProviderId(\int|\Bitrix\Main\DB\SqlExpression $providerId)
	 * @method bool hasProviderId()
	 * @method bool isProviderIdFilled()
	 * @method bool isProviderIdChanged()
	 * @method \int remindActualProviderId()
	 * @method \int requireProviderId()
	 * @method \Bitrix\Sale\Exchange\Integration\Entity\EO_B24integrationStat resetProviderId()
	 * @method \Bitrix\Sale\Exchange\Integration\Entity\EO_B24integrationStat unsetProviderId()
	 * @method \int fillProviderId()
	 * @method \string getCurrency()
	 * @method \Bitrix\Sale\Exchange\Integration\Entity\EO_B24integrationStat setCurrency(\string|\Bitrix\Main\DB\SqlExpression $currency)
	 * @method bool hasCurrency()
	 * @method bool isCurrencyFilled()
	 * @method bool isCurrencyChanged()
	 * @method \string remindActualCurrency()
	 * @method \string requireCurrency()
	 * @method \Bitrix\Sale\Exchange\Integration\Entity\EO_B24integrationStat resetCurrency()
	 * @method \Bitrix\Sale\Exchange\Integration\Entity\EO_B24integrationStat unsetCurrency()
	 * @method \string fillCurrency()
	 * @method \string getStatus()
	 * @method \Bitrix\Sale\Exchange\Integration\Entity\EO_B24integrationStat setStatus(\string|\Bitrix\Main\DB\SqlExpression $status)
	 * @method bool hasStatus()
	 * @method bool isStatusFilled()
	 * @method bool isStatusChanged()
	 * @method \string remindActualStatus()
	 * @method \string requireStatus()
	 * @method \Bitrix\Sale\Exchange\Integration\Entity\EO_B24integrationStat resetStatus()
	 * @method \Bitrix\Sale\Exchange\Integration\Entity\EO_B24integrationStat unsetStatus()
	 * @method \string fillStatus()
	 * @method \string getXmlId()
	 * @method \Bitrix\Sale\Exchange\Integration\Entity\EO_B24integrationStat setXmlId(\string|\Bitrix\Main\DB\SqlExpression $xmlId)
	 * @method bool hasXmlId()
	 * @method bool isXmlIdFilled()
	 * @method bool isXmlIdChanged()
	 * @method \string remindActualXmlId()
	 * @method \string requireXmlId()
	 * @method \Bitrix\Sale\Exchange\Integration\Entity\EO_B24integrationStat resetXmlId()
	 * @method \Bitrix\Sale\Exchange\Integration\Entity\EO_B24integrationStat unsetXmlId()
	 * @method \string fillXmlId()
	 * @method \float getAmount()
	 * @method \Bitrix\Sale\Exchange\Integration\Entity\EO_B24integrationStat setAmount(\float|\Bitrix\Main\DB\SqlExpression $amount)
	 * @method bool hasAmount()
	 * @method bool isAmountFilled()
	 * @method bool isAmountChanged()
	 * @method \float remindActualAmount()
	 * @method \float requireAmount()
	 * @method \Bitrix\Sale\Exchange\Integration\Entity\EO_B24integrationStat resetAmount()
	 * @method \Bitrix\Sale\Exchange\Integration\Entity\EO_B24integrationStat unsetAmount()
	 * @method \float fillAmount()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Sale\Exchange\Integration\Entity\EO_B24integrationStat set($fieldName, $value)
	 * @method \Bitrix\Sale\Exchange\Integration\Entity\EO_B24integrationStat reset($fieldName)
	 * @method \Bitrix\Sale\Exchange\Integration\Entity\EO_B24integrationStat unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Sale\Exchange\Integration\Entity\EO_B24integrationStat wakeUp($data)
	 */
	class EO_B24integrationStat {
		/* @var \Bitrix\Sale\Exchange\Integration\Entity\B24integrationStatTable */
		static public $dataClass = '\Bitrix\Sale\Exchange\Integration\Entity\B24integrationStatTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Sale\Exchange\Integration\Entity {
	/**
	 * EO_B24integrationStat_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getIdList()
	 * @method \string[] getEntityTypeIdList()
	 * @method \string[] fillEntityTypeId()
	 * @method \int[] getEntityIdList()
	 * @method \int[] fillEntityId()
	 * @method \Bitrix\Main\Type\DateTime[] getDateUpdateList()
	 * @method \Bitrix\Main\Type\DateTime[] fillDateUpdate()
	 * @method \Bitrix\Main\Type\DateTime[] getTimestampXList()
	 * @method \Bitrix\Main\Type\DateTime[] fillTimestampX()
	 * @method \int[] getProviderIdList()
	 * @method \int[] fillProviderId()
	 * @method \string[] getCurrencyList()
	 * @method \string[] fillCurrency()
	 * @method \string[] getStatusList()
	 * @method \string[] fillStatus()
	 * @method \string[] getXmlIdList()
	 * @method \string[] fillXmlId()
	 * @method \float[] getAmountList()
	 * @method \float[] fillAmount()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Sale\Exchange\Integration\Entity\EO_B24integrationStat $object)
	 * @method bool has(\Bitrix\Sale\Exchange\Integration\Entity\EO_B24integrationStat $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Sale\Exchange\Integration\Entity\EO_B24integrationStat getByPrimary($primary)
	 * @method \Bitrix\Sale\Exchange\Integration\Entity\EO_B24integrationStat[] getAll()
	 * @method bool remove(\Bitrix\Sale\Exchange\Integration\Entity\EO_B24integrationStat $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Sale\Exchange\Integration\Entity\EO_B24integrationStat_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Sale\Exchange\Integration\Entity\EO_B24integrationStat current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 * @method EO_B24integrationStat_Collection merge(?EO_B24integrationStat_Collection $collection)
	 * @method bool isEmpty()
	 */
	class EO_B24integrationStat_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Sale\Exchange\Integration\Entity\B24integrationStatTable */
		static public $dataClass = '\Bitrix\Sale\Exchange\Integration\Entity\B24integrationStatTable';
	}
}
namespace Bitrix\Sale\Exchange\Integration\Entity {
	/**
	 * Common methods:
	 * ---------------
	 *
	 * @method EO_B24integrationStat_Result exec()
	 * @method \Bitrix\Sale\Exchange\Integration\Entity\EO_B24integrationStat fetchObject()
	 * @method \Bitrix\Sale\Exchange\Integration\Entity\EO_B24integrationStat_Collection fetchCollection()
	 *
	 * Custom methods:
	 * ---------------
	 *
	 */
	class EO_B24integrationStat_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Sale\Exchange\Integration\Entity\EO_B24integrationStat fetchObject()
	 * @method \Bitrix\Sale\Exchange\Integration\Entity\EO_B24integrationStat_Collection fetchCollection()
	 */
	class EO_B24integrationStat_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Sale\Exchange\Integration\Entity\EO_B24integrationStat createObject($setDefaultValues = true)
	 * @method \Bitrix\Sale\Exchange\Integration\Entity\EO_B24integrationStat_Collection createCollection()
	 * @method \Bitrix\Sale\Exchange\Integration\Entity\EO_B24integrationStat wakeUpObject($row)
	 * @method \Bitrix\Sale\Exchange\Integration\Entity\EO_B24integrationStat_Collection wakeUpCollection($rows)
	 */
	class EO_B24integrationStat_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Sale\Exchange\Integration\Entity\B24integrationTokenTable:sale\lib\exchange\integration\entity\b24integrationtokentable.php */
namespace Bitrix\Sale\Exchange\Integration\Entity {
	/**
	 * Token
	 * @see \Bitrix\Sale\Exchange\Integration\Entity\B24integrationTokenTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getId()
	 * @method \Bitrix\Sale\Exchange\Integration\Entity\Token setId(\int|\Bitrix\Main\DB\SqlExpression $id)
	 * @method bool hasId()
	 * @method bool isIdFilled()
	 * @method bool isIdChanged()
	 * @method \string getGuid()
	 * @method \Bitrix\Sale\Exchange\Integration\Entity\Token setGuid(\string|\Bitrix\Main\DB\SqlExpression $guid)
	 * @method bool hasGuid()
	 * @method bool isGuidFilled()
	 * @method bool isGuidChanged()
	 * @method \string remindActualGuid()
	 * @method \string requireGuid()
	 * @method \Bitrix\Sale\Exchange\Integration\Entity\Token resetGuid()
	 * @method \Bitrix\Sale\Exchange\Integration\Entity\Token unsetGuid()
	 * @method \string fillGuid()
	 * @method \string getAccessToken()
	 * @method \Bitrix\Sale\Exchange\Integration\Entity\Token setAccessToken(\string|\Bitrix\Main\DB\SqlExpression $accessToken)
	 * @method bool hasAccessToken()
	 * @method bool isAccessTokenFilled()
	 * @method bool isAccessTokenChanged()
	 * @method \string remindActualAccessToken()
	 * @method \string requireAccessToken()
	 * @method \Bitrix\Sale\Exchange\Integration\Entity\Token resetAccessToken()
	 * @method \Bitrix\Sale\Exchange\Integration\Entity\Token unsetAccessToken()
	 * @method \string fillAccessToken()
	 * @method \string getRefreshToken()
	 * @method \Bitrix\Sale\Exchange\Integration\Entity\Token setRefreshToken(\string|\Bitrix\Main\DB\SqlExpression $refreshToken)
	 * @method bool hasRefreshToken()
	 * @method bool isRefreshTokenFilled()
	 * @method bool isRefreshTokenChanged()
	 * @method \string remindActualRefreshToken()
	 * @method \string requireRefreshToken()
	 * @method \Bitrix\Sale\Exchange\Integration\Entity\Token resetRefreshToken()
	 * @method \Bitrix\Sale\Exchange\Integration\Entity\Token unsetRefreshToken()
	 * @method \string fillRefreshToken()
	 * @method \string getRestEndpoint()
	 * @method \Bitrix\Sale\Exchange\Integration\Entity\Token setRestEndpoint(\string|\Bitrix\Main\DB\SqlExpression $restEndpoint)
	 * @method bool hasRestEndpoint()
	 * @method bool isRestEndpointFilled()
	 * @method bool isRestEndpointChanged()
	 * @method \string remindActualRestEndpoint()
	 * @method \string requireRestEndpoint()
	 * @method \Bitrix\Sale\Exchange\Integration\Entity\Token resetRestEndpoint()
	 * @method \Bitrix\Sale\Exchange\Integration\Entity\Token unsetRestEndpoint()
	 * @method \string fillRestEndpoint()
	 * @method \string getPortalId()
	 * @method \Bitrix\Sale\Exchange\Integration\Entity\Token setPortalId(\string|\Bitrix\Main\DB\SqlExpression $portalId)
	 * @method bool hasPortalId()
	 * @method bool isPortalIdFilled()
	 * @method bool isPortalIdChanged()
	 * @method \string remindActualPortalId()
	 * @method \string requirePortalId()
	 * @method \Bitrix\Sale\Exchange\Integration\Entity\Token resetPortalId()
	 * @method \Bitrix\Sale\Exchange\Integration\Entity\Token unsetPortalId()
	 * @method \string fillPortalId()
	 * @method \Bitrix\Main\Type\DateTime getCreated()
	 * @method \Bitrix\Sale\Exchange\Integration\Entity\Token setCreated(\Bitrix\Main\Type\DateTime|\Bitrix\Main\DB\SqlExpression $created)
	 * @method bool hasCreated()
	 * @method bool isCreatedFilled()
	 * @method bool isCreatedChanged()
	 * @method \Bitrix\Main\Type\DateTime remindActualCreated()
	 * @method \Bitrix\Main\Type\DateTime requireCreated()
	 * @method \Bitrix\Sale\Exchange\Integration\Entity\Token resetCreated()
	 * @method \Bitrix\Sale\Exchange\Integration\Entity\Token unsetCreated()
	 * @method \Bitrix\Main\Type\DateTime fillCreated()
	 * @method \Bitrix\Main\Type\DateTime getChanged()
	 * @method \Bitrix\Sale\Exchange\Integration\Entity\Token setChanged(\Bitrix\Main\Type\DateTime|\Bitrix\Main\DB\SqlExpression $changed)
	 * @method bool hasChanged()
	 * @method bool isChangedFilled()
	 * @method bool isChangedChanged()
	 * @method \Bitrix\Main\Type\DateTime remindActualChanged()
	 * @method \Bitrix\Main\Type\DateTime requireChanged()
	 * @method \Bitrix\Sale\Exchange\Integration\Entity\Token resetChanged()
	 * @method \Bitrix\Sale\Exchange\Integration\Entity\Token unsetChanged()
	 * @method \Bitrix\Main\Type\DateTime fillChanged()
	 * @method \Bitrix\Main\Type\DateTime getExpires()
	 * @method \Bitrix\Sale\Exchange\Integration\Entity\Token setExpires(\Bitrix\Main\Type\DateTime|\Bitrix\Main\DB\SqlExpression $expires)
	 * @method bool hasExpires()
	 * @method bool isExpiresFilled()
	 * @method bool isExpiresChanged()
	 * @method \Bitrix\Main\Type\DateTime remindActualExpires()
	 * @method \Bitrix\Main\Type\DateTime requireExpires()
	 * @method \Bitrix\Sale\Exchange\Integration\Entity\Token resetExpires()
	 * @method \Bitrix\Sale\Exchange\Integration\Entity\Token unsetExpires()
	 * @method \Bitrix\Main\Type\DateTime fillExpires()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Sale\Exchange\Integration\Entity\Token set($fieldName, $value)
	 * @method \Bitrix\Sale\Exchange\Integration\Entity\Token reset($fieldName)
	 * @method \Bitrix\Sale\Exchange\Integration\Entity\Token unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Sale\Exchange\Integration\Entity\Token wakeUp($data)
	 */
	class EO_B24integrationToken {
		/* @var \Bitrix\Sale\Exchange\Integration\Entity\B24integrationTokenTable */
		static public $dataClass = '\Bitrix\Sale\Exchange\Integration\Entity\B24integrationTokenTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Sale\Exchange\Integration\Entity {
	/**
	 * EO_B24integrationToken_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getIdList()
	 * @method \string[] getGuidList()
	 * @method \string[] fillGuid()
	 * @method \string[] getAccessTokenList()
	 * @method \string[] fillAccessToken()
	 * @method \string[] getRefreshTokenList()
	 * @method \string[] fillRefreshToken()
	 * @method \string[] getRestEndpointList()
	 * @method \string[] fillRestEndpoint()
	 * @method \string[] getPortalIdList()
	 * @method \string[] fillPortalId()
	 * @method \Bitrix\Main\Type\DateTime[] getCreatedList()
	 * @method \Bitrix\Main\Type\DateTime[] fillCreated()
	 * @method \Bitrix\Main\Type\DateTime[] getChangedList()
	 * @method \Bitrix\Main\Type\DateTime[] fillChanged()
	 * @method \Bitrix\Main\Type\DateTime[] getExpiresList()
	 * @method \Bitrix\Main\Type\DateTime[] fillExpires()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Sale\Exchange\Integration\Entity\Token $object)
	 * @method bool has(\Bitrix\Sale\Exchange\Integration\Entity\Token $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Sale\Exchange\Integration\Entity\Token getByPrimary($primary)
	 * @method \Bitrix\Sale\Exchange\Integration\Entity\Token[] getAll()
	 * @method bool remove(\Bitrix\Sale\Exchange\Integration\Entity\Token $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Sale\Exchange\Integration\Entity\EO_B24integrationToken_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Sale\Exchange\Integration\Entity\Token current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 * @method EO_B24integrationToken_Collection merge(?EO_B24integrationToken_Collection $collection)
	 * @method bool isEmpty()
	 */
	class EO_B24integrationToken_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Sale\Exchange\Integration\Entity\B24integrationTokenTable */
		static public $dataClass = '\Bitrix\Sale\Exchange\Integration\Entity\B24integrationTokenTable';
	}
}
namespace Bitrix\Sale\Exchange\Integration\Entity {
	/**
	 * Common methods:
	 * ---------------
	 *
	 * @method EO_B24integrationToken_Result exec()
	 * @method \Bitrix\Sale\Exchange\Integration\Entity\Token fetchObject()
	 * @method \Bitrix\Sale\Exchange\Integration\Entity\EO_B24integrationToken_Collection fetchCollection()
	 *
	 * Custom methods:
	 * ---------------
	 *
	 */
	class EO_B24integrationToken_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Sale\Exchange\Integration\Entity\Token fetchObject()
	 * @method \Bitrix\Sale\Exchange\Integration\Entity\EO_B24integrationToken_Collection fetchCollection()
	 */
	class EO_B24integrationToken_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Sale\Exchange\Integration\Entity\Token createObject($setDefaultValues = true)
	 * @method \Bitrix\Sale\Exchange\Integration\Entity\EO_B24integrationToken_Collection createCollection()
	 * @method \Bitrix\Sale\Exchange\Integration\Entity\Token wakeUpObject($row)
	 * @method \Bitrix\Sale\Exchange\Integration\Entity\EO_B24integrationToken_Collection wakeUpCollection($rows)
	 */
	class EO_B24integrationToken_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Sale\Exchange\Internals\ExchangeLogTable:sale\lib\exchange\internals\exchangelog.php */
namespace Bitrix\Sale\Exchange\Internals {
	/**
	 * EO_ExchangeLog
	 * @see \Bitrix\Sale\Exchange\Internals\ExchangeLogTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getId()
	 * @method \Bitrix\Sale\Exchange\Internals\EO_ExchangeLog setId(\int|\Bitrix\Main\DB\SqlExpression $id)
	 * @method bool hasId()
	 * @method bool isIdFilled()
	 * @method bool isIdChanged()
	 * @method \int getEntityId()
	 * @method \Bitrix\Sale\Exchange\Internals\EO_ExchangeLog setEntityId(\int|\Bitrix\Main\DB\SqlExpression $entityId)
	 * @method bool hasEntityId()
	 * @method bool isEntityIdFilled()
	 * @method bool isEntityIdChanged()
	 * @method \int remindActualEntityId()
	 * @method \int requireEntityId()
	 * @method \Bitrix\Sale\Exchange\Internals\EO_ExchangeLog resetEntityId()
	 * @method \Bitrix\Sale\Exchange\Internals\EO_ExchangeLog unsetEntityId()
	 * @method \int fillEntityId()
	 * @method \int getEntityTypeId()
	 * @method \Bitrix\Sale\Exchange\Internals\EO_ExchangeLog setEntityTypeId(\int|\Bitrix\Main\DB\SqlExpression $entityTypeId)
	 * @method bool hasEntityTypeId()
	 * @method bool isEntityTypeIdFilled()
	 * @method bool isEntityTypeIdChanged()
	 * @method \int remindActualEntityTypeId()
	 * @method \int requireEntityTypeId()
	 * @method \Bitrix\Sale\Exchange\Internals\EO_ExchangeLog resetEntityTypeId()
	 * @method \Bitrix\Sale\Exchange\Internals\EO_ExchangeLog unsetEntityTypeId()
	 * @method \int fillEntityTypeId()
	 * @method \int getParentId()
	 * @method \Bitrix\Sale\Exchange\Internals\EO_ExchangeLog setParentId(\int|\Bitrix\Main\DB\SqlExpression $parentId)
	 * @method bool hasParentId()
	 * @method bool isParentIdFilled()
	 * @method bool isParentIdChanged()
	 * @method \int remindActualParentId()
	 * @method \int requireParentId()
	 * @method \Bitrix\Sale\Exchange\Internals\EO_ExchangeLog resetParentId()
	 * @method \Bitrix\Sale\Exchange\Internals\EO_ExchangeLog unsetParentId()
	 * @method \int fillParentId()
	 * @method \int getOwnerEntityId()
	 * @method \Bitrix\Sale\Exchange\Internals\EO_ExchangeLog setOwnerEntityId(\int|\Bitrix\Main\DB\SqlExpression $ownerEntityId)
	 * @method bool hasOwnerEntityId()
	 * @method bool isOwnerEntityIdFilled()
	 * @method bool isOwnerEntityIdChanged()
	 * @method \int remindActualOwnerEntityId()
	 * @method \int requireOwnerEntityId()
	 * @method \Bitrix\Sale\Exchange\Internals\EO_ExchangeLog resetOwnerEntityId()
	 * @method \Bitrix\Sale\Exchange\Internals\EO_ExchangeLog unsetOwnerEntityId()
	 * @method \int fillOwnerEntityId()
	 * @method \Bitrix\Main\Type\DateTime getEntityDateUpdate()
	 * @method \Bitrix\Sale\Exchange\Internals\EO_ExchangeLog setEntityDateUpdate(\Bitrix\Main\Type\DateTime|\Bitrix\Main\DB\SqlExpression $entityDateUpdate)
	 * @method bool hasEntityDateUpdate()
	 * @method bool isEntityDateUpdateFilled()
	 * @method bool isEntityDateUpdateChanged()
	 * @method \Bitrix\Main\Type\DateTime remindActualEntityDateUpdate()
	 * @method \Bitrix\Main\Type\DateTime requireEntityDateUpdate()
	 * @method \Bitrix\Sale\Exchange\Internals\EO_ExchangeLog resetEntityDateUpdate()
	 * @method \Bitrix\Sale\Exchange\Internals\EO_ExchangeLog unsetEntityDateUpdate()
	 * @method \Bitrix\Main\Type\DateTime fillEntityDateUpdate()
	 * @method \string getXmlId()
	 * @method \Bitrix\Sale\Exchange\Internals\EO_ExchangeLog setXmlId(\string|\Bitrix\Main\DB\SqlExpression $xmlId)
	 * @method bool hasXmlId()
	 * @method bool isXmlIdFilled()
	 * @method bool isXmlIdChanged()
	 * @method \string remindActualXmlId()
	 * @method \string requireXmlId()
	 * @method \Bitrix\Sale\Exchange\Internals\EO_ExchangeLog resetXmlId()
	 * @method \Bitrix\Sale\Exchange\Internals\EO_ExchangeLog unsetXmlId()
	 * @method \string fillXmlId()
	 * @method \boolean getMarked()
	 * @method \Bitrix\Sale\Exchange\Internals\EO_ExchangeLog setMarked(\boolean|\Bitrix\Main\DB\SqlExpression $marked)
	 * @method bool hasMarked()
	 * @method bool isMarkedFilled()
	 * @method bool isMarkedChanged()
	 * @method \boolean remindActualMarked()
	 * @method \boolean requireMarked()
	 * @method \Bitrix\Sale\Exchange\Internals\EO_ExchangeLog resetMarked()
	 * @method \Bitrix\Sale\Exchange\Internals\EO_ExchangeLog unsetMarked()
	 * @method \boolean fillMarked()
	 * @method \string getDescription()
	 * @method \Bitrix\Sale\Exchange\Internals\EO_ExchangeLog setDescription(\string|\Bitrix\Main\DB\SqlExpression $description)
	 * @method bool hasDescription()
	 * @method bool isDescriptionFilled()
	 * @method bool isDescriptionChanged()
	 * @method \string remindActualDescription()
	 * @method \string requireDescription()
	 * @method \Bitrix\Sale\Exchange\Internals\EO_ExchangeLog resetDescription()
	 * @method \Bitrix\Sale\Exchange\Internals\EO_ExchangeLog unsetDescription()
	 * @method \string fillDescription()
	 * @method \string getMessage()
	 * @method \Bitrix\Sale\Exchange\Internals\EO_ExchangeLog setMessage(\string|\Bitrix\Main\DB\SqlExpression $message)
	 * @method bool hasMessage()
	 * @method bool isMessageFilled()
	 * @method bool isMessageChanged()
	 * @method \string remindActualMessage()
	 * @method \string requireMessage()
	 * @method \Bitrix\Sale\Exchange\Internals\EO_ExchangeLog resetMessage()
	 * @method \Bitrix\Sale\Exchange\Internals\EO_ExchangeLog unsetMessage()
	 * @method \string fillMessage()
	 * @method \Bitrix\Main\Type\DateTime getDateInsert()
	 * @method \Bitrix\Sale\Exchange\Internals\EO_ExchangeLog setDateInsert(\Bitrix\Main\Type\DateTime|\Bitrix\Main\DB\SqlExpression $dateInsert)
	 * @method bool hasDateInsert()
	 * @method bool isDateInsertFilled()
	 * @method bool isDateInsertChanged()
	 * @method \Bitrix\Main\Type\DateTime remindActualDateInsert()
	 * @method \Bitrix\Main\Type\DateTime requireDateInsert()
	 * @method \Bitrix\Sale\Exchange\Internals\EO_ExchangeLog resetDateInsert()
	 * @method \Bitrix\Sale\Exchange\Internals\EO_ExchangeLog unsetDateInsert()
	 * @method \Bitrix\Main\Type\DateTime fillDateInsert()
	 * @method \string getDirection()
	 * @method \Bitrix\Sale\Exchange\Internals\EO_ExchangeLog setDirection(\string|\Bitrix\Main\DB\SqlExpression $direction)
	 * @method bool hasDirection()
	 * @method bool isDirectionFilled()
	 * @method bool isDirectionChanged()
	 * @method \string remindActualDirection()
	 * @method \string requireDirection()
	 * @method \Bitrix\Sale\Exchange\Internals\EO_ExchangeLog resetDirection()
	 * @method \Bitrix\Sale\Exchange\Internals\EO_ExchangeLog unsetDirection()
	 * @method \string fillDirection()
	 * @method \string getProvider()
	 * @method \Bitrix\Sale\Exchange\Internals\EO_ExchangeLog setProvider(\string|\Bitrix\Main\DB\SqlExpression $provider)
	 * @method bool hasProvider()
	 * @method bool isProviderFilled()
	 * @method bool isProviderChanged()
	 * @method \string remindActualProvider()
	 * @method \string requireProvider()
	 * @method \Bitrix\Sale\Exchange\Internals\EO_ExchangeLog resetProvider()
	 * @method \Bitrix\Sale\Exchange\Internals\EO_ExchangeLog unsetProvider()
	 * @method \string fillProvider()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Sale\Exchange\Internals\EO_ExchangeLog set($fieldName, $value)
	 * @method \Bitrix\Sale\Exchange\Internals\EO_ExchangeLog reset($fieldName)
	 * @method \Bitrix\Sale\Exchange\Internals\EO_ExchangeLog unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Sale\Exchange\Internals\EO_ExchangeLog wakeUp($data)
	 */
	class EO_ExchangeLog {
		/* @var \Bitrix\Sale\Exchange\Internals\ExchangeLogTable */
		static public $dataClass = '\Bitrix\Sale\Exchange\Internals\ExchangeLogTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Sale\Exchange\Internals {
	/**
	 * EO_ExchangeLog_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getIdList()
	 * @method \int[] getEntityIdList()
	 * @method \int[] fillEntityId()
	 * @method \int[] getEntityTypeIdList()
	 * @method \int[] fillEntityTypeId()
	 * @method \int[] getParentIdList()
	 * @method \int[] fillParentId()
	 * @method \int[] getOwnerEntityIdList()
	 * @method \int[] fillOwnerEntityId()
	 * @method \Bitrix\Main\Type\DateTime[] getEntityDateUpdateList()
	 * @method \Bitrix\Main\Type\DateTime[] fillEntityDateUpdate()
	 * @method \string[] getXmlIdList()
	 * @method \string[] fillXmlId()
	 * @method \boolean[] getMarkedList()
	 * @method \boolean[] fillMarked()
	 * @method \string[] getDescriptionList()
	 * @method \string[] fillDescription()
	 * @method \string[] getMessageList()
	 * @method \string[] fillMessage()
	 * @method \Bitrix\Main\Type\DateTime[] getDateInsertList()
	 * @method \Bitrix\Main\Type\DateTime[] fillDateInsert()
	 * @method \string[] getDirectionList()
	 * @method \string[] fillDirection()
	 * @method \string[] getProviderList()
	 * @method \string[] fillProvider()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Sale\Exchange\Internals\EO_ExchangeLog $object)
	 * @method bool has(\Bitrix\Sale\Exchange\Internals\EO_ExchangeLog $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Sale\Exchange\Internals\EO_ExchangeLog getByPrimary($primary)
	 * @method \Bitrix\Sale\Exchange\Internals\EO_ExchangeLog[] getAll()
	 * @method bool remove(\Bitrix\Sale\Exchange\Internals\EO_ExchangeLog $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Sale\Exchange\Internals\EO_ExchangeLog_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Sale\Exchange\Internals\EO_ExchangeLog current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 * @method EO_ExchangeLog_Collection merge(?EO_ExchangeLog_Collection $collection)
	 * @method bool isEmpty()
	 */
	class EO_ExchangeLog_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Sale\Exchange\Internals\ExchangeLogTable */
		static public $dataClass = '\Bitrix\Sale\Exchange\Internals\ExchangeLogTable';
	}
}
namespace Bitrix\Sale\Exchange\Internals {
	/**
	 * Common methods:
	 * ---------------
	 *
	 * @method EO_ExchangeLog_Result exec()
	 * @method \Bitrix\Sale\Exchange\Internals\EO_ExchangeLog fetchObject()
	 * @method \Bitrix\Sale\Exchange\Internals\EO_ExchangeLog_Collection fetchCollection()
	 *
	 * Custom methods:
	 * ---------------
	 *
	 */
	class EO_ExchangeLog_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Sale\Exchange\Internals\EO_ExchangeLog fetchObject()
	 * @method \Bitrix\Sale\Exchange\Internals\EO_ExchangeLog_Collection fetchCollection()
	 */
	class EO_ExchangeLog_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Sale\Exchange\Internals\EO_ExchangeLog createObject($setDefaultValues = true)
	 * @method \Bitrix\Sale\Exchange\Internals\EO_ExchangeLog_Collection createCollection()
	 * @method \Bitrix\Sale\Exchange\Internals\EO_ExchangeLog wakeUpObject($row)
	 * @method \Bitrix\Sale\Exchange\Internals\EO_ExchangeLog_Collection wakeUpCollection($rows)
	 */
	class EO_ExchangeLog_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Sale\Internals\BusinessValuePersonDomainTable:sale\lib\internals\businessvalue_persondomain.php */
namespace Bitrix\Sale\Internals {
	/**
	 * EO_BusinessValuePersonDomain
	 * @see \Bitrix\Sale\Internals\BusinessValuePersonDomainTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getPersonTypeId()
	 * @method \Bitrix\Sale\Internals\EO_BusinessValuePersonDomain setPersonTypeId(\int|\Bitrix\Main\DB\SqlExpression $personTypeId)
	 * @method bool hasPersonTypeId()
	 * @method bool isPersonTypeIdFilled()
	 * @method bool isPersonTypeIdChanged()
	 * @method \string getDomain()
	 * @method \Bitrix\Sale\Internals\EO_BusinessValuePersonDomain setDomain(\string|\Bitrix\Main\DB\SqlExpression $domain)
	 * @method bool hasDomain()
	 * @method bool isDomainFilled()
	 * @method bool isDomainChanged()
	 * @method \Bitrix\Sale\Internals\EO_PersonType getPersonTypeReference()
	 * @method \Bitrix\Sale\Internals\EO_PersonType remindActualPersonTypeReference()
	 * @method \Bitrix\Sale\Internals\EO_PersonType requirePersonTypeReference()
	 * @method \Bitrix\Sale\Internals\EO_BusinessValuePersonDomain setPersonTypeReference(\Bitrix\Sale\Internals\EO_PersonType $object)
	 * @method \Bitrix\Sale\Internals\EO_BusinessValuePersonDomain resetPersonTypeReference()
	 * @method \Bitrix\Sale\Internals\EO_BusinessValuePersonDomain unsetPersonTypeReference()
	 * @method bool hasPersonTypeReference()
	 * @method bool isPersonTypeReferenceFilled()
	 * @method bool isPersonTypeReferenceChanged()
	 * @method \Bitrix\Sale\Internals\EO_PersonType fillPersonTypeReference()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Sale\Internals\EO_BusinessValuePersonDomain set($fieldName, $value)
	 * @method \Bitrix\Sale\Internals\EO_BusinessValuePersonDomain reset($fieldName)
	 * @method \Bitrix\Sale\Internals\EO_BusinessValuePersonDomain unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Sale\Internals\EO_BusinessValuePersonDomain wakeUp($data)
	 */
	class EO_BusinessValuePersonDomain {
		/* @var \Bitrix\Sale\Internals\BusinessValuePersonDomainTable */
		static public $dataClass = '\Bitrix\Sale\Internals\BusinessValuePersonDomainTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Sale\Internals {
	/**
	 * EO_BusinessValuePersonDomain_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getPersonTypeIdList()
	 * @method \string[] getDomainList()
	 * @method \Bitrix\Sale\Internals\EO_PersonType[] getPersonTypeReferenceList()
	 * @method \Bitrix\Sale\Internals\EO_BusinessValuePersonDomain_Collection getPersonTypeReferenceCollection()
	 * @method \Bitrix\Sale\Internals\EO_PersonType_Collection fillPersonTypeReference()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Sale\Internals\EO_BusinessValuePersonDomain $object)
	 * @method bool has(\Bitrix\Sale\Internals\EO_BusinessValuePersonDomain $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Sale\Internals\EO_BusinessValuePersonDomain getByPrimary($primary)
	 * @method \Bitrix\Sale\Internals\EO_BusinessValuePersonDomain[] getAll()
	 * @method bool remove(\Bitrix\Sale\Internals\EO_BusinessValuePersonDomain $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Sale\Internals\EO_BusinessValuePersonDomain_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Sale\Internals\EO_BusinessValuePersonDomain current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 * @method EO_BusinessValuePersonDomain_Collection merge(?EO_BusinessValuePersonDomain_Collection $collection)
	 * @method bool isEmpty()
	 */
	class EO_BusinessValuePersonDomain_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Sale\Internals\BusinessValuePersonDomainTable */
		static public $dataClass = '\Bitrix\Sale\Internals\BusinessValuePersonDomainTable';
	}
}
namespace Bitrix\Sale\Internals {
	/**
	 * Common methods:
	 * ---------------
	 *
	 * @method EO_BusinessValuePersonDomain_Result exec()
	 * @method \Bitrix\Sale\Internals\EO_BusinessValuePersonDomain fetchObject()
	 * @method \Bitrix\Sale\Internals\EO_BusinessValuePersonDomain_Collection fetchCollection()
	 *
	 * Custom methods:
	 * ---------------
	 *
	 */
	class EO_BusinessValuePersonDomain_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Sale\Internals\EO_BusinessValuePersonDomain fetchObject()
	 * @method \Bitrix\Sale\Internals\EO_BusinessValuePersonDomain_Collection fetchCollection()
	 */
	class EO_BusinessValuePersonDomain_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Sale\Internals\EO_BusinessValuePersonDomain createObject($setDefaultValues = true)
	 * @method \Bitrix\Sale\Internals\EO_BusinessValuePersonDomain_Collection createCollection()
	 * @method \Bitrix\Sale\Internals\EO_BusinessValuePersonDomain wakeUpObject($row)
	 * @method \Bitrix\Sale\Internals\EO_BusinessValuePersonDomain_Collection wakeUpCollection($rows)
	 */
	class EO_BusinessValuePersonDomain_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Sale\Internals\PersonTypeSiteTable:sale\lib\internals\persontypesite.php */
namespace Bitrix\Sale\Internals {
	/**
	 * EO_PersonTypeSite
	 * @see \Bitrix\Sale\Internals\PersonTypeSiteTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getPersonTypeId()
	 * @method \Bitrix\Sale\Internals\EO_PersonTypeSite setPersonTypeId(\int|\Bitrix\Main\DB\SqlExpression $personTypeId)
	 * @method bool hasPersonTypeId()
	 * @method bool isPersonTypeIdFilled()
	 * @method bool isPersonTypeIdChanged()
	 * @method \string getSiteId()
	 * @method \Bitrix\Sale\Internals\EO_PersonTypeSite setSiteId(\string|\Bitrix\Main\DB\SqlExpression $siteId)
	 * @method bool hasSiteId()
	 * @method bool isSiteIdFilled()
	 * @method bool isSiteIdChanged()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Sale\Internals\EO_PersonTypeSite set($fieldName, $value)
	 * @method \Bitrix\Sale\Internals\EO_PersonTypeSite reset($fieldName)
	 * @method \Bitrix\Sale\Internals\EO_PersonTypeSite unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Sale\Internals\EO_PersonTypeSite wakeUp($data)
	 */
	class EO_PersonTypeSite {
		/* @var \Bitrix\Sale\Internals\PersonTypeSiteTable */
		static public $dataClass = '\Bitrix\Sale\Internals\PersonTypeSiteTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Sale\Internals {
	/**
	 * EO_PersonTypeSite_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getPersonTypeIdList()
	 * @method \string[] getSiteIdList()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Sale\Internals\EO_PersonTypeSite $object)
	 * @method bool has(\Bitrix\Sale\Internals\EO_PersonTypeSite $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Sale\Internals\EO_PersonTypeSite getByPrimary($primary)
	 * @method \Bitrix\Sale\Internals\EO_PersonTypeSite[] getAll()
	 * @method bool remove(\Bitrix\Sale\Internals\EO_PersonTypeSite $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Sale\Internals\EO_PersonTypeSite_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Sale\Internals\EO_PersonTypeSite current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 * @method EO_PersonTypeSite_Collection merge(?EO_PersonTypeSite_Collection $collection)
	 * @method bool isEmpty()
	 */
	class EO_PersonTypeSite_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Sale\Internals\PersonTypeSiteTable */
		static public $dataClass = '\Bitrix\Sale\Internals\PersonTypeSiteTable';
	}
}
namespace Bitrix\Sale\Internals {
	/**
	 * Common methods:
	 * ---------------
	 *
	 * @method EO_PersonTypeSite_Result exec()
	 * @method \Bitrix\Sale\Internals\EO_PersonTypeSite fetchObject()
	 * @method \Bitrix\Sale\Internals\EO_PersonTypeSite_Collection fetchCollection()
	 *
	 * Custom methods:
	 * ---------------
	 *
	 */
	class EO_PersonTypeSite_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Sale\Internals\EO_PersonTypeSite fetchObject()
	 * @method \Bitrix\Sale\Internals\EO_PersonTypeSite_Collection fetchCollection()
	 */
	class EO_PersonTypeSite_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Sale\Internals\EO_PersonTypeSite createObject($setDefaultValues = true)
	 * @method \Bitrix\Sale\Internals\EO_PersonTypeSite_Collection createCollection()
	 * @method \Bitrix\Sale\Internals\EO_PersonTypeSite wakeUpObject($row)
	 * @method \Bitrix\Sale\Internals\EO_PersonTypeSite_Collection wakeUpCollection($rows)
	 */
	class EO_PersonTypeSite_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Sale\Internals\Analytics\AnalyticsTable:sale\lib\internals\analytics\analyticstable.php */
namespace Bitrix\Sale\Internals\Analytics {
	/**
	 * EO_Analytics
	 * @see \Bitrix\Sale\Internals\Analytics\AnalyticsTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getId()
	 * @method \Bitrix\Sale\Internals\Analytics\EO_Analytics setId(\int|\Bitrix\Main\DB\SqlExpression $id)
	 * @method bool hasId()
	 * @method bool isIdFilled()
	 * @method bool isIdChanged()
	 * @method \string getCode()
	 * @method \Bitrix\Sale\Internals\Analytics\EO_Analytics setCode(\string|\Bitrix\Main\DB\SqlExpression $code)
	 * @method bool hasCode()
	 * @method bool isCodeFilled()
	 * @method bool isCodeChanged()
	 * @method \string remindActualCode()
	 * @method \string requireCode()
	 * @method \Bitrix\Sale\Internals\Analytics\EO_Analytics resetCode()
	 * @method \Bitrix\Sale\Internals\Analytics\EO_Analytics unsetCode()
	 * @method \string fillCode()
	 * @method \Bitrix\Main\Type\DateTime getCreatedAt()
	 * @method \Bitrix\Sale\Internals\Analytics\EO_Analytics setCreatedAt(\Bitrix\Main\Type\DateTime|\Bitrix\Main\DB\SqlExpression $createdAt)
	 * @method bool hasCreatedAt()
	 * @method bool isCreatedAtFilled()
	 * @method bool isCreatedAtChanged()
	 * @method \Bitrix\Main\Type\DateTime remindActualCreatedAt()
	 * @method \Bitrix\Main\Type\DateTime requireCreatedAt()
	 * @method \Bitrix\Sale\Internals\Analytics\EO_Analytics resetCreatedAt()
	 * @method \Bitrix\Sale\Internals\Analytics\EO_Analytics unsetCreatedAt()
	 * @method \Bitrix\Main\Type\DateTime fillCreatedAt()
	 * @method array getPayload()
	 * @method \Bitrix\Sale\Internals\Analytics\EO_Analytics setPayload(array|\Bitrix\Main\DB\SqlExpression $payload)
	 * @method bool hasPayload()
	 * @method bool isPayloadFilled()
	 * @method bool isPayloadChanged()
	 * @method array remindActualPayload()
	 * @method array requirePayload()
	 * @method \Bitrix\Sale\Internals\Analytics\EO_Analytics resetPayload()
	 * @method \Bitrix\Sale\Internals\Analytics\EO_Analytics unsetPayload()
	 * @method array fillPayload()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Sale\Internals\Analytics\EO_Analytics set($fieldName, $value)
	 * @method \Bitrix\Sale\Internals\Analytics\EO_Analytics reset($fieldName)
	 * @method \Bitrix\Sale\Internals\Analytics\EO_Analytics unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Sale\Internals\Analytics\EO_Analytics wakeUp($data)
	 */
	class EO_Analytics {
		/* @var \Bitrix\Sale\Internals\Analytics\AnalyticsTable */
		static public $dataClass = '\Bitrix\Sale\Internals\Analytics\AnalyticsTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Sale\Internals\Analytics {
	/**
	 * EO_Analytics_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getIdList()
	 * @method \string[] getCodeList()
	 * @method \string[] fillCode()
	 * @method \Bitrix\Main\Type\DateTime[] getCreatedAtList()
	 * @method \Bitrix\Main\Type\DateTime[] fillCreatedAt()
	 * @method array[] getPayloadList()
	 * @method array[] fillPayload()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Sale\Internals\Analytics\EO_Analytics $object)
	 * @method bool has(\Bitrix\Sale\Internals\Analytics\EO_Analytics $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Sale\Internals\Analytics\EO_Analytics getByPrimary($primary)
	 * @method \Bitrix\Sale\Internals\Analytics\EO_Analytics[] getAll()
	 * @method bool remove(\Bitrix\Sale\Internals\Analytics\EO_Analytics $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Sale\Internals\Analytics\EO_Analytics_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Sale\Internals\Analytics\EO_Analytics current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 * @method EO_Analytics_Collection merge(?EO_Analytics_Collection $collection)
	 * @method bool isEmpty()
	 */
	class EO_Analytics_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Sale\Internals\Analytics\AnalyticsTable */
		static public $dataClass = '\Bitrix\Sale\Internals\Analytics\AnalyticsTable';
	}
}
namespace Bitrix\Sale\Internals\Analytics {
	/**
	 * Common methods:
	 * ---------------
	 *
	 * @method EO_Analytics_Result exec()
	 * @method \Bitrix\Sale\Internals\Analytics\EO_Analytics fetchObject()
	 * @method \Bitrix\Sale\Internals\Analytics\EO_Analytics_Collection fetchCollection()
	 *
	 * Custom methods:
	 * ---------------
	 *
	 */
	class EO_Analytics_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Sale\Internals\Analytics\EO_Analytics fetchObject()
	 * @method \Bitrix\Sale\Internals\Analytics\EO_Analytics_Collection fetchCollection()
	 */
	class EO_Analytics_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Sale\Internals\Analytics\EO_Analytics createObject($setDefaultValues = true)
	 * @method \Bitrix\Sale\Internals\Analytics\EO_Analytics_Collection createCollection()
	 * @method \Bitrix\Sale\Internals\Analytics\EO_Analytics wakeUpObject($row)
	 * @method \Bitrix\Sale\Internals\Analytics\EO_Analytics_Collection wakeUpCollection($rows)
	 */
	class EO_Analytics_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Sale\Internals\BasketTable:sale\lib\internals\basket.php */
namespace Bitrix\Sale\Internals {
	/**
	 * EO_Basket
	 * @see \Bitrix\Sale\Internals\BasketTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getId()
	 * @method \Bitrix\Sale\Internals\EO_Basket setId(\int|\Bitrix\Main\DB\SqlExpression $id)
	 * @method bool hasId()
	 * @method bool isIdFilled()
	 * @method bool isIdChanged()
	 * @method \string getLid()
	 * @method \Bitrix\Sale\Internals\EO_Basket setLid(\string|\Bitrix\Main\DB\SqlExpression $lid)
	 * @method bool hasLid()
	 * @method bool isLidFilled()
	 * @method bool isLidChanged()
	 * @method \string remindActualLid()
	 * @method \string requireLid()
	 * @method \Bitrix\Sale\Internals\EO_Basket resetLid()
	 * @method \Bitrix\Sale\Internals\EO_Basket unsetLid()
	 * @method \string fillLid()
	 * @method \int getFuserId()
	 * @method \Bitrix\Sale\Internals\EO_Basket setFuserId(\int|\Bitrix\Main\DB\SqlExpression $fuserId)
	 * @method bool hasFuserId()
	 * @method bool isFuserIdFilled()
	 * @method bool isFuserIdChanged()
	 * @method \int remindActualFuserId()
	 * @method \int requireFuserId()
	 * @method \Bitrix\Sale\Internals\EO_Basket resetFuserId()
	 * @method \Bitrix\Sale\Internals\EO_Basket unsetFuserId()
	 * @method \int fillFuserId()
	 * @method \Bitrix\Sale\Internals\EO_Fuser getFuser()
	 * @method \Bitrix\Sale\Internals\EO_Fuser remindActualFuser()
	 * @method \Bitrix\Sale\Internals\EO_Fuser requireFuser()
	 * @method \Bitrix\Sale\Internals\EO_Basket setFuser(\Bitrix\Sale\Internals\EO_Fuser $object)
	 * @method \Bitrix\Sale\Internals\EO_Basket resetFuser()
	 * @method \Bitrix\Sale\Internals\EO_Basket unsetFuser()
	 * @method bool hasFuser()
	 * @method bool isFuserFilled()
	 * @method bool isFuserChanged()
	 * @method \Bitrix\Sale\Internals\EO_Fuser fillFuser()
	 * @method \Bitrix\Main\EO_User getUser()
	 * @method \Bitrix\Main\EO_User remindActualUser()
	 * @method \Bitrix\Main\EO_User requireUser()
	 * @method \Bitrix\Sale\Internals\EO_Basket setUser(\Bitrix\Main\EO_User $object)
	 * @method \Bitrix\Sale\Internals\EO_Basket resetUser()
	 * @method \Bitrix\Sale\Internals\EO_Basket unsetUser()
	 * @method bool hasUser()
	 * @method bool isUserFilled()
	 * @method bool isUserChanged()
	 * @method \Bitrix\Main\EO_User fillUser()
	 * @method \int getOrderId()
	 * @method \Bitrix\Sale\Internals\EO_Basket setOrderId(\int|\Bitrix\Main\DB\SqlExpression $orderId)
	 * @method bool hasOrderId()
	 * @method bool isOrderIdFilled()
	 * @method bool isOrderIdChanged()
	 * @method \int remindActualOrderId()
	 * @method \int requireOrderId()
	 * @method \Bitrix\Sale\Internals\EO_Basket resetOrderId()
	 * @method \Bitrix\Sale\Internals\EO_Basket unsetOrderId()
	 * @method \int fillOrderId()
	 * @method \Bitrix\Sale\Internals\EO_Order getOrder()
	 * @method \Bitrix\Sale\Internals\EO_Order remindActualOrder()
	 * @method \Bitrix\Sale\Internals\EO_Order requireOrder()
	 * @method \Bitrix\Sale\Internals\EO_Basket setOrder(\Bitrix\Sale\Internals\EO_Order $object)
	 * @method \Bitrix\Sale\Internals\EO_Basket resetOrder()
	 * @method \Bitrix\Sale\Internals\EO_Basket unsetOrder()
	 * @method bool hasOrder()
	 * @method bool isOrderFilled()
	 * @method bool isOrderChanged()
	 * @method \Bitrix\Sale\Internals\EO_Order fillOrder()
	 * @method \int getProductId()
	 * @method \Bitrix\Sale\Internals\EO_Basket setProductId(\int|\Bitrix\Main\DB\SqlExpression $productId)
	 * @method bool hasProductId()
	 * @method bool isProductIdFilled()
	 * @method bool isProductIdChanged()
	 * @method \int remindActualProductId()
	 * @method \int requireProductId()
	 * @method \Bitrix\Sale\Internals\EO_Basket resetProductId()
	 * @method \Bitrix\Sale\Internals\EO_Basket unsetProductId()
	 * @method \int fillProductId()
	 * @method \Bitrix\Sale\Internals\EO_Product getProduct()
	 * @method \Bitrix\Sale\Internals\EO_Product remindActualProduct()
	 * @method \Bitrix\Sale\Internals\EO_Product requireProduct()
	 * @method \Bitrix\Sale\Internals\EO_Basket setProduct(\Bitrix\Sale\Internals\EO_Product $object)
	 * @method \Bitrix\Sale\Internals\EO_Basket resetProduct()
	 * @method \Bitrix\Sale\Internals\EO_Basket unsetProduct()
	 * @method bool hasProduct()
	 * @method bool isProductFilled()
	 * @method bool isProductChanged()
	 * @method \Bitrix\Sale\Internals\EO_Product fillProduct()
	 * @method \int getProductPriceId()
	 * @method \Bitrix\Sale\Internals\EO_Basket setProductPriceId(\int|\Bitrix\Main\DB\SqlExpression $productPriceId)
	 * @method bool hasProductPriceId()
	 * @method bool isProductPriceIdFilled()
	 * @method bool isProductPriceIdChanged()
	 * @method \int remindActualProductPriceId()
	 * @method \int requireProductPriceId()
	 * @method \Bitrix\Sale\Internals\EO_Basket resetProductPriceId()
	 * @method \Bitrix\Sale\Internals\EO_Basket unsetProductPriceId()
	 * @method \int fillProductPriceId()
	 * @method \int getPriceTypeId()
	 * @method \Bitrix\Sale\Internals\EO_Basket setPriceTypeId(\int|\Bitrix\Main\DB\SqlExpression $priceTypeId)
	 * @method bool hasPriceTypeId()
	 * @method bool isPriceTypeIdFilled()
	 * @method bool isPriceTypeIdChanged()
	 * @method \int remindActualPriceTypeId()
	 * @method \int requirePriceTypeId()
	 * @method \Bitrix\Sale\Internals\EO_Basket resetPriceTypeId()
	 * @method \Bitrix\Sale\Internals\EO_Basket unsetPriceTypeId()
	 * @method \int fillPriceTypeId()
	 * @method \string getName()
	 * @method \Bitrix\Sale\Internals\EO_Basket setName(\string|\Bitrix\Main\DB\SqlExpression $name)
	 * @method bool hasName()
	 * @method bool isNameFilled()
	 * @method bool isNameChanged()
	 * @method \string remindActualName()
	 * @method \string requireName()
	 * @method \Bitrix\Sale\Internals\EO_Basket resetName()
	 * @method \Bitrix\Sale\Internals\EO_Basket unsetName()
	 * @method \string fillName()
	 * @method \string getNameWithIdent()
	 * @method \string remindActualNameWithIdent()
	 * @method \string requireNameWithIdent()
	 * @method bool hasNameWithIdent()
	 * @method bool isNameWithIdentFilled()
	 * @method \Bitrix\Sale\Internals\EO_Basket unsetNameWithIdent()
	 * @method \string fillNameWithIdent()
	 * @method \float getPrice()
	 * @method \Bitrix\Sale\Internals\EO_Basket setPrice(\float|\Bitrix\Main\DB\SqlExpression $price)
	 * @method bool hasPrice()
	 * @method bool isPriceFilled()
	 * @method bool isPriceChanged()
	 * @method \float remindActualPrice()
	 * @method \float requirePrice()
	 * @method \Bitrix\Sale\Internals\EO_Basket resetPrice()
	 * @method \Bitrix\Sale\Internals\EO_Basket unsetPrice()
	 * @method \float fillPrice()
	 * @method \string getCurrency()
	 * @method \Bitrix\Sale\Internals\EO_Basket setCurrency(\string|\Bitrix\Main\DB\SqlExpression $currency)
	 * @method bool hasCurrency()
	 * @method bool isCurrencyFilled()
	 * @method bool isCurrencyChanged()
	 * @method \string remindActualCurrency()
	 * @method \string requireCurrency()
	 * @method \Bitrix\Sale\Internals\EO_Basket resetCurrency()
	 * @method \Bitrix\Sale\Internals\EO_Basket unsetCurrency()
	 * @method \string fillCurrency()
	 * @method \float getBasePrice()
	 * @method \Bitrix\Sale\Internals\EO_Basket setBasePrice(\float|\Bitrix\Main\DB\SqlExpression $basePrice)
	 * @method bool hasBasePrice()
	 * @method bool isBasePriceFilled()
	 * @method bool isBasePriceChanged()
	 * @method \float remindActualBasePrice()
	 * @method \float requireBasePrice()
	 * @method \Bitrix\Sale\Internals\EO_Basket resetBasePrice()
	 * @method \Bitrix\Sale\Internals\EO_Basket unsetBasePrice()
	 * @method \float fillBasePrice()
	 * @method \boolean getVatIncluded()
	 * @method \Bitrix\Sale\Internals\EO_Basket setVatIncluded(\boolean|\Bitrix\Main\DB\SqlExpression $vatIncluded)
	 * @method bool hasVatIncluded()
	 * @method bool isVatIncludedFilled()
	 * @method bool isVatIncludedChanged()
	 * @method \boolean remindActualVatIncluded()
	 * @method \boolean requireVatIncluded()
	 * @method \Bitrix\Sale\Internals\EO_Basket resetVatIncluded()
	 * @method \Bitrix\Sale\Internals\EO_Basket unsetVatIncluded()
	 * @method \boolean fillVatIncluded()
	 * @method \Bitrix\Main\Type\DateTime getDateInsert()
	 * @method \Bitrix\Sale\Internals\EO_Basket setDateInsert(\Bitrix\Main\Type\DateTime|\Bitrix\Main\DB\SqlExpression $dateInsert)
	 * @method bool hasDateInsert()
	 * @method bool isDateInsertFilled()
	 * @method bool isDateInsertChanged()
	 * @method \Bitrix\Main\Type\DateTime remindActualDateInsert()
	 * @method \Bitrix\Main\Type\DateTime requireDateInsert()
	 * @method \Bitrix\Sale\Internals\EO_Basket resetDateInsert()
	 * @method \Bitrix\Sale\Internals\EO_Basket unsetDateInsert()
	 * @method \Bitrix\Main\Type\DateTime fillDateInsert()
	 * @method \Bitrix\Main\Type\DateTime getDateIns()
	 * @method \Bitrix\Main\Type\DateTime remindActualDateIns()
	 * @method \Bitrix\Main\Type\DateTime requireDateIns()
	 * @method bool hasDateIns()
	 * @method bool isDateInsFilled()
	 * @method \Bitrix\Sale\Internals\EO_Basket unsetDateIns()
	 * @method \Bitrix\Main\Type\DateTime fillDateIns()
	 * @method \Bitrix\Main\Type\DateTime getDateUpdate()
	 * @method \Bitrix\Sale\Internals\EO_Basket setDateUpdate(\Bitrix\Main\Type\DateTime|\Bitrix\Main\DB\SqlExpression $dateUpdate)
	 * @method bool hasDateUpdate()
	 * @method bool isDateUpdateFilled()
	 * @method bool isDateUpdateChanged()
	 * @method \Bitrix\Main\Type\DateTime remindActualDateUpdate()
	 * @method \Bitrix\Main\Type\DateTime requireDateUpdate()
	 * @method \Bitrix\Sale\Internals\EO_Basket resetDateUpdate()
	 * @method \Bitrix\Sale\Internals\EO_Basket unsetDateUpdate()
	 * @method \Bitrix\Main\Type\DateTime fillDateUpdate()
	 * @method \Bitrix\Main\Type\DateTime getDateUpd()
	 * @method \Bitrix\Main\Type\DateTime remindActualDateUpd()
	 * @method \Bitrix\Main\Type\DateTime requireDateUpd()
	 * @method bool hasDateUpd()
	 * @method bool isDateUpdFilled()
	 * @method \Bitrix\Sale\Internals\EO_Basket unsetDateUpd()
	 * @method \Bitrix\Main\Type\DateTime fillDateUpd()
	 * @method \Bitrix\Main\Type\DateTime getDateRefresh()
	 * @method \Bitrix\Sale\Internals\EO_Basket setDateRefresh(\Bitrix\Main\Type\DateTime|\Bitrix\Main\DB\SqlExpression $dateRefresh)
	 * @method bool hasDateRefresh()
	 * @method bool isDateRefreshFilled()
	 * @method bool isDateRefreshChanged()
	 * @method \Bitrix\Main\Type\DateTime remindActualDateRefresh()
	 * @method \Bitrix\Main\Type\DateTime requireDateRefresh()
	 * @method \Bitrix\Sale\Internals\EO_Basket resetDateRefresh()
	 * @method \Bitrix\Sale\Internals\EO_Basket unsetDateRefresh()
	 * @method \Bitrix\Main\Type\DateTime fillDateRefresh()
	 * @method \Bitrix\Main\Type\DateTime getDateRef()
	 * @method \Bitrix\Main\Type\DateTime remindActualDateRef()
	 * @method \Bitrix\Main\Type\DateTime requireDateRef()
	 * @method bool hasDateRef()
	 * @method bool isDateRefFilled()
	 * @method \Bitrix\Sale\Internals\EO_Basket unsetDateRef()
	 * @method \Bitrix\Main\Type\DateTime fillDateRef()
	 * @method \float getWeight()
	 * @method \Bitrix\Sale\Internals\EO_Basket setWeight(\float|\Bitrix\Main\DB\SqlExpression $weight)
	 * @method bool hasWeight()
	 * @method bool isWeightFilled()
	 * @method bool isWeightChanged()
	 * @method \float remindActualWeight()
	 * @method \float requireWeight()
	 * @method \Bitrix\Sale\Internals\EO_Basket resetWeight()
	 * @method \Bitrix\Sale\Internals\EO_Basket unsetWeight()
	 * @method \float fillWeight()
	 * @method \float getQuantity()
	 * @method \Bitrix\Sale\Internals\EO_Basket setQuantity(\float|\Bitrix\Main\DB\SqlExpression $quantity)
	 * @method bool hasQuantity()
	 * @method bool isQuantityFilled()
	 * @method bool isQuantityChanged()
	 * @method \float remindActualQuantity()
	 * @method \float requireQuantity()
	 * @method \Bitrix\Sale\Internals\EO_Basket resetQuantity()
	 * @method \Bitrix\Sale\Internals\EO_Basket unsetQuantity()
	 * @method \float fillQuantity()
	 * @method \boolean getDelay()
	 * @method \Bitrix\Sale\Internals\EO_Basket setDelay(\boolean|\Bitrix\Main\DB\SqlExpression $delay)
	 * @method bool hasDelay()
	 * @method bool isDelayFilled()
	 * @method bool isDelayChanged()
	 * @method \boolean remindActualDelay()
	 * @method \boolean requireDelay()
	 * @method \Bitrix\Sale\Internals\EO_Basket resetDelay()
	 * @method \Bitrix\Sale\Internals\EO_Basket unsetDelay()
	 * @method \boolean fillDelay()
	 * @method \float getSummaryPrice()
	 * @method \float remindActualSummaryPrice()
	 * @method \float requireSummaryPrice()
	 * @method bool hasSummaryPrice()
	 * @method bool isSummaryPriceFilled()
	 * @method \Bitrix\Sale\Internals\EO_Basket unsetSummaryPrice()
	 * @method \float fillSummaryPrice()
	 * @method \boolean getCanBuy()
	 * @method \Bitrix\Sale\Internals\EO_Basket setCanBuy(\boolean|\Bitrix\Main\DB\SqlExpression $canBuy)
	 * @method bool hasCanBuy()
	 * @method bool isCanBuyFilled()
	 * @method bool isCanBuyChanged()
	 * @method \boolean remindActualCanBuy()
	 * @method \boolean requireCanBuy()
	 * @method \Bitrix\Sale\Internals\EO_Basket resetCanBuy()
	 * @method \Bitrix\Sale\Internals\EO_Basket unsetCanBuy()
	 * @method \boolean fillCanBuy()
	 * @method \string getMarkingCodeGroup()
	 * @method \Bitrix\Sale\Internals\EO_Basket setMarkingCodeGroup(\string|\Bitrix\Main\DB\SqlExpression $markingCodeGroup)
	 * @method bool hasMarkingCodeGroup()
	 * @method bool isMarkingCodeGroupFilled()
	 * @method bool isMarkingCodeGroupChanged()
	 * @method \string remindActualMarkingCodeGroup()
	 * @method \string requireMarkingCodeGroup()
	 * @method \Bitrix\Sale\Internals\EO_Basket resetMarkingCodeGroup()
	 * @method \Bitrix\Sale\Internals\EO_Basket unsetMarkingCodeGroup()
	 * @method \string fillMarkingCodeGroup()
	 * @method \string getModule()
	 * @method \Bitrix\Sale\Internals\EO_Basket setModule(\string|\Bitrix\Main\DB\SqlExpression $module)
	 * @method bool hasModule()
	 * @method bool isModuleFilled()
	 * @method bool isModuleChanged()
	 * @method \string remindActualModule()
	 * @method \string requireModule()
	 * @method \Bitrix\Sale\Internals\EO_Basket resetModule()
	 * @method \Bitrix\Sale\Internals\EO_Basket unsetModule()
	 * @method \string fillModule()
	 * @method \string getProductProviderClass()
	 * @method \Bitrix\Sale\Internals\EO_Basket setProductProviderClass(\string|\Bitrix\Main\DB\SqlExpression $productProviderClass)
	 * @method bool hasProductProviderClass()
	 * @method bool isProductProviderClassFilled()
	 * @method bool isProductProviderClassChanged()
	 * @method \string remindActualProductProviderClass()
	 * @method \string requireProductProviderClass()
	 * @method \Bitrix\Sale\Internals\EO_Basket resetProductProviderClass()
	 * @method \Bitrix\Sale\Internals\EO_Basket unsetProductProviderClass()
	 * @method \string fillProductProviderClass()
	 * @method \string getNotes()
	 * @method \Bitrix\Sale\Internals\EO_Basket setNotes(\string|\Bitrix\Main\DB\SqlExpression $notes)
	 * @method bool hasNotes()
	 * @method bool isNotesFilled()
	 * @method bool isNotesChanged()
	 * @method \string remindActualNotes()
	 * @method \string requireNotes()
	 * @method \Bitrix\Sale\Internals\EO_Basket resetNotes()
	 * @method \Bitrix\Sale\Internals\EO_Basket unsetNotes()
	 * @method \string fillNotes()
	 * @method \string getDetailPageUrl()
	 * @method \Bitrix\Sale\Internals\EO_Basket setDetailPageUrl(\string|\Bitrix\Main\DB\SqlExpression $detailPageUrl)
	 * @method bool hasDetailPageUrl()
	 * @method bool isDetailPageUrlFilled()
	 * @method bool isDetailPageUrlChanged()
	 * @method \string remindActualDetailPageUrl()
	 * @method \string requireDetailPageUrl()
	 * @method \Bitrix\Sale\Internals\EO_Basket resetDetailPageUrl()
	 * @method \Bitrix\Sale\Internals\EO_Basket unsetDetailPageUrl()
	 * @method \string fillDetailPageUrl()
	 * @method \float getDiscountPrice()
	 * @method \Bitrix\Sale\Internals\EO_Basket setDiscountPrice(\float|\Bitrix\Main\DB\SqlExpression $discountPrice)
	 * @method bool hasDiscountPrice()
	 * @method bool isDiscountPriceFilled()
	 * @method bool isDiscountPriceChanged()
	 * @method \float remindActualDiscountPrice()
	 * @method \float requireDiscountPrice()
	 * @method \Bitrix\Sale\Internals\EO_Basket resetDiscountPrice()
	 * @method \Bitrix\Sale\Internals\EO_Basket unsetDiscountPrice()
	 * @method \float fillDiscountPrice()
	 * @method \string getCatalogXmlId()
	 * @method \Bitrix\Sale\Internals\EO_Basket setCatalogXmlId(\string|\Bitrix\Main\DB\SqlExpression $catalogXmlId)
	 * @method bool hasCatalogXmlId()
	 * @method bool isCatalogXmlIdFilled()
	 * @method bool isCatalogXmlIdChanged()
	 * @method \string remindActualCatalogXmlId()
	 * @method \string requireCatalogXmlId()
	 * @method \Bitrix\Sale\Internals\EO_Basket resetCatalogXmlId()
	 * @method \Bitrix\Sale\Internals\EO_Basket unsetCatalogXmlId()
	 * @method \string fillCatalogXmlId()
	 * @method \string getProductXmlId()
	 * @method \Bitrix\Sale\Internals\EO_Basket setProductXmlId(\string|\Bitrix\Main\DB\SqlExpression $productXmlId)
	 * @method bool hasProductXmlId()
	 * @method bool isProductXmlIdFilled()
	 * @method bool isProductXmlIdChanged()
	 * @method \string remindActualProductXmlId()
	 * @method \string requireProductXmlId()
	 * @method \Bitrix\Sale\Internals\EO_Basket resetProductXmlId()
	 * @method \Bitrix\Sale\Internals\EO_Basket unsetProductXmlId()
	 * @method \string fillProductXmlId()
	 * @method \string getDiscountName()
	 * @method \Bitrix\Sale\Internals\EO_Basket setDiscountName(\string|\Bitrix\Main\DB\SqlExpression $discountName)
	 * @method bool hasDiscountName()
	 * @method bool isDiscountNameFilled()
	 * @method bool isDiscountNameChanged()
	 * @method \string remindActualDiscountName()
	 * @method \string requireDiscountName()
	 * @method \Bitrix\Sale\Internals\EO_Basket resetDiscountName()
	 * @method \Bitrix\Sale\Internals\EO_Basket unsetDiscountName()
	 * @method \string fillDiscountName()
	 * @method \string getDiscountValue()
	 * @method \Bitrix\Sale\Internals\EO_Basket setDiscountValue(\string|\Bitrix\Main\DB\SqlExpression $discountValue)
	 * @method bool hasDiscountValue()
	 * @method bool isDiscountValueFilled()
	 * @method bool isDiscountValueChanged()
	 * @method \string remindActualDiscountValue()
	 * @method \string requireDiscountValue()
	 * @method \Bitrix\Sale\Internals\EO_Basket resetDiscountValue()
	 * @method \Bitrix\Sale\Internals\EO_Basket unsetDiscountValue()
	 * @method \string fillDiscountValue()
	 * @method \string getDiscountCoupon()
	 * @method \Bitrix\Sale\Internals\EO_Basket setDiscountCoupon(\string|\Bitrix\Main\DB\SqlExpression $discountCoupon)
	 * @method bool hasDiscountCoupon()
	 * @method bool isDiscountCouponFilled()
	 * @method bool isDiscountCouponChanged()
	 * @method \string remindActualDiscountCoupon()
	 * @method \string requireDiscountCoupon()
	 * @method \Bitrix\Sale\Internals\EO_Basket resetDiscountCoupon()
	 * @method \Bitrix\Sale\Internals\EO_Basket unsetDiscountCoupon()
	 * @method \string fillDiscountCoupon()
	 * @method \float getVatRate()
	 * @method \Bitrix\Sale\Internals\EO_Basket setVatRate(\float|\Bitrix\Main\DB\SqlExpression $vatRate)
	 * @method bool hasVatRate()
	 * @method bool isVatRateFilled()
	 * @method bool isVatRateChanged()
	 * @method \float remindActualVatRate()
	 * @method \float requireVatRate()
	 * @method \Bitrix\Sale\Internals\EO_Basket resetVatRate()
	 * @method \Bitrix\Sale\Internals\EO_Basket unsetVatRate()
	 * @method \float fillVatRate()
	 * @method \string getVatRatePrc()
	 * @method \string remindActualVatRatePrc()
	 * @method \string requireVatRatePrc()
	 * @method bool hasVatRatePrc()
	 * @method bool isVatRatePrcFilled()
	 * @method \Bitrix\Sale\Internals\EO_Basket unsetVatRatePrc()
	 * @method \string fillVatRatePrc()
	 * @method \boolean getSubscribe()
	 * @method \Bitrix\Sale\Internals\EO_Basket setSubscribe(\boolean|\Bitrix\Main\DB\SqlExpression $subscribe)
	 * @method bool hasSubscribe()
	 * @method bool isSubscribeFilled()
	 * @method bool isSubscribeChanged()
	 * @method \boolean remindActualSubscribe()
	 * @method \boolean requireSubscribe()
	 * @method \Bitrix\Sale\Internals\EO_Basket resetSubscribe()
	 * @method \Bitrix\Sale\Internals\EO_Basket unsetSubscribe()
	 * @method \boolean fillSubscribe()
	 * @method \int getNSubscribe()
	 * @method \int remindActualNSubscribe()
	 * @method \int requireNSubscribe()
	 * @method bool hasNSubscribe()
	 * @method bool isNSubscribeFilled()
	 * @method \Bitrix\Sale\Internals\EO_Basket unsetNSubscribe()
	 * @method \int fillNSubscribe()
	 * @method \boolean getReserved()
	 * @method \Bitrix\Sale\Internals\EO_Basket setReserved(\boolean|\Bitrix\Main\DB\SqlExpression $reserved)
	 * @method bool hasReserved()
	 * @method bool isReservedFilled()
	 * @method bool isReservedChanged()
	 * @method \boolean remindActualReserved()
	 * @method \boolean requireReserved()
	 * @method \Bitrix\Sale\Internals\EO_Basket resetReserved()
	 * @method \Bitrix\Sale\Internals\EO_Basket unsetReserved()
	 * @method \boolean fillReserved()
	 * @method \float getReserveQuantity()
	 * @method \Bitrix\Sale\Internals\EO_Basket setReserveQuantity(\float|\Bitrix\Main\DB\SqlExpression $reserveQuantity)
	 * @method bool hasReserveQuantity()
	 * @method bool isReserveQuantityFilled()
	 * @method bool isReserveQuantityChanged()
	 * @method \float remindActualReserveQuantity()
	 * @method \float requireReserveQuantity()
	 * @method \Bitrix\Sale\Internals\EO_Basket resetReserveQuantity()
	 * @method \Bitrix\Sale\Internals\EO_Basket unsetReserveQuantity()
	 * @method \float fillReserveQuantity()
	 * @method \boolean getBarcodeMulti()
	 * @method \Bitrix\Sale\Internals\EO_Basket setBarcodeMulti(\boolean|\Bitrix\Main\DB\SqlExpression $barcodeMulti)
	 * @method bool hasBarcodeMulti()
	 * @method bool isBarcodeMultiFilled()
	 * @method bool isBarcodeMultiChanged()
	 * @method \boolean remindActualBarcodeMulti()
	 * @method \boolean requireBarcodeMulti()
	 * @method \Bitrix\Sale\Internals\EO_Basket resetBarcodeMulti()
	 * @method \Bitrix\Sale\Internals\EO_Basket unsetBarcodeMulti()
	 * @method \boolean fillBarcodeMulti()
	 * @method \boolean getCustomPrice()
	 * @method \Bitrix\Sale\Internals\EO_Basket setCustomPrice(\boolean|\Bitrix\Main\DB\SqlExpression $customPrice)
	 * @method bool hasCustomPrice()
	 * @method bool isCustomPriceFilled()
	 * @method bool isCustomPriceChanged()
	 * @method \boolean remindActualCustomPrice()
	 * @method \boolean requireCustomPrice()
	 * @method \Bitrix\Sale\Internals\EO_Basket resetCustomPrice()
	 * @method \Bitrix\Sale\Internals\EO_Basket unsetCustomPrice()
	 * @method \boolean fillCustomPrice()
	 * @method \string getDimensions()
	 * @method \Bitrix\Sale\Internals\EO_Basket setDimensions(\string|\Bitrix\Main\DB\SqlExpression $dimensions)
	 * @method bool hasDimensions()
	 * @method bool isDimensionsFilled()
	 * @method bool isDimensionsChanged()
	 * @method \string remindActualDimensions()
	 * @method \string requireDimensions()
	 * @method \Bitrix\Sale\Internals\EO_Basket resetDimensions()
	 * @method \Bitrix\Sale\Internals\EO_Basket unsetDimensions()
	 * @method \string fillDimensions()
	 * @method \int getType()
	 * @method \Bitrix\Sale\Internals\EO_Basket setType(\int|\Bitrix\Main\DB\SqlExpression $type)
	 * @method bool hasType()
	 * @method bool isTypeFilled()
	 * @method bool isTypeChanged()
	 * @method \int remindActualType()
	 * @method \int requireType()
	 * @method \Bitrix\Sale\Internals\EO_Basket resetType()
	 * @method \Bitrix\Sale\Internals\EO_Basket unsetType()
	 * @method \int fillType()
	 * @method \int getSetParentId()
	 * @method \Bitrix\Sale\Internals\EO_Basket setSetParentId(\int|\Bitrix\Main\DB\SqlExpression $setParentId)
	 * @method bool hasSetParentId()
	 * @method bool isSetParentIdFilled()
	 * @method bool isSetParentIdChanged()
	 * @method \int remindActualSetParentId()
	 * @method \int requireSetParentId()
	 * @method \Bitrix\Sale\Internals\EO_Basket resetSetParentId()
	 * @method \Bitrix\Sale\Internals\EO_Basket unsetSetParentId()
	 * @method \int fillSetParentId()
	 * @method \int getMeasureCode()
	 * @method \Bitrix\Sale\Internals\EO_Basket setMeasureCode(\int|\Bitrix\Main\DB\SqlExpression $measureCode)
	 * @method bool hasMeasureCode()
	 * @method bool isMeasureCodeFilled()
	 * @method bool isMeasureCodeChanged()
	 * @method \int remindActualMeasureCode()
	 * @method \int requireMeasureCode()
	 * @method \Bitrix\Sale\Internals\EO_Basket resetMeasureCode()
	 * @method \Bitrix\Sale\Internals\EO_Basket unsetMeasureCode()
	 * @method \int fillMeasureCode()
	 * @method \string getMeasureName()
	 * @method \Bitrix\Sale\Internals\EO_Basket setMeasureName(\string|\Bitrix\Main\DB\SqlExpression $measureName)
	 * @method bool hasMeasureName()
	 * @method bool isMeasureNameFilled()
	 * @method bool isMeasureNameChanged()
	 * @method \string remindActualMeasureName()
	 * @method \string requireMeasureName()
	 * @method \Bitrix\Sale\Internals\EO_Basket resetMeasureName()
	 * @method \Bitrix\Sale\Internals\EO_Basket unsetMeasureName()
	 * @method \string fillMeasureName()
	 * @method \string getCallbackFunc()
	 * @method \Bitrix\Sale\Internals\EO_Basket setCallbackFunc(\string|\Bitrix\Main\DB\SqlExpression $callbackFunc)
	 * @method bool hasCallbackFunc()
	 * @method bool isCallbackFuncFilled()
	 * @method bool isCallbackFuncChanged()
	 * @method \string remindActualCallbackFunc()
	 * @method \string requireCallbackFunc()
	 * @method \Bitrix\Sale\Internals\EO_Basket resetCallbackFunc()
	 * @method \Bitrix\Sale\Internals\EO_Basket unsetCallbackFunc()
	 * @method \string fillCallbackFunc()
	 * @method \string getOrderCallbackFunc()
	 * @method \Bitrix\Sale\Internals\EO_Basket setOrderCallbackFunc(\string|\Bitrix\Main\DB\SqlExpression $orderCallbackFunc)
	 * @method bool hasOrderCallbackFunc()
	 * @method bool isOrderCallbackFuncFilled()
	 * @method bool isOrderCallbackFuncChanged()
	 * @method \string remindActualOrderCallbackFunc()
	 * @method \string requireOrderCallbackFunc()
	 * @method \Bitrix\Sale\Internals\EO_Basket resetOrderCallbackFunc()
	 * @method \Bitrix\Sale\Internals\EO_Basket unsetOrderCallbackFunc()
	 * @method \string fillOrderCallbackFunc()
	 * @method \string getCancelCallbackFunc()
	 * @method \Bitrix\Sale\Internals\EO_Basket setCancelCallbackFunc(\string|\Bitrix\Main\DB\SqlExpression $cancelCallbackFunc)
	 * @method bool hasCancelCallbackFunc()
	 * @method bool isCancelCallbackFuncFilled()
	 * @method bool isCancelCallbackFuncChanged()
	 * @method \string remindActualCancelCallbackFunc()
	 * @method \string requireCancelCallbackFunc()
	 * @method \Bitrix\Sale\Internals\EO_Basket resetCancelCallbackFunc()
	 * @method \Bitrix\Sale\Internals\EO_Basket unsetCancelCallbackFunc()
	 * @method \string fillCancelCallbackFunc()
	 * @method \string getPayCallbackFunc()
	 * @method \Bitrix\Sale\Internals\EO_Basket setPayCallbackFunc(\string|\Bitrix\Main\DB\SqlExpression $payCallbackFunc)
	 * @method bool hasPayCallbackFunc()
	 * @method bool isPayCallbackFuncFilled()
	 * @method bool isPayCallbackFuncChanged()
	 * @method \string remindActualPayCallbackFunc()
	 * @method \string requirePayCallbackFunc()
	 * @method \Bitrix\Sale\Internals\EO_Basket resetPayCallbackFunc()
	 * @method \Bitrix\Sale\Internals\EO_Basket unsetPayCallbackFunc()
	 * @method \string fillPayCallbackFunc()
	 * @method \string getRecommendation()
	 * @method \Bitrix\Sale\Internals\EO_Basket setRecommendation(\string|\Bitrix\Main\DB\SqlExpression $recommendation)
	 * @method bool hasRecommendation()
	 * @method bool isRecommendationFilled()
	 * @method bool isRecommendationChanged()
	 * @method \string remindActualRecommendation()
	 * @method \string requireRecommendation()
	 * @method \Bitrix\Sale\Internals\EO_Basket resetRecommendation()
	 * @method \Bitrix\Sale\Internals\EO_Basket unsetRecommendation()
	 * @method \string fillRecommendation()
	 * @method \float getAllPrice()
	 * @method \float remindActualAllPrice()
	 * @method \float requireAllPrice()
	 * @method bool hasAllPrice()
	 * @method bool isAllPriceFilled()
	 * @method \Bitrix\Sale\Internals\EO_Basket unsetAllPrice()
	 * @method \float fillAllPrice()
	 * @method \float getSummaryPurchasingPrice()
	 * @method \float remindActualSummaryPurchasingPrice()
	 * @method \float requireSummaryPurchasingPrice()
	 * @method bool hasSummaryPurchasingPrice()
	 * @method bool isSummaryPurchasingPriceFilled()
	 * @method \Bitrix\Sale\Internals\EO_Basket unsetSummaryPurchasingPrice()
	 * @method \float fillSummaryPurchasingPrice()
	 * @method \float getGrossProfit()
	 * @method \float remindActualGrossProfit()
	 * @method \float requireGrossProfit()
	 * @method bool hasGrossProfit()
	 * @method bool isGrossProfitFilled()
	 * @method \Bitrix\Sale\Internals\EO_Basket unsetGrossProfit()
	 * @method \float fillGrossProfit()
	 * @method \float getProfitability()
	 * @method \float remindActualProfitability()
	 * @method \float requireProfitability()
	 * @method bool hasProfitability()
	 * @method bool isProfitabilityFilled()
	 * @method \Bitrix\Sale\Internals\EO_Basket unsetProfitability()
	 * @method \float fillProfitability()
	 * @method \Bitrix\Sale\Internals\EO_ShipmentItem getShipmentItem()
	 * @method \Bitrix\Sale\Internals\EO_ShipmentItem remindActualShipmentItem()
	 * @method \Bitrix\Sale\Internals\EO_ShipmentItem requireShipmentItem()
	 * @method \Bitrix\Sale\Internals\EO_Basket setShipmentItem(\Bitrix\Sale\Internals\EO_ShipmentItem $object)
	 * @method \Bitrix\Sale\Internals\EO_Basket resetShipmentItem()
	 * @method \Bitrix\Sale\Internals\EO_Basket unsetShipmentItem()
	 * @method bool hasShipmentItem()
	 * @method bool isShipmentItemFilled()
	 * @method bool isShipmentItemChanged()
	 * @method \Bitrix\Sale\Internals\EO_ShipmentItem fillShipmentItem()
	 * @method \Bitrix\Sale\Internals\EO_Shipment getShipment()
	 * @method \Bitrix\Sale\Internals\EO_Shipment remindActualShipment()
	 * @method \Bitrix\Sale\Internals\EO_Shipment requireShipment()
	 * @method \Bitrix\Sale\Internals\EO_Basket setShipment(\Bitrix\Sale\Internals\EO_Shipment $object)
	 * @method \Bitrix\Sale\Internals\EO_Basket resetShipment()
	 * @method \Bitrix\Sale\Internals\EO_Basket unsetShipment()
	 * @method bool hasShipment()
	 * @method bool isShipmentFilled()
	 * @method bool isShipmentChanged()
	 * @method \Bitrix\Sale\Internals\EO_Shipment fillShipment()
	 * @method \Bitrix\Sale\Internals\EO_Payment getPayment()
	 * @method \Bitrix\Sale\Internals\EO_Payment remindActualPayment()
	 * @method \Bitrix\Sale\Internals\EO_Payment requirePayment()
	 * @method \Bitrix\Sale\Internals\EO_Basket setPayment(\Bitrix\Sale\Internals\EO_Payment $object)
	 * @method \Bitrix\Sale\Internals\EO_Basket resetPayment()
	 * @method \Bitrix\Sale\Internals\EO_Basket unsetPayment()
	 * @method bool hasPayment()
	 * @method bool isPaymentFilled()
	 * @method bool isPaymentChanged()
	 * @method \Bitrix\Sale\Internals\EO_Payment fillPayment()
	 * @method \int getSort()
	 * @method \Bitrix\Sale\Internals\EO_Basket setSort(\int|\Bitrix\Main\DB\SqlExpression $sort)
	 * @method bool hasSort()
	 * @method bool isSortFilled()
	 * @method bool isSortChanged()
	 * @method \int remindActualSort()
	 * @method \int requireSort()
	 * @method \Bitrix\Sale\Internals\EO_Basket resetSort()
	 * @method \Bitrix\Sale\Internals\EO_Basket unsetSort()
	 * @method \int fillSort()
	 * @method \string getXmlId()
	 * @method \Bitrix\Sale\Internals\EO_Basket setXmlId(\string|\Bitrix\Main\DB\SqlExpression $xmlId)
	 * @method bool hasXmlId()
	 * @method bool isXmlIdFilled()
	 * @method bool isXmlIdChanged()
	 * @method \string remindActualXmlId()
	 * @method \string requireXmlId()
	 * @method \Bitrix\Sale\Internals\EO_Basket resetXmlId()
	 * @method \Bitrix\Sale\Internals\EO_Basket unsetXmlId()
	 * @method \string fillXmlId()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Sale\Internals\EO_Basket set($fieldName, $value)
	 * @method \Bitrix\Sale\Internals\EO_Basket reset($fieldName)
	 * @method \Bitrix\Sale\Internals\EO_Basket unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Sale\Internals\EO_Basket wakeUp($data)
	 */
	class EO_Basket {
		/* @var \Bitrix\Sale\Internals\BasketTable */
		static public $dataClass = '\Bitrix\Sale\Internals\BasketTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Sale\Internals {
	/**
	 * EO_Basket_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getIdList()
	 * @method \string[] getLidList()
	 * @method \string[] fillLid()
	 * @method \int[] getFuserIdList()
	 * @method \int[] fillFuserId()
	 * @method \Bitrix\Sale\Internals\EO_Fuser[] getFuserList()
	 * @method \Bitrix\Sale\Internals\EO_Basket_Collection getFuserCollection()
	 * @method \Bitrix\Sale\Internals\EO_Fuser_Collection fillFuser()
	 * @method \Bitrix\Main\EO_User[] getUserList()
	 * @method \Bitrix\Sale\Internals\EO_Basket_Collection getUserCollection()
	 * @method \Bitrix\Main\EO_User_Collection fillUser()
	 * @method \int[] getOrderIdList()
	 * @method \int[] fillOrderId()
	 * @method \Bitrix\Sale\Internals\EO_Order[] getOrderList()
	 * @method \Bitrix\Sale\Internals\EO_Basket_Collection getOrderCollection()
	 * @method \Bitrix\Sale\Internals\EO_Order_Collection fillOrder()
	 * @method \int[] getProductIdList()
	 * @method \int[] fillProductId()
	 * @method \Bitrix\Sale\Internals\EO_Product[] getProductList()
	 * @method \Bitrix\Sale\Internals\EO_Basket_Collection getProductCollection()
	 * @method \Bitrix\Sale\Internals\EO_Product_Collection fillProduct()
	 * @method \int[] getProductPriceIdList()
	 * @method \int[] fillProductPriceId()
	 * @method \int[] getPriceTypeIdList()
	 * @method \int[] fillPriceTypeId()
	 * @method \string[] getNameList()
	 * @method \string[] fillName()
	 * @method \string[] getNameWithIdentList()
	 * @method \string[] fillNameWithIdent()
	 * @method \float[] getPriceList()
	 * @method \float[] fillPrice()
	 * @method \string[] getCurrencyList()
	 * @method \string[] fillCurrency()
	 * @method \float[] getBasePriceList()
	 * @method \float[] fillBasePrice()
	 * @method \boolean[] getVatIncludedList()
	 * @method \boolean[] fillVatIncluded()
	 * @method \Bitrix\Main\Type\DateTime[] getDateInsertList()
	 * @method \Bitrix\Main\Type\DateTime[] fillDateInsert()
	 * @method \Bitrix\Main\Type\DateTime[] getDateInsList()
	 * @method \Bitrix\Main\Type\DateTime[] fillDateIns()
	 * @method \Bitrix\Main\Type\DateTime[] getDateUpdateList()
	 * @method \Bitrix\Main\Type\DateTime[] fillDateUpdate()
	 * @method \Bitrix\Main\Type\DateTime[] getDateUpdList()
	 * @method \Bitrix\Main\Type\DateTime[] fillDateUpd()
	 * @method \Bitrix\Main\Type\DateTime[] getDateRefreshList()
	 * @method \Bitrix\Main\Type\DateTime[] fillDateRefresh()
	 * @method \Bitrix\Main\Type\DateTime[] getDateRefList()
	 * @method \Bitrix\Main\Type\DateTime[] fillDateRef()
	 * @method \float[] getWeightList()
	 * @method \float[] fillWeight()
	 * @method \float[] getQuantityList()
	 * @method \float[] fillQuantity()
	 * @method \boolean[] getDelayList()
	 * @method \boolean[] fillDelay()
	 * @method \float[] getSummaryPriceList()
	 * @method \float[] fillSummaryPrice()
	 * @method \boolean[] getCanBuyList()
	 * @method \boolean[] fillCanBuy()
	 * @method \string[] getMarkingCodeGroupList()
	 * @method \string[] fillMarkingCodeGroup()
	 * @method \string[] getModuleList()
	 * @method \string[] fillModule()
	 * @method \string[] getProductProviderClassList()
	 * @method \string[] fillProductProviderClass()
	 * @method \string[] getNotesList()
	 * @method \string[] fillNotes()
	 * @method \string[] getDetailPageUrlList()
	 * @method \string[] fillDetailPageUrl()
	 * @method \float[] getDiscountPriceList()
	 * @method \float[] fillDiscountPrice()
	 * @method \string[] getCatalogXmlIdList()
	 * @method \string[] fillCatalogXmlId()
	 * @method \string[] getProductXmlIdList()
	 * @method \string[] fillProductXmlId()
	 * @method \string[] getDiscountNameList()
	 * @method \string[] fillDiscountName()
	 * @method \string[] getDiscountValueList()
	 * @method \string[] fillDiscountValue()
	 * @method \string[] getDiscountCouponList()
	 * @method \string[] fillDiscountCoupon()
	 * @method \float[] getVatRateList()
	 * @method \float[] fillVatRate()
	 * @method \string[] getVatRatePrcList()
	 * @method \string[] fillVatRatePrc()
	 * @method \boolean[] getSubscribeList()
	 * @method \boolean[] fillSubscribe()
	 * @method \int[] getNSubscribeList()
	 * @method \int[] fillNSubscribe()
	 * @method \boolean[] getReservedList()
	 * @method \boolean[] fillReserved()
	 * @method \float[] getReserveQuantityList()
	 * @method \float[] fillReserveQuantity()
	 * @method \boolean[] getBarcodeMultiList()
	 * @method \boolean[] fillBarcodeMulti()
	 * @method \boolean[] getCustomPriceList()
	 * @method \boolean[] fillCustomPrice()
	 * @method \string[] getDimensionsList()
	 * @method \string[] fillDimensions()
	 * @method \int[] getTypeList()
	 * @method \int[] fillType()
	 * @method \int[] getSetParentIdList()
	 * @method \int[] fillSetParentId()
	 * @method \int[] getMeasureCodeList()
	 * @method \int[] fillMeasureCode()
	 * @method \string[] getMeasureNameList()
	 * @method \string[] fillMeasureName()
	 * @method \string[] getCallbackFuncList()
	 * @method \string[] fillCallbackFunc()
	 * @method \string[] getOrderCallbackFuncList()
	 * @method \string[] fillOrderCallbackFunc()
	 * @method \string[] getCancelCallbackFuncList()
	 * @method \string[] fillCancelCallbackFunc()
	 * @method \string[] getPayCallbackFuncList()
	 * @method \string[] fillPayCallbackFunc()
	 * @method \string[] getRecommendationList()
	 * @method \string[] fillRecommendation()
	 * @method \float[] getAllPriceList()
	 * @method \float[] fillAllPrice()
	 * @method \float[] getSummaryPurchasingPriceList()
	 * @method \float[] fillSummaryPurchasingPrice()
	 * @method \float[] getGrossProfitList()
	 * @method \float[] fillGrossProfit()
	 * @method \float[] getProfitabilityList()
	 * @method \float[] fillProfitability()
	 * @method \Bitrix\Sale\Internals\EO_ShipmentItem[] getShipmentItemList()
	 * @method \Bitrix\Sale\Internals\EO_Basket_Collection getShipmentItemCollection()
	 * @method \Bitrix\Sale\Internals\EO_ShipmentItem_Collection fillShipmentItem()
	 * @method \Bitrix\Sale\Internals\EO_Shipment[] getShipmentList()
	 * @method \Bitrix\Sale\Internals\EO_Basket_Collection getShipmentCollection()
	 * @method \Bitrix\Sale\Internals\EO_Shipment_Collection fillShipment()
	 * @method \Bitrix\Sale\Internals\EO_Payment[] getPaymentList()
	 * @method \Bitrix\Sale\Internals\EO_Basket_Collection getPaymentCollection()
	 * @method \Bitrix\Sale\Internals\EO_Payment_Collection fillPayment()
	 * @method \int[] getSortList()
	 * @method \int[] fillSort()
	 * @method \string[] getXmlIdList()
	 * @method \string[] fillXmlId()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Sale\Internals\EO_Basket $object)
	 * @method bool has(\Bitrix\Sale\Internals\EO_Basket $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Sale\Internals\EO_Basket getByPrimary($primary)
	 * @method \Bitrix\Sale\Internals\EO_Basket[] getAll()
	 * @method bool remove(\Bitrix\Sale\Internals\EO_Basket $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Sale\Internals\EO_Basket_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Sale\Internals\EO_Basket current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 * @method EO_Basket_Collection merge(?EO_Basket_Collection $collection)
	 * @method bool isEmpty()
	 */
	class EO_Basket_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Sale\Internals\BasketTable */
		static public $dataClass = '\Bitrix\Sale\Internals\BasketTable';
	}
}
namespace Bitrix\Sale\Internals {
	/**
	 * Common methods:
	 * ---------------
	 *
	 * @method EO_Basket_Result exec()
	 * @method \Bitrix\Sale\Internals\EO_Basket fetchObject()
	 * @method \Bitrix\Sale\Internals\EO_Basket_Collection fetchCollection()
	 *
	 * Custom methods:
	 * ---------------
	 *
	 */
	class EO_Basket_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Sale\Internals\EO_Basket fetchObject()
	 * @method \Bitrix\Sale\Internals\EO_Basket_Collection fetchCollection()
	 */
	class EO_Basket_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Sale\Internals\EO_Basket createObject($setDefaultValues = true)
	 * @method \Bitrix\Sale\Internals\EO_Basket_Collection createCollection()
	 * @method \Bitrix\Sale\Internals\EO_Basket wakeUpObject($row)
	 * @method \Bitrix\Sale\Internals\EO_Basket_Collection wakeUpCollection($rows)
	 */
	class EO_Basket_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Sale\Internals\BasketArchiveTable:sale\lib\internals\basketarchive.php */
namespace Bitrix\Sale\Internals {
	/**
	 * EO_BasketArchive
	 * @see \Bitrix\Sale\Internals\BasketArchiveTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getId()
	 * @method \Bitrix\Sale\Internals\EO_BasketArchive setId(\int|\Bitrix\Main\DB\SqlExpression $id)
	 * @method bool hasId()
	 * @method bool isIdFilled()
	 * @method bool isIdChanged()
	 * @method \int getArchiveId()
	 * @method \Bitrix\Sale\Internals\EO_BasketArchive setArchiveId(\int|\Bitrix\Main\DB\SqlExpression $archiveId)
	 * @method bool hasArchiveId()
	 * @method bool isArchiveIdFilled()
	 * @method bool isArchiveIdChanged()
	 * @method \int remindActualArchiveId()
	 * @method \int requireArchiveId()
	 * @method \Bitrix\Sale\Internals\EO_BasketArchive resetArchiveId()
	 * @method \Bitrix\Sale\Internals\EO_BasketArchive unsetArchiveId()
	 * @method \int fillArchiveId()
	 * @method \int getProductId()
	 * @method \Bitrix\Sale\Internals\EO_BasketArchive setProductId(\int|\Bitrix\Main\DB\SqlExpression $productId)
	 * @method bool hasProductId()
	 * @method bool isProductIdFilled()
	 * @method bool isProductIdChanged()
	 * @method \int remindActualProductId()
	 * @method \int requireProductId()
	 * @method \Bitrix\Sale\Internals\EO_BasketArchive resetProductId()
	 * @method \Bitrix\Sale\Internals\EO_BasketArchive unsetProductId()
	 * @method \int fillProductId()
	 * @method \int getProductPriceId()
	 * @method \Bitrix\Sale\Internals\EO_BasketArchive setProductPriceId(\int|\Bitrix\Main\DB\SqlExpression $productPriceId)
	 * @method bool hasProductPriceId()
	 * @method bool isProductPriceIdFilled()
	 * @method bool isProductPriceIdChanged()
	 * @method \int remindActualProductPriceId()
	 * @method \int requireProductPriceId()
	 * @method \Bitrix\Sale\Internals\EO_BasketArchive resetProductPriceId()
	 * @method \Bitrix\Sale\Internals\EO_BasketArchive unsetProductPriceId()
	 * @method \int fillProductPriceId()
	 * @method \string getName()
	 * @method \Bitrix\Sale\Internals\EO_BasketArchive setName(\string|\Bitrix\Main\DB\SqlExpression $name)
	 * @method bool hasName()
	 * @method bool isNameFilled()
	 * @method bool isNameChanged()
	 * @method \string remindActualName()
	 * @method \string requireName()
	 * @method \Bitrix\Sale\Internals\EO_BasketArchive resetName()
	 * @method \Bitrix\Sale\Internals\EO_BasketArchive unsetName()
	 * @method \string fillName()
	 * @method \float getPrice()
	 * @method \Bitrix\Sale\Internals\EO_BasketArchive setPrice(\float|\Bitrix\Main\DB\SqlExpression $price)
	 * @method bool hasPrice()
	 * @method bool isPriceFilled()
	 * @method bool isPriceChanged()
	 * @method \float remindActualPrice()
	 * @method \float requirePrice()
	 * @method \Bitrix\Sale\Internals\EO_BasketArchive resetPrice()
	 * @method \Bitrix\Sale\Internals\EO_BasketArchive unsetPrice()
	 * @method \float fillPrice()
	 * @method \string getModule()
	 * @method \Bitrix\Sale\Internals\EO_BasketArchive setModule(\string|\Bitrix\Main\DB\SqlExpression $module)
	 * @method bool hasModule()
	 * @method bool isModuleFilled()
	 * @method bool isModuleChanged()
	 * @method \string remindActualModule()
	 * @method \string requireModule()
	 * @method \Bitrix\Sale\Internals\EO_BasketArchive resetModule()
	 * @method \Bitrix\Sale\Internals\EO_BasketArchive unsetModule()
	 * @method \string fillModule()
	 * @method \float getQuantity()
	 * @method \Bitrix\Sale\Internals\EO_BasketArchive setQuantity(\float|\Bitrix\Main\DB\SqlExpression $quantity)
	 * @method bool hasQuantity()
	 * @method bool isQuantityFilled()
	 * @method bool isQuantityChanged()
	 * @method \float remindActualQuantity()
	 * @method \float requireQuantity()
	 * @method \Bitrix\Sale\Internals\EO_BasketArchive resetQuantity()
	 * @method \Bitrix\Sale\Internals\EO_BasketArchive unsetQuantity()
	 * @method \float fillQuantity()
	 * @method \float getWeight()
	 * @method \Bitrix\Sale\Internals\EO_BasketArchive setWeight(\float|\Bitrix\Main\DB\SqlExpression $weight)
	 * @method bool hasWeight()
	 * @method bool isWeightFilled()
	 * @method bool isWeightChanged()
	 * @method \float remindActualWeight()
	 * @method \float requireWeight()
	 * @method \Bitrix\Sale\Internals\EO_BasketArchive resetWeight()
	 * @method \Bitrix\Sale\Internals\EO_BasketArchive unsetWeight()
	 * @method \float fillWeight()
	 * @method \string getCurrency()
	 * @method \Bitrix\Sale\Internals\EO_BasketArchive setCurrency(\string|\Bitrix\Main\DB\SqlExpression $currency)
	 * @method bool hasCurrency()
	 * @method bool isCurrencyFilled()
	 * @method bool isCurrencyChanged()
	 * @method \string remindActualCurrency()
	 * @method \string requireCurrency()
	 * @method \Bitrix\Sale\Internals\EO_BasketArchive resetCurrency()
	 * @method \Bitrix\Sale\Internals\EO_BasketArchive unsetCurrency()
	 * @method \string fillCurrency()
	 * @method \string getProductXmlId()
	 * @method \Bitrix\Sale\Internals\EO_BasketArchive setProductXmlId(\string|\Bitrix\Main\DB\SqlExpression $productXmlId)
	 * @method bool hasProductXmlId()
	 * @method bool isProductXmlIdFilled()
	 * @method bool isProductXmlIdChanged()
	 * @method \string remindActualProductXmlId()
	 * @method \string requireProductXmlId()
	 * @method \Bitrix\Sale\Internals\EO_BasketArchive resetProductXmlId()
	 * @method \Bitrix\Sale\Internals\EO_BasketArchive unsetProductXmlId()
	 * @method \string fillProductXmlId()
	 * @method \string getMeasureName()
	 * @method \Bitrix\Sale\Internals\EO_BasketArchive setMeasureName(\string|\Bitrix\Main\DB\SqlExpression $measureName)
	 * @method bool hasMeasureName()
	 * @method bool isMeasureNameFilled()
	 * @method bool isMeasureNameChanged()
	 * @method \string remindActualMeasureName()
	 * @method \string requireMeasureName()
	 * @method \Bitrix\Sale\Internals\EO_BasketArchive resetMeasureName()
	 * @method \Bitrix\Sale\Internals\EO_BasketArchive unsetMeasureName()
	 * @method \string fillMeasureName()
	 * @method \int getType()
	 * @method \Bitrix\Sale\Internals\EO_BasketArchive setType(\int|\Bitrix\Main\DB\SqlExpression $type)
	 * @method bool hasType()
	 * @method bool isTypeFilled()
	 * @method bool isTypeChanged()
	 * @method \int remindActualType()
	 * @method \int requireType()
	 * @method \Bitrix\Sale\Internals\EO_BasketArchive resetType()
	 * @method \Bitrix\Sale\Internals\EO_BasketArchive unsetType()
	 * @method \int fillType()
	 * @method \int getSetParentId()
	 * @method \Bitrix\Sale\Internals\EO_BasketArchive setSetParentId(\int|\Bitrix\Main\DB\SqlExpression $setParentId)
	 * @method bool hasSetParentId()
	 * @method bool isSetParentIdFilled()
	 * @method bool isSetParentIdChanged()
	 * @method \int remindActualSetParentId()
	 * @method \int requireSetParentId()
	 * @method \Bitrix\Sale\Internals\EO_BasketArchive resetSetParentId()
	 * @method \Bitrix\Sale\Internals\EO_BasketArchive unsetSetParentId()
	 * @method \int fillSetParentId()
	 * @method \int getMeasureCode()
	 * @method \Bitrix\Sale\Internals\EO_BasketArchive setMeasureCode(\int|\Bitrix\Main\DB\SqlExpression $measureCode)
	 * @method bool hasMeasureCode()
	 * @method bool isMeasureCodeFilled()
	 * @method bool isMeasureCodeChanged()
	 * @method \int remindActualMeasureCode()
	 * @method \int requireMeasureCode()
	 * @method \Bitrix\Sale\Internals\EO_BasketArchive resetMeasureCode()
	 * @method \Bitrix\Sale\Internals\EO_BasketArchive unsetMeasureCode()
	 * @method \int fillMeasureCode()
	 * @method \Bitrix\Main\Type\DateTime getDateInsert()
	 * @method \Bitrix\Sale\Internals\EO_BasketArchive setDateInsert(\Bitrix\Main\Type\DateTime|\Bitrix\Main\DB\SqlExpression $dateInsert)
	 * @method bool hasDateInsert()
	 * @method bool isDateInsertFilled()
	 * @method bool isDateInsertChanged()
	 * @method \Bitrix\Main\Type\DateTime remindActualDateInsert()
	 * @method \Bitrix\Main\Type\DateTime requireDateInsert()
	 * @method \Bitrix\Sale\Internals\EO_BasketArchive resetDateInsert()
	 * @method \Bitrix\Sale\Internals\EO_BasketArchive unsetDateInsert()
	 * @method \Bitrix\Main\Type\DateTime fillDateInsert()
	 * @method \string getBasketData()
	 * @method \Bitrix\Sale\Internals\EO_BasketArchive setBasketData(\string|\Bitrix\Main\DB\SqlExpression $basketData)
	 * @method bool hasBasketData()
	 * @method bool isBasketDataFilled()
	 * @method bool isBasketDataChanged()
	 * @method \string remindActualBasketData()
	 * @method \string requireBasketData()
	 * @method \Bitrix\Sale\Internals\EO_BasketArchive resetBasketData()
	 * @method \Bitrix\Sale\Internals\EO_BasketArchive unsetBasketData()
	 * @method \string fillBasketData()
	 * @method \Bitrix\Sale\Internals\EO_BasketArchivePacked getBasketPacked()
	 * @method \Bitrix\Sale\Internals\EO_BasketArchivePacked remindActualBasketPacked()
	 * @method \Bitrix\Sale\Internals\EO_BasketArchivePacked requireBasketPacked()
	 * @method \Bitrix\Sale\Internals\EO_BasketArchive setBasketPacked(\Bitrix\Sale\Internals\EO_BasketArchivePacked $object)
	 * @method \Bitrix\Sale\Internals\EO_BasketArchive resetBasketPacked()
	 * @method \Bitrix\Sale\Internals\EO_BasketArchive unsetBasketPacked()
	 * @method bool hasBasketPacked()
	 * @method bool isBasketPackedFilled()
	 * @method bool isBasketPackedChanged()
	 * @method \Bitrix\Sale\Internals\EO_BasketArchivePacked fillBasketPacked()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Sale\Internals\EO_BasketArchive set($fieldName, $value)
	 * @method \Bitrix\Sale\Internals\EO_BasketArchive reset($fieldName)
	 * @method \Bitrix\Sale\Internals\EO_BasketArchive unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Sale\Internals\EO_BasketArchive wakeUp($data)
	 */
	class EO_BasketArchive {
		/* @var \Bitrix\Sale\Internals\BasketArchiveTable */
		static public $dataClass = '\Bitrix\Sale\Internals\BasketArchiveTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Sale\Internals {
	/**
	 * EO_BasketArchive_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getIdList()
	 * @method \int[] getArchiveIdList()
	 * @method \int[] fillArchiveId()
	 * @method \int[] getProductIdList()
	 * @method \int[] fillProductId()
	 * @method \int[] getProductPriceIdList()
	 * @method \int[] fillProductPriceId()
	 * @method \string[] getNameList()
	 * @method \string[] fillName()
	 * @method \float[] getPriceList()
	 * @method \float[] fillPrice()
	 * @method \string[] getModuleList()
	 * @method \string[] fillModule()
	 * @method \float[] getQuantityList()
	 * @method \float[] fillQuantity()
	 * @method \float[] getWeightList()
	 * @method \float[] fillWeight()
	 * @method \string[] getCurrencyList()
	 * @method \string[] fillCurrency()
	 * @method \string[] getProductXmlIdList()
	 * @method \string[] fillProductXmlId()
	 * @method \string[] getMeasureNameList()
	 * @method \string[] fillMeasureName()
	 * @method \int[] getTypeList()
	 * @method \int[] fillType()
	 * @method \int[] getSetParentIdList()
	 * @method \int[] fillSetParentId()
	 * @method \int[] getMeasureCodeList()
	 * @method \int[] fillMeasureCode()
	 * @method \Bitrix\Main\Type\DateTime[] getDateInsertList()
	 * @method \Bitrix\Main\Type\DateTime[] fillDateInsert()
	 * @method \string[] getBasketDataList()
	 * @method \string[] fillBasketData()
	 * @method \Bitrix\Sale\Internals\EO_BasketArchivePacked[] getBasketPackedList()
	 * @method \Bitrix\Sale\Internals\EO_BasketArchive_Collection getBasketPackedCollection()
	 * @method \Bitrix\Sale\Internals\EO_BasketArchivePacked_Collection fillBasketPacked()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Sale\Internals\EO_BasketArchive $object)
	 * @method bool has(\Bitrix\Sale\Internals\EO_BasketArchive $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Sale\Internals\EO_BasketArchive getByPrimary($primary)
	 * @method \Bitrix\Sale\Internals\EO_BasketArchive[] getAll()
	 * @method bool remove(\Bitrix\Sale\Internals\EO_BasketArchive $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Sale\Internals\EO_BasketArchive_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Sale\Internals\EO_BasketArchive current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 * @method EO_BasketArchive_Collection merge(?EO_BasketArchive_Collection $collection)
	 * @method bool isEmpty()
	 */
	class EO_BasketArchive_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Sale\Internals\BasketArchiveTable */
		static public $dataClass = '\Bitrix\Sale\Internals\BasketArchiveTable';
	}
}
namespace Bitrix\Sale\Internals {
	/**
	 * Common methods:
	 * ---------------
	 *
	 * @method EO_BasketArchive_Result exec()
	 * @method \Bitrix\Sale\Internals\EO_BasketArchive fetchObject()
	 * @method \Bitrix\Sale\Internals\EO_BasketArchive_Collection fetchCollection()
	 *
	 * Custom methods:
	 * ---------------
	 *
	 */
	class EO_BasketArchive_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Sale\Internals\EO_BasketArchive fetchObject()
	 * @method \Bitrix\Sale\Internals\EO_BasketArchive_Collection fetchCollection()
	 */
	class EO_BasketArchive_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Sale\Internals\EO_BasketArchive createObject($setDefaultValues = true)
	 * @method \Bitrix\Sale\Internals\EO_BasketArchive_Collection createCollection()
	 * @method \Bitrix\Sale\Internals\EO_BasketArchive wakeUpObject($row)
	 * @method \Bitrix\Sale\Internals\EO_BasketArchive_Collection wakeUpCollection($rows)
	 */
	class EO_BasketArchive_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Sale\Internals\BasketArchivePackedTable:sale\lib\internals\basketarchivepacked.php */
namespace Bitrix\Sale\Internals {
	/**
	 * EO_BasketArchivePacked
	 * @see \Bitrix\Sale\Internals\BasketArchivePackedTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getBasketArchiveId()
	 * @method \Bitrix\Sale\Internals\EO_BasketArchivePacked setBasketArchiveId(\int|\Bitrix\Main\DB\SqlExpression $basketArchiveId)
	 * @method bool hasBasketArchiveId()
	 * @method bool isBasketArchiveIdFilled()
	 * @method bool isBasketArchiveIdChanged()
	 * @method \string getBasketData()
	 * @method \Bitrix\Sale\Internals\EO_BasketArchivePacked setBasketData(\string|\Bitrix\Main\DB\SqlExpression $basketData)
	 * @method bool hasBasketData()
	 * @method bool isBasketDataFilled()
	 * @method bool isBasketDataChanged()
	 * @method \string remindActualBasketData()
	 * @method \string requireBasketData()
	 * @method \Bitrix\Sale\Internals\EO_BasketArchivePacked resetBasketData()
	 * @method \Bitrix\Sale\Internals\EO_BasketArchivePacked unsetBasketData()
	 * @method \string fillBasketData()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Sale\Internals\EO_BasketArchivePacked set($fieldName, $value)
	 * @method \Bitrix\Sale\Internals\EO_BasketArchivePacked reset($fieldName)
	 * @method \Bitrix\Sale\Internals\EO_BasketArchivePacked unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Sale\Internals\EO_BasketArchivePacked wakeUp($data)
	 */
	class EO_BasketArchivePacked {
		/* @var \Bitrix\Sale\Internals\BasketArchivePackedTable */
		static public $dataClass = '\Bitrix\Sale\Internals\BasketArchivePackedTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Sale\Internals {
	/**
	 * EO_BasketArchivePacked_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getBasketArchiveIdList()
	 * @method \string[] getBasketDataList()
	 * @method \string[] fillBasketData()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Sale\Internals\EO_BasketArchivePacked $object)
	 * @method bool has(\Bitrix\Sale\Internals\EO_BasketArchivePacked $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Sale\Internals\EO_BasketArchivePacked getByPrimary($primary)
	 * @method \Bitrix\Sale\Internals\EO_BasketArchivePacked[] getAll()
	 * @method bool remove(\Bitrix\Sale\Internals\EO_BasketArchivePacked $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Sale\Internals\EO_BasketArchivePacked_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Sale\Internals\EO_BasketArchivePacked current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 * @method EO_BasketArchivePacked_Collection merge(?EO_BasketArchivePacked_Collection $collection)
	 * @method bool isEmpty()
	 */
	class EO_BasketArchivePacked_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Sale\Internals\BasketArchivePackedTable */
		static public $dataClass = '\Bitrix\Sale\Internals\BasketArchivePackedTable';
	}
}
namespace Bitrix\Sale\Internals {
	/**
	 * Common methods:
	 * ---------------
	 *
	 * @method EO_BasketArchivePacked_Result exec()
	 * @method \Bitrix\Sale\Internals\EO_BasketArchivePacked fetchObject()
	 * @method \Bitrix\Sale\Internals\EO_BasketArchivePacked_Collection fetchCollection()
	 *
	 * Custom methods:
	 * ---------------
	 *
	 */
	class EO_BasketArchivePacked_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Sale\Internals\EO_BasketArchivePacked fetchObject()
	 * @method \Bitrix\Sale\Internals\EO_BasketArchivePacked_Collection fetchCollection()
	 */
	class EO_BasketArchivePacked_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Sale\Internals\EO_BasketArchivePacked createObject($setDefaultValues = true)
	 * @method \Bitrix\Sale\Internals\EO_BasketArchivePacked_Collection createCollection()
	 * @method \Bitrix\Sale\Internals\EO_BasketArchivePacked wakeUpObject($row)
	 * @method \Bitrix\Sale\Internals\EO_BasketArchivePacked_Collection wakeUpCollection($rows)
	 */
	class EO_BasketArchivePacked_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Sale\Internals\BasketPropertyTable:sale\lib\internals\basketproperties.php */
namespace Bitrix\Sale\Internals {
	/**
	 * EO_BasketProperty
	 * @see \Bitrix\Sale\Internals\BasketPropertyTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getId()
	 * @method \Bitrix\Sale\Internals\EO_BasketProperty setId(\int|\Bitrix\Main\DB\SqlExpression $id)
	 * @method bool hasId()
	 * @method bool isIdFilled()
	 * @method bool isIdChanged()
	 * @method \int getBasketId()
	 * @method \Bitrix\Sale\Internals\EO_BasketProperty setBasketId(\int|\Bitrix\Main\DB\SqlExpression $basketId)
	 * @method bool hasBasketId()
	 * @method bool isBasketIdFilled()
	 * @method bool isBasketIdChanged()
	 * @method \int remindActualBasketId()
	 * @method \int requireBasketId()
	 * @method \Bitrix\Sale\Internals\EO_BasketProperty resetBasketId()
	 * @method \Bitrix\Sale\Internals\EO_BasketProperty unsetBasketId()
	 * @method \int fillBasketId()
	 * @method \string getName()
	 * @method \Bitrix\Sale\Internals\EO_BasketProperty setName(\string|\Bitrix\Main\DB\SqlExpression $name)
	 * @method bool hasName()
	 * @method bool isNameFilled()
	 * @method bool isNameChanged()
	 * @method \string remindActualName()
	 * @method \string requireName()
	 * @method \Bitrix\Sale\Internals\EO_BasketProperty resetName()
	 * @method \Bitrix\Sale\Internals\EO_BasketProperty unsetName()
	 * @method \string fillName()
	 * @method \string getValue()
	 * @method \Bitrix\Sale\Internals\EO_BasketProperty setValue(\string|\Bitrix\Main\DB\SqlExpression $value)
	 * @method bool hasValue()
	 * @method bool isValueFilled()
	 * @method bool isValueChanged()
	 * @method \string remindActualValue()
	 * @method \string requireValue()
	 * @method \Bitrix\Sale\Internals\EO_BasketProperty resetValue()
	 * @method \Bitrix\Sale\Internals\EO_BasketProperty unsetValue()
	 * @method \string fillValue()
	 * @method \string getCode()
	 * @method \Bitrix\Sale\Internals\EO_BasketProperty setCode(\string|\Bitrix\Main\DB\SqlExpression $code)
	 * @method bool hasCode()
	 * @method bool isCodeFilled()
	 * @method bool isCodeChanged()
	 * @method \string remindActualCode()
	 * @method \string requireCode()
	 * @method \Bitrix\Sale\Internals\EO_BasketProperty resetCode()
	 * @method \Bitrix\Sale\Internals\EO_BasketProperty unsetCode()
	 * @method \string fillCode()
	 * @method \int getSort()
	 * @method \Bitrix\Sale\Internals\EO_BasketProperty setSort(\int|\Bitrix\Main\DB\SqlExpression $sort)
	 * @method bool hasSort()
	 * @method bool isSortFilled()
	 * @method bool isSortChanged()
	 * @method \int remindActualSort()
	 * @method \int requireSort()
	 * @method \Bitrix\Sale\Internals\EO_BasketProperty resetSort()
	 * @method \Bitrix\Sale\Internals\EO_BasketProperty unsetSort()
	 * @method \int fillSort()
	 * @method \Bitrix\Sale\Internals\EO_Basket getBasket()
	 * @method \Bitrix\Sale\Internals\EO_Basket remindActualBasket()
	 * @method \Bitrix\Sale\Internals\EO_Basket requireBasket()
	 * @method \Bitrix\Sale\Internals\EO_BasketProperty setBasket(\Bitrix\Sale\Internals\EO_Basket $object)
	 * @method \Bitrix\Sale\Internals\EO_BasketProperty resetBasket()
	 * @method \Bitrix\Sale\Internals\EO_BasketProperty unsetBasket()
	 * @method bool hasBasket()
	 * @method bool isBasketFilled()
	 * @method bool isBasketChanged()
	 * @method \Bitrix\Sale\Internals\EO_Basket fillBasket()
	 * @method \string getXmlId()
	 * @method \Bitrix\Sale\Internals\EO_BasketProperty setXmlId(\string|\Bitrix\Main\DB\SqlExpression $xmlId)
	 * @method bool hasXmlId()
	 * @method bool isXmlIdFilled()
	 * @method bool isXmlIdChanged()
	 * @method \string remindActualXmlId()
	 * @method \string requireXmlId()
	 * @method \Bitrix\Sale\Internals\EO_BasketProperty resetXmlId()
	 * @method \Bitrix\Sale\Internals\EO_BasketProperty unsetXmlId()
	 * @method \string fillXmlId()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Sale\Internals\EO_BasketProperty set($fieldName, $value)
	 * @method \Bitrix\Sale\Internals\EO_BasketProperty reset($fieldName)
	 * @method \Bitrix\Sale\Internals\EO_BasketProperty unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Sale\Internals\EO_BasketProperty wakeUp($data)
	 */
	class EO_BasketProperty {
		/* @var \Bitrix\Sale\Internals\BasketPropertyTable */
		static public $dataClass = '\Bitrix\Sale\Internals\BasketPropertyTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Sale\Internals {
	/**
	 * EO_BasketProperty_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getIdList()
	 * @method \int[] getBasketIdList()
	 * @method \int[] fillBasketId()
	 * @method \string[] getNameList()
	 * @method \string[] fillName()
	 * @method \string[] getValueList()
	 * @method \string[] fillValue()
	 * @method \string[] getCodeList()
	 * @method \string[] fillCode()
	 * @method \int[] getSortList()
	 * @method \int[] fillSort()
	 * @method \Bitrix\Sale\Internals\EO_Basket[] getBasketList()
	 * @method \Bitrix\Sale\Internals\EO_BasketProperty_Collection getBasketCollection()
	 * @method \Bitrix\Sale\Internals\EO_Basket_Collection fillBasket()
	 * @method \string[] getXmlIdList()
	 * @method \string[] fillXmlId()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Sale\Internals\EO_BasketProperty $object)
	 * @method bool has(\Bitrix\Sale\Internals\EO_BasketProperty $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Sale\Internals\EO_BasketProperty getByPrimary($primary)
	 * @method \Bitrix\Sale\Internals\EO_BasketProperty[] getAll()
	 * @method bool remove(\Bitrix\Sale\Internals\EO_BasketProperty $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Sale\Internals\EO_BasketProperty_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Sale\Internals\EO_BasketProperty current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 * @method EO_BasketProperty_Collection merge(?EO_BasketProperty_Collection $collection)
	 * @method bool isEmpty()
	 */
	class EO_BasketProperty_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Sale\Internals\BasketPropertyTable */
		static public $dataClass = '\Bitrix\Sale\Internals\BasketPropertyTable';
	}
}
namespace Bitrix\Sale\Internals {
	/**
	 * Common methods:
	 * ---------------
	 *
	 * @method EO_BasketProperty_Result exec()
	 * @method \Bitrix\Sale\Internals\EO_BasketProperty fetchObject()
	 * @method \Bitrix\Sale\Internals\EO_BasketProperty_Collection fetchCollection()
	 *
	 * Custom methods:
	 * ---------------
	 *
	 */
	class EO_BasketProperty_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Sale\Internals\EO_BasketProperty fetchObject()
	 * @method \Bitrix\Sale\Internals\EO_BasketProperty_Collection fetchCollection()
	 */
	class EO_BasketProperty_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Sale\Internals\EO_BasketProperty createObject($setDefaultValues = true)
	 * @method \Bitrix\Sale\Internals\EO_BasketProperty_Collection createCollection()
	 * @method \Bitrix\Sale\Internals\EO_BasketProperty wakeUpObject($row)
	 * @method \Bitrix\Sale\Internals\EO_BasketProperty_Collection wakeUpCollection($rows)
	 */
	class EO_BasketProperty_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Sale\Internals\BusinessValueTable:sale\lib\internals\businessvalue.php */
namespace Bitrix\Sale\Internals {
	/**
	 * EO_BusinessValue
	 * @see \Bitrix\Sale\Internals\BusinessValueTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \string getCodeKey()
	 * @method \Bitrix\Sale\Internals\EO_BusinessValue setCodeKey(\string|\Bitrix\Main\DB\SqlExpression $codeKey)
	 * @method bool hasCodeKey()
	 * @method bool isCodeKeyFilled()
	 * @method bool isCodeKeyChanged()
	 * @method \string getConsumerKey()
	 * @method \Bitrix\Sale\Internals\EO_BusinessValue setConsumerKey(\string|\Bitrix\Main\DB\SqlExpression $consumerKey)
	 * @method bool hasConsumerKey()
	 * @method bool isConsumerKeyFilled()
	 * @method bool isConsumerKeyChanged()
	 * @method \int getPersonTypeId()
	 * @method \Bitrix\Sale\Internals\EO_BusinessValue setPersonTypeId(\int|\Bitrix\Main\DB\SqlExpression $personTypeId)
	 * @method bool hasPersonTypeId()
	 * @method bool isPersonTypeIdFilled()
	 * @method bool isPersonTypeIdChanged()
	 * @method \string getProviderKey()
	 * @method \Bitrix\Sale\Internals\EO_BusinessValue setProviderKey(\string|\Bitrix\Main\DB\SqlExpression $providerKey)
	 * @method bool hasProviderKey()
	 * @method bool isProviderKeyFilled()
	 * @method bool isProviderKeyChanged()
	 * @method \string remindActualProviderKey()
	 * @method \string requireProviderKey()
	 * @method \Bitrix\Sale\Internals\EO_BusinessValue resetProviderKey()
	 * @method \Bitrix\Sale\Internals\EO_BusinessValue unsetProviderKey()
	 * @method \string fillProviderKey()
	 * @method \string getProviderValue()
	 * @method \Bitrix\Sale\Internals\EO_BusinessValue setProviderValue(\string|\Bitrix\Main\DB\SqlExpression $providerValue)
	 * @method bool hasProviderValue()
	 * @method bool isProviderValueFilled()
	 * @method bool isProviderValueChanged()
	 * @method \string remindActualProviderValue()
	 * @method \string requireProviderValue()
	 * @method \Bitrix\Sale\Internals\EO_BusinessValue resetProviderValue()
	 * @method \Bitrix\Sale\Internals\EO_BusinessValue unsetProviderValue()
	 * @method \string fillProviderValue()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Sale\Internals\EO_BusinessValue set($fieldName, $value)
	 * @method \Bitrix\Sale\Internals\EO_BusinessValue reset($fieldName)
	 * @method \Bitrix\Sale\Internals\EO_BusinessValue unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Sale\Internals\EO_BusinessValue wakeUp($data)
	 */
	class EO_BusinessValue {
		/* @var \Bitrix\Sale\Internals\BusinessValueTable */
		static public $dataClass = '\Bitrix\Sale\Internals\BusinessValueTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Sale\Internals {
	/**
	 * EO_BusinessValue_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \string[] getCodeKeyList()
	 * @method \string[] getConsumerKeyList()
	 * @method \int[] getPersonTypeIdList()
	 * @method \string[] getProviderKeyList()
	 * @method \string[] fillProviderKey()
	 * @method \string[] getProviderValueList()
	 * @method \string[] fillProviderValue()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Sale\Internals\EO_BusinessValue $object)
	 * @method bool has(\Bitrix\Sale\Internals\EO_BusinessValue $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Sale\Internals\EO_BusinessValue getByPrimary($primary)
	 * @method \Bitrix\Sale\Internals\EO_BusinessValue[] getAll()
	 * @method bool remove(\Bitrix\Sale\Internals\EO_BusinessValue $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Sale\Internals\EO_BusinessValue_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Sale\Internals\EO_BusinessValue current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 * @method EO_BusinessValue_Collection merge(?EO_BusinessValue_Collection $collection)
	 * @method bool isEmpty()
	 */
	class EO_BusinessValue_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Sale\Internals\BusinessValueTable */
		static public $dataClass = '\Bitrix\Sale\Internals\BusinessValueTable';
	}
}
namespace Bitrix\Sale\Internals {
	/**
	 * Common methods:
	 * ---------------
	 *
	 * @method EO_BusinessValue_Result exec()
	 * @method \Bitrix\Sale\Internals\EO_BusinessValue fetchObject()
	 * @method \Bitrix\Sale\Internals\EO_BusinessValue_Collection fetchCollection()
	 *
	 * Custom methods:
	 * ---------------
	 *
	 */
	class EO_BusinessValue_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Sale\Internals\EO_BusinessValue fetchObject()
	 * @method \Bitrix\Sale\Internals\EO_BusinessValue_Collection fetchCollection()
	 */
	class EO_BusinessValue_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Sale\Internals\EO_BusinessValue createObject($setDefaultValues = true)
	 * @method \Bitrix\Sale\Internals\EO_BusinessValue_Collection createCollection()
	 * @method \Bitrix\Sale\Internals\EO_BusinessValue wakeUpObject($row)
	 * @method \Bitrix\Sale\Internals\EO_BusinessValue_Collection wakeUpCollection($rows)
	 */
	class EO_BusinessValue_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Sale\Internals\BusinessValueCode1CTable:sale\lib\internals\businessvalue_code_1c.php */
namespace Bitrix\Sale\Internals {
	/**
	 * EO_BusinessValueCode1C
	 * @see \Bitrix\Sale\Internals\BusinessValueCode1CTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getPersonTypeId()
	 * @method \Bitrix\Sale\Internals\EO_BusinessValueCode1C setPersonTypeId(\int|\Bitrix\Main\DB\SqlExpression $personTypeId)
	 * @method bool hasPersonTypeId()
	 * @method bool isPersonTypeIdFilled()
	 * @method bool isPersonTypeIdChanged()
	 * @method \int getCodeIndex()
	 * @method \Bitrix\Sale\Internals\EO_BusinessValueCode1C setCodeIndex(\int|\Bitrix\Main\DB\SqlExpression $codeIndex)
	 * @method bool hasCodeIndex()
	 * @method bool isCodeIndexFilled()
	 * @method bool isCodeIndexChanged()
	 * @method \string getName()
	 * @method \Bitrix\Sale\Internals\EO_BusinessValueCode1C setName(\string|\Bitrix\Main\DB\SqlExpression $name)
	 * @method bool hasName()
	 * @method bool isNameFilled()
	 * @method bool isNameChanged()
	 * @method \string remindActualName()
	 * @method \string requireName()
	 * @method \Bitrix\Sale\Internals\EO_BusinessValueCode1C resetName()
	 * @method \Bitrix\Sale\Internals\EO_BusinessValueCode1C unsetName()
	 * @method \string fillName()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Sale\Internals\EO_BusinessValueCode1C set($fieldName, $value)
	 * @method \Bitrix\Sale\Internals\EO_BusinessValueCode1C reset($fieldName)
	 * @method \Bitrix\Sale\Internals\EO_BusinessValueCode1C unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Sale\Internals\EO_BusinessValueCode1C wakeUp($data)
	 */
	class EO_BusinessValueCode1C {
		/* @var \Bitrix\Sale\Internals\BusinessValueCode1CTable */
		static public $dataClass = '\Bitrix\Sale\Internals\BusinessValueCode1CTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Sale\Internals {
	/**
	 * EO_BusinessValueCode1C_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getPersonTypeIdList()
	 * @method \int[] getCodeIndexList()
	 * @method \string[] getNameList()
	 * @method \string[] fillName()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Sale\Internals\EO_BusinessValueCode1C $object)
	 * @method bool has(\Bitrix\Sale\Internals\EO_BusinessValueCode1C $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Sale\Internals\EO_BusinessValueCode1C getByPrimary($primary)
	 * @method \Bitrix\Sale\Internals\EO_BusinessValueCode1C[] getAll()
	 * @method bool remove(\Bitrix\Sale\Internals\EO_BusinessValueCode1C $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Sale\Internals\EO_BusinessValueCode1C_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Sale\Internals\EO_BusinessValueCode1C current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 * @method EO_BusinessValueCode1C_Collection merge(?EO_BusinessValueCode1C_Collection $collection)
	 * @method bool isEmpty()
	 */
	class EO_BusinessValueCode1C_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Sale\Internals\BusinessValueCode1CTable */
		static public $dataClass = '\Bitrix\Sale\Internals\BusinessValueCode1CTable';
	}
}
namespace Bitrix\Sale\Internals {
	/**
	 * Common methods:
	 * ---------------
	 *
	 * @method EO_BusinessValueCode1C_Result exec()
	 * @method \Bitrix\Sale\Internals\EO_BusinessValueCode1C fetchObject()
	 * @method \Bitrix\Sale\Internals\EO_BusinessValueCode1C_Collection fetchCollection()
	 *
	 * Custom methods:
	 * ---------------
	 *
	 */
	class EO_BusinessValueCode1C_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Sale\Internals\EO_BusinessValueCode1C fetchObject()
	 * @method \Bitrix\Sale\Internals\EO_BusinessValueCode1C_Collection fetchCollection()
	 */
	class EO_BusinessValueCode1C_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Sale\Internals\EO_BusinessValueCode1C createObject($setDefaultValues = true)
	 * @method \Bitrix\Sale\Internals\EO_BusinessValueCode1C_Collection createCollection()
	 * @method \Bitrix\Sale\Internals\EO_BusinessValueCode1C wakeUpObject($row)
	 * @method \Bitrix\Sale\Internals\EO_BusinessValueCode1C_Collection wakeUpCollection($rows)
	 */
	class EO_BusinessValueCode1C_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Sale\Internals\BuyerStatisticTable:sale\lib\internals\buyerstatistic.php */
namespace Bitrix\Sale\Internals {
	/**
	 * EO_BuyerStatistic
	 * @see \Bitrix\Sale\Internals\BuyerStatisticTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getId()
	 * @method \Bitrix\Sale\Internals\EO_BuyerStatistic setId(\int|\Bitrix\Main\DB\SqlExpression $id)
	 * @method bool hasId()
	 * @method bool isIdFilled()
	 * @method bool isIdChanged()
	 * @method \string getLid()
	 * @method \Bitrix\Sale\Internals\EO_BuyerStatistic setLid(\string|\Bitrix\Main\DB\SqlExpression $lid)
	 * @method bool hasLid()
	 * @method bool isLidFilled()
	 * @method bool isLidChanged()
	 * @method \string remindActualLid()
	 * @method \string requireLid()
	 * @method \Bitrix\Sale\Internals\EO_BuyerStatistic resetLid()
	 * @method \Bitrix\Sale\Internals\EO_BuyerStatistic unsetLid()
	 * @method \string fillLid()
	 * @method \string getCurrency()
	 * @method \Bitrix\Sale\Internals\EO_BuyerStatistic setCurrency(\string|\Bitrix\Main\DB\SqlExpression $currency)
	 * @method bool hasCurrency()
	 * @method bool isCurrencyFilled()
	 * @method bool isCurrencyChanged()
	 * @method \string remindActualCurrency()
	 * @method \string requireCurrency()
	 * @method \Bitrix\Sale\Internals\EO_BuyerStatistic resetCurrency()
	 * @method \Bitrix\Sale\Internals\EO_BuyerStatistic unsetCurrency()
	 * @method \string fillCurrency()
	 * @method \string getUserId()
	 * @method \Bitrix\Sale\Internals\EO_BuyerStatistic setUserId(\string|\Bitrix\Main\DB\SqlExpression $userId)
	 * @method bool hasUserId()
	 * @method bool isUserIdFilled()
	 * @method bool isUserIdChanged()
	 * @method \string remindActualUserId()
	 * @method \string requireUserId()
	 * @method \Bitrix\Sale\Internals\EO_BuyerStatistic resetUserId()
	 * @method \Bitrix\Sale\Internals\EO_BuyerStatistic unsetUserId()
	 * @method \string fillUserId()
	 * @method \Bitrix\Main\EO_User getUser()
	 * @method \Bitrix\Main\EO_User remindActualUser()
	 * @method \Bitrix\Main\EO_User requireUser()
	 * @method \Bitrix\Sale\Internals\EO_BuyerStatistic setUser(\Bitrix\Main\EO_User $object)
	 * @method \Bitrix\Sale\Internals\EO_BuyerStatistic resetUser()
	 * @method \Bitrix\Sale\Internals\EO_BuyerStatistic unsetUser()
	 * @method bool hasUser()
	 * @method bool isUserFilled()
	 * @method bool isUserChanged()
	 * @method \Bitrix\Main\EO_User fillUser()
	 * @method \Bitrix\Main\Type\DateTime getLastOrderDate()
	 * @method \Bitrix\Sale\Internals\EO_BuyerStatistic setLastOrderDate(\Bitrix\Main\Type\DateTime|\Bitrix\Main\DB\SqlExpression $lastOrderDate)
	 * @method bool hasLastOrderDate()
	 * @method bool isLastOrderDateFilled()
	 * @method bool isLastOrderDateChanged()
	 * @method \Bitrix\Main\Type\DateTime remindActualLastOrderDate()
	 * @method \Bitrix\Main\Type\DateTime requireLastOrderDate()
	 * @method \Bitrix\Sale\Internals\EO_BuyerStatistic resetLastOrderDate()
	 * @method \Bitrix\Sale\Internals\EO_BuyerStatistic unsetLastOrderDate()
	 * @method \Bitrix\Main\Type\DateTime fillLastOrderDate()
	 * @method \float getSumPaid()
	 * @method \Bitrix\Sale\Internals\EO_BuyerStatistic setSumPaid(\float|\Bitrix\Main\DB\SqlExpression $sumPaid)
	 * @method bool hasSumPaid()
	 * @method bool isSumPaidFilled()
	 * @method bool isSumPaidChanged()
	 * @method \float remindActualSumPaid()
	 * @method \float requireSumPaid()
	 * @method \Bitrix\Sale\Internals\EO_BuyerStatistic resetSumPaid()
	 * @method \Bitrix\Sale\Internals\EO_BuyerStatistic unsetSumPaid()
	 * @method \float fillSumPaid()
	 * @method \int getCountFullPaidOrder()
	 * @method \Bitrix\Sale\Internals\EO_BuyerStatistic setCountFullPaidOrder(\int|\Bitrix\Main\DB\SqlExpression $countFullPaidOrder)
	 * @method bool hasCountFullPaidOrder()
	 * @method bool isCountFullPaidOrderFilled()
	 * @method bool isCountFullPaidOrderChanged()
	 * @method \int remindActualCountFullPaidOrder()
	 * @method \int requireCountFullPaidOrder()
	 * @method \Bitrix\Sale\Internals\EO_BuyerStatistic resetCountFullPaidOrder()
	 * @method \Bitrix\Sale\Internals\EO_BuyerStatistic unsetCountFullPaidOrder()
	 * @method \int fillCountFullPaidOrder()
	 * @method \int getCountPartPaidOrder()
	 * @method \Bitrix\Sale\Internals\EO_BuyerStatistic setCountPartPaidOrder(\int|\Bitrix\Main\DB\SqlExpression $countPartPaidOrder)
	 * @method bool hasCountPartPaidOrder()
	 * @method bool isCountPartPaidOrderFilled()
	 * @method bool isCountPartPaidOrderChanged()
	 * @method \int remindActualCountPartPaidOrder()
	 * @method \int requireCountPartPaidOrder()
	 * @method \Bitrix\Sale\Internals\EO_BuyerStatistic resetCountPartPaidOrder()
	 * @method \Bitrix\Sale\Internals\EO_BuyerStatistic unsetCountPartPaidOrder()
	 * @method \int fillCountPartPaidOrder()
	 * @method \Bitrix\Main\EO_UserGroup getGroup()
	 * @method \Bitrix\Main\EO_UserGroup remindActualGroup()
	 * @method \Bitrix\Main\EO_UserGroup requireGroup()
	 * @method \Bitrix\Sale\Internals\EO_BuyerStatistic setGroup(\Bitrix\Main\EO_UserGroup $object)
	 * @method \Bitrix\Sale\Internals\EO_BuyerStatistic resetGroup()
	 * @method \Bitrix\Sale\Internals\EO_BuyerStatistic unsetGroup()
	 * @method bool hasGroup()
	 * @method bool isGroupFilled()
	 * @method bool isGroupChanged()
	 * @method \Bitrix\Main\EO_UserGroup fillGroup()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Sale\Internals\EO_BuyerStatistic set($fieldName, $value)
	 * @method \Bitrix\Sale\Internals\EO_BuyerStatistic reset($fieldName)
	 * @method \Bitrix\Sale\Internals\EO_BuyerStatistic unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Sale\Internals\EO_BuyerStatistic wakeUp($data)
	 */
	class EO_BuyerStatistic {
		/* @var \Bitrix\Sale\Internals\BuyerStatisticTable */
		static public $dataClass = '\Bitrix\Sale\Internals\BuyerStatisticTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Sale\Internals {
	/**
	 * EO_BuyerStatistic_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getIdList()
	 * @method \string[] getLidList()
	 * @method \string[] fillLid()
	 * @method \string[] getCurrencyList()
	 * @method \string[] fillCurrency()
	 * @method \string[] getUserIdList()
	 * @method \string[] fillUserId()
	 * @method \Bitrix\Main\EO_User[] getUserList()
	 * @method \Bitrix\Sale\Internals\EO_BuyerStatistic_Collection getUserCollection()
	 * @method \Bitrix\Main\EO_User_Collection fillUser()
	 * @method \Bitrix\Main\Type\DateTime[] getLastOrderDateList()
	 * @method \Bitrix\Main\Type\DateTime[] fillLastOrderDate()
	 * @method \float[] getSumPaidList()
	 * @method \float[] fillSumPaid()
	 * @method \int[] getCountFullPaidOrderList()
	 * @method \int[] fillCountFullPaidOrder()
	 * @method \int[] getCountPartPaidOrderList()
	 * @method \int[] fillCountPartPaidOrder()
	 * @method \Bitrix\Main\EO_UserGroup[] getGroupList()
	 * @method \Bitrix\Sale\Internals\EO_BuyerStatistic_Collection getGroupCollection()
	 * @method \Bitrix\Main\EO_UserGroup_Collection fillGroup()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Sale\Internals\EO_BuyerStatistic $object)
	 * @method bool has(\Bitrix\Sale\Internals\EO_BuyerStatistic $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Sale\Internals\EO_BuyerStatistic getByPrimary($primary)
	 * @method \Bitrix\Sale\Internals\EO_BuyerStatistic[] getAll()
	 * @method bool remove(\Bitrix\Sale\Internals\EO_BuyerStatistic $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Sale\Internals\EO_BuyerStatistic_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Sale\Internals\EO_BuyerStatistic current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 * @method EO_BuyerStatistic_Collection merge(?EO_BuyerStatistic_Collection $collection)
	 * @method bool isEmpty()
	 */
	class EO_BuyerStatistic_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Sale\Internals\BuyerStatisticTable */
		static public $dataClass = '\Bitrix\Sale\Internals\BuyerStatisticTable';
	}
}
namespace Bitrix\Sale\Internals {
	/**
	 * Common methods:
	 * ---------------
	 *
	 * @method EO_BuyerStatistic_Result exec()
	 * @method \Bitrix\Sale\Internals\EO_BuyerStatistic fetchObject()
	 * @method \Bitrix\Sale\Internals\EO_BuyerStatistic_Collection fetchCollection()
	 *
	 * Custom methods:
	 * ---------------
	 *
	 */
	class EO_BuyerStatistic_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Sale\Internals\EO_BuyerStatistic fetchObject()
	 * @method \Bitrix\Sale\Internals\EO_BuyerStatistic_Collection fetchCollection()
	 */
	class EO_BuyerStatistic_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Sale\Internals\EO_BuyerStatistic createObject($setDefaultValues = true)
	 * @method \Bitrix\Sale\Internals\EO_BuyerStatistic_Collection createCollection()
	 * @method \Bitrix\Sale\Internals\EO_BuyerStatistic wakeUpObject($row)
	 * @method \Bitrix\Sale\Internals\EO_BuyerStatistic_Collection wakeUpCollection($rows)
	 */
	class EO_BuyerStatistic_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Sale\Internals\CallbackRegistryTable:sale\lib\internals\callbackregistry.php */
namespace Bitrix\Sale\Internals {
	/**
	 * EO_CallbackRegistry
	 * @see \Bitrix\Sale\Internals\CallbackRegistryTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getId()
	 * @method \Bitrix\Sale\Internals\EO_CallbackRegistry setId(\int|\Bitrix\Main\DB\SqlExpression $id)
	 * @method bool hasId()
	 * @method bool isIdFilled()
	 * @method bool isIdChanged()
	 * @method \Bitrix\Main\Type\DateTime getDateInsert()
	 * @method \Bitrix\Sale\Internals\EO_CallbackRegistry setDateInsert(\Bitrix\Main\Type\DateTime|\Bitrix\Main\DB\SqlExpression $dateInsert)
	 * @method bool hasDateInsert()
	 * @method bool isDateInsertFilled()
	 * @method bool isDateInsertChanged()
	 * @method \Bitrix\Main\Type\DateTime remindActualDateInsert()
	 * @method \Bitrix\Main\Type\DateTime requireDateInsert()
	 * @method \Bitrix\Sale\Internals\EO_CallbackRegistry resetDateInsert()
	 * @method \Bitrix\Sale\Internals\EO_CallbackRegistry unsetDateInsert()
	 * @method \Bitrix\Main\Type\DateTime fillDateInsert()
	 * @method \int getDocumentId()
	 * @method \Bitrix\Sale\Internals\EO_CallbackRegistry setDocumentId(\int|\Bitrix\Main\DB\SqlExpression $documentId)
	 * @method bool hasDocumentId()
	 * @method bool isDocumentIdFilled()
	 * @method bool isDocumentIdChanged()
	 * @method \int remindActualDocumentId()
	 * @method \int requireDocumentId()
	 * @method \Bitrix\Sale\Internals\EO_CallbackRegistry resetDocumentId()
	 * @method \Bitrix\Sale\Internals\EO_CallbackRegistry unsetDocumentId()
	 * @method \int fillDocumentId()
	 * @method \string getModuleId()
	 * @method \Bitrix\Sale\Internals\EO_CallbackRegistry setModuleId(\string|\Bitrix\Main\DB\SqlExpression $moduleId)
	 * @method bool hasModuleId()
	 * @method bool isModuleIdFilled()
	 * @method bool isModuleIdChanged()
	 * @method \string remindActualModuleId()
	 * @method \string requireModuleId()
	 * @method \Bitrix\Sale\Internals\EO_CallbackRegistry resetModuleId()
	 * @method \Bitrix\Sale\Internals\EO_CallbackRegistry unsetModuleId()
	 * @method \string fillModuleId()
	 * @method \string getCallbackClass()
	 * @method \Bitrix\Sale\Internals\EO_CallbackRegistry setCallbackClass(\string|\Bitrix\Main\DB\SqlExpression $callbackClass)
	 * @method bool hasCallbackClass()
	 * @method bool isCallbackClassFilled()
	 * @method bool isCallbackClassChanged()
	 * @method \string remindActualCallbackClass()
	 * @method \string requireCallbackClass()
	 * @method \Bitrix\Sale\Internals\EO_CallbackRegistry resetCallbackClass()
	 * @method \Bitrix\Sale\Internals\EO_CallbackRegistry unsetCallbackClass()
	 * @method \string fillCallbackClass()
	 * @method \string getCallbackMethod()
	 * @method \Bitrix\Sale\Internals\EO_CallbackRegistry setCallbackMethod(\string|\Bitrix\Main\DB\SqlExpression $callbackMethod)
	 * @method bool hasCallbackMethod()
	 * @method bool isCallbackMethodFilled()
	 * @method bool isCallbackMethodChanged()
	 * @method \string remindActualCallbackMethod()
	 * @method \string requireCallbackMethod()
	 * @method \Bitrix\Sale\Internals\EO_CallbackRegistry resetCallbackMethod()
	 * @method \Bitrix\Sale\Internals\EO_CallbackRegistry unsetCallbackMethod()
	 * @method \string fillCallbackMethod()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Sale\Internals\EO_CallbackRegistry set($fieldName, $value)
	 * @method \Bitrix\Sale\Internals\EO_CallbackRegistry reset($fieldName)
	 * @method \Bitrix\Sale\Internals\EO_CallbackRegistry unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Sale\Internals\EO_CallbackRegistry wakeUp($data)
	 */
	class EO_CallbackRegistry {
		/* @var \Bitrix\Sale\Internals\CallbackRegistryTable */
		static public $dataClass = '\Bitrix\Sale\Internals\CallbackRegistryTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Sale\Internals {
	/**
	 * EO_CallbackRegistry_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getIdList()
	 * @method \Bitrix\Main\Type\DateTime[] getDateInsertList()
	 * @method \Bitrix\Main\Type\DateTime[] fillDateInsert()
	 * @method \int[] getDocumentIdList()
	 * @method \int[] fillDocumentId()
	 * @method \string[] getModuleIdList()
	 * @method \string[] fillModuleId()
	 * @method \string[] getCallbackClassList()
	 * @method \string[] fillCallbackClass()
	 * @method \string[] getCallbackMethodList()
	 * @method \string[] fillCallbackMethod()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Sale\Internals\EO_CallbackRegistry $object)
	 * @method bool has(\Bitrix\Sale\Internals\EO_CallbackRegistry $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Sale\Internals\EO_CallbackRegistry getByPrimary($primary)
	 * @method \Bitrix\Sale\Internals\EO_CallbackRegistry[] getAll()
	 * @method bool remove(\Bitrix\Sale\Internals\EO_CallbackRegistry $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Sale\Internals\EO_CallbackRegistry_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Sale\Internals\EO_CallbackRegistry current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 * @method EO_CallbackRegistry_Collection merge(?EO_CallbackRegistry_Collection $collection)
	 * @method bool isEmpty()
	 */
	class EO_CallbackRegistry_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Sale\Internals\CallbackRegistryTable */
		static public $dataClass = '\Bitrix\Sale\Internals\CallbackRegistryTable';
	}
}
namespace Bitrix\Sale\Internals {
	/**
	 * Common methods:
	 * ---------------
	 *
	 * @method EO_CallbackRegistry_Result exec()
	 * @method \Bitrix\Sale\Internals\EO_CallbackRegistry fetchObject()
	 * @method \Bitrix\Sale\Internals\EO_CallbackRegistry_Collection fetchCollection()
	 *
	 * Custom methods:
	 * ---------------
	 *
	 */
	class EO_CallbackRegistry_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Sale\Internals\EO_CallbackRegistry fetchObject()
	 * @method \Bitrix\Sale\Internals\EO_CallbackRegistry_Collection fetchCollection()
	 */
	class EO_CallbackRegistry_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Sale\Internals\EO_CallbackRegistry createObject($setDefaultValues = true)
	 * @method \Bitrix\Sale\Internals\EO_CallbackRegistry_Collection createCollection()
	 * @method \Bitrix\Sale\Internals\EO_CallbackRegistry wakeUpObject($row)
	 * @method \Bitrix\Sale\Internals\EO_CallbackRegistry_Collection wakeUpCollection($rows)
	 */
	class EO_CallbackRegistry_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Sale\Internals\CashboxRestHandlerTable:sale\lib\internals\cashboxresthandler.php */
namespace Bitrix\Sale\Internals {
	/**
	 * EO_CashboxRestHandler
	 * @see \Bitrix\Sale\Internals\CashboxRestHandlerTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getId()
	 * @method \Bitrix\Sale\Internals\EO_CashboxRestHandler setId(\int|\Bitrix\Main\DB\SqlExpression $id)
	 * @method bool hasId()
	 * @method bool isIdFilled()
	 * @method bool isIdChanged()
	 * @method \string getName()
	 * @method \Bitrix\Sale\Internals\EO_CashboxRestHandler setName(\string|\Bitrix\Main\DB\SqlExpression $name)
	 * @method bool hasName()
	 * @method bool isNameFilled()
	 * @method bool isNameChanged()
	 * @method \string remindActualName()
	 * @method \string requireName()
	 * @method \Bitrix\Sale\Internals\EO_CashboxRestHandler resetName()
	 * @method \Bitrix\Sale\Internals\EO_CashboxRestHandler unsetName()
	 * @method \string fillName()
	 * @method \string getCode()
	 * @method \Bitrix\Sale\Internals\EO_CashboxRestHandler setCode(\string|\Bitrix\Main\DB\SqlExpression $code)
	 * @method bool hasCode()
	 * @method bool isCodeFilled()
	 * @method bool isCodeChanged()
	 * @method \string remindActualCode()
	 * @method \string requireCode()
	 * @method \Bitrix\Sale\Internals\EO_CashboxRestHandler resetCode()
	 * @method \Bitrix\Sale\Internals\EO_CashboxRestHandler unsetCode()
	 * @method \string fillCode()
	 * @method \int getSort()
	 * @method \Bitrix\Sale\Internals\EO_CashboxRestHandler setSort(\int|\Bitrix\Main\DB\SqlExpression $sort)
	 * @method bool hasSort()
	 * @method bool isSortFilled()
	 * @method bool isSortChanged()
	 * @method \int remindActualSort()
	 * @method \int requireSort()
	 * @method \Bitrix\Sale\Internals\EO_CashboxRestHandler resetSort()
	 * @method \Bitrix\Sale\Internals\EO_CashboxRestHandler unsetSort()
	 * @method \int fillSort()
	 * @method \string getSettings()
	 * @method \Bitrix\Sale\Internals\EO_CashboxRestHandler setSettings(\string|\Bitrix\Main\DB\SqlExpression $settings)
	 * @method bool hasSettings()
	 * @method bool isSettingsFilled()
	 * @method bool isSettingsChanged()
	 * @method \string remindActualSettings()
	 * @method \string requireSettings()
	 * @method \Bitrix\Sale\Internals\EO_CashboxRestHandler resetSettings()
	 * @method \Bitrix\Sale\Internals\EO_CashboxRestHandler unsetSettings()
	 * @method \string fillSettings()
	 * @method \string getAppId()
	 * @method \Bitrix\Sale\Internals\EO_CashboxRestHandler setAppId(\string|\Bitrix\Main\DB\SqlExpression $appId)
	 * @method bool hasAppId()
	 * @method bool isAppIdFilled()
	 * @method bool isAppIdChanged()
	 * @method \string remindActualAppId()
	 * @method \string requireAppId()
	 * @method \Bitrix\Sale\Internals\EO_CashboxRestHandler resetAppId()
	 * @method \Bitrix\Sale\Internals\EO_CashboxRestHandler unsetAppId()
	 * @method \string fillAppId()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Sale\Internals\EO_CashboxRestHandler set($fieldName, $value)
	 * @method \Bitrix\Sale\Internals\EO_CashboxRestHandler reset($fieldName)
	 * @method \Bitrix\Sale\Internals\EO_CashboxRestHandler unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Sale\Internals\EO_CashboxRestHandler wakeUp($data)
	 */
	class EO_CashboxRestHandler {
		/* @var \Bitrix\Sale\Internals\CashboxRestHandlerTable */
		static public $dataClass = '\Bitrix\Sale\Internals\CashboxRestHandlerTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Sale\Internals {
	/**
	 * EO_CashboxRestHandler_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getIdList()
	 * @method \string[] getNameList()
	 * @method \string[] fillName()
	 * @method \string[] getCodeList()
	 * @method \string[] fillCode()
	 * @method \int[] getSortList()
	 * @method \int[] fillSort()
	 * @method \string[] getSettingsList()
	 * @method \string[] fillSettings()
	 * @method \string[] getAppIdList()
	 * @method \string[] fillAppId()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Sale\Internals\EO_CashboxRestHandler $object)
	 * @method bool has(\Bitrix\Sale\Internals\EO_CashboxRestHandler $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Sale\Internals\EO_CashboxRestHandler getByPrimary($primary)
	 * @method \Bitrix\Sale\Internals\EO_CashboxRestHandler[] getAll()
	 * @method bool remove(\Bitrix\Sale\Internals\EO_CashboxRestHandler $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Sale\Internals\EO_CashboxRestHandler_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Sale\Internals\EO_CashboxRestHandler current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 * @method EO_CashboxRestHandler_Collection merge(?EO_CashboxRestHandler_Collection $collection)
	 * @method bool isEmpty()
	 */
	class EO_CashboxRestHandler_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Sale\Internals\CashboxRestHandlerTable */
		static public $dataClass = '\Bitrix\Sale\Internals\CashboxRestHandlerTable';
	}
}
namespace Bitrix\Sale\Internals {
	/**
	 * Common methods:
	 * ---------------
	 *
	 * @method EO_CashboxRestHandler_Result exec()
	 * @method \Bitrix\Sale\Internals\EO_CashboxRestHandler fetchObject()
	 * @method \Bitrix\Sale\Internals\EO_CashboxRestHandler_Collection fetchCollection()
	 *
	 * Custom methods:
	 * ---------------
	 *
	 */
	class EO_CashboxRestHandler_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Sale\Internals\EO_CashboxRestHandler fetchObject()
	 * @method \Bitrix\Sale\Internals\EO_CashboxRestHandler_Collection fetchCollection()
	 */
	class EO_CashboxRestHandler_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Sale\Internals\EO_CashboxRestHandler createObject($setDefaultValues = true)
	 * @method \Bitrix\Sale\Internals\EO_CashboxRestHandler_Collection createCollection()
	 * @method \Bitrix\Sale\Internals\EO_CashboxRestHandler wakeUpObject($row)
	 * @method \Bitrix\Sale\Internals\EO_CashboxRestHandler_Collection wakeUpCollection($rows)
	 */
	class EO_CashboxRestHandler_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Sale\Internals\CompanyTable:sale\lib\internals\company.php */
namespace Bitrix\Sale\Internals {
	/**
	 * EO_Company
	 * @see \Bitrix\Sale\Internals\CompanyTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getId()
	 * @method \Bitrix\Sale\Internals\EO_Company setId(\int|\Bitrix\Main\DB\SqlExpression $id)
	 * @method bool hasId()
	 * @method bool isIdFilled()
	 * @method bool isIdChanged()
	 * @method \string getName()
	 * @method \Bitrix\Sale\Internals\EO_Company setName(\string|\Bitrix\Main\DB\SqlExpression $name)
	 * @method bool hasName()
	 * @method bool isNameFilled()
	 * @method bool isNameChanged()
	 * @method \string remindActualName()
	 * @method \string requireName()
	 * @method \Bitrix\Sale\Internals\EO_Company resetName()
	 * @method \Bitrix\Sale\Internals\EO_Company unsetName()
	 * @method \string fillName()
	 * @method \string getLocationId()
	 * @method \Bitrix\Sale\Internals\EO_Company setLocationId(\string|\Bitrix\Main\DB\SqlExpression $locationId)
	 * @method bool hasLocationId()
	 * @method bool isLocationIdFilled()
	 * @method bool isLocationIdChanged()
	 * @method \string remindActualLocationId()
	 * @method \string requireLocationId()
	 * @method \Bitrix\Sale\Internals\EO_Company resetLocationId()
	 * @method \Bitrix\Sale\Internals\EO_Company unsetLocationId()
	 * @method \string fillLocationId()
	 * @method \Bitrix\Sale\Location\EO_Location getLocation()
	 * @method \Bitrix\Sale\Location\EO_Location remindActualLocation()
	 * @method \Bitrix\Sale\Location\EO_Location requireLocation()
	 * @method \Bitrix\Sale\Internals\EO_Company setLocation(\Bitrix\Sale\Location\EO_Location $object)
	 * @method \Bitrix\Sale\Internals\EO_Company resetLocation()
	 * @method \Bitrix\Sale\Internals\EO_Company unsetLocation()
	 * @method bool hasLocation()
	 * @method bool isLocationFilled()
	 * @method bool isLocationChanged()
	 * @method \Bitrix\Sale\Location\EO_Location fillLocation()
	 * @method \string getCode()
	 * @method \Bitrix\Sale\Internals\EO_Company setCode(\string|\Bitrix\Main\DB\SqlExpression $code)
	 * @method bool hasCode()
	 * @method bool isCodeFilled()
	 * @method bool isCodeChanged()
	 * @method \string remindActualCode()
	 * @method \string requireCode()
	 * @method \Bitrix\Sale\Internals\EO_Company resetCode()
	 * @method \Bitrix\Sale\Internals\EO_Company unsetCode()
	 * @method \string fillCode()
	 * @method \string getXmlId()
	 * @method \Bitrix\Sale\Internals\EO_Company setXmlId(\string|\Bitrix\Main\DB\SqlExpression $xmlId)
	 * @method bool hasXmlId()
	 * @method bool isXmlIdFilled()
	 * @method bool isXmlIdChanged()
	 * @method \string remindActualXmlId()
	 * @method \string requireXmlId()
	 * @method \Bitrix\Sale\Internals\EO_Company resetXmlId()
	 * @method \Bitrix\Sale\Internals\EO_Company unsetXmlId()
	 * @method \string fillXmlId()
	 * @method \string getActive()
	 * @method \Bitrix\Sale\Internals\EO_Company setActive(\string|\Bitrix\Main\DB\SqlExpression $active)
	 * @method bool hasActive()
	 * @method bool isActiveFilled()
	 * @method bool isActiveChanged()
	 * @method \string remindActualActive()
	 * @method \string requireActive()
	 * @method \Bitrix\Sale\Internals\EO_Company resetActive()
	 * @method \Bitrix\Sale\Internals\EO_Company unsetActive()
	 * @method \string fillActive()
	 * @method \Bitrix\Main\Type\DateTime getDateCreate()
	 * @method \Bitrix\Sale\Internals\EO_Company setDateCreate(\Bitrix\Main\Type\DateTime|\Bitrix\Main\DB\SqlExpression $dateCreate)
	 * @method bool hasDateCreate()
	 * @method bool isDateCreateFilled()
	 * @method bool isDateCreateChanged()
	 * @method \Bitrix\Main\Type\DateTime remindActualDateCreate()
	 * @method \Bitrix\Main\Type\DateTime requireDateCreate()
	 * @method \Bitrix\Sale\Internals\EO_Company resetDateCreate()
	 * @method \Bitrix\Sale\Internals\EO_Company unsetDateCreate()
	 * @method \Bitrix\Main\Type\DateTime fillDateCreate()
	 * @method \Bitrix\Main\Type\DateTime getDateModify()
	 * @method \Bitrix\Sale\Internals\EO_Company setDateModify(\Bitrix\Main\Type\DateTime|\Bitrix\Main\DB\SqlExpression $dateModify)
	 * @method bool hasDateModify()
	 * @method bool isDateModifyFilled()
	 * @method bool isDateModifyChanged()
	 * @method \Bitrix\Main\Type\DateTime remindActualDateModify()
	 * @method \Bitrix\Main\Type\DateTime requireDateModify()
	 * @method \Bitrix\Sale\Internals\EO_Company resetDateModify()
	 * @method \Bitrix\Sale\Internals\EO_Company unsetDateModify()
	 * @method \Bitrix\Main\Type\DateTime fillDateModify()
	 * @method \int getCreatedBy()
	 * @method \Bitrix\Sale\Internals\EO_Company setCreatedBy(\int|\Bitrix\Main\DB\SqlExpression $createdBy)
	 * @method bool hasCreatedBy()
	 * @method bool isCreatedByFilled()
	 * @method bool isCreatedByChanged()
	 * @method \int remindActualCreatedBy()
	 * @method \int requireCreatedBy()
	 * @method \Bitrix\Sale\Internals\EO_Company resetCreatedBy()
	 * @method \Bitrix\Sale\Internals\EO_Company unsetCreatedBy()
	 * @method \int fillCreatedBy()
	 * @method \Bitrix\Main\EO_User getCreated()
	 * @method \Bitrix\Main\EO_User remindActualCreated()
	 * @method \Bitrix\Main\EO_User requireCreated()
	 * @method \Bitrix\Sale\Internals\EO_Company setCreated(\Bitrix\Main\EO_User $object)
	 * @method \Bitrix\Sale\Internals\EO_Company resetCreated()
	 * @method \Bitrix\Sale\Internals\EO_Company unsetCreated()
	 * @method bool hasCreated()
	 * @method bool isCreatedFilled()
	 * @method bool isCreatedChanged()
	 * @method \Bitrix\Main\EO_User fillCreated()
	 * @method \int getModifiedBy()
	 * @method \Bitrix\Sale\Internals\EO_Company setModifiedBy(\int|\Bitrix\Main\DB\SqlExpression $modifiedBy)
	 * @method bool hasModifiedBy()
	 * @method bool isModifiedByFilled()
	 * @method bool isModifiedByChanged()
	 * @method \int remindActualModifiedBy()
	 * @method \int requireModifiedBy()
	 * @method \Bitrix\Sale\Internals\EO_Company resetModifiedBy()
	 * @method \Bitrix\Sale\Internals\EO_Company unsetModifiedBy()
	 * @method \int fillModifiedBy()
	 * @method \Bitrix\Main\EO_User getModified()
	 * @method \Bitrix\Main\EO_User remindActualModified()
	 * @method \Bitrix\Main\EO_User requireModified()
	 * @method \Bitrix\Sale\Internals\EO_Company setModified(\Bitrix\Main\EO_User $object)
	 * @method \Bitrix\Sale\Internals\EO_Company resetModified()
	 * @method \Bitrix\Sale\Internals\EO_Company unsetModified()
	 * @method bool hasModified()
	 * @method bool isModifiedFilled()
	 * @method bool isModifiedChanged()
	 * @method \Bitrix\Main\EO_User fillModified()
	 * @method \string getAddress()
	 * @method \Bitrix\Sale\Internals\EO_Company setAddress(\string|\Bitrix\Main\DB\SqlExpression $address)
	 * @method bool hasAddress()
	 * @method bool isAddressFilled()
	 * @method bool isAddressChanged()
	 * @method \string remindActualAddress()
	 * @method \string requireAddress()
	 * @method \Bitrix\Sale\Internals\EO_Company resetAddress()
	 * @method \Bitrix\Sale\Internals\EO_Company unsetAddress()
	 * @method \string fillAddress()
	 * @method \int getSort()
	 * @method \Bitrix\Sale\Internals\EO_Company setSort(\int|\Bitrix\Main\DB\SqlExpression $sort)
	 * @method bool hasSort()
	 * @method bool isSortFilled()
	 * @method bool isSortChanged()
	 * @method \int remindActualSort()
	 * @method \int requireSort()
	 * @method \Bitrix\Sale\Internals\EO_Company resetSort()
	 * @method \Bitrix\Sale\Internals\EO_Company unsetSort()
	 * @method \int fillSort()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Sale\Internals\EO_Company set($fieldName, $value)
	 * @method \Bitrix\Sale\Internals\EO_Company reset($fieldName)
	 * @method \Bitrix\Sale\Internals\EO_Company unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Sale\Internals\EO_Company wakeUp($data)
	 */
	class EO_Company {
		/* @var \Bitrix\Sale\Internals\CompanyTable */
		static public $dataClass = '\Bitrix\Sale\Internals\CompanyTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Sale\Internals {
	/**
	 * EO_Company_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getIdList()
	 * @method \string[] getNameList()
	 * @method \string[] fillName()
	 * @method \string[] getLocationIdList()
	 * @method \string[] fillLocationId()
	 * @method \Bitrix\Sale\Location\EO_Location[] getLocationList()
	 * @method \Bitrix\Sale\Internals\EO_Company_Collection getLocationCollection()
	 * @method \Bitrix\Sale\Location\EO_Location_Collection fillLocation()
	 * @method \string[] getCodeList()
	 * @method \string[] fillCode()
	 * @method \string[] getXmlIdList()
	 * @method \string[] fillXmlId()
	 * @method \string[] getActiveList()
	 * @method \string[] fillActive()
	 * @method \Bitrix\Main\Type\DateTime[] getDateCreateList()
	 * @method \Bitrix\Main\Type\DateTime[] fillDateCreate()
	 * @method \Bitrix\Main\Type\DateTime[] getDateModifyList()
	 * @method \Bitrix\Main\Type\DateTime[] fillDateModify()
	 * @method \int[] getCreatedByList()
	 * @method \int[] fillCreatedBy()
	 * @method \Bitrix\Main\EO_User[] getCreatedList()
	 * @method \Bitrix\Sale\Internals\EO_Company_Collection getCreatedCollection()
	 * @method \Bitrix\Main\EO_User_Collection fillCreated()
	 * @method \int[] getModifiedByList()
	 * @method \int[] fillModifiedBy()
	 * @method \Bitrix\Main\EO_User[] getModifiedList()
	 * @method \Bitrix\Sale\Internals\EO_Company_Collection getModifiedCollection()
	 * @method \Bitrix\Main\EO_User_Collection fillModified()
	 * @method \string[] getAddressList()
	 * @method \string[] fillAddress()
	 * @method \int[] getSortList()
	 * @method \int[] fillSort()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Sale\Internals\EO_Company $object)
	 * @method bool has(\Bitrix\Sale\Internals\EO_Company $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Sale\Internals\EO_Company getByPrimary($primary)
	 * @method \Bitrix\Sale\Internals\EO_Company[] getAll()
	 * @method bool remove(\Bitrix\Sale\Internals\EO_Company $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Sale\Internals\EO_Company_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Sale\Internals\EO_Company current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 * @method EO_Company_Collection merge(?EO_Company_Collection $collection)
	 * @method bool isEmpty()
	 */
	class EO_Company_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Sale\Internals\CompanyTable */
		static public $dataClass = '\Bitrix\Sale\Internals\CompanyTable';
	}
}
namespace Bitrix\Sale\Internals {
	/**
	 * Common methods:
	 * ---------------
	 *
	 * @method EO_Company_Result exec()
	 * @method \Bitrix\Sale\Internals\EO_Company fetchObject()
	 * @method \Bitrix\Sale\Internals\EO_Company_Collection fetchCollection()
	 *
	 * Custom methods:
	 * ---------------
	 *
	 */
	class EO_Company_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Sale\Internals\EO_Company fetchObject()
	 * @method \Bitrix\Sale\Internals\EO_Company_Collection fetchCollection()
	 */
	class EO_Company_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Sale\Internals\EO_Company createObject($setDefaultValues = true)
	 * @method \Bitrix\Sale\Internals\EO_Company_Collection createCollection()
	 * @method \Bitrix\Sale\Internals\EO_Company wakeUpObject($row)
	 * @method \Bitrix\Sale\Internals\EO_Company_Collection wakeUpCollection($rows)
	 */
	class EO_Company_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Sale\Internals\CompanyGroupTable:sale\lib\internals\companygroup.php */
namespace Bitrix\Sale\Internals {
	/**
	 * EO_CompanyGroup
	 * @see \Bitrix\Sale\Internals\CompanyGroupTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getId()
	 * @method \Bitrix\Sale\Internals\EO_CompanyGroup setId(\int|\Bitrix\Main\DB\SqlExpression $id)
	 * @method bool hasId()
	 * @method bool isIdFilled()
	 * @method bool isIdChanged()
	 * @method \int getCompanyId()
	 * @method \Bitrix\Sale\Internals\EO_CompanyGroup setCompanyId(\int|\Bitrix\Main\DB\SqlExpression $companyId)
	 * @method bool hasCompanyId()
	 * @method bool isCompanyIdFilled()
	 * @method bool isCompanyIdChanged()
	 * @method \int remindActualCompanyId()
	 * @method \int requireCompanyId()
	 * @method \Bitrix\Sale\Internals\EO_CompanyGroup resetCompanyId()
	 * @method \Bitrix\Sale\Internals\EO_CompanyGroup unsetCompanyId()
	 * @method \int fillCompanyId()
	 * @method \int getGroupId()
	 * @method \Bitrix\Sale\Internals\EO_CompanyGroup setGroupId(\int|\Bitrix\Main\DB\SqlExpression $groupId)
	 * @method bool hasGroupId()
	 * @method bool isGroupIdFilled()
	 * @method bool isGroupIdChanged()
	 * @method \int remindActualGroupId()
	 * @method \int requireGroupId()
	 * @method \Bitrix\Sale\Internals\EO_CompanyGroup resetGroupId()
	 * @method \Bitrix\Sale\Internals\EO_CompanyGroup unsetGroupId()
	 * @method \int fillGroupId()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Sale\Internals\EO_CompanyGroup set($fieldName, $value)
	 * @method \Bitrix\Sale\Internals\EO_CompanyGroup reset($fieldName)
	 * @method \Bitrix\Sale\Internals\EO_CompanyGroup unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Sale\Internals\EO_CompanyGroup wakeUp($data)
	 */
	class EO_CompanyGroup {
		/* @var \Bitrix\Sale\Internals\CompanyGroupTable */
		static public $dataClass = '\Bitrix\Sale\Internals\CompanyGroupTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Sale\Internals {
	/**
	 * EO_CompanyGroup_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getIdList()
	 * @method \int[] getCompanyIdList()
	 * @method \int[] fillCompanyId()
	 * @method \int[] getGroupIdList()
	 * @method \int[] fillGroupId()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Sale\Internals\EO_CompanyGroup $object)
	 * @method bool has(\Bitrix\Sale\Internals\EO_CompanyGroup $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Sale\Internals\EO_CompanyGroup getByPrimary($primary)
	 * @method \Bitrix\Sale\Internals\EO_CompanyGroup[] getAll()
	 * @method bool remove(\Bitrix\Sale\Internals\EO_CompanyGroup $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Sale\Internals\EO_CompanyGroup_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Sale\Internals\EO_CompanyGroup current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 * @method EO_CompanyGroup_Collection merge(?EO_CompanyGroup_Collection $collection)
	 * @method bool isEmpty()
	 */
	class EO_CompanyGroup_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Sale\Internals\CompanyGroupTable */
		static public $dataClass = '\Bitrix\Sale\Internals\CompanyGroupTable';
	}
}
namespace Bitrix\Sale\Internals {
	/**
	 * Common methods:
	 * ---------------
	 *
	 * @method EO_CompanyGroup_Result exec()
	 * @method \Bitrix\Sale\Internals\EO_CompanyGroup fetchObject()
	 * @method \Bitrix\Sale\Internals\EO_CompanyGroup_Collection fetchCollection()
	 *
	 * Custom methods:
	 * ---------------
	 *
	 */
	class EO_CompanyGroup_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Sale\Internals\EO_CompanyGroup fetchObject()
	 * @method \Bitrix\Sale\Internals\EO_CompanyGroup_Collection fetchCollection()
	 */
	class EO_CompanyGroup_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Sale\Internals\EO_CompanyGroup createObject($setDefaultValues = true)
	 * @method \Bitrix\Sale\Internals\EO_CompanyGroup_Collection createCollection()
	 * @method \Bitrix\Sale\Internals\EO_CompanyGroup wakeUpObject($row)
	 * @method \Bitrix\Sale\Internals\EO_CompanyGroup_Collection wakeUpCollection($rows)
	 */
	class EO_CompanyGroup_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Sale\Internals\CompanyLocationTable:sale\lib\internals\companylocation.php */
namespace Bitrix\Sale\Internals {
	/**
	 * EO_CompanyLocation
	 * @see \Bitrix\Sale\Internals\CompanyLocationTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getCompanyId()
	 * @method \Bitrix\Sale\Internals\EO_CompanyLocation setCompanyId(\int|\Bitrix\Main\DB\SqlExpression $companyId)
	 * @method bool hasCompanyId()
	 * @method bool isCompanyIdFilled()
	 * @method bool isCompanyIdChanged()
	 * @method \string getLocationCode()
	 * @method \Bitrix\Sale\Internals\EO_CompanyLocation setLocationCode(\string|\Bitrix\Main\DB\SqlExpression $locationCode)
	 * @method bool hasLocationCode()
	 * @method bool isLocationCodeFilled()
	 * @method bool isLocationCodeChanged()
	 * @method \string getLocationType()
	 * @method \Bitrix\Sale\Internals\EO_CompanyLocation setLocationType(\string|\Bitrix\Main\DB\SqlExpression $locationType)
	 * @method bool hasLocationType()
	 * @method bool isLocationTypeFilled()
	 * @method bool isLocationTypeChanged()
	 * @method \Bitrix\Sale\Location\EO_Location getLocation()
	 * @method \Bitrix\Sale\Location\EO_Location remindActualLocation()
	 * @method \Bitrix\Sale\Location\EO_Location requireLocation()
	 * @method \Bitrix\Sale\Internals\EO_CompanyLocation setLocation(\Bitrix\Sale\Location\EO_Location $object)
	 * @method \Bitrix\Sale\Internals\EO_CompanyLocation resetLocation()
	 * @method \Bitrix\Sale\Internals\EO_CompanyLocation unsetLocation()
	 * @method bool hasLocation()
	 * @method bool isLocationFilled()
	 * @method bool isLocationChanged()
	 * @method \Bitrix\Sale\Location\EO_Location fillLocation()
	 * @method \Bitrix\Sale\Location\EO_Group getGroup()
	 * @method \Bitrix\Sale\Location\EO_Group remindActualGroup()
	 * @method \Bitrix\Sale\Location\EO_Group requireGroup()
	 * @method \Bitrix\Sale\Internals\EO_CompanyLocation setGroup(\Bitrix\Sale\Location\EO_Group $object)
	 * @method \Bitrix\Sale\Internals\EO_CompanyLocation resetGroup()
	 * @method \Bitrix\Sale\Internals\EO_CompanyLocation unsetGroup()
	 * @method bool hasGroup()
	 * @method bool isGroupFilled()
	 * @method bool isGroupChanged()
	 * @method \Bitrix\Sale\Location\EO_Group fillGroup()
	 * @method \Bitrix\Sale\Internals\EO_Company getCompany()
	 * @method \Bitrix\Sale\Internals\EO_Company remindActualCompany()
	 * @method \Bitrix\Sale\Internals\EO_Company requireCompany()
	 * @method \Bitrix\Sale\Internals\EO_CompanyLocation setCompany(\Bitrix\Sale\Internals\EO_Company $object)
	 * @method \Bitrix\Sale\Internals\EO_CompanyLocation resetCompany()
	 * @method \Bitrix\Sale\Internals\EO_CompanyLocation unsetCompany()
	 * @method bool hasCompany()
	 * @method bool isCompanyFilled()
	 * @method bool isCompanyChanged()
	 * @method \Bitrix\Sale\Internals\EO_Company fillCompany()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Sale\Internals\EO_CompanyLocation set($fieldName, $value)
	 * @method \Bitrix\Sale\Internals\EO_CompanyLocation reset($fieldName)
	 * @method \Bitrix\Sale\Internals\EO_CompanyLocation unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Sale\Internals\EO_CompanyLocation wakeUp($data)
	 */
	class EO_CompanyLocation {
		/* @var \Bitrix\Sale\Internals\CompanyLocationTable */
		static public $dataClass = '\Bitrix\Sale\Internals\CompanyLocationTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Sale\Internals {
	/**
	 * EO_CompanyLocation_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getCompanyIdList()
	 * @method \string[] getLocationCodeList()
	 * @method \string[] getLocationTypeList()
	 * @method \Bitrix\Sale\Location\EO_Location[] getLocationList()
	 * @method \Bitrix\Sale\Internals\EO_CompanyLocation_Collection getLocationCollection()
	 * @method \Bitrix\Sale\Location\EO_Location_Collection fillLocation()
	 * @method \Bitrix\Sale\Location\EO_Group[] getGroupList()
	 * @method \Bitrix\Sale\Internals\EO_CompanyLocation_Collection getGroupCollection()
	 * @method \Bitrix\Sale\Location\EO_Group_Collection fillGroup()
	 * @method \Bitrix\Sale\Internals\EO_Company[] getCompanyList()
	 * @method \Bitrix\Sale\Internals\EO_CompanyLocation_Collection getCompanyCollection()
	 * @method \Bitrix\Sale\Internals\EO_Company_Collection fillCompany()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Sale\Internals\EO_CompanyLocation $object)
	 * @method bool has(\Bitrix\Sale\Internals\EO_CompanyLocation $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Sale\Internals\EO_CompanyLocation getByPrimary($primary)
	 * @method \Bitrix\Sale\Internals\EO_CompanyLocation[] getAll()
	 * @method bool remove(\Bitrix\Sale\Internals\EO_CompanyLocation $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Sale\Internals\EO_CompanyLocation_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Sale\Internals\EO_CompanyLocation current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 * @method EO_CompanyLocation_Collection merge(?EO_CompanyLocation_Collection $collection)
	 * @method bool isEmpty()
	 */
	class EO_CompanyLocation_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Sale\Internals\CompanyLocationTable */
		static public $dataClass = '\Bitrix\Sale\Internals\CompanyLocationTable';
	}
}
namespace Bitrix\Sale\Internals {
	/**
	 * Common methods:
	 * ---------------
	 *
	 * @method EO_CompanyLocation_Result exec()
	 * @method \Bitrix\Sale\Internals\EO_CompanyLocation fetchObject()
	 * @method \Bitrix\Sale\Internals\EO_CompanyLocation_Collection fetchCollection()
	 *
	 * Custom methods:
	 * ---------------
	 *
	 */
	class EO_CompanyLocation_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Sale\Internals\EO_CompanyLocation fetchObject()
	 * @method \Bitrix\Sale\Internals\EO_CompanyLocation_Collection fetchCollection()
	 */
	class EO_CompanyLocation_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Sale\Internals\EO_CompanyLocation createObject($setDefaultValues = true)
	 * @method \Bitrix\Sale\Internals\EO_CompanyLocation_Collection createCollection()
	 * @method \Bitrix\Sale\Internals\EO_CompanyLocation wakeUpObject($row)
	 * @method \Bitrix\Sale\Internals\EO_CompanyLocation_Collection wakeUpCollection($rows)
	 */
	class EO_CompanyLocation_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Sale\Internals\CompanyResponsibleGroupTable:sale\lib\internals\companyresponsiblegroup.php */
namespace Bitrix\Sale\Internals {
	/**
	 * EO_CompanyResponsibleGroup
	 * @see \Bitrix\Sale\Internals\CompanyResponsibleGroupTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getId()
	 * @method \Bitrix\Sale\Internals\EO_CompanyResponsibleGroup setId(\int|\Bitrix\Main\DB\SqlExpression $id)
	 * @method bool hasId()
	 * @method bool isIdFilled()
	 * @method bool isIdChanged()
	 * @method \int getCompanyId()
	 * @method \Bitrix\Sale\Internals\EO_CompanyResponsibleGroup setCompanyId(\int|\Bitrix\Main\DB\SqlExpression $companyId)
	 * @method bool hasCompanyId()
	 * @method bool isCompanyIdFilled()
	 * @method bool isCompanyIdChanged()
	 * @method \int remindActualCompanyId()
	 * @method \int requireCompanyId()
	 * @method \Bitrix\Sale\Internals\EO_CompanyResponsibleGroup resetCompanyId()
	 * @method \Bitrix\Sale\Internals\EO_CompanyResponsibleGroup unsetCompanyId()
	 * @method \int fillCompanyId()
	 * @method \int getGroupId()
	 * @method \Bitrix\Sale\Internals\EO_CompanyResponsibleGroup setGroupId(\int|\Bitrix\Main\DB\SqlExpression $groupId)
	 * @method bool hasGroupId()
	 * @method bool isGroupIdFilled()
	 * @method bool isGroupIdChanged()
	 * @method \int remindActualGroupId()
	 * @method \int requireGroupId()
	 * @method \Bitrix\Sale\Internals\EO_CompanyResponsibleGroup resetGroupId()
	 * @method \Bitrix\Sale\Internals\EO_CompanyResponsibleGroup unsetGroupId()
	 * @method \int fillGroupId()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Sale\Internals\EO_CompanyResponsibleGroup set($fieldName, $value)
	 * @method \Bitrix\Sale\Internals\EO_CompanyResponsibleGroup reset($fieldName)
	 * @method \Bitrix\Sale\Internals\EO_CompanyResponsibleGroup unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Sale\Internals\EO_CompanyResponsibleGroup wakeUp($data)
	 */
	class EO_CompanyResponsibleGroup {
		/* @var \Bitrix\Sale\Internals\CompanyResponsibleGroupTable */
		static public $dataClass = '\Bitrix\Sale\Internals\CompanyResponsibleGroupTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Sale\Internals {
	/**
	 * EO_CompanyResponsibleGroup_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getIdList()
	 * @method \int[] getCompanyIdList()
	 * @method \int[] fillCompanyId()
	 * @method \int[] getGroupIdList()
	 * @method \int[] fillGroupId()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Sale\Internals\EO_CompanyResponsibleGroup $object)
	 * @method bool has(\Bitrix\Sale\Internals\EO_CompanyResponsibleGroup $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Sale\Internals\EO_CompanyResponsibleGroup getByPrimary($primary)
	 * @method \Bitrix\Sale\Internals\EO_CompanyResponsibleGroup[] getAll()
	 * @method bool remove(\Bitrix\Sale\Internals\EO_CompanyResponsibleGroup $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Sale\Internals\EO_CompanyResponsibleGroup_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Sale\Internals\EO_CompanyResponsibleGroup current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 * @method EO_CompanyResponsibleGroup_Collection merge(?EO_CompanyResponsibleGroup_Collection $collection)
	 * @method bool isEmpty()
	 */
	class EO_CompanyResponsibleGroup_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Sale\Internals\CompanyResponsibleGroupTable */
		static public $dataClass = '\Bitrix\Sale\Internals\CompanyResponsibleGroupTable';
	}
}
namespace Bitrix\Sale\Internals {
	/**
	 * Common methods:
	 * ---------------
	 *
	 * @method EO_CompanyResponsibleGroup_Result exec()
	 * @method \Bitrix\Sale\Internals\EO_CompanyResponsibleGroup fetchObject()
	 * @method \Bitrix\Sale\Internals\EO_CompanyResponsibleGroup_Collection fetchCollection()
	 *
	 * Custom methods:
	 * ---------------
	 *
	 */
	class EO_CompanyResponsibleGroup_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Sale\Internals\EO_CompanyResponsibleGroup fetchObject()
	 * @method \Bitrix\Sale\Internals\EO_CompanyResponsibleGroup_Collection fetchCollection()
	 */
	class EO_CompanyResponsibleGroup_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Sale\Internals\EO_CompanyResponsibleGroup createObject($setDefaultValues = true)
	 * @method \Bitrix\Sale\Internals\EO_CompanyResponsibleGroup_Collection createCollection()
	 * @method \Bitrix\Sale\Internals\EO_CompanyResponsibleGroup wakeUpObject($row)
	 * @method \Bitrix\Sale\Internals\EO_CompanyResponsibleGroup_Collection wakeUpCollection($rows)
	 */
	class EO_CompanyResponsibleGroup_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Sale\Internals\CompanyServiceTable:sale\lib\internals\companyservice.php */
namespace Bitrix\Sale\Internals {
	/**
	 * EO_CompanyService
	 * @see \Bitrix\Sale\Internals\CompanyServiceTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getCompanyId()
	 * @method \Bitrix\Sale\Internals\EO_CompanyService setCompanyId(\int|\Bitrix\Main\DB\SqlExpression $companyId)
	 * @method bool hasCompanyId()
	 * @method bool isCompanyIdFilled()
	 * @method bool isCompanyIdChanged()
	 * @method \int getServiceId()
	 * @method \Bitrix\Sale\Internals\EO_CompanyService setServiceId(\int|\Bitrix\Main\DB\SqlExpression $serviceId)
	 * @method bool hasServiceId()
	 * @method bool isServiceIdFilled()
	 * @method bool isServiceIdChanged()
	 * @method \int getServiceType()
	 * @method \Bitrix\Sale\Internals\EO_CompanyService setServiceType(\int|\Bitrix\Main\DB\SqlExpression $serviceType)
	 * @method bool hasServiceType()
	 * @method bool isServiceTypeFilled()
	 * @method bool isServiceTypeChanged()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Sale\Internals\EO_CompanyService set($fieldName, $value)
	 * @method \Bitrix\Sale\Internals\EO_CompanyService reset($fieldName)
	 * @method \Bitrix\Sale\Internals\EO_CompanyService unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Sale\Internals\EO_CompanyService wakeUp($data)
	 */
	class EO_CompanyService {
		/* @var \Bitrix\Sale\Internals\CompanyServiceTable */
		static public $dataClass = '\Bitrix\Sale\Internals\CompanyServiceTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Sale\Internals {
	/**
	 * EO_CompanyService_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getCompanyIdList()
	 * @method \int[] getServiceIdList()
	 * @method \int[] getServiceTypeList()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Sale\Internals\EO_CompanyService $object)
	 * @method bool has(\Bitrix\Sale\Internals\EO_CompanyService $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Sale\Internals\EO_CompanyService getByPrimary($primary)
	 * @method \Bitrix\Sale\Internals\EO_CompanyService[] getAll()
	 * @method bool remove(\Bitrix\Sale\Internals\EO_CompanyService $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Sale\Internals\EO_CompanyService_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Sale\Internals\EO_CompanyService current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 * @method EO_CompanyService_Collection merge(?EO_CompanyService_Collection $collection)
	 * @method bool isEmpty()
	 */
	class EO_CompanyService_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Sale\Internals\CompanyServiceTable */
		static public $dataClass = '\Bitrix\Sale\Internals\CompanyServiceTable';
	}
}
namespace Bitrix\Sale\Internals {
	/**
	 * Common methods:
	 * ---------------
	 *
	 * @method EO_CompanyService_Result exec()
	 * @method \Bitrix\Sale\Internals\EO_CompanyService fetchObject()
	 * @method \Bitrix\Sale\Internals\EO_CompanyService_Collection fetchCollection()
	 *
	 * Custom methods:
	 * ---------------
	 *
	 */
	class EO_CompanyService_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Sale\Internals\EO_CompanyService fetchObject()
	 * @method \Bitrix\Sale\Internals\EO_CompanyService_Collection fetchCollection()
	 */
	class EO_CompanyService_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Sale\Internals\EO_CompanyService createObject($setDefaultValues = true)
	 * @method \Bitrix\Sale\Internals\EO_CompanyService_Collection createCollection()
	 * @method \Bitrix\Sale\Internals\EO_CompanyService wakeUpObject($row)
	 * @method \Bitrix\Sale\Internals\EO_CompanyService_Collection wakeUpCollection($rows)
	 */
	class EO_CompanyService_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Sale\Internals\CustomFieldsTable:sale\lib\internals\customfields.php */
namespace Bitrix\Sale\Internals {
	/**
	 * EO_CustomFields
	 * @see \Bitrix\Sale\Internals\CustomFieldsTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getId()
	 * @method \Bitrix\Sale\Internals\EO_CustomFields setId(\int|\Bitrix\Main\DB\SqlExpression $id)
	 * @method bool hasId()
	 * @method bool isIdFilled()
	 * @method bool isIdChanged()
	 * @method \int getEntityId()
	 * @method \Bitrix\Sale\Internals\EO_CustomFields setEntityId(\int|\Bitrix\Main\DB\SqlExpression $entityId)
	 * @method bool hasEntityId()
	 * @method bool isEntityIdFilled()
	 * @method bool isEntityIdChanged()
	 * @method \int remindActualEntityId()
	 * @method \int requireEntityId()
	 * @method \Bitrix\Sale\Internals\EO_CustomFields resetEntityId()
	 * @method \Bitrix\Sale\Internals\EO_CustomFields unsetEntityId()
	 * @method \int fillEntityId()
	 * @method \string getEntityType()
	 * @method \Bitrix\Sale\Internals\EO_CustomFields setEntityType(\string|\Bitrix\Main\DB\SqlExpression $entityType)
	 * @method bool hasEntityType()
	 * @method bool isEntityTypeFilled()
	 * @method bool isEntityTypeChanged()
	 * @method \string remindActualEntityType()
	 * @method \string requireEntityType()
	 * @method \Bitrix\Sale\Internals\EO_CustomFields resetEntityType()
	 * @method \Bitrix\Sale\Internals\EO_CustomFields unsetEntityType()
	 * @method \string fillEntityType()
	 * @method \string getEntityRegistryType()
	 * @method \Bitrix\Sale\Internals\EO_CustomFields setEntityRegistryType(\string|\Bitrix\Main\DB\SqlExpression $entityRegistryType)
	 * @method bool hasEntityRegistryType()
	 * @method bool isEntityRegistryTypeFilled()
	 * @method bool isEntityRegistryTypeChanged()
	 * @method \string remindActualEntityRegistryType()
	 * @method \string requireEntityRegistryType()
	 * @method \Bitrix\Sale\Internals\EO_CustomFields resetEntityRegistryType()
	 * @method \Bitrix\Sale\Internals\EO_CustomFields unsetEntityRegistryType()
	 * @method \string fillEntityRegistryType()
	 * @method \string getField()
	 * @method \Bitrix\Sale\Internals\EO_CustomFields setField(\string|\Bitrix\Main\DB\SqlExpression $field)
	 * @method bool hasField()
	 * @method bool isFieldFilled()
	 * @method bool isFieldChanged()
	 * @method \string remindActualField()
	 * @method \string requireField()
	 * @method \Bitrix\Sale\Internals\EO_CustomFields resetField()
	 * @method \Bitrix\Sale\Internals\EO_CustomFields unsetField()
	 * @method \string fillField()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Sale\Internals\EO_CustomFields set($fieldName, $value)
	 * @method \Bitrix\Sale\Internals\EO_CustomFields reset($fieldName)
	 * @method \Bitrix\Sale\Internals\EO_CustomFields unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Sale\Internals\EO_CustomFields wakeUp($data)
	 */
	class EO_CustomFields {
		/* @var \Bitrix\Sale\Internals\CustomFieldsTable */
		static public $dataClass = '\Bitrix\Sale\Internals\CustomFieldsTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Sale\Internals {
	/**
	 * EO_CustomFields_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getIdList()
	 * @method \int[] getEntityIdList()
	 * @method \int[] fillEntityId()
	 * @method \string[] getEntityTypeList()
	 * @method \string[] fillEntityType()
	 * @method \string[] getEntityRegistryTypeList()
	 * @method \string[] fillEntityRegistryType()
	 * @method \string[] getFieldList()
	 * @method \string[] fillField()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Sale\Internals\EO_CustomFields $object)
	 * @method bool has(\Bitrix\Sale\Internals\EO_CustomFields $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Sale\Internals\EO_CustomFields getByPrimary($primary)
	 * @method \Bitrix\Sale\Internals\EO_CustomFields[] getAll()
	 * @method bool remove(\Bitrix\Sale\Internals\EO_CustomFields $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Sale\Internals\EO_CustomFields_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Sale\Internals\EO_CustomFields current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 * @method EO_CustomFields_Collection merge(?EO_CustomFields_Collection $collection)
	 * @method bool isEmpty()
	 */
	class EO_CustomFields_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Sale\Internals\CustomFieldsTable */
		static public $dataClass = '\Bitrix\Sale\Internals\CustomFieldsTable';
	}
}
namespace Bitrix\Sale\Internals {
	/**
	 * Common methods:
	 * ---------------
	 *
	 * @method EO_CustomFields_Result exec()
	 * @method \Bitrix\Sale\Internals\EO_CustomFields fetchObject()
	 * @method \Bitrix\Sale\Internals\EO_CustomFields_Collection fetchCollection()
	 *
	 * Custom methods:
	 * ---------------
	 *
	 */
	class EO_CustomFields_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Sale\Internals\EO_CustomFields fetchObject()
	 * @method \Bitrix\Sale\Internals\EO_CustomFields_Collection fetchCollection()
	 */
	class EO_CustomFields_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Sale\Internals\EO_CustomFields createObject($setDefaultValues = true)
	 * @method \Bitrix\Sale\Internals\EO_CustomFields_Collection createCollection()
	 * @method \Bitrix\Sale\Internals\EO_CustomFields wakeUpObject($row)
	 * @method \Bitrix\Sale\Internals\EO_CustomFields_Collection wakeUpCollection($rows)
	 */
	class EO_CustomFields_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Sale\Internals\DeliveryPaySystemTable:sale\lib\internals\delivery_paysystem.php */
namespace Bitrix\Sale\Internals {
	/**
	 * EO_DeliveryPaySystem
	 * @see \Bitrix\Sale\Internals\DeliveryPaySystemTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getDeliveryId()
	 * @method \Bitrix\Sale\Internals\EO_DeliveryPaySystem setDeliveryId(\int|\Bitrix\Main\DB\SqlExpression $deliveryId)
	 * @method bool hasDeliveryId()
	 * @method bool isDeliveryIdFilled()
	 * @method bool isDeliveryIdChanged()
	 * @method \Bitrix\Sale\Delivery\Services\EO_NNM_Object getDelivery()
	 * @method \Bitrix\Sale\Delivery\Services\EO_NNM_Object remindActualDelivery()
	 * @method \Bitrix\Sale\Delivery\Services\EO_NNM_Object requireDelivery()
	 * @method \Bitrix\Sale\Internals\EO_DeliveryPaySystem setDelivery(\Bitrix\Sale\Delivery\Services\EO_NNM_Object $object)
	 * @method \Bitrix\Sale\Internals\EO_DeliveryPaySystem resetDelivery()
	 * @method \Bitrix\Sale\Internals\EO_DeliveryPaySystem unsetDelivery()
	 * @method bool hasDelivery()
	 * @method bool isDeliveryFilled()
	 * @method bool isDeliveryChanged()
	 * @method \Bitrix\Sale\Delivery\Services\EO_NNM_Object fillDelivery()
	 * @method \string getLinkDirection()
	 * @method \Bitrix\Sale\Internals\EO_DeliveryPaySystem setLinkDirection(\string|\Bitrix\Main\DB\SqlExpression $linkDirection)
	 * @method bool hasLinkDirection()
	 * @method bool isLinkDirectionFilled()
	 * @method bool isLinkDirectionChanged()
	 * @method \int getPaysystemId()
	 * @method \Bitrix\Sale\Internals\EO_DeliveryPaySystem setPaysystemId(\int|\Bitrix\Main\DB\SqlExpression $paysystemId)
	 * @method bool hasPaysystemId()
	 * @method bool isPaysystemIdFilled()
	 * @method bool isPaysystemIdChanged()
	 * @method \Bitrix\Sale\Internals\EO_PaySystemAction getPaysystem()
	 * @method \Bitrix\Sale\Internals\EO_PaySystemAction remindActualPaysystem()
	 * @method \Bitrix\Sale\Internals\EO_PaySystemAction requirePaysystem()
	 * @method \Bitrix\Sale\Internals\EO_DeliveryPaySystem setPaysystem(\Bitrix\Sale\Internals\EO_PaySystemAction $object)
	 * @method \Bitrix\Sale\Internals\EO_DeliveryPaySystem resetPaysystem()
	 * @method \Bitrix\Sale\Internals\EO_DeliveryPaySystem unsetPaysystem()
	 * @method bool hasPaysystem()
	 * @method bool isPaysystemFilled()
	 * @method bool isPaysystemChanged()
	 * @method \Bitrix\Sale\Internals\EO_PaySystemAction fillPaysystem()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Sale\Internals\EO_DeliveryPaySystem set($fieldName, $value)
	 * @method \Bitrix\Sale\Internals\EO_DeliveryPaySystem reset($fieldName)
	 * @method \Bitrix\Sale\Internals\EO_DeliveryPaySystem unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Sale\Internals\EO_DeliveryPaySystem wakeUp($data)
	 */
	class EO_DeliveryPaySystem {
		/* @var \Bitrix\Sale\Internals\DeliveryPaySystemTable */
		static public $dataClass = '\Bitrix\Sale\Internals\DeliveryPaySystemTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Sale\Internals {
	/**
	 * EO_DeliveryPaySystem_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getDeliveryIdList()
	 * @method \Bitrix\Sale\Delivery\Services\EO_NNM_Object[] getDeliveryList()
	 * @method \Bitrix\Sale\Internals\EO_DeliveryPaySystem_Collection getDeliveryCollection()
	 * @method \Bitrix\Sale\Delivery\Services\EO__Collection fillDelivery()
	 * @method \string[] getLinkDirectionList()
	 * @method \int[] getPaysystemIdList()
	 * @method \Bitrix\Sale\Internals\EO_PaySystemAction[] getPaysystemList()
	 * @method \Bitrix\Sale\Internals\EO_DeliveryPaySystem_Collection getPaysystemCollection()
	 * @method \Bitrix\Sale\Internals\EO_PaySystemAction_Collection fillPaysystem()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Sale\Internals\EO_DeliveryPaySystem $object)
	 * @method bool has(\Bitrix\Sale\Internals\EO_DeliveryPaySystem $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Sale\Internals\EO_DeliveryPaySystem getByPrimary($primary)
	 * @method \Bitrix\Sale\Internals\EO_DeliveryPaySystem[] getAll()
	 * @method bool remove(\Bitrix\Sale\Internals\EO_DeliveryPaySystem $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Sale\Internals\EO_DeliveryPaySystem_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Sale\Internals\EO_DeliveryPaySystem current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 * @method EO_DeliveryPaySystem_Collection merge(?EO_DeliveryPaySystem_Collection $collection)
	 * @method bool isEmpty()
	 */
	class EO_DeliveryPaySystem_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Sale\Internals\DeliveryPaySystemTable */
		static public $dataClass = '\Bitrix\Sale\Internals\DeliveryPaySystemTable';
	}
}
namespace Bitrix\Sale\Internals {
	/**
	 * Common methods:
	 * ---------------
	 *
	 * @method EO_DeliveryPaySystem_Result exec()
	 * @method \Bitrix\Sale\Internals\EO_DeliveryPaySystem fetchObject()
	 * @method \Bitrix\Sale\Internals\EO_DeliveryPaySystem_Collection fetchCollection()
	 *
	 * Custom methods:
	 * ---------------
	 *
	 */
	class EO_DeliveryPaySystem_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Sale\Internals\EO_DeliveryPaySystem fetchObject()
	 * @method \Bitrix\Sale\Internals\EO_DeliveryPaySystem_Collection fetchCollection()
	 */
	class EO_DeliveryPaySystem_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Sale\Internals\EO_DeliveryPaySystem createObject($setDefaultValues = true)
	 * @method \Bitrix\Sale\Internals\EO_DeliveryPaySystem_Collection createCollection()
	 * @method \Bitrix\Sale\Internals\EO_DeliveryPaySystem wakeUpObject($row)
	 * @method \Bitrix\Sale\Internals\EO_DeliveryPaySystem_Collection wakeUpCollection($rows)
	 */
	class EO_DeliveryPaySystem_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Sale\Internals\DiscountTable:sale\lib\internals\discount.php */
namespace Bitrix\Sale\Internals {
	/**
	 * EO_Discount
	 * @see \Bitrix\Sale\Internals\DiscountTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getId()
	 * @method \Bitrix\Sale\Internals\EO_Discount setId(\int|\Bitrix\Main\DB\SqlExpression $id)
	 * @method bool hasId()
	 * @method bool isIdFilled()
	 * @method bool isIdChanged()
	 * @method \string getXmlId()
	 * @method \Bitrix\Sale\Internals\EO_Discount setXmlId(\string|\Bitrix\Main\DB\SqlExpression $xmlId)
	 * @method bool hasXmlId()
	 * @method bool isXmlIdFilled()
	 * @method bool isXmlIdChanged()
	 * @method \string remindActualXmlId()
	 * @method \string requireXmlId()
	 * @method \Bitrix\Sale\Internals\EO_Discount resetXmlId()
	 * @method \Bitrix\Sale\Internals\EO_Discount unsetXmlId()
	 * @method \string fillXmlId()
	 * @method \string getLid()
	 * @method \Bitrix\Sale\Internals\EO_Discount setLid(\string|\Bitrix\Main\DB\SqlExpression $lid)
	 * @method bool hasLid()
	 * @method bool isLidFilled()
	 * @method bool isLidChanged()
	 * @method \string remindActualLid()
	 * @method \string requireLid()
	 * @method \Bitrix\Sale\Internals\EO_Discount resetLid()
	 * @method \Bitrix\Sale\Internals\EO_Discount unsetLid()
	 * @method \string fillLid()
	 * @method \string getName()
	 * @method \Bitrix\Sale\Internals\EO_Discount setName(\string|\Bitrix\Main\DB\SqlExpression $name)
	 * @method bool hasName()
	 * @method bool isNameFilled()
	 * @method bool isNameChanged()
	 * @method \string remindActualName()
	 * @method \string requireName()
	 * @method \Bitrix\Sale\Internals\EO_Discount resetName()
	 * @method \Bitrix\Sale\Internals\EO_Discount unsetName()
	 * @method \string fillName()
	 * @method \float getPriceFrom()
	 * @method \Bitrix\Sale\Internals\EO_Discount setPriceFrom(\float|\Bitrix\Main\DB\SqlExpression $priceFrom)
	 * @method bool hasPriceFrom()
	 * @method bool isPriceFromFilled()
	 * @method bool isPriceFromChanged()
	 * @method \float remindActualPriceFrom()
	 * @method \float requirePriceFrom()
	 * @method \Bitrix\Sale\Internals\EO_Discount resetPriceFrom()
	 * @method \Bitrix\Sale\Internals\EO_Discount unsetPriceFrom()
	 * @method \float fillPriceFrom()
	 * @method \float getPriceTo()
	 * @method \Bitrix\Sale\Internals\EO_Discount setPriceTo(\float|\Bitrix\Main\DB\SqlExpression $priceTo)
	 * @method bool hasPriceTo()
	 * @method bool isPriceToFilled()
	 * @method bool isPriceToChanged()
	 * @method \float remindActualPriceTo()
	 * @method \float requirePriceTo()
	 * @method \Bitrix\Sale\Internals\EO_Discount resetPriceTo()
	 * @method \Bitrix\Sale\Internals\EO_Discount unsetPriceTo()
	 * @method \float fillPriceTo()
	 * @method \string getCurrency()
	 * @method \Bitrix\Sale\Internals\EO_Discount setCurrency(\string|\Bitrix\Main\DB\SqlExpression $currency)
	 * @method bool hasCurrency()
	 * @method bool isCurrencyFilled()
	 * @method bool isCurrencyChanged()
	 * @method \string remindActualCurrency()
	 * @method \string requireCurrency()
	 * @method \Bitrix\Sale\Internals\EO_Discount resetCurrency()
	 * @method \Bitrix\Sale\Internals\EO_Discount unsetCurrency()
	 * @method \string fillCurrency()
	 * @method \float getDiscountValue()
	 * @method \Bitrix\Sale\Internals\EO_Discount setDiscountValue(\float|\Bitrix\Main\DB\SqlExpression $discountValue)
	 * @method bool hasDiscountValue()
	 * @method bool isDiscountValueFilled()
	 * @method bool isDiscountValueChanged()
	 * @method \float remindActualDiscountValue()
	 * @method \float requireDiscountValue()
	 * @method \Bitrix\Sale\Internals\EO_Discount resetDiscountValue()
	 * @method \Bitrix\Sale\Internals\EO_Discount unsetDiscountValue()
	 * @method \float fillDiscountValue()
	 * @method \string getDiscountType()
	 * @method \Bitrix\Sale\Internals\EO_Discount setDiscountType(\string|\Bitrix\Main\DB\SqlExpression $discountType)
	 * @method bool hasDiscountType()
	 * @method bool isDiscountTypeFilled()
	 * @method bool isDiscountTypeChanged()
	 * @method \string remindActualDiscountType()
	 * @method \string requireDiscountType()
	 * @method \Bitrix\Sale\Internals\EO_Discount resetDiscountType()
	 * @method \Bitrix\Sale\Internals\EO_Discount unsetDiscountType()
	 * @method \string fillDiscountType()
	 * @method \boolean getActive()
	 * @method \Bitrix\Sale\Internals\EO_Discount setActive(\boolean|\Bitrix\Main\DB\SqlExpression $active)
	 * @method bool hasActive()
	 * @method bool isActiveFilled()
	 * @method bool isActiveChanged()
	 * @method \boolean remindActualActive()
	 * @method \boolean requireActive()
	 * @method \Bitrix\Sale\Internals\EO_Discount resetActive()
	 * @method \Bitrix\Sale\Internals\EO_Discount unsetActive()
	 * @method \boolean fillActive()
	 * @method \int getSort()
	 * @method \Bitrix\Sale\Internals\EO_Discount setSort(\int|\Bitrix\Main\DB\SqlExpression $sort)
	 * @method bool hasSort()
	 * @method bool isSortFilled()
	 * @method bool isSortChanged()
	 * @method \int remindActualSort()
	 * @method \int requireSort()
	 * @method \Bitrix\Sale\Internals\EO_Discount resetSort()
	 * @method \Bitrix\Sale\Internals\EO_Discount unsetSort()
	 * @method \int fillSort()
	 * @method \Bitrix\Main\Type\DateTime getActiveFrom()
	 * @method \Bitrix\Sale\Internals\EO_Discount setActiveFrom(\Bitrix\Main\Type\DateTime|\Bitrix\Main\DB\SqlExpression $activeFrom)
	 * @method bool hasActiveFrom()
	 * @method bool isActiveFromFilled()
	 * @method bool isActiveFromChanged()
	 * @method \Bitrix\Main\Type\DateTime remindActualActiveFrom()
	 * @method \Bitrix\Main\Type\DateTime requireActiveFrom()
	 * @method \Bitrix\Sale\Internals\EO_Discount resetActiveFrom()
	 * @method \Bitrix\Sale\Internals\EO_Discount unsetActiveFrom()
	 * @method \Bitrix\Main\Type\DateTime fillActiveFrom()
	 * @method \Bitrix\Main\Type\DateTime getActiveTo()
	 * @method \Bitrix\Sale\Internals\EO_Discount setActiveTo(\Bitrix\Main\Type\DateTime|\Bitrix\Main\DB\SqlExpression $activeTo)
	 * @method bool hasActiveTo()
	 * @method bool isActiveToFilled()
	 * @method bool isActiveToChanged()
	 * @method \Bitrix\Main\Type\DateTime remindActualActiveTo()
	 * @method \Bitrix\Main\Type\DateTime requireActiveTo()
	 * @method \Bitrix\Sale\Internals\EO_Discount resetActiveTo()
	 * @method \Bitrix\Sale\Internals\EO_Discount unsetActiveTo()
	 * @method \Bitrix\Main\Type\DateTime fillActiveTo()
	 * @method \Bitrix\Main\Type\DateTime getTimestampX()
	 * @method \Bitrix\Sale\Internals\EO_Discount setTimestampX(\Bitrix\Main\Type\DateTime|\Bitrix\Main\DB\SqlExpression $timestampX)
	 * @method bool hasTimestampX()
	 * @method bool isTimestampXFilled()
	 * @method bool isTimestampXChanged()
	 * @method \Bitrix\Main\Type\DateTime remindActualTimestampX()
	 * @method \Bitrix\Main\Type\DateTime requireTimestampX()
	 * @method \Bitrix\Sale\Internals\EO_Discount resetTimestampX()
	 * @method \Bitrix\Sale\Internals\EO_Discount unsetTimestampX()
	 * @method \Bitrix\Main\Type\DateTime fillTimestampX()
	 * @method \int getModifiedBy()
	 * @method \Bitrix\Sale\Internals\EO_Discount setModifiedBy(\int|\Bitrix\Main\DB\SqlExpression $modifiedBy)
	 * @method bool hasModifiedBy()
	 * @method bool isModifiedByFilled()
	 * @method bool isModifiedByChanged()
	 * @method \int remindActualModifiedBy()
	 * @method \int requireModifiedBy()
	 * @method \Bitrix\Sale\Internals\EO_Discount resetModifiedBy()
	 * @method \Bitrix\Sale\Internals\EO_Discount unsetModifiedBy()
	 * @method \int fillModifiedBy()
	 * @method \Bitrix\Main\Type\DateTime getDateCreate()
	 * @method \Bitrix\Sale\Internals\EO_Discount setDateCreate(\Bitrix\Main\Type\DateTime|\Bitrix\Main\DB\SqlExpression $dateCreate)
	 * @method bool hasDateCreate()
	 * @method bool isDateCreateFilled()
	 * @method bool isDateCreateChanged()
	 * @method \Bitrix\Main\Type\DateTime remindActualDateCreate()
	 * @method \Bitrix\Main\Type\DateTime requireDateCreate()
	 * @method \Bitrix\Sale\Internals\EO_Discount resetDateCreate()
	 * @method \Bitrix\Sale\Internals\EO_Discount unsetDateCreate()
	 * @method \Bitrix\Main\Type\DateTime fillDateCreate()
	 * @method \int getCreatedBy()
	 * @method \Bitrix\Sale\Internals\EO_Discount setCreatedBy(\int|\Bitrix\Main\DB\SqlExpression $createdBy)
	 * @method bool hasCreatedBy()
	 * @method bool isCreatedByFilled()
	 * @method bool isCreatedByChanged()
	 * @method \int remindActualCreatedBy()
	 * @method \int requireCreatedBy()
	 * @method \Bitrix\Sale\Internals\EO_Discount resetCreatedBy()
	 * @method \Bitrix\Sale\Internals\EO_Discount unsetCreatedBy()
	 * @method \int fillCreatedBy()
	 * @method \int getPriority()
	 * @method \Bitrix\Sale\Internals\EO_Discount setPriority(\int|\Bitrix\Main\DB\SqlExpression $priority)
	 * @method bool hasPriority()
	 * @method bool isPriorityFilled()
	 * @method bool isPriorityChanged()
	 * @method \int remindActualPriority()
	 * @method \int requirePriority()
	 * @method \Bitrix\Sale\Internals\EO_Discount resetPriority()
	 * @method \Bitrix\Sale\Internals\EO_Discount unsetPriority()
	 * @method \int fillPriority()
	 * @method \boolean getLastDiscount()
	 * @method \Bitrix\Sale\Internals\EO_Discount setLastDiscount(\boolean|\Bitrix\Main\DB\SqlExpression $lastDiscount)
	 * @method bool hasLastDiscount()
	 * @method bool isLastDiscountFilled()
	 * @method bool isLastDiscountChanged()
	 * @method \boolean remindActualLastDiscount()
	 * @method \boolean requireLastDiscount()
	 * @method \Bitrix\Sale\Internals\EO_Discount resetLastDiscount()
	 * @method \Bitrix\Sale\Internals\EO_Discount unsetLastDiscount()
	 * @method \boolean fillLastDiscount()
	 * @method \boolean getLastLevelDiscount()
	 * @method \Bitrix\Sale\Internals\EO_Discount setLastLevelDiscount(\boolean|\Bitrix\Main\DB\SqlExpression $lastLevelDiscount)
	 * @method bool hasLastLevelDiscount()
	 * @method bool isLastLevelDiscountFilled()
	 * @method bool isLastLevelDiscountChanged()
	 * @method \boolean remindActualLastLevelDiscount()
	 * @method \boolean requireLastLevelDiscount()
	 * @method \Bitrix\Sale\Internals\EO_Discount resetLastLevelDiscount()
	 * @method \Bitrix\Sale\Internals\EO_Discount unsetLastLevelDiscount()
	 * @method \boolean fillLastLevelDiscount()
	 * @method \string getVersion()
	 * @method \Bitrix\Sale\Internals\EO_Discount setVersion(\string|\Bitrix\Main\DB\SqlExpression $version)
	 * @method bool hasVersion()
	 * @method bool isVersionFilled()
	 * @method bool isVersionChanged()
	 * @method \string remindActualVersion()
	 * @method \string requireVersion()
	 * @method \Bitrix\Sale\Internals\EO_Discount resetVersion()
	 * @method \Bitrix\Sale\Internals\EO_Discount unsetVersion()
	 * @method \string fillVersion()
	 * @method \string getConditionsList()
	 * @method \Bitrix\Sale\Internals\EO_Discount setConditionsList(\string|\Bitrix\Main\DB\SqlExpression $conditionsList)
	 * @method bool hasConditionsList()
	 * @method bool isConditionsListFilled()
	 * @method bool isConditionsListChanged()
	 * @method \string remindActualConditionsList()
	 * @method \string requireConditionsList()
	 * @method \Bitrix\Sale\Internals\EO_Discount resetConditionsList()
	 * @method \Bitrix\Sale\Internals\EO_Discount unsetConditionsList()
	 * @method \string fillConditionsList()
	 * @method \string getConditions()
	 * @method \string remindActualConditions()
	 * @method \string requireConditions()
	 * @method bool hasConditions()
	 * @method bool isConditionsFilled()
	 * @method \Bitrix\Sale\Internals\EO_Discount unsetConditions()
	 * @method \string fillConditions()
	 * @method \string getUnpack()
	 * @method \Bitrix\Sale\Internals\EO_Discount setUnpack(\string|\Bitrix\Main\DB\SqlExpression $unpack)
	 * @method bool hasUnpack()
	 * @method bool isUnpackFilled()
	 * @method bool isUnpackChanged()
	 * @method \string remindActualUnpack()
	 * @method \string requireUnpack()
	 * @method \Bitrix\Sale\Internals\EO_Discount resetUnpack()
	 * @method \Bitrix\Sale\Internals\EO_Discount unsetUnpack()
	 * @method \string fillUnpack()
	 * @method \string getActionsList()
	 * @method \Bitrix\Sale\Internals\EO_Discount setActionsList(\string|\Bitrix\Main\DB\SqlExpression $actionsList)
	 * @method bool hasActionsList()
	 * @method bool isActionsListFilled()
	 * @method bool isActionsListChanged()
	 * @method \string remindActualActionsList()
	 * @method \string requireActionsList()
	 * @method \Bitrix\Sale\Internals\EO_Discount resetActionsList()
	 * @method \Bitrix\Sale\Internals\EO_Discount unsetActionsList()
	 * @method \string fillActionsList()
	 * @method \string getActions()
	 * @method \string remindActualActions()
	 * @method \string requireActions()
	 * @method bool hasActions()
	 * @method bool isActionsFilled()
	 * @method \Bitrix\Sale\Internals\EO_Discount unsetActions()
	 * @method \string fillActions()
	 * @method \string getApplication()
	 * @method \Bitrix\Sale\Internals\EO_Discount setApplication(\string|\Bitrix\Main\DB\SqlExpression $application)
	 * @method bool hasApplication()
	 * @method bool isApplicationFilled()
	 * @method bool isApplicationChanged()
	 * @method \string remindActualApplication()
	 * @method \string requireApplication()
	 * @method \Bitrix\Sale\Internals\EO_Discount resetApplication()
	 * @method \Bitrix\Sale\Internals\EO_Discount unsetApplication()
	 * @method \string fillApplication()
	 * @method \string getPredictionText()
	 * @method \Bitrix\Sale\Internals\EO_Discount setPredictionText(\string|\Bitrix\Main\DB\SqlExpression $predictionText)
	 * @method bool hasPredictionText()
	 * @method bool isPredictionTextFilled()
	 * @method bool isPredictionTextChanged()
	 * @method \string remindActualPredictionText()
	 * @method \string requirePredictionText()
	 * @method \Bitrix\Sale\Internals\EO_Discount resetPredictionText()
	 * @method \Bitrix\Sale\Internals\EO_Discount unsetPredictionText()
	 * @method \string fillPredictionText()
	 * @method \string getPredictionsApp()
	 * @method \Bitrix\Sale\Internals\EO_Discount setPredictionsApp(\string|\Bitrix\Main\DB\SqlExpression $predictionsApp)
	 * @method bool hasPredictionsApp()
	 * @method bool isPredictionsAppFilled()
	 * @method bool isPredictionsAppChanged()
	 * @method \string remindActualPredictionsApp()
	 * @method \string requirePredictionsApp()
	 * @method \Bitrix\Sale\Internals\EO_Discount resetPredictionsApp()
	 * @method \Bitrix\Sale\Internals\EO_Discount unsetPredictionsApp()
	 * @method \string fillPredictionsApp()
	 * @method \string getPredictionsList()
	 * @method \Bitrix\Sale\Internals\EO_Discount setPredictionsList(\string|\Bitrix\Main\DB\SqlExpression $predictionsList)
	 * @method bool hasPredictionsList()
	 * @method bool isPredictionsListFilled()
	 * @method bool isPredictionsListChanged()
	 * @method \string remindActualPredictionsList()
	 * @method \string requirePredictionsList()
	 * @method \Bitrix\Sale\Internals\EO_Discount resetPredictionsList()
	 * @method \Bitrix\Sale\Internals\EO_Discount unsetPredictionsList()
	 * @method \string fillPredictionsList()
	 * @method \string getPredictions()
	 * @method \string remindActualPredictions()
	 * @method \string requirePredictions()
	 * @method bool hasPredictions()
	 * @method bool isPredictionsFilled()
	 * @method \Bitrix\Sale\Internals\EO_Discount unsetPredictions()
	 * @method \string fillPredictions()
	 * @method \boolean getUseCoupons()
	 * @method \Bitrix\Sale\Internals\EO_Discount setUseCoupons(\boolean|\Bitrix\Main\DB\SqlExpression $useCoupons)
	 * @method bool hasUseCoupons()
	 * @method bool isUseCouponsFilled()
	 * @method bool isUseCouponsChanged()
	 * @method \boolean remindActualUseCoupons()
	 * @method \boolean requireUseCoupons()
	 * @method \Bitrix\Sale\Internals\EO_Discount resetUseCoupons()
	 * @method \Bitrix\Sale\Internals\EO_Discount unsetUseCoupons()
	 * @method \boolean fillUseCoupons()
	 * @method \string getExecuteModule()
	 * @method \Bitrix\Sale\Internals\EO_Discount setExecuteModule(\string|\Bitrix\Main\DB\SqlExpression $executeModule)
	 * @method bool hasExecuteModule()
	 * @method bool isExecuteModuleFilled()
	 * @method bool isExecuteModuleChanged()
	 * @method \string remindActualExecuteModule()
	 * @method \string requireExecuteModule()
	 * @method \Bitrix\Sale\Internals\EO_Discount resetExecuteModule()
	 * @method \Bitrix\Sale\Internals\EO_Discount unsetExecuteModule()
	 * @method \string fillExecuteModule()
	 * @method \int getExecuteMode()
	 * @method \Bitrix\Sale\Internals\EO_Discount setExecuteMode(\int|\Bitrix\Main\DB\SqlExpression $executeMode)
	 * @method bool hasExecuteMode()
	 * @method bool isExecuteModeFilled()
	 * @method bool isExecuteModeChanged()
	 * @method \int remindActualExecuteMode()
	 * @method \int requireExecuteMode()
	 * @method \Bitrix\Sale\Internals\EO_Discount resetExecuteMode()
	 * @method \Bitrix\Sale\Internals\EO_Discount unsetExecuteMode()
	 * @method \int fillExecuteMode()
	 * @method \boolean getHasIndex()
	 * @method \Bitrix\Sale\Internals\EO_Discount setHasIndex(\boolean|\Bitrix\Main\DB\SqlExpression $hasIndex)
	 * @method bool hasHasIndex()
	 * @method bool isHasIndexFilled()
	 * @method bool isHasIndexChanged()
	 * @method \boolean remindActualHasIndex()
	 * @method \boolean requireHasIndex()
	 * @method \Bitrix\Sale\Internals\EO_Discount resetHasIndex()
	 * @method \Bitrix\Sale\Internals\EO_Discount unsetHasIndex()
	 * @method \boolean fillHasIndex()
	 * @method \string getPresetId()
	 * @method \Bitrix\Sale\Internals\EO_Discount setPresetId(\string|\Bitrix\Main\DB\SqlExpression $presetId)
	 * @method bool hasPresetId()
	 * @method bool isPresetIdFilled()
	 * @method bool isPresetIdChanged()
	 * @method \string remindActualPresetId()
	 * @method \string requirePresetId()
	 * @method \Bitrix\Sale\Internals\EO_Discount resetPresetId()
	 * @method \Bitrix\Sale\Internals\EO_Discount unsetPresetId()
	 * @method \string fillPresetId()
	 * @method \string getShortDescriptionStructure()
	 * @method \Bitrix\Sale\Internals\EO_Discount setShortDescriptionStructure(\string|\Bitrix\Main\DB\SqlExpression $shortDescriptionStructure)
	 * @method bool hasShortDescriptionStructure()
	 * @method bool isShortDescriptionStructureFilled()
	 * @method bool isShortDescriptionStructureChanged()
	 * @method \string remindActualShortDescriptionStructure()
	 * @method \string requireShortDescriptionStructure()
	 * @method \Bitrix\Sale\Internals\EO_Discount resetShortDescriptionStructure()
	 * @method \Bitrix\Sale\Internals\EO_Discount unsetShortDescriptionStructure()
	 * @method \string fillShortDescriptionStructure()
	 * @method \string getShortDescription()
	 * @method \string remindActualShortDescription()
	 * @method \string requireShortDescription()
	 * @method bool hasShortDescription()
	 * @method bool isShortDescriptionFilled()
	 * @method \Bitrix\Sale\Internals\EO_Discount unsetShortDescription()
	 * @method \string fillShortDescription()
	 * @method \Bitrix\Main\EO_User getCreatedByUser()
	 * @method \Bitrix\Main\EO_User remindActualCreatedByUser()
	 * @method \Bitrix\Main\EO_User requireCreatedByUser()
	 * @method \Bitrix\Sale\Internals\EO_Discount setCreatedByUser(\Bitrix\Main\EO_User $object)
	 * @method \Bitrix\Sale\Internals\EO_Discount resetCreatedByUser()
	 * @method \Bitrix\Sale\Internals\EO_Discount unsetCreatedByUser()
	 * @method bool hasCreatedByUser()
	 * @method bool isCreatedByUserFilled()
	 * @method bool isCreatedByUserChanged()
	 * @method \Bitrix\Main\EO_User fillCreatedByUser()
	 * @method \Bitrix\Main\EO_User getModifiedByUser()
	 * @method \Bitrix\Main\EO_User remindActualModifiedByUser()
	 * @method \Bitrix\Main\EO_User requireModifiedByUser()
	 * @method \Bitrix\Sale\Internals\EO_Discount setModifiedByUser(\Bitrix\Main\EO_User $object)
	 * @method \Bitrix\Sale\Internals\EO_Discount resetModifiedByUser()
	 * @method \Bitrix\Sale\Internals\EO_Discount unsetModifiedByUser()
	 * @method bool hasModifiedByUser()
	 * @method bool isModifiedByUserFilled()
	 * @method bool isModifiedByUserChanged()
	 * @method \Bitrix\Main\EO_User fillModifiedByUser()
	 * @method \Bitrix\Sale\Internals\EO_DiscountCoupon getCoupon()
	 * @method \Bitrix\Sale\Internals\EO_DiscountCoupon remindActualCoupon()
	 * @method \Bitrix\Sale\Internals\EO_DiscountCoupon requireCoupon()
	 * @method \Bitrix\Sale\Internals\EO_Discount setCoupon(\Bitrix\Sale\Internals\EO_DiscountCoupon $object)
	 * @method \Bitrix\Sale\Internals\EO_Discount resetCoupon()
	 * @method \Bitrix\Sale\Internals\EO_Discount unsetCoupon()
	 * @method bool hasCoupon()
	 * @method bool isCouponFilled()
	 * @method bool isCouponChanged()
	 * @method \Bitrix\Sale\Internals\EO_DiscountCoupon fillCoupon()
	 * @method \Bitrix\Sale\Internals\EO_DiscountEntities getDiscountEntity()
	 * @method \Bitrix\Sale\Internals\EO_DiscountEntities remindActualDiscountEntity()
	 * @method \Bitrix\Sale\Internals\EO_DiscountEntities requireDiscountEntity()
	 * @method \Bitrix\Sale\Internals\EO_Discount setDiscountEntity(\Bitrix\Sale\Internals\EO_DiscountEntities $object)
	 * @method \Bitrix\Sale\Internals\EO_Discount resetDiscountEntity()
	 * @method \Bitrix\Sale\Internals\EO_Discount unsetDiscountEntity()
	 * @method bool hasDiscountEntity()
	 * @method bool isDiscountEntityFilled()
	 * @method bool isDiscountEntityChanged()
	 * @method \Bitrix\Sale\Internals\EO_DiscountEntities fillDiscountEntity()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Sale\Internals\EO_Discount set($fieldName, $value)
	 * @method \Bitrix\Sale\Internals\EO_Discount reset($fieldName)
	 * @method \Bitrix\Sale\Internals\EO_Discount unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Sale\Internals\EO_Discount wakeUp($data)
	 */
	class EO_Discount {
		/* @var \Bitrix\Sale\Internals\DiscountTable */
		static public $dataClass = '\Bitrix\Sale\Internals\DiscountTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Sale\Internals {
	/**
	 * EO_Discount_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getIdList()
	 * @method \string[] getXmlIdList()
	 * @method \string[] fillXmlId()
	 * @method \string[] getLidList()
	 * @method \string[] fillLid()
	 * @method \string[] getNameList()
	 * @method \string[] fillName()
	 * @method \float[] getPriceFromList()
	 * @method \float[] fillPriceFrom()
	 * @method \float[] getPriceToList()
	 * @method \float[] fillPriceTo()
	 * @method \string[] getCurrencyList()
	 * @method \string[] fillCurrency()
	 * @method \float[] getDiscountValueList()
	 * @method \float[] fillDiscountValue()
	 * @method \string[] getDiscountTypeList()
	 * @method \string[] fillDiscountType()
	 * @method \boolean[] getActiveList()
	 * @method \boolean[] fillActive()
	 * @method \int[] getSortList()
	 * @method \int[] fillSort()
	 * @method \Bitrix\Main\Type\DateTime[] getActiveFromList()
	 * @method \Bitrix\Main\Type\DateTime[] fillActiveFrom()
	 * @method \Bitrix\Main\Type\DateTime[] getActiveToList()
	 * @method \Bitrix\Main\Type\DateTime[] fillActiveTo()
	 * @method \Bitrix\Main\Type\DateTime[] getTimestampXList()
	 * @method \Bitrix\Main\Type\DateTime[] fillTimestampX()
	 * @method \int[] getModifiedByList()
	 * @method \int[] fillModifiedBy()
	 * @method \Bitrix\Main\Type\DateTime[] getDateCreateList()
	 * @method \Bitrix\Main\Type\DateTime[] fillDateCreate()
	 * @method \int[] getCreatedByList()
	 * @method \int[] fillCreatedBy()
	 * @method \int[] getPriorityList()
	 * @method \int[] fillPriority()
	 * @method \boolean[] getLastDiscountList()
	 * @method \boolean[] fillLastDiscount()
	 * @method \boolean[] getLastLevelDiscountList()
	 * @method \boolean[] fillLastLevelDiscount()
	 * @method \string[] getVersionList()
	 * @method \string[] fillVersion()
	 * @method \string[] getConditionsListList()
	 * @method \string[] fillConditionsList()
	 * @method \string[] getConditionsList()
	 * @method \string[] fillConditions()
	 * @method \string[] getUnpackList()
	 * @method \string[] fillUnpack()
	 * @method \string[] getActionsListList()
	 * @method \string[] fillActionsList()
	 * @method \string[] getActionsList()
	 * @method \string[] fillActions()
	 * @method \string[] getApplicationList()
	 * @method \string[] fillApplication()
	 * @method \string[] getPredictionTextList()
	 * @method \string[] fillPredictionText()
	 * @method \string[] getPredictionsAppList()
	 * @method \string[] fillPredictionsApp()
	 * @method \string[] getPredictionsListList()
	 * @method \string[] fillPredictionsList()
	 * @method \string[] getPredictionsList()
	 * @method \string[] fillPredictions()
	 * @method \boolean[] getUseCouponsList()
	 * @method \boolean[] fillUseCoupons()
	 * @method \string[] getExecuteModuleList()
	 * @method \string[] fillExecuteModule()
	 * @method \int[] getExecuteModeList()
	 * @method \int[] fillExecuteMode()
	 * @method \boolean[] getHasIndexList()
	 * @method \boolean[] fillHasIndex()
	 * @method \string[] getPresetIdList()
	 * @method \string[] fillPresetId()
	 * @method \string[] getShortDescriptionStructureList()
	 * @method \string[] fillShortDescriptionStructure()
	 * @method \string[] getShortDescriptionList()
	 * @method \string[] fillShortDescription()
	 * @method \Bitrix\Main\EO_User[] getCreatedByUserList()
	 * @method \Bitrix\Sale\Internals\EO_Discount_Collection getCreatedByUserCollection()
	 * @method \Bitrix\Main\EO_User_Collection fillCreatedByUser()
	 * @method \Bitrix\Main\EO_User[] getModifiedByUserList()
	 * @method \Bitrix\Sale\Internals\EO_Discount_Collection getModifiedByUserCollection()
	 * @method \Bitrix\Main\EO_User_Collection fillModifiedByUser()
	 * @method \Bitrix\Sale\Internals\EO_DiscountCoupon[] getCouponList()
	 * @method \Bitrix\Sale\Internals\EO_Discount_Collection getCouponCollection()
	 * @method \Bitrix\Sale\Internals\EO_DiscountCoupon_Collection fillCoupon()
	 * @method \Bitrix\Sale\Internals\EO_DiscountEntities[] getDiscountEntityList()
	 * @method \Bitrix\Sale\Internals\EO_Discount_Collection getDiscountEntityCollection()
	 * @method \Bitrix\Sale\Internals\EO_DiscountEntities_Collection fillDiscountEntity()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Sale\Internals\EO_Discount $object)
	 * @method bool has(\Bitrix\Sale\Internals\EO_Discount $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Sale\Internals\EO_Discount getByPrimary($primary)
	 * @method \Bitrix\Sale\Internals\EO_Discount[] getAll()
	 * @method bool remove(\Bitrix\Sale\Internals\EO_Discount $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Sale\Internals\EO_Discount_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Sale\Internals\EO_Discount current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 * @method EO_Discount_Collection merge(?EO_Discount_Collection $collection)
	 * @method bool isEmpty()
	 */
	class EO_Discount_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Sale\Internals\DiscountTable */
		static public $dataClass = '\Bitrix\Sale\Internals\DiscountTable';
	}
}
namespace Bitrix\Sale\Internals {
	/**
	 * Common methods:
	 * ---------------
	 *
	 * @method EO_Discount_Result exec()
	 * @method \Bitrix\Sale\Internals\EO_Discount fetchObject()
	 * @method \Bitrix\Sale\Internals\EO_Discount_Collection fetchCollection()
	 *
	 * Custom methods:
	 * ---------------
	 *
	 */
	class EO_Discount_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Sale\Internals\EO_Discount fetchObject()
	 * @method \Bitrix\Sale\Internals\EO_Discount_Collection fetchCollection()
	 */
	class EO_Discount_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Sale\Internals\EO_Discount createObject($setDefaultValues = true)
	 * @method \Bitrix\Sale\Internals\EO_Discount_Collection createCollection()
	 * @method \Bitrix\Sale\Internals\EO_Discount wakeUpObject($row)
	 * @method \Bitrix\Sale\Internals\EO_Discount_Collection wakeUpCollection($rows)
	 */
	class EO_Discount_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Sale\Internals\DiscountCouponTable:sale\lib\internals\discountcoupon.php */
namespace Bitrix\Sale\Internals {
	/**
	 * EO_DiscountCoupon
	 * @see \Bitrix\Sale\Internals\DiscountCouponTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getId()
	 * @method \Bitrix\Sale\Internals\EO_DiscountCoupon setId(\int|\Bitrix\Main\DB\SqlExpression $id)
	 * @method bool hasId()
	 * @method bool isIdFilled()
	 * @method bool isIdChanged()
	 * @method \int getDiscountId()
	 * @method \Bitrix\Sale\Internals\EO_DiscountCoupon setDiscountId(\int|\Bitrix\Main\DB\SqlExpression $discountId)
	 * @method bool hasDiscountId()
	 * @method bool isDiscountIdFilled()
	 * @method bool isDiscountIdChanged()
	 * @method \int remindActualDiscountId()
	 * @method \int requireDiscountId()
	 * @method \Bitrix\Sale\Internals\EO_DiscountCoupon resetDiscountId()
	 * @method \Bitrix\Sale\Internals\EO_DiscountCoupon unsetDiscountId()
	 * @method \int fillDiscountId()
	 * @method \boolean getActive()
	 * @method \Bitrix\Sale\Internals\EO_DiscountCoupon setActive(\boolean|\Bitrix\Main\DB\SqlExpression $active)
	 * @method bool hasActive()
	 * @method bool isActiveFilled()
	 * @method bool isActiveChanged()
	 * @method \boolean remindActualActive()
	 * @method \boolean requireActive()
	 * @method \Bitrix\Sale\Internals\EO_DiscountCoupon resetActive()
	 * @method \Bitrix\Sale\Internals\EO_DiscountCoupon unsetActive()
	 * @method \boolean fillActive()
	 * @method \Bitrix\Main\Type\DateTime getActiveFrom()
	 * @method \Bitrix\Sale\Internals\EO_DiscountCoupon setActiveFrom(\Bitrix\Main\Type\DateTime|\Bitrix\Main\DB\SqlExpression $activeFrom)
	 * @method bool hasActiveFrom()
	 * @method bool isActiveFromFilled()
	 * @method bool isActiveFromChanged()
	 * @method \Bitrix\Main\Type\DateTime remindActualActiveFrom()
	 * @method \Bitrix\Main\Type\DateTime requireActiveFrom()
	 * @method \Bitrix\Sale\Internals\EO_DiscountCoupon resetActiveFrom()
	 * @method \Bitrix\Sale\Internals\EO_DiscountCoupon unsetActiveFrom()
	 * @method \Bitrix\Main\Type\DateTime fillActiveFrom()
	 * @method \Bitrix\Main\Type\DateTime getActiveTo()
	 * @method \Bitrix\Sale\Internals\EO_DiscountCoupon setActiveTo(\Bitrix\Main\Type\DateTime|\Bitrix\Main\DB\SqlExpression $activeTo)
	 * @method bool hasActiveTo()
	 * @method bool isActiveToFilled()
	 * @method bool isActiveToChanged()
	 * @method \Bitrix\Main\Type\DateTime remindActualActiveTo()
	 * @method \Bitrix\Main\Type\DateTime requireActiveTo()
	 * @method \Bitrix\Sale\Internals\EO_DiscountCoupon resetActiveTo()
	 * @method \Bitrix\Sale\Internals\EO_DiscountCoupon unsetActiveTo()
	 * @method \Bitrix\Main\Type\DateTime fillActiveTo()
	 * @method \string getCoupon()
	 * @method \Bitrix\Sale\Internals\EO_DiscountCoupon setCoupon(\string|\Bitrix\Main\DB\SqlExpression $coupon)
	 * @method bool hasCoupon()
	 * @method bool isCouponFilled()
	 * @method bool isCouponChanged()
	 * @method \string remindActualCoupon()
	 * @method \string requireCoupon()
	 * @method \Bitrix\Sale\Internals\EO_DiscountCoupon resetCoupon()
	 * @method \Bitrix\Sale\Internals\EO_DiscountCoupon unsetCoupon()
	 * @method \string fillCoupon()
	 * @method \int getType()
	 * @method \Bitrix\Sale\Internals\EO_DiscountCoupon setType(\int|\Bitrix\Main\DB\SqlExpression $type)
	 * @method bool hasType()
	 * @method bool isTypeFilled()
	 * @method bool isTypeChanged()
	 * @method \int remindActualType()
	 * @method \int requireType()
	 * @method \Bitrix\Sale\Internals\EO_DiscountCoupon resetType()
	 * @method \Bitrix\Sale\Internals\EO_DiscountCoupon unsetType()
	 * @method \int fillType()
	 * @method \int getMaxUse()
	 * @method \Bitrix\Sale\Internals\EO_DiscountCoupon setMaxUse(\int|\Bitrix\Main\DB\SqlExpression $maxUse)
	 * @method bool hasMaxUse()
	 * @method bool isMaxUseFilled()
	 * @method bool isMaxUseChanged()
	 * @method \int remindActualMaxUse()
	 * @method \int requireMaxUse()
	 * @method \Bitrix\Sale\Internals\EO_DiscountCoupon resetMaxUse()
	 * @method \Bitrix\Sale\Internals\EO_DiscountCoupon unsetMaxUse()
	 * @method \int fillMaxUse()
	 * @method \int getUseCount()
	 * @method \Bitrix\Sale\Internals\EO_DiscountCoupon setUseCount(\int|\Bitrix\Main\DB\SqlExpression $useCount)
	 * @method bool hasUseCount()
	 * @method bool isUseCountFilled()
	 * @method bool isUseCountChanged()
	 * @method \int remindActualUseCount()
	 * @method \int requireUseCount()
	 * @method \Bitrix\Sale\Internals\EO_DiscountCoupon resetUseCount()
	 * @method \Bitrix\Sale\Internals\EO_DiscountCoupon unsetUseCount()
	 * @method \int fillUseCount()
	 * @method \int getUserId()
	 * @method \Bitrix\Sale\Internals\EO_DiscountCoupon setUserId(\int|\Bitrix\Main\DB\SqlExpression $userId)
	 * @method bool hasUserId()
	 * @method bool isUserIdFilled()
	 * @method bool isUserIdChanged()
	 * @method \int remindActualUserId()
	 * @method \int requireUserId()
	 * @method \Bitrix\Sale\Internals\EO_DiscountCoupon resetUserId()
	 * @method \Bitrix\Sale\Internals\EO_DiscountCoupon unsetUserId()
	 * @method \int fillUserId()
	 * @method \Bitrix\Main\Type\DateTime getDateApply()
	 * @method \Bitrix\Sale\Internals\EO_DiscountCoupon setDateApply(\Bitrix\Main\Type\DateTime|\Bitrix\Main\DB\SqlExpression $dateApply)
	 * @method bool hasDateApply()
	 * @method bool isDateApplyFilled()
	 * @method bool isDateApplyChanged()
	 * @method \Bitrix\Main\Type\DateTime remindActualDateApply()
	 * @method \Bitrix\Main\Type\DateTime requireDateApply()
	 * @method \Bitrix\Sale\Internals\EO_DiscountCoupon resetDateApply()
	 * @method \Bitrix\Sale\Internals\EO_DiscountCoupon unsetDateApply()
	 * @method \Bitrix\Main\Type\DateTime fillDateApply()
	 * @method \Bitrix\Main\Type\DateTime getTimestampX()
	 * @method \Bitrix\Sale\Internals\EO_DiscountCoupon setTimestampX(\Bitrix\Main\Type\DateTime|\Bitrix\Main\DB\SqlExpression $timestampX)
	 * @method bool hasTimestampX()
	 * @method bool isTimestampXFilled()
	 * @method bool isTimestampXChanged()
	 * @method \Bitrix\Main\Type\DateTime remindActualTimestampX()
	 * @method \Bitrix\Main\Type\DateTime requireTimestampX()
	 * @method \Bitrix\Sale\Internals\EO_DiscountCoupon resetTimestampX()
	 * @method \Bitrix\Sale\Internals\EO_DiscountCoupon unsetTimestampX()
	 * @method \Bitrix\Main\Type\DateTime fillTimestampX()
	 * @method \int getModifiedBy()
	 * @method \Bitrix\Sale\Internals\EO_DiscountCoupon setModifiedBy(\int|\Bitrix\Main\DB\SqlExpression $modifiedBy)
	 * @method bool hasModifiedBy()
	 * @method bool isModifiedByFilled()
	 * @method bool isModifiedByChanged()
	 * @method \int remindActualModifiedBy()
	 * @method \int requireModifiedBy()
	 * @method \Bitrix\Sale\Internals\EO_DiscountCoupon resetModifiedBy()
	 * @method \Bitrix\Sale\Internals\EO_DiscountCoupon unsetModifiedBy()
	 * @method \int fillModifiedBy()
	 * @method \Bitrix\Main\Type\DateTime getDateCreate()
	 * @method \Bitrix\Sale\Internals\EO_DiscountCoupon setDateCreate(\Bitrix\Main\Type\DateTime|\Bitrix\Main\DB\SqlExpression $dateCreate)
	 * @method bool hasDateCreate()
	 * @method bool isDateCreateFilled()
	 * @method bool isDateCreateChanged()
	 * @method \Bitrix\Main\Type\DateTime remindActualDateCreate()
	 * @method \Bitrix\Main\Type\DateTime requireDateCreate()
	 * @method \Bitrix\Sale\Internals\EO_DiscountCoupon resetDateCreate()
	 * @method \Bitrix\Sale\Internals\EO_DiscountCoupon unsetDateCreate()
	 * @method \Bitrix\Main\Type\DateTime fillDateCreate()
	 * @method \int getCreatedBy()
	 * @method \Bitrix\Sale\Internals\EO_DiscountCoupon setCreatedBy(\int|\Bitrix\Main\DB\SqlExpression $createdBy)
	 * @method bool hasCreatedBy()
	 * @method bool isCreatedByFilled()
	 * @method bool isCreatedByChanged()
	 * @method \int remindActualCreatedBy()
	 * @method \int requireCreatedBy()
	 * @method \Bitrix\Sale\Internals\EO_DiscountCoupon resetCreatedBy()
	 * @method \Bitrix\Sale\Internals\EO_DiscountCoupon unsetCreatedBy()
	 * @method \int fillCreatedBy()
	 * @method \string getDescription()
	 * @method \Bitrix\Sale\Internals\EO_DiscountCoupon setDescription(\string|\Bitrix\Main\DB\SqlExpression $description)
	 * @method bool hasDescription()
	 * @method bool isDescriptionFilled()
	 * @method bool isDescriptionChanged()
	 * @method \string remindActualDescription()
	 * @method \string requireDescription()
	 * @method \Bitrix\Sale\Internals\EO_DiscountCoupon resetDescription()
	 * @method \Bitrix\Sale\Internals\EO_DiscountCoupon unsetDescription()
	 * @method \string fillDescription()
	 * @method \Bitrix\Main\EO_User getCreatedByUser()
	 * @method \Bitrix\Main\EO_User remindActualCreatedByUser()
	 * @method \Bitrix\Main\EO_User requireCreatedByUser()
	 * @method \Bitrix\Sale\Internals\EO_DiscountCoupon setCreatedByUser(\Bitrix\Main\EO_User $object)
	 * @method \Bitrix\Sale\Internals\EO_DiscountCoupon resetCreatedByUser()
	 * @method \Bitrix\Sale\Internals\EO_DiscountCoupon unsetCreatedByUser()
	 * @method bool hasCreatedByUser()
	 * @method bool isCreatedByUserFilled()
	 * @method bool isCreatedByUserChanged()
	 * @method \Bitrix\Main\EO_User fillCreatedByUser()
	 * @method \Bitrix\Main\EO_User getModifiedByUser()
	 * @method \Bitrix\Main\EO_User remindActualModifiedByUser()
	 * @method \Bitrix\Main\EO_User requireModifiedByUser()
	 * @method \Bitrix\Sale\Internals\EO_DiscountCoupon setModifiedByUser(\Bitrix\Main\EO_User $object)
	 * @method \Bitrix\Sale\Internals\EO_DiscountCoupon resetModifiedByUser()
	 * @method \Bitrix\Sale\Internals\EO_DiscountCoupon unsetModifiedByUser()
	 * @method bool hasModifiedByUser()
	 * @method bool isModifiedByUserFilled()
	 * @method bool isModifiedByUserChanged()
	 * @method \Bitrix\Main\EO_User fillModifiedByUser()
	 * @method \Bitrix\Sale\Internals\EO_Discount getDiscount()
	 * @method \Bitrix\Sale\Internals\EO_Discount remindActualDiscount()
	 * @method \Bitrix\Sale\Internals\EO_Discount requireDiscount()
	 * @method \Bitrix\Sale\Internals\EO_DiscountCoupon setDiscount(\Bitrix\Sale\Internals\EO_Discount $object)
	 * @method \Bitrix\Sale\Internals\EO_DiscountCoupon resetDiscount()
	 * @method \Bitrix\Sale\Internals\EO_DiscountCoupon unsetDiscount()
	 * @method bool hasDiscount()
	 * @method bool isDiscountFilled()
	 * @method bool isDiscountChanged()
	 * @method \Bitrix\Sale\Internals\EO_Discount fillDiscount()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Sale\Internals\EO_DiscountCoupon set($fieldName, $value)
	 * @method \Bitrix\Sale\Internals\EO_DiscountCoupon reset($fieldName)
	 * @method \Bitrix\Sale\Internals\EO_DiscountCoupon unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Sale\Internals\EO_DiscountCoupon wakeUp($data)
	 */
	class EO_DiscountCoupon {
		/* @var \Bitrix\Sale\Internals\DiscountCouponTable */
		static public $dataClass = '\Bitrix\Sale\Internals\DiscountCouponTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Sale\Internals {
	/**
	 * EO_DiscountCoupon_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getIdList()
	 * @method \int[] getDiscountIdList()
	 * @method \int[] fillDiscountId()
	 * @method \boolean[] getActiveList()
	 * @method \boolean[] fillActive()
	 * @method \Bitrix\Main\Type\DateTime[] getActiveFromList()
	 * @method \Bitrix\Main\Type\DateTime[] fillActiveFrom()
	 * @method \Bitrix\Main\Type\DateTime[] getActiveToList()
	 * @method \Bitrix\Main\Type\DateTime[] fillActiveTo()
	 * @method \string[] getCouponList()
	 * @method \string[] fillCoupon()
	 * @method \int[] getTypeList()
	 * @method \int[] fillType()
	 * @method \int[] getMaxUseList()
	 * @method \int[] fillMaxUse()
	 * @method \int[] getUseCountList()
	 * @method \int[] fillUseCount()
	 * @method \int[] getUserIdList()
	 * @method \int[] fillUserId()
	 * @method \Bitrix\Main\Type\DateTime[] getDateApplyList()
	 * @method \Bitrix\Main\Type\DateTime[] fillDateApply()
	 * @method \Bitrix\Main\Type\DateTime[] getTimestampXList()
	 * @method \Bitrix\Main\Type\DateTime[] fillTimestampX()
	 * @method \int[] getModifiedByList()
	 * @method \int[] fillModifiedBy()
	 * @method \Bitrix\Main\Type\DateTime[] getDateCreateList()
	 * @method \Bitrix\Main\Type\DateTime[] fillDateCreate()
	 * @method \int[] getCreatedByList()
	 * @method \int[] fillCreatedBy()
	 * @method \string[] getDescriptionList()
	 * @method \string[] fillDescription()
	 * @method \Bitrix\Main\EO_User[] getCreatedByUserList()
	 * @method \Bitrix\Sale\Internals\EO_DiscountCoupon_Collection getCreatedByUserCollection()
	 * @method \Bitrix\Main\EO_User_Collection fillCreatedByUser()
	 * @method \Bitrix\Main\EO_User[] getModifiedByUserList()
	 * @method \Bitrix\Sale\Internals\EO_DiscountCoupon_Collection getModifiedByUserCollection()
	 * @method \Bitrix\Main\EO_User_Collection fillModifiedByUser()
	 * @method \Bitrix\Sale\Internals\EO_Discount[] getDiscountList()
	 * @method \Bitrix\Sale\Internals\EO_DiscountCoupon_Collection getDiscountCollection()
	 * @method \Bitrix\Sale\Internals\EO_Discount_Collection fillDiscount()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Sale\Internals\EO_DiscountCoupon $object)
	 * @method bool has(\Bitrix\Sale\Internals\EO_DiscountCoupon $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Sale\Internals\EO_DiscountCoupon getByPrimary($primary)
	 * @method \Bitrix\Sale\Internals\EO_DiscountCoupon[] getAll()
	 * @method bool remove(\Bitrix\Sale\Internals\EO_DiscountCoupon $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Sale\Internals\EO_DiscountCoupon_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Sale\Internals\EO_DiscountCoupon current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 * @method EO_DiscountCoupon_Collection merge(?EO_DiscountCoupon_Collection $collection)
	 * @method bool isEmpty()
	 */
	class EO_DiscountCoupon_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Sale\Internals\DiscountCouponTable */
		static public $dataClass = '\Bitrix\Sale\Internals\DiscountCouponTable';
	}
}
namespace Bitrix\Sale\Internals {
	/**
	 * Common methods:
	 * ---------------
	 *
	 * @method EO_DiscountCoupon_Result exec()
	 * @method \Bitrix\Sale\Internals\EO_DiscountCoupon fetchObject()
	 * @method \Bitrix\Sale\Internals\EO_DiscountCoupon_Collection fetchCollection()
	 *
	 * Custom methods:
	 * ---------------
	 *
	 */
	class EO_DiscountCoupon_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Sale\Internals\EO_DiscountCoupon fetchObject()
	 * @method \Bitrix\Sale\Internals\EO_DiscountCoupon_Collection fetchCollection()
	 */
	class EO_DiscountCoupon_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Sale\Internals\EO_DiscountCoupon createObject($setDefaultValues = true)
	 * @method \Bitrix\Sale\Internals\EO_DiscountCoupon_Collection createCollection()
	 * @method \Bitrix\Sale\Internals\EO_DiscountCoupon wakeUpObject($row)
	 * @method \Bitrix\Sale\Internals\EO_DiscountCoupon_Collection wakeUpCollection($rows)
	 */
	class EO_DiscountCoupon_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Sale\Internals\DiscountEntitiesTable:sale\lib\internals\discountentities.php */
namespace Bitrix\Sale\Internals {
	/**
	 * EO_DiscountEntities
	 * @see \Bitrix\Sale\Internals\DiscountEntitiesTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getId()
	 * @method \Bitrix\Sale\Internals\EO_DiscountEntities setId(\int|\Bitrix\Main\DB\SqlExpression $id)
	 * @method bool hasId()
	 * @method bool isIdFilled()
	 * @method bool isIdChanged()
	 * @method \int getDiscountId()
	 * @method \Bitrix\Sale\Internals\EO_DiscountEntities setDiscountId(\int|\Bitrix\Main\DB\SqlExpression $discountId)
	 * @method bool hasDiscountId()
	 * @method bool isDiscountIdFilled()
	 * @method bool isDiscountIdChanged()
	 * @method \int remindActualDiscountId()
	 * @method \int requireDiscountId()
	 * @method \Bitrix\Sale\Internals\EO_DiscountEntities resetDiscountId()
	 * @method \Bitrix\Sale\Internals\EO_DiscountEntities unsetDiscountId()
	 * @method \int fillDiscountId()
	 * @method \string getModuleId()
	 * @method \Bitrix\Sale\Internals\EO_DiscountEntities setModuleId(\string|\Bitrix\Main\DB\SqlExpression $moduleId)
	 * @method bool hasModuleId()
	 * @method bool isModuleIdFilled()
	 * @method bool isModuleIdChanged()
	 * @method \string remindActualModuleId()
	 * @method \string requireModuleId()
	 * @method \Bitrix\Sale\Internals\EO_DiscountEntities resetModuleId()
	 * @method \Bitrix\Sale\Internals\EO_DiscountEntities unsetModuleId()
	 * @method \string fillModuleId()
	 * @method \string getEntity()
	 * @method \Bitrix\Sale\Internals\EO_DiscountEntities setEntity(\string|\Bitrix\Main\DB\SqlExpression $entity)
	 * @method bool hasEntity()
	 * @method bool isEntityFilled()
	 * @method bool isEntityChanged()
	 * @method \string remindActualEntity()
	 * @method \string requireEntity()
	 * @method \Bitrix\Sale\Internals\EO_DiscountEntities resetEntity()
	 * @method \Bitrix\Sale\Internals\EO_DiscountEntities unsetEntity()
	 * @method \string fillEntity()
	 * @method \string getFieldEntity()
	 * @method \Bitrix\Sale\Internals\EO_DiscountEntities setFieldEntity(\string|\Bitrix\Main\DB\SqlExpression $fieldEntity)
	 * @method bool hasFieldEntity()
	 * @method bool isFieldEntityFilled()
	 * @method bool isFieldEntityChanged()
	 * @method \string remindActualFieldEntity()
	 * @method \string requireFieldEntity()
	 * @method \Bitrix\Sale\Internals\EO_DiscountEntities resetFieldEntity()
	 * @method \Bitrix\Sale\Internals\EO_DiscountEntities unsetFieldEntity()
	 * @method \string fillFieldEntity()
	 * @method \string getFieldTable()
	 * @method \Bitrix\Sale\Internals\EO_DiscountEntities setFieldTable(\string|\Bitrix\Main\DB\SqlExpression $fieldTable)
	 * @method bool hasFieldTable()
	 * @method bool isFieldTableFilled()
	 * @method bool isFieldTableChanged()
	 * @method \string remindActualFieldTable()
	 * @method \string requireFieldTable()
	 * @method \Bitrix\Sale\Internals\EO_DiscountEntities resetFieldTable()
	 * @method \Bitrix\Sale\Internals\EO_DiscountEntities unsetFieldTable()
	 * @method \string fillFieldTable()
	 * @method \Bitrix\Sale\Internals\EO_Discount getDiscount()
	 * @method \Bitrix\Sale\Internals\EO_Discount remindActualDiscount()
	 * @method \Bitrix\Sale\Internals\EO_Discount requireDiscount()
	 * @method \Bitrix\Sale\Internals\EO_DiscountEntities setDiscount(\Bitrix\Sale\Internals\EO_Discount $object)
	 * @method \Bitrix\Sale\Internals\EO_DiscountEntities resetDiscount()
	 * @method \Bitrix\Sale\Internals\EO_DiscountEntities unsetDiscount()
	 * @method bool hasDiscount()
	 * @method bool isDiscountFilled()
	 * @method bool isDiscountChanged()
	 * @method \Bitrix\Sale\Internals\EO_Discount fillDiscount()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Sale\Internals\EO_DiscountEntities set($fieldName, $value)
	 * @method \Bitrix\Sale\Internals\EO_DiscountEntities reset($fieldName)
	 * @method \Bitrix\Sale\Internals\EO_DiscountEntities unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Sale\Internals\EO_DiscountEntities wakeUp($data)
	 */
	class EO_DiscountEntities {
		/* @var \Bitrix\Sale\Internals\DiscountEntitiesTable */
		static public $dataClass = '\Bitrix\Sale\Internals\DiscountEntitiesTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Sale\Internals {
	/**
	 * EO_DiscountEntities_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getIdList()
	 * @method \int[] getDiscountIdList()
	 * @method \int[] fillDiscountId()
	 * @method \string[] getModuleIdList()
	 * @method \string[] fillModuleId()
	 * @method \string[] getEntityList()
	 * @method \string[] fillEntity()
	 * @method \string[] getFieldEntityList()
	 * @method \string[] fillFieldEntity()
	 * @method \string[] getFieldTableList()
	 * @method \string[] fillFieldTable()
	 * @method \Bitrix\Sale\Internals\EO_Discount[] getDiscountList()
	 * @method \Bitrix\Sale\Internals\EO_DiscountEntities_Collection getDiscountCollection()
	 * @method \Bitrix\Sale\Internals\EO_Discount_Collection fillDiscount()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Sale\Internals\EO_DiscountEntities $object)
	 * @method bool has(\Bitrix\Sale\Internals\EO_DiscountEntities $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Sale\Internals\EO_DiscountEntities getByPrimary($primary)
	 * @method \Bitrix\Sale\Internals\EO_DiscountEntities[] getAll()
	 * @method bool remove(\Bitrix\Sale\Internals\EO_DiscountEntities $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Sale\Internals\EO_DiscountEntities_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Sale\Internals\EO_DiscountEntities current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 * @method EO_DiscountEntities_Collection merge(?EO_DiscountEntities_Collection $collection)
	 * @method bool isEmpty()
	 */
	class EO_DiscountEntities_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Sale\Internals\DiscountEntitiesTable */
		static public $dataClass = '\Bitrix\Sale\Internals\DiscountEntitiesTable';
	}
}
namespace Bitrix\Sale\Internals {
	/**
	 * Common methods:
	 * ---------------
	 *
	 * @method EO_DiscountEntities_Result exec()
	 * @method \Bitrix\Sale\Internals\EO_DiscountEntities fetchObject()
	 * @method \Bitrix\Sale\Internals\EO_DiscountEntities_Collection fetchCollection()
	 *
	 * Custom methods:
	 * ---------------
	 *
	 */
	class EO_DiscountEntities_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Sale\Internals\EO_DiscountEntities fetchObject()
	 * @method \Bitrix\Sale\Internals\EO_DiscountEntities_Collection fetchCollection()
	 */
	class EO_DiscountEntities_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Sale\Internals\EO_DiscountEntities createObject($setDefaultValues = true)
	 * @method \Bitrix\Sale\Internals\EO_DiscountEntities_Collection createCollection()
	 * @method \Bitrix\Sale\Internals\EO_DiscountEntities wakeUpObject($row)
	 * @method \Bitrix\Sale\Internals\EO_DiscountEntities_Collection wakeUpCollection($rows)
	 */
	class EO_DiscountEntities_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Sale\Internals\DiscountGroupTable:sale\lib\internals\discountgroup.php */
namespace Bitrix\Sale\Internals {
	/**
	 * EO_DiscountGroup
	 * @see \Bitrix\Sale\Internals\DiscountGroupTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getId()
	 * @method \Bitrix\Sale\Internals\EO_DiscountGroup setId(\int|\Bitrix\Main\DB\SqlExpression $id)
	 * @method bool hasId()
	 * @method bool isIdFilled()
	 * @method bool isIdChanged()
	 * @method \int getDiscountId()
	 * @method \Bitrix\Sale\Internals\EO_DiscountGroup setDiscountId(\int|\Bitrix\Main\DB\SqlExpression $discountId)
	 * @method bool hasDiscountId()
	 * @method bool isDiscountIdFilled()
	 * @method bool isDiscountIdChanged()
	 * @method \int remindActualDiscountId()
	 * @method \int requireDiscountId()
	 * @method \Bitrix\Sale\Internals\EO_DiscountGroup resetDiscountId()
	 * @method \Bitrix\Sale\Internals\EO_DiscountGroup unsetDiscountId()
	 * @method \int fillDiscountId()
	 * @method \boolean getActive()
	 * @method \Bitrix\Sale\Internals\EO_DiscountGroup setActive(\boolean|\Bitrix\Main\DB\SqlExpression $active)
	 * @method bool hasActive()
	 * @method bool isActiveFilled()
	 * @method bool isActiveChanged()
	 * @method \boolean remindActualActive()
	 * @method \boolean requireActive()
	 * @method \Bitrix\Sale\Internals\EO_DiscountGroup resetActive()
	 * @method \Bitrix\Sale\Internals\EO_DiscountGroup unsetActive()
	 * @method \boolean fillActive()
	 * @method \int getGroupId()
	 * @method \Bitrix\Sale\Internals\EO_DiscountGroup setGroupId(\int|\Bitrix\Main\DB\SqlExpression $groupId)
	 * @method bool hasGroupId()
	 * @method bool isGroupIdFilled()
	 * @method bool isGroupIdChanged()
	 * @method \int remindActualGroupId()
	 * @method \int requireGroupId()
	 * @method \Bitrix\Sale\Internals\EO_DiscountGroup resetGroupId()
	 * @method \Bitrix\Sale\Internals\EO_DiscountGroup unsetGroupId()
	 * @method \int fillGroupId()
	 * @method \Bitrix\Sale\Internals\EO_Discount getDiscount()
	 * @method \Bitrix\Sale\Internals\EO_Discount remindActualDiscount()
	 * @method \Bitrix\Sale\Internals\EO_Discount requireDiscount()
	 * @method \Bitrix\Sale\Internals\EO_DiscountGroup setDiscount(\Bitrix\Sale\Internals\EO_Discount $object)
	 * @method \Bitrix\Sale\Internals\EO_DiscountGroup resetDiscount()
	 * @method \Bitrix\Sale\Internals\EO_DiscountGroup unsetDiscount()
	 * @method bool hasDiscount()
	 * @method bool isDiscountFilled()
	 * @method bool isDiscountChanged()
	 * @method \Bitrix\Sale\Internals\EO_Discount fillDiscount()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Sale\Internals\EO_DiscountGroup set($fieldName, $value)
	 * @method \Bitrix\Sale\Internals\EO_DiscountGroup reset($fieldName)
	 * @method \Bitrix\Sale\Internals\EO_DiscountGroup unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Sale\Internals\EO_DiscountGroup wakeUp($data)
	 */
	class EO_DiscountGroup {
		/* @var \Bitrix\Sale\Internals\DiscountGroupTable */
		static public $dataClass = '\Bitrix\Sale\Internals\DiscountGroupTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Sale\Internals {
	/**
	 * EO_DiscountGroup_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getIdList()
	 * @method \int[] getDiscountIdList()
	 * @method \int[] fillDiscountId()
	 * @method \boolean[] getActiveList()
	 * @method \boolean[] fillActive()
	 * @method \int[] getGroupIdList()
	 * @method \int[] fillGroupId()
	 * @method \Bitrix\Sale\Internals\EO_Discount[] getDiscountList()
	 * @method \Bitrix\Sale\Internals\EO_DiscountGroup_Collection getDiscountCollection()
	 * @method \Bitrix\Sale\Internals\EO_Discount_Collection fillDiscount()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Sale\Internals\EO_DiscountGroup $object)
	 * @method bool has(\Bitrix\Sale\Internals\EO_DiscountGroup $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Sale\Internals\EO_DiscountGroup getByPrimary($primary)
	 * @method \Bitrix\Sale\Internals\EO_DiscountGroup[] getAll()
	 * @method bool remove(\Bitrix\Sale\Internals\EO_DiscountGroup $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Sale\Internals\EO_DiscountGroup_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Sale\Internals\EO_DiscountGroup current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 * @method EO_DiscountGroup_Collection merge(?EO_DiscountGroup_Collection $collection)
	 * @method bool isEmpty()
	 */
	class EO_DiscountGroup_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Sale\Internals\DiscountGroupTable */
		static public $dataClass = '\Bitrix\Sale\Internals\DiscountGroupTable';
	}
}
namespace Bitrix\Sale\Internals {
	/**
	 * Common methods:
	 * ---------------
	 *
	 * @method EO_DiscountGroup_Result exec()
	 * @method \Bitrix\Sale\Internals\EO_DiscountGroup fetchObject()
	 * @method \Bitrix\Sale\Internals\EO_DiscountGroup_Collection fetchCollection()
	 *
	 * Custom methods:
	 * ---------------
	 *
	 */
	class EO_DiscountGroup_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Sale\Internals\EO_DiscountGroup fetchObject()
	 * @method \Bitrix\Sale\Internals\EO_DiscountGroup_Collection fetchCollection()
	 */
	class EO_DiscountGroup_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Sale\Internals\EO_DiscountGroup createObject($setDefaultValues = true)
	 * @method \Bitrix\Sale\Internals\EO_DiscountGroup_Collection createCollection()
	 * @method \Bitrix\Sale\Internals\EO_DiscountGroup wakeUpObject($row)
	 * @method \Bitrix\Sale\Internals\EO_DiscountGroup_Collection wakeUpCollection($rows)
	 */
	class EO_DiscountGroup_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Sale\Internals\DiscountModuleTable:sale\lib\internals\discountmodule.php */
namespace Bitrix\Sale\Internals {
	/**
	 * EO_DiscountModule
	 * @see \Bitrix\Sale\Internals\DiscountModuleTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getId()
	 * @method \Bitrix\Sale\Internals\EO_DiscountModule setId(\int|\Bitrix\Main\DB\SqlExpression $id)
	 * @method bool hasId()
	 * @method bool isIdFilled()
	 * @method bool isIdChanged()
	 * @method \int getDiscountId()
	 * @method \Bitrix\Sale\Internals\EO_DiscountModule setDiscountId(\int|\Bitrix\Main\DB\SqlExpression $discountId)
	 * @method bool hasDiscountId()
	 * @method bool isDiscountIdFilled()
	 * @method bool isDiscountIdChanged()
	 * @method \int remindActualDiscountId()
	 * @method \int requireDiscountId()
	 * @method \Bitrix\Sale\Internals\EO_DiscountModule resetDiscountId()
	 * @method \Bitrix\Sale\Internals\EO_DiscountModule unsetDiscountId()
	 * @method \int fillDiscountId()
	 * @method \string getModuleId()
	 * @method \Bitrix\Sale\Internals\EO_DiscountModule setModuleId(\string|\Bitrix\Main\DB\SqlExpression $moduleId)
	 * @method bool hasModuleId()
	 * @method bool isModuleIdFilled()
	 * @method bool isModuleIdChanged()
	 * @method \string remindActualModuleId()
	 * @method \string requireModuleId()
	 * @method \Bitrix\Sale\Internals\EO_DiscountModule resetModuleId()
	 * @method \Bitrix\Sale\Internals\EO_DiscountModule unsetModuleId()
	 * @method \string fillModuleId()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Sale\Internals\EO_DiscountModule set($fieldName, $value)
	 * @method \Bitrix\Sale\Internals\EO_DiscountModule reset($fieldName)
	 * @method \Bitrix\Sale\Internals\EO_DiscountModule unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Sale\Internals\EO_DiscountModule wakeUp($data)
	 */
	class EO_DiscountModule {
		/* @var \Bitrix\Sale\Internals\DiscountModuleTable */
		static public $dataClass = '\Bitrix\Sale\Internals\DiscountModuleTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Sale\Internals {
	/**
	 * EO_DiscountModule_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getIdList()
	 * @method \int[] getDiscountIdList()
	 * @method \int[] fillDiscountId()
	 * @method \string[] getModuleIdList()
	 * @method \string[] fillModuleId()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Sale\Internals\EO_DiscountModule $object)
	 * @method bool has(\Bitrix\Sale\Internals\EO_DiscountModule $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Sale\Internals\EO_DiscountModule getByPrimary($primary)
	 * @method \Bitrix\Sale\Internals\EO_DiscountModule[] getAll()
	 * @method bool remove(\Bitrix\Sale\Internals\EO_DiscountModule $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Sale\Internals\EO_DiscountModule_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Sale\Internals\EO_DiscountModule current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 * @method EO_DiscountModule_Collection merge(?EO_DiscountModule_Collection $collection)
	 * @method bool isEmpty()
	 */
	class EO_DiscountModule_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Sale\Internals\DiscountModuleTable */
		static public $dataClass = '\Bitrix\Sale\Internals\DiscountModuleTable';
	}
}
namespace Bitrix\Sale\Internals {
	/**
	 * Common methods:
	 * ---------------
	 *
	 * @method EO_DiscountModule_Result exec()
	 * @method \Bitrix\Sale\Internals\EO_DiscountModule fetchObject()
	 * @method \Bitrix\Sale\Internals\EO_DiscountModule_Collection fetchCollection()
	 *
	 * Custom methods:
	 * ---------------
	 *
	 */
	class EO_DiscountModule_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Sale\Internals\EO_DiscountModule fetchObject()
	 * @method \Bitrix\Sale\Internals\EO_DiscountModule_Collection fetchCollection()
	 */
	class EO_DiscountModule_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Sale\Internals\EO_DiscountModule createObject($setDefaultValues = true)
	 * @method \Bitrix\Sale\Internals\EO_DiscountModule_Collection createCollection()
	 * @method \Bitrix\Sale\Internals\EO_DiscountModule wakeUpObject($row)
	 * @method \Bitrix\Sale\Internals\EO_DiscountModule_Collection wakeUpCollection($rows)
	 */
	class EO_DiscountModule_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Sale\Internals\EntityLabelTable:sale\lib\internals\entitylabeltable.php */
namespace Bitrix\Sale\Internals {
	/**
	 * EO_EntityLabel
	 * @see \Bitrix\Sale\Internals\EntityLabelTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getId()
	 * @method \Bitrix\Sale\Internals\EO_EntityLabel setId(\int|\Bitrix\Main\DB\SqlExpression $id)
	 * @method bool hasId()
	 * @method bool isIdFilled()
	 * @method bool isIdChanged()
	 * @method \int getEntityId()
	 * @method \Bitrix\Sale\Internals\EO_EntityLabel setEntityId(\int|\Bitrix\Main\DB\SqlExpression $entityId)
	 * @method bool hasEntityId()
	 * @method bool isEntityIdFilled()
	 * @method bool isEntityIdChanged()
	 * @method \int remindActualEntityId()
	 * @method \int requireEntityId()
	 * @method \Bitrix\Sale\Internals\EO_EntityLabel resetEntityId()
	 * @method \Bitrix\Sale\Internals\EO_EntityLabel unsetEntityId()
	 * @method \int fillEntityId()
	 * @method \string getEntityType()
	 * @method \Bitrix\Sale\Internals\EO_EntityLabel setEntityType(\string|\Bitrix\Main\DB\SqlExpression $entityType)
	 * @method bool hasEntityType()
	 * @method bool isEntityTypeFilled()
	 * @method bool isEntityTypeChanged()
	 * @method \string remindActualEntityType()
	 * @method \string requireEntityType()
	 * @method \Bitrix\Sale\Internals\EO_EntityLabel resetEntityType()
	 * @method \Bitrix\Sale\Internals\EO_EntityLabel unsetEntityType()
	 * @method \string fillEntityType()
	 * @method \string getLabelName()
	 * @method \Bitrix\Sale\Internals\EO_EntityLabel setLabelName(\string|\Bitrix\Main\DB\SqlExpression $labelName)
	 * @method bool hasLabelName()
	 * @method bool isLabelNameFilled()
	 * @method bool isLabelNameChanged()
	 * @method \string remindActualLabelName()
	 * @method \string requireLabelName()
	 * @method \Bitrix\Sale\Internals\EO_EntityLabel resetLabelName()
	 * @method \Bitrix\Sale\Internals\EO_EntityLabel unsetLabelName()
	 * @method \string fillLabelName()
	 * @method \string getLabelValue()
	 * @method \Bitrix\Sale\Internals\EO_EntityLabel setLabelValue(\string|\Bitrix\Main\DB\SqlExpression $labelValue)
	 * @method bool hasLabelValue()
	 * @method bool isLabelValueFilled()
	 * @method bool isLabelValueChanged()
	 * @method \string remindActualLabelValue()
	 * @method \string requireLabelValue()
	 * @method \Bitrix\Sale\Internals\EO_EntityLabel resetLabelValue()
	 * @method \Bitrix\Sale\Internals\EO_EntityLabel unsetLabelValue()
	 * @method \string fillLabelValue()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Sale\Internals\EO_EntityLabel set($fieldName, $value)
	 * @method \Bitrix\Sale\Internals\EO_EntityLabel reset($fieldName)
	 * @method \Bitrix\Sale\Internals\EO_EntityLabel unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Sale\Internals\EO_EntityLabel wakeUp($data)
	 */
	class EO_EntityLabel {
		/* @var \Bitrix\Sale\Internals\EntityLabelTable */
		static public $dataClass = '\Bitrix\Sale\Internals\EntityLabelTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Sale\Internals {
	/**
	 * EO_EntityLabel_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getIdList()
	 * @method \int[] getEntityIdList()
	 * @method \int[] fillEntityId()
	 * @method \string[] getEntityTypeList()
	 * @method \string[] fillEntityType()
	 * @method \string[] getLabelNameList()
	 * @method \string[] fillLabelName()
	 * @method \string[] getLabelValueList()
	 * @method \string[] fillLabelValue()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Sale\Internals\EO_EntityLabel $object)
	 * @method bool has(\Bitrix\Sale\Internals\EO_EntityLabel $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Sale\Internals\EO_EntityLabel getByPrimary($primary)
	 * @method \Bitrix\Sale\Internals\EO_EntityLabel[] getAll()
	 * @method bool remove(\Bitrix\Sale\Internals\EO_EntityLabel $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Sale\Internals\EO_EntityLabel_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Sale\Internals\EO_EntityLabel current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 * @method \Bitrix\Sale\Internals\EO_EntityLabel_Collection merge(?\Bitrix\Sale\Internals\EO_EntityLabel_Collection $collection)
	 * @method bool isEmpty()
	 */
	class EO_EntityLabel_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Sale\Internals\EntityLabelTable */
		static public $dataClass = '\Bitrix\Sale\Internals\EntityLabelTable';
	}
}
namespace Bitrix\Sale\Internals {
	/**
	 * Common methods:
	 * ---------------
	 *
	 * @method EO_EntityLabel_Result exec()
	 * @method \Bitrix\Sale\Internals\EO_EntityLabel fetchObject()
	 * @method \Bitrix\Sale\Internals\EO_EntityLabel_Collection fetchCollection()
	 *
	 * Custom methods:
	 * ---------------
	 *
	 */
	class EO_EntityLabel_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Sale\Internals\EO_EntityLabel fetchObject()
	 * @method \Bitrix\Sale\Internals\EO_EntityLabel_Collection fetchCollection()
	 */
	class EO_EntityLabel_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Sale\Internals\EO_EntityLabel createObject($setDefaultValues = true)
	 * @method \Bitrix\Sale\Internals\EO_EntityLabel_Collection createCollection()
	 * @method \Bitrix\Sale\Internals\EO_EntityLabel wakeUpObject($row)
	 * @method \Bitrix\Sale\Internals\EO_EntityLabel_Collection wakeUpCollection($rows)
	 */
	class EO_EntityLabel_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Sale\Internals\EntityMarkerTable:sale\lib\internals\entitymarker.php */
namespace Bitrix\Sale\Internals {
	/**
	 * EO_EntityMarker
	 * @see \Bitrix\Sale\Internals\EntityMarkerTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getId()
	 * @method \Bitrix\Sale\Internals\EO_EntityMarker setId(\int|\Bitrix\Main\DB\SqlExpression $id)
	 * @method bool hasId()
	 * @method bool isIdFilled()
	 * @method bool isIdChanged()
	 * @method \int getOrderId()
	 * @method \Bitrix\Sale\Internals\EO_EntityMarker setOrderId(\int|\Bitrix\Main\DB\SqlExpression $orderId)
	 * @method bool hasOrderId()
	 * @method bool isOrderIdFilled()
	 * @method bool isOrderIdChanged()
	 * @method \int remindActualOrderId()
	 * @method \int requireOrderId()
	 * @method \Bitrix\Sale\Internals\EO_EntityMarker resetOrderId()
	 * @method \Bitrix\Sale\Internals\EO_EntityMarker unsetOrderId()
	 * @method \int fillOrderId()
	 * @method \string getEntityType()
	 * @method \Bitrix\Sale\Internals\EO_EntityMarker setEntityType(\string|\Bitrix\Main\DB\SqlExpression $entityType)
	 * @method bool hasEntityType()
	 * @method bool isEntityTypeFilled()
	 * @method bool isEntityTypeChanged()
	 * @method \string remindActualEntityType()
	 * @method \string requireEntityType()
	 * @method \Bitrix\Sale\Internals\EO_EntityMarker resetEntityType()
	 * @method \Bitrix\Sale\Internals\EO_EntityMarker unsetEntityType()
	 * @method \string fillEntityType()
	 * @method \int getEntityId()
	 * @method \Bitrix\Sale\Internals\EO_EntityMarker setEntityId(\int|\Bitrix\Main\DB\SqlExpression $entityId)
	 * @method bool hasEntityId()
	 * @method bool isEntityIdFilled()
	 * @method bool isEntityIdChanged()
	 * @method \int remindActualEntityId()
	 * @method \int requireEntityId()
	 * @method \Bitrix\Sale\Internals\EO_EntityMarker resetEntityId()
	 * @method \Bitrix\Sale\Internals\EO_EntityMarker unsetEntityId()
	 * @method \int fillEntityId()
	 * @method \string getType()
	 * @method \Bitrix\Sale\Internals\EO_EntityMarker setType(\string|\Bitrix\Main\DB\SqlExpression $type)
	 * @method bool hasType()
	 * @method bool isTypeFilled()
	 * @method bool isTypeChanged()
	 * @method \string remindActualType()
	 * @method \string requireType()
	 * @method \Bitrix\Sale\Internals\EO_EntityMarker resetType()
	 * @method \Bitrix\Sale\Internals\EO_EntityMarker unsetType()
	 * @method \string fillType()
	 * @method \string getCode()
	 * @method \Bitrix\Sale\Internals\EO_EntityMarker setCode(\string|\Bitrix\Main\DB\SqlExpression $code)
	 * @method bool hasCode()
	 * @method bool isCodeFilled()
	 * @method bool isCodeChanged()
	 * @method \string remindActualCode()
	 * @method \string requireCode()
	 * @method \Bitrix\Sale\Internals\EO_EntityMarker resetCode()
	 * @method \Bitrix\Sale\Internals\EO_EntityMarker unsetCode()
	 * @method \string fillCode()
	 * @method \string getMessage()
	 * @method \Bitrix\Sale\Internals\EO_EntityMarker setMessage(\string|\Bitrix\Main\DB\SqlExpression $message)
	 * @method bool hasMessage()
	 * @method bool isMessageFilled()
	 * @method bool isMessageChanged()
	 * @method \string remindActualMessage()
	 * @method \string requireMessage()
	 * @method \Bitrix\Sale\Internals\EO_EntityMarker resetMessage()
	 * @method \Bitrix\Sale\Internals\EO_EntityMarker unsetMessage()
	 * @method \string fillMessage()
	 * @method \string getComment()
	 * @method \Bitrix\Sale\Internals\EO_EntityMarker setComment(\string|\Bitrix\Main\DB\SqlExpression $comment)
	 * @method bool hasComment()
	 * @method bool isCommentFilled()
	 * @method bool isCommentChanged()
	 * @method \string remindActualComment()
	 * @method \string requireComment()
	 * @method \Bitrix\Sale\Internals\EO_EntityMarker resetComment()
	 * @method \Bitrix\Sale\Internals\EO_EntityMarker unsetComment()
	 * @method \string fillComment()
	 * @method \int getUserId()
	 * @method \Bitrix\Sale\Internals\EO_EntityMarker setUserId(\int|\Bitrix\Main\DB\SqlExpression $userId)
	 * @method bool hasUserId()
	 * @method bool isUserIdFilled()
	 * @method bool isUserIdChanged()
	 * @method \int remindActualUserId()
	 * @method \int requireUserId()
	 * @method \Bitrix\Sale\Internals\EO_EntityMarker resetUserId()
	 * @method \Bitrix\Sale\Internals\EO_EntityMarker unsetUserId()
	 * @method \int fillUserId()
	 * @method \Bitrix\Main\Type\DateTime getDateCreate()
	 * @method \Bitrix\Sale\Internals\EO_EntityMarker setDateCreate(\Bitrix\Main\Type\DateTime|\Bitrix\Main\DB\SqlExpression $dateCreate)
	 * @method bool hasDateCreate()
	 * @method bool isDateCreateFilled()
	 * @method bool isDateCreateChanged()
	 * @method \Bitrix\Main\Type\DateTime remindActualDateCreate()
	 * @method \Bitrix\Main\Type\DateTime requireDateCreate()
	 * @method \Bitrix\Sale\Internals\EO_EntityMarker resetDateCreate()
	 * @method \Bitrix\Sale\Internals\EO_EntityMarker unsetDateCreate()
	 * @method \Bitrix\Main\Type\DateTime fillDateCreate()
	 * @method \Bitrix\Main\Type\DateTime getDateUpdate()
	 * @method \Bitrix\Sale\Internals\EO_EntityMarker setDateUpdate(\Bitrix\Main\Type\DateTime|\Bitrix\Main\DB\SqlExpression $dateUpdate)
	 * @method bool hasDateUpdate()
	 * @method bool isDateUpdateFilled()
	 * @method bool isDateUpdateChanged()
	 * @method \Bitrix\Main\Type\DateTime remindActualDateUpdate()
	 * @method \Bitrix\Main\Type\DateTime requireDateUpdate()
	 * @method \Bitrix\Sale\Internals\EO_EntityMarker resetDateUpdate()
	 * @method \Bitrix\Sale\Internals\EO_EntityMarker unsetDateUpdate()
	 * @method \Bitrix\Main\Type\DateTime fillDateUpdate()
	 * @method \boolean getSuccess()
	 * @method \Bitrix\Sale\Internals\EO_EntityMarker setSuccess(\boolean|\Bitrix\Main\DB\SqlExpression $success)
	 * @method bool hasSuccess()
	 * @method bool isSuccessFilled()
	 * @method bool isSuccessChanged()
	 * @method \boolean remindActualSuccess()
	 * @method \boolean requireSuccess()
	 * @method \Bitrix\Sale\Internals\EO_EntityMarker resetSuccess()
	 * @method \Bitrix\Sale\Internals\EO_EntityMarker unsetSuccess()
	 * @method \boolean fillSuccess()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Sale\Internals\EO_EntityMarker set($fieldName, $value)
	 * @method \Bitrix\Sale\Internals\EO_EntityMarker reset($fieldName)
	 * @method \Bitrix\Sale\Internals\EO_EntityMarker unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Sale\Internals\EO_EntityMarker wakeUp($data)
	 */
	class EO_EntityMarker {
		/* @var \Bitrix\Sale\Internals\EntityMarkerTable */
		static public $dataClass = '\Bitrix\Sale\Internals\EntityMarkerTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Sale\Internals {
	/**
	 * EO_EntityMarker_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getIdList()
	 * @method \int[] getOrderIdList()
	 * @method \int[] fillOrderId()
	 * @method \string[] getEntityTypeList()
	 * @method \string[] fillEntityType()
	 * @method \int[] getEntityIdList()
	 * @method \int[] fillEntityId()
	 * @method \string[] getTypeList()
	 * @method \string[] fillType()
	 * @method \string[] getCodeList()
	 * @method \string[] fillCode()
	 * @method \string[] getMessageList()
	 * @method \string[] fillMessage()
	 * @method \string[] getCommentList()
	 * @method \string[] fillComment()
	 * @method \int[] getUserIdList()
	 * @method \int[] fillUserId()
	 * @method \Bitrix\Main\Type\DateTime[] getDateCreateList()
	 * @method \Bitrix\Main\Type\DateTime[] fillDateCreate()
	 * @method \Bitrix\Main\Type\DateTime[] getDateUpdateList()
	 * @method \Bitrix\Main\Type\DateTime[] fillDateUpdate()
	 * @method \boolean[] getSuccessList()
	 * @method \boolean[] fillSuccess()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Sale\Internals\EO_EntityMarker $object)
	 * @method bool has(\Bitrix\Sale\Internals\EO_EntityMarker $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Sale\Internals\EO_EntityMarker getByPrimary($primary)
	 * @method \Bitrix\Sale\Internals\EO_EntityMarker[] getAll()
	 * @method bool remove(\Bitrix\Sale\Internals\EO_EntityMarker $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Sale\Internals\EO_EntityMarker_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Sale\Internals\EO_EntityMarker current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 * @method EO_EntityMarker_Collection merge(?EO_EntityMarker_Collection $collection)
	 * @method bool isEmpty()
	 */
	class EO_EntityMarker_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Sale\Internals\EntityMarkerTable */
		static public $dataClass = '\Bitrix\Sale\Internals\EntityMarkerTable';
	}
}
namespace Bitrix\Sale\Internals {
	/**
	 * Common methods:
	 * ---------------
	 *
	 * @method EO_EntityMarker_Result exec()
	 * @method \Bitrix\Sale\Internals\EO_EntityMarker fetchObject()
	 * @method \Bitrix\Sale\Internals\EO_EntityMarker_Collection fetchCollection()
	 *
	 * Custom methods:
	 * ---------------
	 *
	 */
	class EO_EntityMarker_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Sale\Internals\EO_EntityMarker fetchObject()
	 * @method \Bitrix\Sale\Internals\EO_EntityMarker_Collection fetchCollection()
	 */
	class EO_EntityMarker_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Sale\Internals\EO_EntityMarker createObject($setDefaultValues = true)
	 * @method \Bitrix\Sale\Internals\EO_EntityMarker_Collection createCollection()
	 * @method \Bitrix\Sale\Internals\EO_EntityMarker wakeUpObject($row)
	 * @method \Bitrix\Sale\Internals\EO_EntityMarker_Collection wakeUpCollection($rows)
	 */
	class EO_EntityMarker_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Sale\Internals\FacebookConversionParamsTable:sale\lib\internals\facebookconversionparams.php */
namespace Bitrix\Sale\Internals {
	/**
	 * EO_FacebookConversionParams
	 * @see \Bitrix\Sale\Internals\FacebookConversionParamsTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getId()
	 * @method \Bitrix\Sale\Internals\EO_FacebookConversionParams setId(\int|\Bitrix\Main\DB\SqlExpression $id)
	 * @method bool hasId()
	 * @method bool isIdFilled()
	 * @method bool isIdChanged()
	 * @method \string getEventName()
	 * @method \Bitrix\Sale\Internals\EO_FacebookConversionParams setEventName(\string|\Bitrix\Main\DB\SqlExpression $eventName)
	 * @method bool hasEventName()
	 * @method bool isEventNameFilled()
	 * @method bool isEventNameChanged()
	 * @method \string remindActualEventName()
	 * @method \string requireEventName()
	 * @method \Bitrix\Sale\Internals\EO_FacebookConversionParams resetEventName()
	 * @method \Bitrix\Sale\Internals\EO_FacebookConversionParams unsetEventName()
	 * @method \string fillEventName()
	 * @method \string getLid()
	 * @method \Bitrix\Sale\Internals\EO_FacebookConversionParams setLid(\string|\Bitrix\Main\DB\SqlExpression $lid)
	 * @method bool hasLid()
	 * @method bool isLidFilled()
	 * @method bool isLidChanged()
	 * @method \string remindActualLid()
	 * @method \string requireLid()
	 * @method \Bitrix\Sale\Internals\EO_FacebookConversionParams resetLid()
	 * @method \Bitrix\Sale\Internals\EO_FacebookConversionParams unsetLid()
	 * @method \string fillLid()
	 * @method \string getEnabled()
	 * @method \Bitrix\Sale\Internals\EO_FacebookConversionParams setEnabled(\string|\Bitrix\Main\DB\SqlExpression $enabled)
	 * @method bool hasEnabled()
	 * @method bool isEnabledFilled()
	 * @method bool isEnabledChanged()
	 * @method \string remindActualEnabled()
	 * @method \string requireEnabled()
	 * @method \Bitrix\Sale\Internals\EO_FacebookConversionParams resetEnabled()
	 * @method \Bitrix\Sale\Internals\EO_FacebookConversionParams unsetEnabled()
	 * @method \string fillEnabled()
	 * @method \string getParams()
	 * @method \Bitrix\Sale\Internals\EO_FacebookConversionParams setParams(\string|\Bitrix\Main\DB\SqlExpression $params)
	 * @method bool hasParams()
	 * @method bool isParamsFilled()
	 * @method bool isParamsChanged()
	 * @method \string remindActualParams()
	 * @method \string requireParams()
	 * @method \Bitrix\Sale\Internals\EO_FacebookConversionParams resetParams()
	 * @method \Bitrix\Sale\Internals\EO_FacebookConversionParams unsetParams()
	 * @method \string fillParams()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Sale\Internals\EO_FacebookConversionParams set($fieldName, $value)
	 * @method \Bitrix\Sale\Internals\EO_FacebookConversionParams reset($fieldName)
	 * @method \Bitrix\Sale\Internals\EO_FacebookConversionParams unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Sale\Internals\EO_FacebookConversionParams wakeUp($data)
	 */
	class EO_FacebookConversionParams {
		/* @var \Bitrix\Sale\Internals\FacebookConversionParamsTable */
		static public $dataClass = '\Bitrix\Sale\Internals\FacebookConversionParamsTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Sale\Internals {
	/**
	 * EO_FacebookConversionParams_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getIdList()
	 * @method \string[] getEventNameList()
	 * @method \string[] fillEventName()
	 * @method \string[] getLidList()
	 * @method \string[] fillLid()
	 * @method \string[] getEnabledList()
	 * @method \string[] fillEnabled()
	 * @method \string[] getParamsList()
	 * @method \string[] fillParams()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Sale\Internals\EO_FacebookConversionParams $object)
	 * @method bool has(\Bitrix\Sale\Internals\EO_FacebookConversionParams $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Sale\Internals\EO_FacebookConversionParams getByPrimary($primary)
	 * @method \Bitrix\Sale\Internals\EO_FacebookConversionParams[] getAll()
	 * @method bool remove(\Bitrix\Sale\Internals\EO_FacebookConversionParams $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Sale\Internals\EO_FacebookConversionParams_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Sale\Internals\EO_FacebookConversionParams current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 * @method EO_FacebookConversionParams_Collection merge(?EO_FacebookConversionParams_Collection $collection)
	 * @method bool isEmpty()
	 */
	class EO_FacebookConversionParams_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Sale\Internals\FacebookConversionParamsTable */
		static public $dataClass = '\Bitrix\Sale\Internals\FacebookConversionParamsTable';
	}
}
namespace Bitrix\Sale\Internals {
	/**
	 * Common methods:
	 * ---------------
	 *
	 * @method EO_FacebookConversionParams_Result exec()
	 * @method \Bitrix\Sale\Internals\EO_FacebookConversionParams fetchObject()
	 * @method \Bitrix\Sale\Internals\EO_FacebookConversionParams_Collection fetchCollection()
	 *
	 * Custom methods:
	 * ---------------
	 *
	 */
	class EO_FacebookConversionParams_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Sale\Internals\EO_FacebookConversionParams fetchObject()
	 * @method \Bitrix\Sale\Internals\EO_FacebookConversionParams_Collection fetchCollection()
	 */
	class EO_FacebookConversionParams_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Sale\Internals\EO_FacebookConversionParams createObject($setDefaultValues = true)
	 * @method \Bitrix\Sale\Internals\EO_FacebookConversionParams_Collection createCollection()
	 * @method \Bitrix\Sale\Internals\EO_FacebookConversionParams wakeUpObject($row)
	 * @method \Bitrix\Sale\Internals\EO_FacebookConversionParams_Collection wakeUpCollection($rows)
	 */
	class EO_FacebookConversionParams_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Sale\Internals\OrderArchiveTable:sale\lib\internals\orderarchive.php */
namespace Bitrix\Sale\Internals {
	/**
	 * EO_OrderArchive
	 * @see \Bitrix\Sale\Internals\OrderArchiveTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getId()
	 * @method \Bitrix\Sale\Internals\EO_OrderArchive setId(\int|\Bitrix\Main\DB\SqlExpression $id)
	 * @method bool hasId()
	 * @method bool isIdFilled()
	 * @method bool isIdChanged()
	 * @method \string getLid()
	 * @method \Bitrix\Sale\Internals\EO_OrderArchive setLid(\string|\Bitrix\Main\DB\SqlExpression $lid)
	 * @method bool hasLid()
	 * @method bool isLidFilled()
	 * @method bool isLidChanged()
	 * @method \string remindActualLid()
	 * @method \string requireLid()
	 * @method \Bitrix\Sale\Internals\EO_OrderArchive resetLid()
	 * @method \Bitrix\Sale\Internals\EO_OrderArchive unsetLid()
	 * @method \string fillLid()
	 * @method \int getOrderId()
	 * @method \Bitrix\Sale\Internals\EO_OrderArchive setOrderId(\int|\Bitrix\Main\DB\SqlExpression $orderId)
	 * @method bool hasOrderId()
	 * @method bool isOrderIdFilled()
	 * @method bool isOrderIdChanged()
	 * @method \int remindActualOrderId()
	 * @method \int requireOrderId()
	 * @method \Bitrix\Sale\Internals\EO_OrderArchive resetOrderId()
	 * @method \Bitrix\Sale\Internals\EO_OrderArchive unsetOrderId()
	 * @method \int fillOrderId()
	 * @method \string getAccountNumber()
	 * @method \Bitrix\Sale\Internals\EO_OrderArchive setAccountNumber(\string|\Bitrix\Main\DB\SqlExpression $accountNumber)
	 * @method bool hasAccountNumber()
	 * @method bool isAccountNumberFilled()
	 * @method bool isAccountNumberChanged()
	 * @method \string remindActualAccountNumber()
	 * @method \string requireAccountNumber()
	 * @method \Bitrix\Sale\Internals\EO_OrderArchive resetAccountNumber()
	 * @method \Bitrix\Sale\Internals\EO_OrderArchive unsetAccountNumber()
	 * @method \string fillAccountNumber()
	 * @method \string getUserId()
	 * @method \Bitrix\Sale\Internals\EO_OrderArchive setUserId(\string|\Bitrix\Main\DB\SqlExpression $userId)
	 * @method bool hasUserId()
	 * @method bool isUserIdFilled()
	 * @method bool isUserIdChanged()
	 * @method \string remindActualUserId()
	 * @method \string requireUserId()
	 * @method \Bitrix\Sale\Internals\EO_OrderArchive resetUserId()
	 * @method \Bitrix\Sale\Internals\EO_OrderArchive unsetUserId()
	 * @method \string fillUserId()
	 * @method \Bitrix\Main\EO_User getUser()
	 * @method \Bitrix\Main\EO_User remindActualUser()
	 * @method \Bitrix\Main\EO_User requireUser()
	 * @method \Bitrix\Sale\Internals\EO_OrderArchive setUser(\Bitrix\Main\EO_User $object)
	 * @method \Bitrix\Sale\Internals\EO_OrderArchive resetUser()
	 * @method \Bitrix\Sale\Internals\EO_OrderArchive unsetUser()
	 * @method bool hasUser()
	 * @method bool isUserFilled()
	 * @method bool isUserChanged()
	 * @method \Bitrix\Main\EO_User fillUser()
	 * @method \string getPersonTypeId()
	 * @method \Bitrix\Sale\Internals\EO_OrderArchive setPersonTypeId(\string|\Bitrix\Main\DB\SqlExpression $personTypeId)
	 * @method bool hasPersonTypeId()
	 * @method bool isPersonTypeIdFilled()
	 * @method bool isPersonTypeIdChanged()
	 * @method \string remindActualPersonTypeId()
	 * @method \string requirePersonTypeId()
	 * @method \Bitrix\Sale\Internals\EO_OrderArchive resetPersonTypeId()
	 * @method \Bitrix\Sale\Internals\EO_OrderArchive unsetPersonTypeId()
	 * @method \string fillPersonTypeId()
	 * @method \string getStatusId()
	 * @method \Bitrix\Sale\Internals\EO_OrderArchive setStatusId(\string|\Bitrix\Main\DB\SqlExpression $statusId)
	 * @method bool hasStatusId()
	 * @method bool isStatusIdFilled()
	 * @method bool isStatusIdChanged()
	 * @method \string remindActualStatusId()
	 * @method \string requireStatusId()
	 * @method \Bitrix\Sale\Internals\EO_OrderArchive resetStatusId()
	 * @method \Bitrix\Sale\Internals\EO_OrderArchive unsetStatusId()
	 * @method \string fillStatusId()
	 * @method \Bitrix\Sale\Internals\EO_StatusLang getStatus()
	 * @method \Bitrix\Sale\Internals\EO_StatusLang remindActualStatus()
	 * @method \Bitrix\Sale\Internals\EO_StatusLang requireStatus()
	 * @method \Bitrix\Sale\Internals\EO_OrderArchive setStatus(\Bitrix\Sale\Internals\EO_StatusLang $object)
	 * @method \Bitrix\Sale\Internals\EO_OrderArchive resetStatus()
	 * @method \Bitrix\Sale\Internals\EO_OrderArchive unsetStatus()
	 * @method bool hasStatus()
	 * @method bool isStatusFilled()
	 * @method bool isStatusChanged()
	 * @method \Bitrix\Sale\Internals\EO_StatusLang fillStatus()
	 * @method \boolean getPayed()
	 * @method \Bitrix\Sale\Internals\EO_OrderArchive setPayed(\boolean|\Bitrix\Main\DB\SqlExpression $payed)
	 * @method bool hasPayed()
	 * @method bool isPayedFilled()
	 * @method bool isPayedChanged()
	 * @method \boolean remindActualPayed()
	 * @method \boolean requirePayed()
	 * @method \Bitrix\Sale\Internals\EO_OrderArchive resetPayed()
	 * @method \Bitrix\Sale\Internals\EO_OrderArchive unsetPayed()
	 * @method \boolean fillPayed()
	 * @method \boolean getDeducted()
	 * @method \Bitrix\Sale\Internals\EO_OrderArchive setDeducted(\boolean|\Bitrix\Main\DB\SqlExpression $deducted)
	 * @method bool hasDeducted()
	 * @method bool isDeductedFilled()
	 * @method bool isDeductedChanged()
	 * @method \boolean remindActualDeducted()
	 * @method \boolean requireDeducted()
	 * @method \Bitrix\Sale\Internals\EO_OrderArchive resetDeducted()
	 * @method \Bitrix\Sale\Internals\EO_OrderArchive unsetDeducted()
	 * @method \boolean fillDeducted()
	 * @method \boolean getCanceled()
	 * @method \Bitrix\Sale\Internals\EO_OrderArchive setCanceled(\boolean|\Bitrix\Main\DB\SqlExpression $canceled)
	 * @method bool hasCanceled()
	 * @method bool isCanceledFilled()
	 * @method bool isCanceledChanged()
	 * @method \boolean remindActualCanceled()
	 * @method \boolean requireCanceled()
	 * @method \Bitrix\Sale\Internals\EO_OrderArchive resetCanceled()
	 * @method \Bitrix\Sale\Internals\EO_OrderArchive unsetCanceled()
	 * @method \boolean fillCanceled()
	 * @method \float getPrice()
	 * @method \Bitrix\Sale\Internals\EO_OrderArchive setPrice(\float|\Bitrix\Main\DB\SqlExpression $price)
	 * @method bool hasPrice()
	 * @method bool isPriceFilled()
	 * @method bool isPriceChanged()
	 * @method \float remindActualPrice()
	 * @method \float requirePrice()
	 * @method \Bitrix\Sale\Internals\EO_OrderArchive resetPrice()
	 * @method \Bitrix\Sale\Internals\EO_OrderArchive unsetPrice()
	 * @method \float fillPrice()
	 * @method \float getSumPaid()
	 * @method \Bitrix\Sale\Internals\EO_OrderArchive setSumPaid(\float|\Bitrix\Main\DB\SqlExpression $sumPaid)
	 * @method bool hasSumPaid()
	 * @method bool isSumPaidFilled()
	 * @method bool isSumPaidChanged()
	 * @method \float remindActualSumPaid()
	 * @method \float requireSumPaid()
	 * @method \Bitrix\Sale\Internals\EO_OrderArchive resetSumPaid()
	 * @method \Bitrix\Sale\Internals\EO_OrderArchive unsetSumPaid()
	 * @method \float fillSumPaid()
	 * @method \string getCurrency()
	 * @method \Bitrix\Sale\Internals\EO_OrderArchive setCurrency(\string|\Bitrix\Main\DB\SqlExpression $currency)
	 * @method bool hasCurrency()
	 * @method bool isCurrencyFilled()
	 * @method bool isCurrencyChanged()
	 * @method \string remindActualCurrency()
	 * @method \string requireCurrency()
	 * @method \Bitrix\Sale\Internals\EO_OrderArchive resetCurrency()
	 * @method \Bitrix\Sale\Internals\EO_OrderArchive unsetCurrency()
	 * @method \string fillCurrency()
	 * @method \int getVersion()
	 * @method \Bitrix\Sale\Internals\EO_OrderArchive setVersion(\int|\Bitrix\Main\DB\SqlExpression $version)
	 * @method bool hasVersion()
	 * @method bool isVersionFilled()
	 * @method bool isVersionChanged()
	 * @method \int remindActualVersion()
	 * @method \int requireVersion()
	 * @method \Bitrix\Sale\Internals\EO_OrderArchive resetVersion()
	 * @method \Bitrix\Sale\Internals\EO_OrderArchive unsetVersion()
	 * @method \int fillVersion()
	 * @method \int getXmlId()
	 * @method \Bitrix\Sale\Internals\EO_OrderArchive setXmlId(\int|\Bitrix\Main\DB\SqlExpression $xmlId)
	 * @method bool hasXmlId()
	 * @method bool isXmlIdFilled()
	 * @method bool isXmlIdChanged()
	 * @method \int remindActualXmlId()
	 * @method \int requireXmlId()
	 * @method \Bitrix\Sale\Internals\EO_OrderArchive resetXmlId()
	 * @method \Bitrix\Sale\Internals\EO_OrderArchive unsetXmlId()
	 * @method \int fillXmlId()
	 * @method \int getId1c()
	 * @method \Bitrix\Sale\Internals\EO_OrderArchive setId1c(\int|\Bitrix\Main\DB\SqlExpression $id1c)
	 * @method bool hasId1c()
	 * @method bool isId1cFilled()
	 * @method bool isId1cChanged()
	 * @method \int remindActualId1c()
	 * @method \int requireId1c()
	 * @method \Bitrix\Sale\Internals\EO_OrderArchive resetId1c()
	 * @method \Bitrix\Sale\Internals\EO_OrderArchive unsetId1c()
	 * @method \int fillId1c()
	 * @method \Bitrix\Main\Type\DateTime getDateArchived()
	 * @method \Bitrix\Sale\Internals\EO_OrderArchive setDateArchived(\Bitrix\Main\Type\DateTime|\Bitrix\Main\DB\SqlExpression $dateArchived)
	 * @method bool hasDateArchived()
	 * @method bool isDateArchivedFilled()
	 * @method bool isDateArchivedChanged()
	 * @method \Bitrix\Main\Type\DateTime remindActualDateArchived()
	 * @method \Bitrix\Main\Type\DateTime requireDateArchived()
	 * @method \Bitrix\Sale\Internals\EO_OrderArchive resetDateArchived()
	 * @method \Bitrix\Sale\Internals\EO_OrderArchive unsetDateArchived()
	 * @method \Bitrix\Main\Type\DateTime fillDateArchived()
	 * @method \Bitrix\Main\Type\DateTime getDateInsert()
	 * @method \Bitrix\Sale\Internals\EO_OrderArchive setDateInsert(\Bitrix\Main\Type\DateTime|\Bitrix\Main\DB\SqlExpression $dateInsert)
	 * @method bool hasDateInsert()
	 * @method bool isDateInsertFilled()
	 * @method bool isDateInsertChanged()
	 * @method \Bitrix\Main\Type\DateTime remindActualDateInsert()
	 * @method \Bitrix\Main\Type\DateTime requireDateInsert()
	 * @method \Bitrix\Sale\Internals\EO_OrderArchive resetDateInsert()
	 * @method \Bitrix\Sale\Internals\EO_OrderArchive unsetDateInsert()
	 * @method \Bitrix\Main\Type\DateTime fillDateInsert()
	 * @method \int getResponsibleId()
	 * @method \Bitrix\Sale\Internals\EO_OrderArchive setResponsibleId(\int|\Bitrix\Main\DB\SqlExpression $responsibleId)
	 * @method bool hasResponsibleId()
	 * @method bool isResponsibleIdFilled()
	 * @method bool isResponsibleIdChanged()
	 * @method \int remindActualResponsibleId()
	 * @method \int requireResponsibleId()
	 * @method \Bitrix\Sale\Internals\EO_OrderArchive resetResponsibleId()
	 * @method \Bitrix\Sale\Internals\EO_OrderArchive unsetResponsibleId()
	 * @method \int fillResponsibleId()
	 * @method \int getCompanyId()
	 * @method \Bitrix\Sale\Internals\EO_OrderArchive setCompanyId(\int|\Bitrix\Main\DB\SqlExpression $companyId)
	 * @method bool hasCompanyId()
	 * @method bool isCompanyIdFilled()
	 * @method bool isCompanyIdChanged()
	 * @method \int remindActualCompanyId()
	 * @method \int requireCompanyId()
	 * @method \Bitrix\Sale\Internals\EO_OrderArchive resetCompanyId()
	 * @method \Bitrix\Sale\Internals\EO_OrderArchive unsetCompanyId()
	 * @method \int fillCompanyId()
	 * @method \string getOrderData()
	 * @method \Bitrix\Sale\Internals\EO_OrderArchive setOrderData(\string|\Bitrix\Main\DB\SqlExpression $orderData)
	 * @method bool hasOrderData()
	 * @method bool isOrderDataFilled()
	 * @method bool isOrderDataChanged()
	 * @method \string remindActualOrderData()
	 * @method \string requireOrderData()
	 * @method \Bitrix\Sale\Internals\EO_OrderArchive resetOrderData()
	 * @method \Bitrix\Sale\Internals\EO_OrderArchive unsetOrderData()
	 * @method \string fillOrderData()
	 * @method \Bitrix\Sale\Internals\EO_BasketArchive getBasketArchive()
	 * @method \Bitrix\Sale\Internals\EO_BasketArchive remindActualBasketArchive()
	 * @method \Bitrix\Sale\Internals\EO_BasketArchive requireBasketArchive()
	 * @method \Bitrix\Sale\Internals\EO_OrderArchive setBasketArchive(\Bitrix\Sale\Internals\EO_BasketArchive $object)
	 * @method \Bitrix\Sale\Internals\EO_OrderArchive resetBasketArchive()
	 * @method \Bitrix\Sale\Internals\EO_OrderArchive unsetBasketArchive()
	 * @method bool hasBasketArchive()
	 * @method bool isBasketArchiveFilled()
	 * @method bool isBasketArchiveChanged()
	 * @method \Bitrix\Sale\Internals\EO_BasketArchive fillBasketArchive()
	 * @method \Bitrix\Sale\Internals\EO_OrderArchivePacked getOrderPacked()
	 * @method \Bitrix\Sale\Internals\EO_OrderArchivePacked remindActualOrderPacked()
	 * @method \Bitrix\Sale\Internals\EO_OrderArchivePacked requireOrderPacked()
	 * @method \Bitrix\Sale\Internals\EO_OrderArchive setOrderPacked(\Bitrix\Sale\Internals\EO_OrderArchivePacked $object)
	 * @method \Bitrix\Sale\Internals\EO_OrderArchive resetOrderPacked()
	 * @method \Bitrix\Sale\Internals\EO_OrderArchive unsetOrderPacked()
	 * @method bool hasOrderPacked()
	 * @method bool isOrderPackedFilled()
	 * @method bool isOrderPackedChanged()
	 * @method \Bitrix\Sale\Internals\EO_OrderArchivePacked fillOrderPacked()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Sale\Internals\EO_OrderArchive set($fieldName, $value)
	 * @method \Bitrix\Sale\Internals\EO_OrderArchive reset($fieldName)
	 * @method \Bitrix\Sale\Internals\EO_OrderArchive unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Sale\Internals\EO_OrderArchive wakeUp($data)
	 */
	class EO_OrderArchive {
		/* @var \Bitrix\Sale\Internals\OrderArchiveTable */
		static public $dataClass = '\Bitrix\Sale\Internals\OrderArchiveTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Sale\Internals {
	/**
	 * EO_OrderArchive_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getIdList()
	 * @method \string[] getLidList()
	 * @method \string[] fillLid()
	 * @method \int[] getOrderIdList()
	 * @method \int[] fillOrderId()
	 * @method \string[] getAccountNumberList()
	 * @method \string[] fillAccountNumber()
	 * @method \string[] getUserIdList()
	 * @method \string[] fillUserId()
	 * @method \Bitrix\Main\EO_User[] getUserList()
	 * @method \Bitrix\Sale\Internals\EO_OrderArchive_Collection getUserCollection()
	 * @method \Bitrix\Main\EO_User_Collection fillUser()
	 * @method \string[] getPersonTypeIdList()
	 * @method \string[] fillPersonTypeId()
	 * @method \string[] getStatusIdList()
	 * @method \string[] fillStatusId()
	 * @method \Bitrix\Sale\Internals\EO_StatusLang[] getStatusList()
	 * @method \Bitrix\Sale\Internals\EO_OrderArchive_Collection getStatusCollection()
	 * @method \Bitrix\Sale\Internals\EO_StatusLang_Collection fillStatus()
	 * @method \boolean[] getPayedList()
	 * @method \boolean[] fillPayed()
	 * @method \boolean[] getDeductedList()
	 * @method \boolean[] fillDeducted()
	 * @method \boolean[] getCanceledList()
	 * @method \boolean[] fillCanceled()
	 * @method \float[] getPriceList()
	 * @method \float[] fillPrice()
	 * @method \float[] getSumPaidList()
	 * @method \float[] fillSumPaid()
	 * @method \string[] getCurrencyList()
	 * @method \string[] fillCurrency()
	 * @method \int[] getVersionList()
	 * @method \int[] fillVersion()
	 * @method \int[] getXmlIdList()
	 * @method \int[] fillXmlId()
	 * @method \int[] getId1cList()
	 * @method \int[] fillId1c()
	 * @method \Bitrix\Main\Type\DateTime[] getDateArchivedList()
	 * @method \Bitrix\Main\Type\DateTime[] fillDateArchived()
	 * @method \Bitrix\Main\Type\DateTime[] getDateInsertList()
	 * @method \Bitrix\Main\Type\DateTime[] fillDateInsert()
	 * @method \int[] getResponsibleIdList()
	 * @method \int[] fillResponsibleId()
	 * @method \int[] getCompanyIdList()
	 * @method \int[] fillCompanyId()
	 * @method \string[] getOrderDataList()
	 * @method \string[] fillOrderData()
	 * @method \Bitrix\Sale\Internals\EO_BasketArchive[] getBasketArchiveList()
	 * @method \Bitrix\Sale\Internals\EO_OrderArchive_Collection getBasketArchiveCollection()
	 * @method \Bitrix\Sale\Internals\EO_BasketArchive_Collection fillBasketArchive()
	 * @method \Bitrix\Sale\Internals\EO_OrderArchivePacked[] getOrderPackedList()
	 * @method \Bitrix\Sale\Internals\EO_OrderArchive_Collection getOrderPackedCollection()
	 * @method \Bitrix\Sale\Internals\EO_OrderArchivePacked_Collection fillOrderPacked()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Sale\Internals\EO_OrderArchive $object)
	 * @method bool has(\Bitrix\Sale\Internals\EO_OrderArchive $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Sale\Internals\EO_OrderArchive getByPrimary($primary)
	 * @method \Bitrix\Sale\Internals\EO_OrderArchive[] getAll()
	 * @method bool remove(\Bitrix\Sale\Internals\EO_OrderArchive $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Sale\Internals\EO_OrderArchive_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Sale\Internals\EO_OrderArchive current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 * @method EO_OrderArchive_Collection merge(?EO_OrderArchive_Collection $collection)
	 * @method bool isEmpty()
	 */
	class EO_OrderArchive_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Sale\Internals\OrderArchiveTable */
		static public $dataClass = '\Bitrix\Sale\Internals\OrderArchiveTable';
	}
}
namespace Bitrix\Sale\Internals {
	/**
	 * Common methods:
	 * ---------------
	 *
	 * @method EO_OrderArchive_Result exec()
	 * @method \Bitrix\Sale\Internals\EO_OrderArchive fetchObject()
	 * @method \Bitrix\Sale\Internals\EO_OrderArchive_Collection fetchCollection()
	 *
	 * Custom methods:
	 * ---------------
	 *
	 */
	class EO_OrderArchive_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Sale\Internals\EO_OrderArchive fetchObject()
	 * @method \Bitrix\Sale\Internals\EO_OrderArchive_Collection fetchCollection()
	 */
	class EO_OrderArchive_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Sale\Internals\EO_OrderArchive createObject($setDefaultValues = true)
	 * @method \Bitrix\Sale\Internals\EO_OrderArchive_Collection createCollection()
	 * @method \Bitrix\Sale\Internals\EO_OrderArchive wakeUpObject($row)
	 * @method \Bitrix\Sale\Internals\EO_OrderArchive_Collection wakeUpCollection($rows)
	 */
	class EO_OrderArchive_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Sale\Internals\OrderArchivePackedTable:sale\lib\internals\orderarchivepacked.php */
namespace Bitrix\Sale\Internals {
	/**
	 * EO_OrderArchivePacked
	 * @see \Bitrix\Sale\Internals\OrderArchivePackedTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getOrderArchiveId()
	 * @method \Bitrix\Sale\Internals\EO_OrderArchivePacked setOrderArchiveId(\int|\Bitrix\Main\DB\SqlExpression $orderArchiveId)
	 * @method bool hasOrderArchiveId()
	 * @method bool isOrderArchiveIdFilled()
	 * @method bool isOrderArchiveIdChanged()
	 * @method \string getOrderData()
	 * @method \Bitrix\Sale\Internals\EO_OrderArchivePacked setOrderData(\string|\Bitrix\Main\DB\SqlExpression $orderData)
	 * @method bool hasOrderData()
	 * @method bool isOrderDataFilled()
	 * @method bool isOrderDataChanged()
	 * @method \string remindActualOrderData()
	 * @method \string requireOrderData()
	 * @method \Bitrix\Sale\Internals\EO_OrderArchivePacked resetOrderData()
	 * @method \Bitrix\Sale\Internals\EO_OrderArchivePacked unsetOrderData()
	 * @method \string fillOrderData()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Sale\Internals\EO_OrderArchivePacked set($fieldName, $value)
	 * @method \Bitrix\Sale\Internals\EO_OrderArchivePacked reset($fieldName)
	 * @method \Bitrix\Sale\Internals\EO_OrderArchivePacked unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Sale\Internals\EO_OrderArchivePacked wakeUp($data)
	 */
	class EO_OrderArchivePacked {
		/* @var \Bitrix\Sale\Internals\OrderArchivePackedTable */
		static public $dataClass = '\Bitrix\Sale\Internals\OrderArchivePackedTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Sale\Internals {
	/**
	 * EO_OrderArchivePacked_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getOrderArchiveIdList()
	 * @method \string[] getOrderDataList()
	 * @method \string[] fillOrderData()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Sale\Internals\EO_OrderArchivePacked $object)
	 * @method bool has(\Bitrix\Sale\Internals\EO_OrderArchivePacked $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Sale\Internals\EO_OrderArchivePacked getByPrimary($primary)
	 * @method \Bitrix\Sale\Internals\EO_OrderArchivePacked[] getAll()
	 * @method bool remove(\Bitrix\Sale\Internals\EO_OrderArchivePacked $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Sale\Internals\EO_OrderArchivePacked_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Sale\Internals\EO_OrderArchivePacked current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 * @method EO_OrderArchivePacked_Collection merge(?EO_OrderArchivePacked_Collection $collection)
	 * @method bool isEmpty()
	 */
	class EO_OrderArchivePacked_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Sale\Internals\OrderArchivePackedTable */
		static public $dataClass = '\Bitrix\Sale\Internals\OrderArchivePackedTable';
	}
}
namespace Bitrix\Sale\Internals {
	/**
	 * Common methods:
	 * ---------------
	 *
	 * @method EO_OrderArchivePacked_Result exec()
	 * @method \Bitrix\Sale\Internals\EO_OrderArchivePacked fetchObject()
	 * @method \Bitrix\Sale\Internals\EO_OrderArchivePacked_Collection fetchCollection()
	 *
	 * Custom methods:
	 * ---------------
	 *
	 */
	class EO_OrderArchivePacked_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Sale\Internals\EO_OrderArchivePacked fetchObject()
	 * @method \Bitrix\Sale\Internals\EO_OrderArchivePacked_Collection fetchCollection()
	 */
	class EO_OrderArchivePacked_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Sale\Internals\EO_OrderArchivePacked createObject($setDefaultValues = true)
	 * @method \Bitrix\Sale\Internals\EO_OrderArchivePacked_Collection createCollection()
	 * @method \Bitrix\Sale\Internals\EO_OrderArchivePacked wakeUpObject($row)
	 * @method \Bitrix\Sale\Internals\EO_OrderArchivePacked_Collection wakeUpCollection($rows)
	 */
	class EO_OrderArchivePacked_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Sale\Internals\OrderChangeTable:sale\lib\internals\orderchange.php */
namespace Bitrix\Sale\Internals {
	/**
	 * EO_OrderChange
	 * @see \Bitrix\Sale\Internals\OrderChangeTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getId()
	 * @method \Bitrix\Sale\Internals\EO_OrderChange setId(\int|\Bitrix\Main\DB\SqlExpression $id)
	 * @method bool hasId()
	 * @method bool isIdFilled()
	 * @method bool isIdChanged()
	 * @method \int getOrderId()
	 * @method \Bitrix\Sale\Internals\EO_OrderChange setOrderId(\int|\Bitrix\Main\DB\SqlExpression $orderId)
	 * @method bool hasOrderId()
	 * @method bool isOrderIdFilled()
	 * @method bool isOrderIdChanged()
	 * @method \int remindActualOrderId()
	 * @method \int requireOrderId()
	 * @method \Bitrix\Sale\Internals\EO_OrderChange resetOrderId()
	 * @method \Bitrix\Sale\Internals\EO_OrderChange unsetOrderId()
	 * @method \int fillOrderId()
	 * @method \string getType()
	 * @method \Bitrix\Sale\Internals\EO_OrderChange setType(\string|\Bitrix\Main\DB\SqlExpression $type)
	 * @method bool hasType()
	 * @method bool isTypeFilled()
	 * @method bool isTypeChanged()
	 * @method \string remindActualType()
	 * @method \string requireType()
	 * @method \Bitrix\Sale\Internals\EO_OrderChange resetType()
	 * @method \Bitrix\Sale\Internals\EO_OrderChange unsetType()
	 * @method \string fillType()
	 * @method \string getData()
	 * @method \Bitrix\Sale\Internals\EO_OrderChange setData(\string|\Bitrix\Main\DB\SqlExpression $data)
	 * @method bool hasData()
	 * @method bool isDataFilled()
	 * @method bool isDataChanged()
	 * @method \string remindActualData()
	 * @method \string requireData()
	 * @method \Bitrix\Sale\Internals\EO_OrderChange resetData()
	 * @method \Bitrix\Sale\Internals\EO_OrderChange unsetData()
	 * @method \string fillData()
	 * @method \Bitrix\Main\Type\DateTime getDateCreate()
	 * @method \Bitrix\Sale\Internals\EO_OrderChange setDateCreate(\Bitrix\Main\Type\DateTime|\Bitrix\Main\DB\SqlExpression $dateCreate)
	 * @method bool hasDateCreate()
	 * @method bool isDateCreateFilled()
	 * @method bool isDateCreateChanged()
	 * @method \Bitrix\Main\Type\DateTime remindActualDateCreate()
	 * @method \Bitrix\Main\Type\DateTime requireDateCreate()
	 * @method \Bitrix\Sale\Internals\EO_OrderChange resetDateCreate()
	 * @method \Bitrix\Sale\Internals\EO_OrderChange unsetDateCreate()
	 * @method \Bitrix\Main\Type\DateTime fillDateCreate()
	 * @method \Bitrix\Main\Type\DateTime getDateModify()
	 * @method \Bitrix\Sale\Internals\EO_OrderChange setDateModify(\Bitrix\Main\Type\DateTime|\Bitrix\Main\DB\SqlExpression $dateModify)
	 * @method bool hasDateModify()
	 * @method bool isDateModifyFilled()
	 * @method bool isDateModifyChanged()
	 * @method \Bitrix\Main\Type\DateTime remindActualDateModify()
	 * @method \Bitrix\Main\Type\DateTime requireDateModify()
	 * @method \Bitrix\Sale\Internals\EO_OrderChange resetDateModify()
	 * @method \Bitrix\Sale\Internals\EO_OrderChange unsetDateModify()
	 * @method \Bitrix\Main\Type\DateTime fillDateModify()
	 * @method \int getUserId()
	 * @method \Bitrix\Sale\Internals\EO_OrderChange setUserId(\int|\Bitrix\Main\DB\SqlExpression $userId)
	 * @method bool hasUserId()
	 * @method bool isUserIdFilled()
	 * @method bool isUserIdChanged()
	 * @method \int remindActualUserId()
	 * @method \int requireUserId()
	 * @method \Bitrix\Sale\Internals\EO_OrderChange resetUserId()
	 * @method \Bitrix\Sale\Internals\EO_OrderChange unsetUserId()
	 * @method \int fillUserId()
	 * @method \string getEntity()
	 * @method \Bitrix\Sale\Internals\EO_OrderChange setEntity(\string|\Bitrix\Main\DB\SqlExpression $entity)
	 * @method bool hasEntity()
	 * @method bool isEntityFilled()
	 * @method bool isEntityChanged()
	 * @method \string remindActualEntity()
	 * @method \string requireEntity()
	 * @method \Bitrix\Sale\Internals\EO_OrderChange resetEntity()
	 * @method \Bitrix\Sale\Internals\EO_OrderChange unsetEntity()
	 * @method \string fillEntity()
	 * @method \int getEntityId()
	 * @method \Bitrix\Sale\Internals\EO_OrderChange setEntityId(\int|\Bitrix\Main\DB\SqlExpression $entityId)
	 * @method bool hasEntityId()
	 * @method bool isEntityIdFilled()
	 * @method bool isEntityIdChanged()
	 * @method \int remindActualEntityId()
	 * @method \int requireEntityId()
	 * @method \Bitrix\Sale\Internals\EO_OrderChange resetEntityId()
	 * @method \Bitrix\Sale\Internals\EO_OrderChange unsetEntityId()
	 * @method \int fillEntityId()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Sale\Internals\EO_OrderChange set($fieldName, $value)
	 * @method \Bitrix\Sale\Internals\EO_OrderChange reset($fieldName)
	 * @method \Bitrix\Sale\Internals\EO_OrderChange unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Sale\Internals\EO_OrderChange wakeUp($data)
	 */
	class EO_OrderChange {
		/* @var \Bitrix\Sale\Internals\OrderChangeTable */
		static public $dataClass = '\Bitrix\Sale\Internals\OrderChangeTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Sale\Internals {
	/**
	 * EO_OrderChange_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getIdList()
	 * @method \int[] getOrderIdList()
	 * @method \int[] fillOrderId()
	 * @method \string[] getTypeList()
	 * @method \string[] fillType()
	 * @method \string[] getDataList()
	 * @method \string[] fillData()
	 * @method \Bitrix\Main\Type\DateTime[] getDateCreateList()
	 * @method \Bitrix\Main\Type\DateTime[] fillDateCreate()
	 * @method \Bitrix\Main\Type\DateTime[] getDateModifyList()
	 * @method \Bitrix\Main\Type\DateTime[] fillDateModify()
	 * @method \int[] getUserIdList()
	 * @method \int[] fillUserId()
	 * @method \string[] getEntityList()
	 * @method \string[] fillEntity()
	 * @method \int[] getEntityIdList()
	 * @method \int[] fillEntityId()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Sale\Internals\EO_OrderChange $object)
	 * @method bool has(\Bitrix\Sale\Internals\EO_OrderChange $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Sale\Internals\EO_OrderChange getByPrimary($primary)
	 * @method \Bitrix\Sale\Internals\EO_OrderChange[] getAll()
	 * @method bool remove(\Bitrix\Sale\Internals\EO_OrderChange $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Sale\Internals\EO_OrderChange_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Sale\Internals\EO_OrderChange current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 * @method EO_OrderChange_Collection merge(?EO_OrderChange_Collection $collection)
	 * @method bool isEmpty()
	 */
	class EO_OrderChange_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Sale\Internals\OrderChangeTable */
		static public $dataClass = '\Bitrix\Sale\Internals\OrderChangeTable';
	}
}
namespace Bitrix\Sale\Internals {
	/**
	 * Common methods:
	 * ---------------
	 *
	 * @method EO_OrderChange_Result exec()
	 * @method \Bitrix\Sale\Internals\EO_OrderChange fetchObject()
	 * @method \Bitrix\Sale\Internals\EO_OrderChange_Collection fetchCollection()
	 *
	 * Custom methods:
	 * ---------------
	 *
	 */
	class EO_OrderChange_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Sale\Internals\EO_OrderChange fetchObject()
	 * @method \Bitrix\Sale\Internals\EO_OrderChange_Collection fetchCollection()
	 */
	class EO_OrderChange_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Sale\Internals\EO_OrderChange createObject($setDefaultValues = true)
	 * @method \Bitrix\Sale\Internals\EO_OrderChange_Collection createCollection()
	 * @method \Bitrix\Sale\Internals\EO_OrderChange wakeUpObject($row)
	 * @method \Bitrix\Sale\Internals\EO_OrderChange_Collection wakeUpCollection($rows)
	 */
	class EO_OrderChange_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Sale\Internals\OrderConverterCrmErrorTable:sale\lib\internals\orderconvertercrmerror.php */
namespace Bitrix\Sale\Internals {
	/**
	 * EO_OrderConverterCrmError
	 * @see \Bitrix\Sale\Internals\OrderConverterCrmErrorTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getId()
	 * @method \Bitrix\Sale\Internals\EO_OrderConverterCrmError setId(\int|\Bitrix\Main\DB\SqlExpression $id)
	 * @method bool hasId()
	 * @method bool isIdFilled()
	 * @method bool isIdChanged()
	 * @method \int getOrderId()
	 * @method \Bitrix\Sale\Internals\EO_OrderConverterCrmError setOrderId(\int|\Bitrix\Main\DB\SqlExpression $orderId)
	 * @method bool hasOrderId()
	 * @method bool isOrderIdFilled()
	 * @method bool isOrderIdChanged()
	 * @method \int remindActualOrderId()
	 * @method \int requireOrderId()
	 * @method \Bitrix\Sale\Internals\EO_OrderConverterCrmError resetOrderId()
	 * @method \Bitrix\Sale\Internals\EO_OrderConverterCrmError unsetOrderId()
	 * @method \int fillOrderId()
	 * @method \string getError()
	 * @method \Bitrix\Sale\Internals\EO_OrderConverterCrmError setError(\string|\Bitrix\Main\DB\SqlExpression $error)
	 * @method bool hasError()
	 * @method bool isErrorFilled()
	 * @method bool isErrorChanged()
	 * @method \string remindActualError()
	 * @method \string requireError()
	 * @method \Bitrix\Sale\Internals\EO_OrderConverterCrmError resetError()
	 * @method \Bitrix\Sale\Internals\EO_OrderConverterCrmError unsetError()
	 * @method \string fillError()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Sale\Internals\EO_OrderConverterCrmError set($fieldName, $value)
	 * @method \Bitrix\Sale\Internals\EO_OrderConverterCrmError reset($fieldName)
	 * @method \Bitrix\Sale\Internals\EO_OrderConverterCrmError unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Sale\Internals\EO_OrderConverterCrmError wakeUp($data)
	 */
	class EO_OrderConverterCrmError {
		/* @var \Bitrix\Sale\Internals\OrderConverterCrmErrorTable */
		static public $dataClass = '\Bitrix\Sale\Internals\OrderConverterCrmErrorTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Sale\Internals {
	/**
	 * EO_OrderConverterCrmError_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getIdList()
	 * @method \int[] getOrderIdList()
	 * @method \int[] fillOrderId()
	 * @method \string[] getErrorList()
	 * @method \string[] fillError()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Sale\Internals\EO_OrderConverterCrmError $object)
	 * @method bool has(\Bitrix\Sale\Internals\EO_OrderConverterCrmError $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Sale\Internals\EO_OrderConverterCrmError getByPrimary($primary)
	 * @method \Bitrix\Sale\Internals\EO_OrderConverterCrmError[] getAll()
	 * @method bool remove(\Bitrix\Sale\Internals\EO_OrderConverterCrmError $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Sale\Internals\EO_OrderConverterCrmError_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Sale\Internals\EO_OrderConverterCrmError current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 * @method EO_OrderConverterCrmError_Collection merge(?EO_OrderConverterCrmError_Collection $collection)
	 * @method bool isEmpty()
	 */
	class EO_OrderConverterCrmError_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Sale\Internals\OrderConverterCrmErrorTable */
		static public $dataClass = '\Bitrix\Sale\Internals\OrderConverterCrmErrorTable';
	}
}
namespace Bitrix\Sale\Internals {
	/**
	 * Common methods:
	 * ---------------
	 *
	 * @method EO_OrderConverterCrmError_Result exec()
	 * @method \Bitrix\Sale\Internals\EO_OrderConverterCrmError fetchObject()
	 * @method \Bitrix\Sale\Internals\EO_OrderConverterCrmError_Collection fetchCollection()
	 *
	 * Custom methods:
	 * ---------------
	 *
	 */
	class EO_OrderConverterCrmError_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Sale\Internals\EO_OrderConverterCrmError fetchObject()
	 * @method \Bitrix\Sale\Internals\EO_OrderConverterCrmError_Collection fetchCollection()
	 */
	class EO_OrderConverterCrmError_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Sale\Internals\EO_OrderConverterCrmError createObject($setDefaultValues = true)
	 * @method \Bitrix\Sale\Internals\EO_OrderConverterCrmError_Collection createCollection()
	 * @method \Bitrix\Sale\Internals\EO_OrderConverterCrmError wakeUpObject($row)
	 * @method \Bitrix\Sale\Internals\EO_OrderConverterCrmError_Collection wakeUpCollection($rows)
	 */
	class EO_OrderConverterCrmError_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Sale\Internals\OrderDeliveryReqTable:sale\lib\internals\orderdeliveryreq.php */
namespace Bitrix\Sale\Internals {
	/**
	 * EO_OrderDeliveryReq
	 * @see \Bitrix\Sale\Internals\OrderDeliveryReqTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getId()
	 * @method \Bitrix\Sale\Internals\EO_OrderDeliveryReq setId(\int|\Bitrix\Main\DB\SqlExpression $id)
	 * @method bool hasId()
	 * @method bool isIdFilled()
	 * @method bool isIdChanged()
	 * @method \int getOrderId()
	 * @method \Bitrix\Sale\Internals\EO_OrderDeliveryReq setOrderId(\int|\Bitrix\Main\DB\SqlExpression $orderId)
	 * @method bool hasOrderId()
	 * @method bool isOrderIdFilled()
	 * @method bool isOrderIdChanged()
	 * @method \int remindActualOrderId()
	 * @method \int requireOrderId()
	 * @method \Bitrix\Sale\Internals\EO_OrderDeliveryReq resetOrderId()
	 * @method \Bitrix\Sale\Internals\EO_OrderDeliveryReq unsetOrderId()
	 * @method \int fillOrderId()
	 * @method \string getDeliveryLocation()
	 * @method \Bitrix\Sale\Internals\EO_OrderDeliveryReq setDeliveryLocation(\string|\Bitrix\Main\DB\SqlExpression $deliveryLocation)
	 * @method bool hasDeliveryLocation()
	 * @method bool isDeliveryLocationFilled()
	 * @method bool isDeliveryLocationChanged()
	 * @method \string remindActualDeliveryLocation()
	 * @method \string requireDeliveryLocation()
	 * @method \Bitrix\Sale\Internals\EO_OrderDeliveryReq resetDeliveryLocation()
	 * @method \Bitrix\Sale\Internals\EO_OrderDeliveryReq unsetDeliveryLocation()
	 * @method \string fillDeliveryLocation()
	 * @method \Bitrix\Main\Type\DateTime getDateRequest()
	 * @method \Bitrix\Sale\Internals\EO_OrderDeliveryReq setDateRequest(\Bitrix\Main\Type\DateTime|\Bitrix\Main\DB\SqlExpression $dateRequest)
	 * @method bool hasDateRequest()
	 * @method bool isDateRequestFilled()
	 * @method bool isDateRequestChanged()
	 * @method \Bitrix\Main\Type\DateTime remindActualDateRequest()
	 * @method \Bitrix\Main\Type\DateTime requireDateRequest()
	 * @method \Bitrix\Sale\Internals\EO_OrderDeliveryReq resetDateRequest()
	 * @method \Bitrix\Sale\Internals\EO_OrderDeliveryReq unsetDateRequest()
	 * @method \Bitrix\Main\Type\DateTime fillDateRequest()
	 * @method \string getParams()
	 * @method \Bitrix\Sale\Internals\EO_OrderDeliveryReq setParams(\string|\Bitrix\Main\DB\SqlExpression $params)
	 * @method bool hasParams()
	 * @method bool isParamsFilled()
	 * @method bool isParamsChanged()
	 * @method \string remindActualParams()
	 * @method \string requireParams()
	 * @method \Bitrix\Sale\Internals\EO_OrderDeliveryReq resetParams()
	 * @method \Bitrix\Sale\Internals\EO_OrderDeliveryReq unsetParams()
	 * @method \string fillParams()
	 * @method \int getShipmentId()
	 * @method \Bitrix\Sale\Internals\EO_OrderDeliveryReq setShipmentId(\int|\Bitrix\Main\DB\SqlExpression $shipmentId)
	 * @method bool hasShipmentId()
	 * @method bool isShipmentIdFilled()
	 * @method bool isShipmentIdChanged()
	 * @method \int remindActualShipmentId()
	 * @method \int requireShipmentId()
	 * @method \Bitrix\Sale\Internals\EO_OrderDeliveryReq resetShipmentId()
	 * @method \Bitrix\Sale\Internals\EO_OrderDeliveryReq unsetShipmentId()
	 * @method \int fillShipmentId()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Sale\Internals\EO_OrderDeliveryReq set($fieldName, $value)
	 * @method \Bitrix\Sale\Internals\EO_OrderDeliveryReq reset($fieldName)
	 * @method \Bitrix\Sale\Internals\EO_OrderDeliveryReq unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Sale\Internals\EO_OrderDeliveryReq wakeUp($data)
	 */
	class EO_OrderDeliveryReq {
		/* @var \Bitrix\Sale\Internals\OrderDeliveryReqTable */
		static public $dataClass = '\Bitrix\Sale\Internals\OrderDeliveryReqTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Sale\Internals {
	/**
	 * EO_OrderDeliveryReq_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getIdList()
	 * @method \int[] getOrderIdList()
	 * @method \int[] fillOrderId()
	 * @method \string[] getDeliveryLocationList()
	 * @method \string[] fillDeliveryLocation()
	 * @method \Bitrix\Main\Type\DateTime[] getDateRequestList()
	 * @method \Bitrix\Main\Type\DateTime[] fillDateRequest()
	 * @method \string[] getParamsList()
	 * @method \string[] fillParams()
	 * @method \int[] getShipmentIdList()
	 * @method \int[] fillShipmentId()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Sale\Internals\EO_OrderDeliveryReq $object)
	 * @method bool has(\Bitrix\Sale\Internals\EO_OrderDeliveryReq $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Sale\Internals\EO_OrderDeliveryReq getByPrimary($primary)
	 * @method \Bitrix\Sale\Internals\EO_OrderDeliveryReq[] getAll()
	 * @method bool remove(\Bitrix\Sale\Internals\EO_OrderDeliveryReq $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Sale\Internals\EO_OrderDeliveryReq_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Sale\Internals\EO_OrderDeliveryReq current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 * @method EO_OrderDeliveryReq_Collection merge(?EO_OrderDeliveryReq_Collection $collection)
	 * @method bool isEmpty()
	 */
	class EO_OrderDeliveryReq_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Sale\Internals\OrderDeliveryReqTable */
		static public $dataClass = '\Bitrix\Sale\Internals\OrderDeliveryReqTable';
	}
}
namespace Bitrix\Sale\Internals {
	/**
	 * Common methods:
	 * ---------------
	 *
	 * @method EO_OrderDeliveryReq_Result exec()
	 * @method \Bitrix\Sale\Internals\EO_OrderDeliveryReq fetchObject()
	 * @method \Bitrix\Sale\Internals\EO_OrderDeliveryReq_Collection fetchCollection()
	 *
	 * Custom methods:
	 * ---------------
	 *
	 */
	class EO_OrderDeliveryReq_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Sale\Internals\EO_OrderDeliveryReq fetchObject()
	 * @method \Bitrix\Sale\Internals\EO_OrderDeliveryReq_Collection fetchCollection()
	 */
	class EO_OrderDeliveryReq_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Sale\Internals\EO_OrderDeliveryReq createObject($setDefaultValues = true)
	 * @method \Bitrix\Sale\Internals\EO_OrderDeliveryReq_Collection createCollection()
	 * @method \Bitrix\Sale\Internals\EO_OrderDeliveryReq wakeUpObject($row)
	 * @method \Bitrix\Sale\Internals\EO_OrderDeliveryReq_Collection wakeUpCollection($rows)
	 */
	class EO_OrderDeliveryReq_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Sale\Internals\OrderDiscountTable:sale\lib\internals\orderdiscount.php */
namespace Bitrix\Sale\Internals {
	/**
	 * EO_OrderDiscount
	 * @see \Bitrix\Sale\Internals\OrderDiscountTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getId()
	 * @method \Bitrix\Sale\Internals\EO_OrderDiscount setId(\int|\Bitrix\Main\DB\SqlExpression $id)
	 * @method bool hasId()
	 * @method bool isIdFilled()
	 * @method bool isIdChanged()
	 * @method \string getModuleId()
	 * @method \Bitrix\Sale\Internals\EO_OrderDiscount setModuleId(\string|\Bitrix\Main\DB\SqlExpression $moduleId)
	 * @method bool hasModuleId()
	 * @method bool isModuleIdFilled()
	 * @method bool isModuleIdChanged()
	 * @method \string remindActualModuleId()
	 * @method \string requireModuleId()
	 * @method \Bitrix\Sale\Internals\EO_OrderDiscount resetModuleId()
	 * @method \Bitrix\Sale\Internals\EO_OrderDiscount unsetModuleId()
	 * @method \string fillModuleId()
	 * @method \int getDiscountId()
	 * @method \Bitrix\Sale\Internals\EO_OrderDiscount setDiscountId(\int|\Bitrix\Main\DB\SqlExpression $discountId)
	 * @method bool hasDiscountId()
	 * @method bool isDiscountIdFilled()
	 * @method bool isDiscountIdChanged()
	 * @method \int remindActualDiscountId()
	 * @method \int requireDiscountId()
	 * @method \Bitrix\Sale\Internals\EO_OrderDiscount resetDiscountId()
	 * @method \Bitrix\Sale\Internals\EO_OrderDiscount unsetDiscountId()
	 * @method \int fillDiscountId()
	 * @method \string getName()
	 * @method \Bitrix\Sale\Internals\EO_OrderDiscount setName(\string|\Bitrix\Main\DB\SqlExpression $name)
	 * @method bool hasName()
	 * @method bool isNameFilled()
	 * @method bool isNameChanged()
	 * @method \string remindActualName()
	 * @method \string requireName()
	 * @method \Bitrix\Sale\Internals\EO_OrderDiscount resetName()
	 * @method \Bitrix\Sale\Internals\EO_OrderDiscount unsetName()
	 * @method \string fillName()
	 * @method \string getDiscountHash()
	 * @method \Bitrix\Sale\Internals\EO_OrderDiscount setDiscountHash(\string|\Bitrix\Main\DB\SqlExpression $discountHash)
	 * @method bool hasDiscountHash()
	 * @method bool isDiscountHashFilled()
	 * @method bool isDiscountHashChanged()
	 * @method \string remindActualDiscountHash()
	 * @method \string requireDiscountHash()
	 * @method \Bitrix\Sale\Internals\EO_OrderDiscount resetDiscountHash()
	 * @method \Bitrix\Sale\Internals\EO_OrderDiscount unsetDiscountHash()
	 * @method \string fillDiscountHash()
	 * @method \string getConditions()
	 * @method \Bitrix\Sale\Internals\EO_OrderDiscount setConditions(\string|\Bitrix\Main\DB\SqlExpression $conditions)
	 * @method bool hasConditions()
	 * @method bool isConditionsFilled()
	 * @method bool isConditionsChanged()
	 * @method \string remindActualConditions()
	 * @method \string requireConditions()
	 * @method \Bitrix\Sale\Internals\EO_OrderDiscount resetConditions()
	 * @method \Bitrix\Sale\Internals\EO_OrderDiscount unsetConditions()
	 * @method \string fillConditions()
	 * @method \string getUnpack()
	 * @method \Bitrix\Sale\Internals\EO_OrderDiscount setUnpack(\string|\Bitrix\Main\DB\SqlExpression $unpack)
	 * @method bool hasUnpack()
	 * @method bool isUnpackFilled()
	 * @method bool isUnpackChanged()
	 * @method \string remindActualUnpack()
	 * @method \string requireUnpack()
	 * @method \Bitrix\Sale\Internals\EO_OrderDiscount resetUnpack()
	 * @method \Bitrix\Sale\Internals\EO_OrderDiscount unsetUnpack()
	 * @method \string fillUnpack()
	 * @method \string getActions()
	 * @method \Bitrix\Sale\Internals\EO_OrderDiscount setActions(\string|\Bitrix\Main\DB\SqlExpression $actions)
	 * @method bool hasActions()
	 * @method bool isActionsFilled()
	 * @method bool isActionsChanged()
	 * @method \string remindActualActions()
	 * @method \string requireActions()
	 * @method \Bitrix\Sale\Internals\EO_OrderDiscount resetActions()
	 * @method \Bitrix\Sale\Internals\EO_OrderDiscount unsetActions()
	 * @method \string fillActions()
	 * @method \string getApplication()
	 * @method \Bitrix\Sale\Internals\EO_OrderDiscount setApplication(\string|\Bitrix\Main\DB\SqlExpression $application)
	 * @method bool hasApplication()
	 * @method bool isApplicationFilled()
	 * @method bool isApplicationChanged()
	 * @method \string remindActualApplication()
	 * @method \string requireApplication()
	 * @method \Bitrix\Sale\Internals\EO_OrderDiscount resetApplication()
	 * @method \Bitrix\Sale\Internals\EO_OrderDiscount unsetApplication()
	 * @method \string fillApplication()
	 * @method \boolean getUseCoupons()
	 * @method \Bitrix\Sale\Internals\EO_OrderDiscount setUseCoupons(\boolean|\Bitrix\Main\DB\SqlExpression $useCoupons)
	 * @method bool hasUseCoupons()
	 * @method bool isUseCouponsFilled()
	 * @method bool isUseCouponsChanged()
	 * @method \boolean remindActualUseCoupons()
	 * @method \boolean requireUseCoupons()
	 * @method \Bitrix\Sale\Internals\EO_OrderDiscount resetUseCoupons()
	 * @method \Bitrix\Sale\Internals\EO_OrderDiscount unsetUseCoupons()
	 * @method \boolean fillUseCoupons()
	 * @method \int getSort()
	 * @method \Bitrix\Sale\Internals\EO_OrderDiscount setSort(\int|\Bitrix\Main\DB\SqlExpression $sort)
	 * @method bool hasSort()
	 * @method bool isSortFilled()
	 * @method bool isSortChanged()
	 * @method \int remindActualSort()
	 * @method \int requireSort()
	 * @method \Bitrix\Sale\Internals\EO_OrderDiscount resetSort()
	 * @method \Bitrix\Sale\Internals\EO_OrderDiscount unsetSort()
	 * @method \int fillSort()
	 * @method \int getPriority()
	 * @method \Bitrix\Sale\Internals\EO_OrderDiscount setPriority(\int|\Bitrix\Main\DB\SqlExpression $priority)
	 * @method bool hasPriority()
	 * @method bool isPriorityFilled()
	 * @method bool isPriorityChanged()
	 * @method \int remindActualPriority()
	 * @method \int requirePriority()
	 * @method \Bitrix\Sale\Internals\EO_OrderDiscount resetPriority()
	 * @method \Bitrix\Sale\Internals\EO_OrderDiscount unsetPriority()
	 * @method \int fillPriority()
	 * @method \boolean getLastDiscount()
	 * @method \Bitrix\Sale\Internals\EO_OrderDiscount setLastDiscount(\boolean|\Bitrix\Main\DB\SqlExpression $lastDiscount)
	 * @method bool hasLastDiscount()
	 * @method bool isLastDiscountFilled()
	 * @method bool isLastDiscountChanged()
	 * @method \boolean remindActualLastDiscount()
	 * @method \boolean requireLastDiscount()
	 * @method \Bitrix\Sale\Internals\EO_OrderDiscount resetLastDiscount()
	 * @method \Bitrix\Sale\Internals\EO_OrderDiscount unsetLastDiscount()
	 * @method \boolean fillLastDiscount()
	 * @method \string getActionsDescr()
	 * @method \Bitrix\Sale\Internals\EO_OrderDiscount setActionsDescr(\string|\Bitrix\Main\DB\SqlExpression $actionsDescr)
	 * @method bool hasActionsDescr()
	 * @method bool isActionsDescrFilled()
	 * @method bool isActionsDescrChanged()
	 * @method \string remindActualActionsDescr()
	 * @method \string requireActionsDescr()
	 * @method \Bitrix\Sale\Internals\EO_OrderDiscount resetActionsDescr()
	 * @method \Bitrix\Sale\Internals\EO_OrderDiscount unsetActionsDescr()
	 * @method \string fillActionsDescr()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Sale\Internals\EO_OrderDiscount set($fieldName, $value)
	 * @method \Bitrix\Sale\Internals\EO_OrderDiscount reset($fieldName)
	 * @method \Bitrix\Sale\Internals\EO_OrderDiscount unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Sale\Internals\EO_OrderDiscount wakeUp($data)
	 */
	class EO_OrderDiscount {
		/* @var \Bitrix\Sale\Internals\OrderDiscountTable */
		static public $dataClass = '\Bitrix\Sale\Internals\OrderDiscountTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Sale\Internals {
	/**
	 * EO_OrderDiscount_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getIdList()
	 * @method \string[] getModuleIdList()
	 * @method \string[] fillModuleId()
	 * @method \int[] getDiscountIdList()
	 * @method \int[] fillDiscountId()
	 * @method \string[] getNameList()
	 * @method \string[] fillName()
	 * @method \string[] getDiscountHashList()
	 * @method \string[] fillDiscountHash()
	 * @method \string[] getConditionsList()
	 * @method \string[] fillConditions()
	 * @method \string[] getUnpackList()
	 * @method \string[] fillUnpack()
	 * @method \string[] getActionsList()
	 * @method \string[] fillActions()
	 * @method \string[] getApplicationList()
	 * @method \string[] fillApplication()
	 * @method \boolean[] getUseCouponsList()
	 * @method \boolean[] fillUseCoupons()
	 * @method \int[] getSortList()
	 * @method \int[] fillSort()
	 * @method \int[] getPriorityList()
	 * @method \int[] fillPriority()
	 * @method \boolean[] getLastDiscountList()
	 * @method \boolean[] fillLastDiscount()
	 * @method \string[] getActionsDescrList()
	 * @method \string[] fillActionsDescr()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Sale\Internals\EO_OrderDiscount $object)
	 * @method bool has(\Bitrix\Sale\Internals\EO_OrderDiscount $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Sale\Internals\EO_OrderDiscount getByPrimary($primary)
	 * @method \Bitrix\Sale\Internals\EO_OrderDiscount[] getAll()
	 * @method bool remove(\Bitrix\Sale\Internals\EO_OrderDiscount $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Sale\Internals\EO_OrderDiscount_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Sale\Internals\EO_OrderDiscount current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 * @method EO_OrderDiscount_Collection merge(?EO_OrderDiscount_Collection $collection)
	 * @method bool isEmpty()
	 */
	class EO_OrderDiscount_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Sale\Internals\OrderDiscountTable */
		static public $dataClass = '\Bitrix\Sale\Internals\OrderDiscountTable';
	}
}
namespace Bitrix\Sale\Internals {
	/**
	 * Common methods:
	 * ---------------
	 *
	 * @method EO_OrderDiscount_Result exec()
	 * @method \Bitrix\Sale\Internals\EO_OrderDiscount fetchObject()
	 * @method \Bitrix\Sale\Internals\EO_OrderDiscount_Collection fetchCollection()
	 *
	 * Custom methods:
	 * ---------------
	 *
	 */
	class EO_OrderDiscount_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Sale\Internals\EO_OrderDiscount fetchObject()
	 * @method \Bitrix\Sale\Internals\EO_OrderDiscount_Collection fetchCollection()
	 */
	class EO_OrderDiscount_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Sale\Internals\EO_OrderDiscount createObject($setDefaultValues = true)
	 * @method \Bitrix\Sale\Internals\EO_OrderDiscount_Collection createCollection()
	 * @method \Bitrix\Sale\Internals\EO_OrderDiscount wakeUpObject($row)
	 * @method \Bitrix\Sale\Internals\EO_OrderDiscount_Collection wakeUpCollection($rows)
	 */
	class EO_OrderDiscount_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Sale\Internals\OrderCouponsTable:sale\lib\internals\orderdiscount.php */
namespace Bitrix\Sale\Internals {
	/**
	 * EO_OrderCoupons
	 * @see \Bitrix\Sale\Internals\OrderCouponsTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getId()
	 * @method \Bitrix\Sale\Internals\EO_OrderCoupons setId(\int|\Bitrix\Main\DB\SqlExpression $id)
	 * @method bool hasId()
	 * @method bool isIdFilled()
	 * @method bool isIdChanged()
	 * @method \int getOrderId()
	 * @method \Bitrix\Sale\Internals\EO_OrderCoupons setOrderId(\int|\Bitrix\Main\DB\SqlExpression $orderId)
	 * @method bool hasOrderId()
	 * @method bool isOrderIdFilled()
	 * @method bool isOrderIdChanged()
	 * @method \int remindActualOrderId()
	 * @method \int requireOrderId()
	 * @method \Bitrix\Sale\Internals\EO_OrderCoupons resetOrderId()
	 * @method \Bitrix\Sale\Internals\EO_OrderCoupons unsetOrderId()
	 * @method \int fillOrderId()
	 * @method \int getOrderDiscountId()
	 * @method \Bitrix\Sale\Internals\EO_OrderCoupons setOrderDiscountId(\int|\Bitrix\Main\DB\SqlExpression $orderDiscountId)
	 * @method bool hasOrderDiscountId()
	 * @method bool isOrderDiscountIdFilled()
	 * @method bool isOrderDiscountIdChanged()
	 * @method \int remindActualOrderDiscountId()
	 * @method \int requireOrderDiscountId()
	 * @method \Bitrix\Sale\Internals\EO_OrderCoupons resetOrderDiscountId()
	 * @method \Bitrix\Sale\Internals\EO_OrderCoupons unsetOrderDiscountId()
	 * @method \int fillOrderDiscountId()
	 * @method \string getCoupon()
	 * @method \Bitrix\Sale\Internals\EO_OrderCoupons setCoupon(\string|\Bitrix\Main\DB\SqlExpression $coupon)
	 * @method bool hasCoupon()
	 * @method bool isCouponFilled()
	 * @method bool isCouponChanged()
	 * @method \string remindActualCoupon()
	 * @method \string requireCoupon()
	 * @method \Bitrix\Sale\Internals\EO_OrderCoupons resetCoupon()
	 * @method \Bitrix\Sale\Internals\EO_OrderCoupons unsetCoupon()
	 * @method \string fillCoupon()
	 * @method \int getType()
	 * @method \Bitrix\Sale\Internals\EO_OrderCoupons setType(\int|\Bitrix\Main\DB\SqlExpression $type)
	 * @method bool hasType()
	 * @method bool isTypeFilled()
	 * @method bool isTypeChanged()
	 * @method \int remindActualType()
	 * @method \int requireType()
	 * @method \Bitrix\Sale\Internals\EO_OrderCoupons resetType()
	 * @method \Bitrix\Sale\Internals\EO_OrderCoupons unsetType()
	 * @method \int fillType()
	 * @method \string getData()
	 * @method \Bitrix\Sale\Internals\EO_OrderCoupons setData(\string|\Bitrix\Main\DB\SqlExpression $data)
	 * @method bool hasData()
	 * @method bool isDataFilled()
	 * @method bool isDataChanged()
	 * @method \string remindActualData()
	 * @method \string requireData()
	 * @method \Bitrix\Sale\Internals\EO_OrderCoupons resetData()
	 * @method \Bitrix\Sale\Internals\EO_OrderCoupons unsetData()
	 * @method \string fillData()
	 * @method \int getCouponId()
	 * @method \Bitrix\Sale\Internals\EO_OrderCoupons setCouponId(\int|\Bitrix\Main\DB\SqlExpression $couponId)
	 * @method bool hasCouponId()
	 * @method bool isCouponIdFilled()
	 * @method bool isCouponIdChanged()
	 * @method \int remindActualCouponId()
	 * @method \int requireCouponId()
	 * @method \Bitrix\Sale\Internals\EO_OrderCoupons resetCouponId()
	 * @method \Bitrix\Sale\Internals\EO_OrderCoupons unsetCouponId()
	 * @method \int fillCouponId()
	 * @method \Bitrix\Sale\Internals\EO_OrderDiscount getOrderDiscount()
	 * @method \Bitrix\Sale\Internals\EO_OrderDiscount remindActualOrderDiscount()
	 * @method \Bitrix\Sale\Internals\EO_OrderDiscount requireOrderDiscount()
	 * @method \Bitrix\Sale\Internals\EO_OrderCoupons setOrderDiscount(\Bitrix\Sale\Internals\EO_OrderDiscount $object)
	 * @method \Bitrix\Sale\Internals\EO_OrderCoupons resetOrderDiscount()
	 * @method \Bitrix\Sale\Internals\EO_OrderCoupons unsetOrderDiscount()
	 * @method bool hasOrderDiscount()
	 * @method bool isOrderDiscountFilled()
	 * @method bool isOrderDiscountChanged()
	 * @method \Bitrix\Sale\Internals\EO_OrderDiscount fillOrderDiscount()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Sale\Internals\EO_OrderCoupons set($fieldName, $value)
	 * @method \Bitrix\Sale\Internals\EO_OrderCoupons reset($fieldName)
	 * @method \Bitrix\Sale\Internals\EO_OrderCoupons unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Sale\Internals\EO_OrderCoupons wakeUp($data)
	 */
	class EO_OrderCoupons {
		/* @var \Bitrix\Sale\Internals\OrderCouponsTable */
		static public $dataClass = '\Bitrix\Sale\Internals\OrderCouponsTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Sale\Internals {
	/**
	 * EO_OrderCoupons_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getIdList()
	 * @method \int[] getOrderIdList()
	 * @method \int[] fillOrderId()
	 * @method \int[] getOrderDiscountIdList()
	 * @method \int[] fillOrderDiscountId()
	 * @method \string[] getCouponList()
	 * @method \string[] fillCoupon()
	 * @method \int[] getTypeList()
	 * @method \int[] fillType()
	 * @method \string[] getDataList()
	 * @method \string[] fillData()
	 * @method \int[] getCouponIdList()
	 * @method \int[] fillCouponId()
	 * @method \Bitrix\Sale\Internals\EO_OrderDiscount[] getOrderDiscountList()
	 * @method \Bitrix\Sale\Internals\EO_OrderCoupons_Collection getOrderDiscountCollection()
	 * @method \Bitrix\Sale\Internals\EO_OrderDiscount_Collection fillOrderDiscount()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Sale\Internals\EO_OrderCoupons $object)
	 * @method bool has(\Bitrix\Sale\Internals\EO_OrderCoupons $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Sale\Internals\EO_OrderCoupons getByPrimary($primary)
	 * @method \Bitrix\Sale\Internals\EO_OrderCoupons[] getAll()
	 * @method bool remove(\Bitrix\Sale\Internals\EO_OrderCoupons $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Sale\Internals\EO_OrderCoupons_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Sale\Internals\EO_OrderCoupons current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 * @method EO_OrderCoupons_Collection merge(?EO_OrderCoupons_Collection $collection)
	 * @method bool isEmpty()
	 */
	class EO_OrderCoupons_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Sale\Internals\OrderCouponsTable */
		static public $dataClass = '\Bitrix\Sale\Internals\OrderCouponsTable';
	}
}
namespace Bitrix\Sale\Internals {
	/**
	 * Common methods:
	 * ---------------
	 *
	 * @method EO_OrderCoupons_Result exec()
	 * @method \Bitrix\Sale\Internals\EO_OrderCoupons fetchObject()
	 * @method \Bitrix\Sale\Internals\EO_OrderCoupons_Collection fetchCollection()
	 *
	 * Custom methods:
	 * ---------------
	 *
	 */
	class EO_OrderCoupons_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Sale\Internals\EO_OrderCoupons fetchObject()
	 * @method \Bitrix\Sale\Internals\EO_OrderCoupons_Collection fetchCollection()
	 */
	class EO_OrderCoupons_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Sale\Internals\EO_OrderCoupons createObject($setDefaultValues = true)
	 * @method \Bitrix\Sale\Internals\EO_OrderCoupons_Collection createCollection()
	 * @method \Bitrix\Sale\Internals\EO_OrderCoupons wakeUpObject($row)
	 * @method \Bitrix\Sale\Internals\EO_OrderCoupons_Collection wakeUpCollection($rows)
	 */
	class EO_OrderCoupons_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Sale\Internals\OrderModulesTable:sale\lib\internals\orderdiscount.php */
namespace Bitrix\Sale\Internals {
	/**
	 * EO_OrderModules
	 * @see \Bitrix\Sale\Internals\OrderModulesTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getId()
	 * @method \Bitrix\Sale\Internals\EO_OrderModules setId(\int|\Bitrix\Main\DB\SqlExpression $id)
	 * @method bool hasId()
	 * @method bool isIdFilled()
	 * @method bool isIdChanged()
	 * @method \int getOrderDiscountId()
	 * @method \Bitrix\Sale\Internals\EO_OrderModules setOrderDiscountId(\int|\Bitrix\Main\DB\SqlExpression $orderDiscountId)
	 * @method bool hasOrderDiscountId()
	 * @method bool isOrderDiscountIdFilled()
	 * @method bool isOrderDiscountIdChanged()
	 * @method \int remindActualOrderDiscountId()
	 * @method \int requireOrderDiscountId()
	 * @method \Bitrix\Sale\Internals\EO_OrderModules resetOrderDiscountId()
	 * @method \Bitrix\Sale\Internals\EO_OrderModules unsetOrderDiscountId()
	 * @method \int fillOrderDiscountId()
	 * @method \string getModuleId()
	 * @method \Bitrix\Sale\Internals\EO_OrderModules setModuleId(\string|\Bitrix\Main\DB\SqlExpression $moduleId)
	 * @method bool hasModuleId()
	 * @method bool isModuleIdFilled()
	 * @method bool isModuleIdChanged()
	 * @method \string remindActualModuleId()
	 * @method \string requireModuleId()
	 * @method \Bitrix\Sale\Internals\EO_OrderModules resetModuleId()
	 * @method \Bitrix\Sale\Internals\EO_OrderModules unsetModuleId()
	 * @method \string fillModuleId()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Sale\Internals\EO_OrderModules set($fieldName, $value)
	 * @method \Bitrix\Sale\Internals\EO_OrderModules reset($fieldName)
	 * @method \Bitrix\Sale\Internals\EO_OrderModules unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Sale\Internals\EO_OrderModules wakeUp($data)
	 */
	class EO_OrderModules {
		/* @var \Bitrix\Sale\Internals\OrderModulesTable */
		static public $dataClass = '\Bitrix\Sale\Internals\OrderModulesTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Sale\Internals {
	/**
	 * EO_OrderModules_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getIdList()
	 * @method \int[] getOrderDiscountIdList()
	 * @method \int[] fillOrderDiscountId()
	 * @method \string[] getModuleIdList()
	 * @method \string[] fillModuleId()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Sale\Internals\EO_OrderModules $object)
	 * @method bool has(\Bitrix\Sale\Internals\EO_OrderModules $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Sale\Internals\EO_OrderModules getByPrimary($primary)
	 * @method \Bitrix\Sale\Internals\EO_OrderModules[] getAll()
	 * @method bool remove(\Bitrix\Sale\Internals\EO_OrderModules $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Sale\Internals\EO_OrderModules_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Sale\Internals\EO_OrderModules current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 * @method EO_OrderModules_Collection merge(?EO_OrderModules_Collection $collection)
	 * @method bool isEmpty()
	 */
	class EO_OrderModules_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Sale\Internals\OrderModulesTable */
		static public $dataClass = '\Bitrix\Sale\Internals\OrderModulesTable';
	}
}
namespace Bitrix\Sale\Internals {
	/**
	 * Common methods:
	 * ---------------
	 *
	 * @method EO_OrderModules_Result exec()
	 * @method \Bitrix\Sale\Internals\EO_OrderModules fetchObject()
	 * @method \Bitrix\Sale\Internals\EO_OrderModules_Collection fetchCollection()
	 *
	 * Custom methods:
	 * ---------------
	 *
	 */
	class EO_OrderModules_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Sale\Internals\EO_OrderModules fetchObject()
	 * @method \Bitrix\Sale\Internals\EO_OrderModules_Collection fetchCollection()
	 */
	class EO_OrderModules_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Sale\Internals\EO_OrderModules createObject($setDefaultValues = true)
	 * @method \Bitrix\Sale\Internals\EO_OrderModules_Collection createCollection()
	 * @method \Bitrix\Sale\Internals\EO_OrderModules wakeUpObject($row)
	 * @method \Bitrix\Sale\Internals\EO_OrderModules_Collection wakeUpCollection($rows)
	 */
	class EO_OrderModules_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Sale\Internals\OrderDiscountDataTable:sale\lib\internals\orderdiscount.php */
namespace Bitrix\Sale\Internals {
	/**
	 * EO_OrderDiscountData
	 * @see \Bitrix\Sale\Internals\OrderDiscountDataTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getId()
	 * @method \Bitrix\Sale\Internals\EO_OrderDiscountData setId(\int|\Bitrix\Main\DB\SqlExpression $id)
	 * @method bool hasId()
	 * @method bool isIdFilled()
	 * @method bool isIdChanged()
	 * @method \int getOrderId()
	 * @method \Bitrix\Sale\Internals\EO_OrderDiscountData setOrderId(\int|\Bitrix\Main\DB\SqlExpression $orderId)
	 * @method bool hasOrderId()
	 * @method bool isOrderIdFilled()
	 * @method bool isOrderIdChanged()
	 * @method \int remindActualOrderId()
	 * @method \int requireOrderId()
	 * @method \Bitrix\Sale\Internals\EO_OrderDiscountData resetOrderId()
	 * @method \Bitrix\Sale\Internals\EO_OrderDiscountData unsetOrderId()
	 * @method \int fillOrderId()
	 * @method \string getEntityType()
	 * @method \Bitrix\Sale\Internals\EO_OrderDiscountData setEntityType(\string|\Bitrix\Main\DB\SqlExpression $entityType)
	 * @method bool hasEntityType()
	 * @method bool isEntityTypeFilled()
	 * @method bool isEntityTypeChanged()
	 * @method \string remindActualEntityType()
	 * @method \string requireEntityType()
	 * @method \Bitrix\Sale\Internals\EO_OrderDiscountData resetEntityType()
	 * @method \Bitrix\Sale\Internals\EO_OrderDiscountData unsetEntityType()
	 * @method \string fillEntityType()
	 * @method \int getEntityId()
	 * @method \Bitrix\Sale\Internals\EO_OrderDiscountData setEntityId(\int|\Bitrix\Main\DB\SqlExpression $entityId)
	 * @method bool hasEntityId()
	 * @method bool isEntityIdFilled()
	 * @method bool isEntityIdChanged()
	 * @method \int remindActualEntityId()
	 * @method \int requireEntityId()
	 * @method \Bitrix\Sale\Internals\EO_OrderDiscountData resetEntityId()
	 * @method \Bitrix\Sale\Internals\EO_OrderDiscountData unsetEntityId()
	 * @method \int fillEntityId()
	 * @method \string getEntityValue()
	 * @method \Bitrix\Sale\Internals\EO_OrderDiscountData setEntityValue(\string|\Bitrix\Main\DB\SqlExpression $entityValue)
	 * @method bool hasEntityValue()
	 * @method bool isEntityValueFilled()
	 * @method bool isEntityValueChanged()
	 * @method \string remindActualEntityValue()
	 * @method \string requireEntityValue()
	 * @method \Bitrix\Sale\Internals\EO_OrderDiscountData resetEntityValue()
	 * @method \Bitrix\Sale\Internals\EO_OrderDiscountData unsetEntityValue()
	 * @method \string fillEntityValue()
	 * @method \string getEntityData()
	 * @method \Bitrix\Sale\Internals\EO_OrderDiscountData setEntityData(\string|\Bitrix\Main\DB\SqlExpression $entityData)
	 * @method bool hasEntityData()
	 * @method bool isEntityDataFilled()
	 * @method bool isEntityDataChanged()
	 * @method \string remindActualEntityData()
	 * @method \string requireEntityData()
	 * @method \Bitrix\Sale\Internals\EO_OrderDiscountData resetEntityData()
	 * @method \Bitrix\Sale\Internals\EO_OrderDiscountData unsetEntityData()
	 * @method \string fillEntityData()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Sale\Internals\EO_OrderDiscountData set($fieldName, $value)
	 * @method \Bitrix\Sale\Internals\EO_OrderDiscountData reset($fieldName)
	 * @method \Bitrix\Sale\Internals\EO_OrderDiscountData unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Sale\Internals\EO_OrderDiscountData wakeUp($data)
	 */
	class EO_OrderDiscountData {
		/* @var \Bitrix\Sale\Internals\OrderDiscountDataTable */
		static public $dataClass = '\Bitrix\Sale\Internals\OrderDiscountDataTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Sale\Internals {
	/**
	 * EO_OrderDiscountData_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getIdList()
	 * @method \int[] getOrderIdList()
	 * @method \int[] fillOrderId()
	 * @method \string[] getEntityTypeList()
	 * @method \string[] fillEntityType()
	 * @method \int[] getEntityIdList()
	 * @method \int[] fillEntityId()
	 * @method \string[] getEntityValueList()
	 * @method \string[] fillEntityValue()
	 * @method \string[] getEntityDataList()
	 * @method \string[] fillEntityData()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Sale\Internals\EO_OrderDiscountData $object)
	 * @method bool has(\Bitrix\Sale\Internals\EO_OrderDiscountData $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Sale\Internals\EO_OrderDiscountData getByPrimary($primary)
	 * @method \Bitrix\Sale\Internals\EO_OrderDiscountData[] getAll()
	 * @method bool remove(\Bitrix\Sale\Internals\EO_OrderDiscountData $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Sale\Internals\EO_OrderDiscountData_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Sale\Internals\EO_OrderDiscountData current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 * @method EO_OrderDiscountData_Collection merge(?EO_OrderDiscountData_Collection $collection)
	 * @method bool isEmpty()
	 */
	class EO_OrderDiscountData_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Sale\Internals\OrderDiscountDataTable */
		static public $dataClass = '\Bitrix\Sale\Internals\OrderDiscountDataTable';
	}
}
namespace Bitrix\Sale\Internals {
	/**
	 * Common methods:
	 * ---------------
	 *
	 * @method EO_OrderDiscountData_Result exec()
	 * @method \Bitrix\Sale\Internals\EO_OrderDiscountData fetchObject()
	 * @method \Bitrix\Sale\Internals\EO_OrderDiscountData_Collection fetchCollection()
	 *
	 * Custom methods:
	 * ---------------
	 *
	 */
	class EO_OrderDiscountData_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Sale\Internals\EO_OrderDiscountData fetchObject()
	 * @method \Bitrix\Sale\Internals\EO_OrderDiscountData_Collection fetchCollection()
	 */
	class EO_OrderDiscountData_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Sale\Internals\EO_OrderDiscountData createObject($setDefaultValues = true)
	 * @method \Bitrix\Sale\Internals\EO_OrderDiscountData_Collection createCollection()
	 * @method \Bitrix\Sale\Internals\EO_OrderDiscountData wakeUpObject($row)
	 * @method \Bitrix\Sale\Internals\EO_OrderDiscountData_Collection wakeUpCollection($rows)
	 */
	class EO_OrderDiscountData_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Sale\Internals\OrderRulesTable:sale\lib\internals\orderdiscount.php */
namespace Bitrix\Sale\Internals {
	/**
	 * EO_OrderRules
	 * @see \Bitrix\Sale\Internals\OrderRulesTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getId()
	 * @method \Bitrix\Sale\Internals\EO_OrderRules setId(\int|\Bitrix\Main\DB\SqlExpression $id)
	 * @method bool hasId()
	 * @method bool isIdFilled()
	 * @method bool isIdChanged()
	 * @method \string getModuleId()
	 * @method \Bitrix\Sale\Internals\EO_OrderRules setModuleId(\string|\Bitrix\Main\DB\SqlExpression $moduleId)
	 * @method bool hasModuleId()
	 * @method bool isModuleIdFilled()
	 * @method bool isModuleIdChanged()
	 * @method \string remindActualModuleId()
	 * @method \string requireModuleId()
	 * @method \Bitrix\Sale\Internals\EO_OrderRules resetModuleId()
	 * @method \Bitrix\Sale\Internals\EO_OrderRules unsetModuleId()
	 * @method \string fillModuleId()
	 * @method \int getOrderDiscountId()
	 * @method \Bitrix\Sale\Internals\EO_OrderRules setOrderDiscountId(\int|\Bitrix\Main\DB\SqlExpression $orderDiscountId)
	 * @method bool hasOrderDiscountId()
	 * @method bool isOrderDiscountIdFilled()
	 * @method bool isOrderDiscountIdChanged()
	 * @method \int remindActualOrderDiscountId()
	 * @method \int requireOrderDiscountId()
	 * @method \Bitrix\Sale\Internals\EO_OrderRules resetOrderDiscountId()
	 * @method \Bitrix\Sale\Internals\EO_OrderRules unsetOrderDiscountId()
	 * @method \int fillOrderDiscountId()
	 * @method \int getOrderId()
	 * @method \Bitrix\Sale\Internals\EO_OrderRules setOrderId(\int|\Bitrix\Main\DB\SqlExpression $orderId)
	 * @method bool hasOrderId()
	 * @method bool isOrderIdFilled()
	 * @method bool isOrderIdChanged()
	 * @method \int remindActualOrderId()
	 * @method \int requireOrderId()
	 * @method \Bitrix\Sale\Internals\EO_OrderRules resetOrderId()
	 * @method \Bitrix\Sale\Internals\EO_OrderRules unsetOrderId()
	 * @method \int fillOrderId()
	 * @method \string getEntityType()
	 * @method \Bitrix\Sale\Internals\EO_OrderRules setEntityType(\string|\Bitrix\Main\DB\SqlExpression $entityType)
	 * @method bool hasEntityType()
	 * @method bool isEntityTypeFilled()
	 * @method bool isEntityTypeChanged()
	 * @method \string remindActualEntityType()
	 * @method \string requireEntityType()
	 * @method \Bitrix\Sale\Internals\EO_OrderRules resetEntityType()
	 * @method \Bitrix\Sale\Internals\EO_OrderRules unsetEntityType()
	 * @method \string fillEntityType()
	 * @method \int getEntityId()
	 * @method \Bitrix\Sale\Internals\EO_OrderRules setEntityId(\int|\Bitrix\Main\DB\SqlExpression $entityId)
	 * @method bool hasEntityId()
	 * @method bool isEntityIdFilled()
	 * @method bool isEntityIdChanged()
	 * @method \int remindActualEntityId()
	 * @method \int requireEntityId()
	 * @method \Bitrix\Sale\Internals\EO_OrderRules resetEntityId()
	 * @method \Bitrix\Sale\Internals\EO_OrderRules unsetEntityId()
	 * @method \int fillEntityId()
	 * @method \string getEntityValue()
	 * @method \Bitrix\Sale\Internals\EO_OrderRules setEntityValue(\string|\Bitrix\Main\DB\SqlExpression $entityValue)
	 * @method bool hasEntityValue()
	 * @method bool isEntityValueFilled()
	 * @method bool isEntityValueChanged()
	 * @method \string remindActualEntityValue()
	 * @method \string requireEntityValue()
	 * @method \Bitrix\Sale\Internals\EO_OrderRules resetEntityValue()
	 * @method \Bitrix\Sale\Internals\EO_OrderRules unsetEntityValue()
	 * @method \string fillEntityValue()
	 * @method \int getCouponId()
	 * @method \Bitrix\Sale\Internals\EO_OrderRules setCouponId(\int|\Bitrix\Main\DB\SqlExpression $couponId)
	 * @method bool hasCouponId()
	 * @method bool isCouponIdFilled()
	 * @method bool isCouponIdChanged()
	 * @method \int remindActualCouponId()
	 * @method \int requireCouponId()
	 * @method \Bitrix\Sale\Internals\EO_OrderRules resetCouponId()
	 * @method \Bitrix\Sale\Internals\EO_OrderRules unsetCouponId()
	 * @method \int fillCouponId()
	 * @method \boolean getApply()
	 * @method \Bitrix\Sale\Internals\EO_OrderRules setApply(\boolean|\Bitrix\Main\DB\SqlExpression $apply)
	 * @method bool hasApply()
	 * @method bool isApplyFilled()
	 * @method bool isApplyChanged()
	 * @method \boolean remindActualApply()
	 * @method \boolean requireApply()
	 * @method \Bitrix\Sale\Internals\EO_OrderRules resetApply()
	 * @method \Bitrix\Sale\Internals\EO_OrderRules unsetApply()
	 * @method \boolean fillApply()
	 * @method \string getActionBlockList()
	 * @method \Bitrix\Sale\Internals\EO_OrderRules setActionBlockList(\string|\Bitrix\Main\DB\SqlExpression $actionBlockList)
	 * @method bool hasActionBlockList()
	 * @method bool isActionBlockListFilled()
	 * @method bool isActionBlockListChanged()
	 * @method \string remindActualActionBlockList()
	 * @method \string requireActionBlockList()
	 * @method \Bitrix\Sale\Internals\EO_OrderRules resetActionBlockList()
	 * @method \Bitrix\Sale\Internals\EO_OrderRules unsetActionBlockList()
	 * @method \string fillActionBlockList()
	 * @method \int getApplyBlockCounter()
	 * @method \Bitrix\Sale\Internals\EO_OrderRules setApplyBlockCounter(\int|\Bitrix\Main\DB\SqlExpression $applyBlockCounter)
	 * @method bool hasApplyBlockCounter()
	 * @method bool isApplyBlockCounterFilled()
	 * @method bool isApplyBlockCounterChanged()
	 * @method \int remindActualApplyBlockCounter()
	 * @method \int requireApplyBlockCounter()
	 * @method \Bitrix\Sale\Internals\EO_OrderRules resetApplyBlockCounter()
	 * @method \Bitrix\Sale\Internals\EO_OrderRules unsetApplyBlockCounter()
	 * @method \int fillApplyBlockCounter()
	 * @method \Bitrix\Sale\Internals\EO_OrderDiscount getOrderDiscount()
	 * @method \Bitrix\Sale\Internals\EO_OrderDiscount remindActualOrderDiscount()
	 * @method \Bitrix\Sale\Internals\EO_OrderDiscount requireOrderDiscount()
	 * @method \Bitrix\Sale\Internals\EO_OrderRules setOrderDiscount(\Bitrix\Sale\Internals\EO_OrderDiscount $object)
	 * @method \Bitrix\Sale\Internals\EO_OrderRules resetOrderDiscount()
	 * @method \Bitrix\Sale\Internals\EO_OrderRules unsetOrderDiscount()
	 * @method bool hasOrderDiscount()
	 * @method bool isOrderDiscountFilled()
	 * @method bool isOrderDiscountChanged()
	 * @method \Bitrix\Sale\Internals\EO_OrderDiscount fillOrderDiscount()
	 * @method \Bitrix\Sale\Internals\EO_OrderRulesDescr getDescr()
	 * @method \Bitrix\Sale\Internals\EO_OrderRulesDescr remindActualDescr()
	 * @method \Bitrix\Sale\Internals\EO_OrderRulesDescr requireDescr()
	 * @method \Bitrix\Sale\Internals\EO_OrderRules setDescr(\Bitrix\Sale\Internals\EO_OrderRulesDescr $object)
	 * @method \Bitrix\Sale\Internals\EO_OrderRules resetDescr()
	 * @method \Bitrix\Sale\Internals\EO_OrderRules unsetDescr()
	 * @method bool hasDescr()
	 * @method bool isDescrFilled()
	 * @method bool isDescrChanged()
	 * @method \Bitrix\Sale\Internals\EO_OrderRulesDescr fillDescr()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Sale\Internals\EO_OrderRules set($fieldName, $value)
	 * @method \Bitrix\Sale\Internals\EO_OrderRules reset($fieldName)
	 * @method \Bitrix\Sale\Internals\EO_OrderRules unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Sale\Internals\EO_OrderRules wakeUp($data)
	 */
	class EO_OrderRules {
		/* @var \Bitrix\Sale\Internals\OrderRulesTable */
		static public $dataClass = '\Bitrix\Sale\Internals\OrderRulesTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Sale\Internals {
	/**
	 * EO_OrderRules_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getIdList()
	 * @method \string[] getModuleIdList()
	 * @method \string[] fillModuleId()
	 * @method \int[] getOrderDiscountIdList()
	 * @method \int[] fillOrderDiscountId()
	 * @method \int[] getOrderIdList()
	 * @method \int[] fillOrderId()
	 * @method \string[] getEntityTypeList()
	 * @method \string[] fillEntityType()
	 * @method \int[] getEntityIdList()
	 * @method \int[] fillEntityId()
	 * @method \string[] getEntityValueList()
	 * @method \string[] fillEntityValue()
	 * @method \int[] getCouponIdList()
	 * @method \int[] fillCouponId()
	 * @method \boolean[] getApplyList()
	 * @method \boolean[] fillApply()
	 * @method \string[] getActionBlockListList()
	 * @method \string[] fillActionBlockList()
	 * @method \int[] getApplyBlockCounterList()
	 * @method \int[] fillApplyBlockCounter()
	 * @method \Bitrix\Sale\Internals\EO_OrderDiscount[] getOrderDiscountList()
	 * @method \Bitrix\Sale\Internals\EO_OrderRules_Collection getOrderDiscountCollection()
	 * @method \Bitrix\Sale\Internals\EO_OrderDiscount_Collection fillOrderDiscount()
	 * @method \Bitrix\Sale\Internals\EO_OrderRulesDescr[] getDescrList()
	 * @method \Bitrix\Sale\Internals\EO_OrderRules_Collection getDescrCollection()
	 * @method \Bitrix\Sale\Internals\EO_OrderRulesDescr_Collection fillDescr()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Sale\Internals\EO_OrderRules $object)
	 * @method bool has(\Bitrix\Sale\Internals\EO_OrderRules $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Sale\Internals\EO_OrderRules getByPrimary($primary)
	 * @method \Bitrix\Sale\Internals\EO_OrderRules[] getAll()
	 * @method bool remove(\Bitrix\Sale\Internals\EO_OrderRules $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Sale\Internals\EO_OrderRules_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Sale\Internals\EO_OrderRules current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 * @method EO_OrderRules_Collection merge(?EO_OrderRules_Collection $collection)
	 * @method bool isEmpty()
	 */
	class EO_OrderRules_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Sale\Internals\OrderRulesTable */
		static public $dataClass = '\Bitrix\Sale\Internals\OrderRulesTable';
	}
}
namespace Bitrix\Sale\Internals {
	/**
	 * Common methods:
	 * ---------------
	 *
	 * @method EO_OrderRules_Result exec()
	 * @method \Bitrix\Sale\Internals\EO_OrderRules fetchObject()
	 * @method \Bitrix\Sale\Internals\EO_OrderRules_Collection fetchCollection()
	 *
	 * Custom methods:
	 * ---------------
	 *
	 */
	class EO_OrderRules_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Sale\Internals\EO_OrderRules fetchObject()
	 * @method \Bitrix\Sale\Internals\EO_OrderRules_Collection fetchCollection()
	 */
	class EO_OrderRules_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Sale\Internals\EO_OrderRules createObject($setDefaultValues = true)
	 * @method \Bitrix\Sale\Internals\EO_OrderRules_Collection createCollection()
	 * @method \Bitrix\Sale\Internals\EO_OrderRules wakeUpObject($row)
	 * @method \Bitrix\Sale\Internals\EO_OrderRules_Collection wakeUpCollection($rows)
	 */
	class EO_OrderRules_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Sale\Internals\OrderRulesDescrTable:sale\lib\internals\orderdiscount.php */
namespace Bitrix\Sale\Internals {
	/**
	 * EO_OrderRulesDescr
	 * @see \Bitrix\Sale\Internals\OrderRulesDescrTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getId()
	 * @method \Bitrix\Sale\Internals\EO_OrderRulesDescr setId(\int|\Bitrix\Main\DB\SqlExpression $id)
	 * @method bool hasId()
	 * @method bool isIdFilled()
	 * @method bool isIdChanged()
	 * @method \string getModuleId()
	 * @method \Bitrix\Sale\Internals\EO_OrderRulesDescr setModuleId(\string|\Bitrix\Main\DB\SqlExpression $moduleId)
	 * @method bool hasModuleId()
	 * @method bool isModuleIdFilled()
	 * @method bool isModuleIdChanged()
	 * @method \string remindActualModuleId()
	 * @method \string requireModuleId()
	 * @method \Bitrix\Sale\Internals\EO_OrderRulesDescr resetModuleId()
	 * @method \Bitrix\Sale\Internals\EO_OrderRulesDescr unsetModuleId()
	 * @method \string fillModuleId()
	 * @method \int getOrderDiscountId()
	 * @method \Bitrix\Sale\Internals\EO_OrderRulesDescr setOrderDiscountId(\int|\Bitrix\Main\DB\SqlExpression $orderDiscountId)
	 * @method bool hasOrderDiscountId()
	 * @method bool isOrderDiscountIdFilled()
	 * @method bool isOrderDiscountIdChanged()
	 * @method \int remindActualOrderDiscountId()
	 * @method \int requireOrderDiscountId()
	 * @method \Bitrix\Sale\Internals\EO_OrderRulesDescr resetOrderDiscountId()
	 * @method \Bitrix\Sale\Internals\EO_OrderRulesDescr unsetOrderDiscountId()
	 * @method \int fillOrderDiscountId()
	 * @method \int getOrderId()
	 * @method \Bitrix\Sale\Internals\EO_OrderRulesDescr setOrderId(\int|\Bitrix\Main\DB\SqlExpression $orderId)
	 * @method bool hasOrderId()
	 * @method bool isOrderIdFilled()
	 * @method bool isOrderIdChanged()
	 * @method \int remindActualOrderId()
	 * @method \int requireOrderId()
	 * @method \Bitrix\Sale\Internals\EO_OrderRulesDescr resetOrderId()
	 * @method \Bitrix\Sale\Internals\EO_OrderRulesDescr unsetOrderId()
	 * @method \int fillOrderId()
	 * @method \int getRuleId()
	 * @method \Bitrix\Sale\Internals\EO_OrderRulesDescr setRuleId(\int|\Bitrix\Main\DB\SqlExpression $ruleId)
	 * @method bool hasRuleId()
	 * @method bool isRuleIdFilled()
	 * @method bool isRuleIdChanged()
	 * @method \int remindActualRuleId()
	 * @method \int requireRuleId()
	 * @method \Bitrix\Sale\Internals\EO_OrderRulesDescr resetRuleId()
	 * @method \Bitrix\Sale\Internals\EO_OrderRulesDescr unsetRuleId()
	 * @method \int fillRuleId()
	 * @method \string getDescr()
	 * @method \Bitrix\Sale\Internals\EO_OrderRulesDescr setDescr(\string|\Bitrix\Main\DB\SqlExpression $descr)
	 * @method bool hasDescr()
	 * @method bool isDescrFilled()
	 * @method bool isDescrChanged()
	 * @method \string remindActualDescr()
	 * @method \string requireDescr()
	 * @method \Bitrix\Sale\Internals\EO_OrderRulesDescr resetDescr()
	 * @method \Bitrix\Sale\Internals\EO_OrderRulesDescr unsetDescr()
	 * @method \string fillDescr()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Sale\Internals\EO_OrderRulesDescr set($fieldName, $value)
	 * @method \Bitrix\Sale\Internals\EO_OrderRulesDescr reset($fieldName)
	 * @method \Bitrix\Sale\Internals\EO_OrderRulesDescr unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Sale\Internals\EO_OrderRulesDescr wakeUp($data)
	 */
	class EO_OrderRulesDescr {
		/* @var \Bitrix\Sale\Internals\OrderRulesDescrTable */
		static public $dataClass = '\Bitrix\Sale\Internals\OrderRulesDescrTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Sale\Internals {
	/**
	 * EO_OrderRulesDescr_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getIdList()
	 * @method \string[] getModuleIdList()
	 * @method \string[] fillModuleId()
	 * @method \int[] getOrderDiscountIdList()
	 * @method \int[] fillOrderDiscountId()
	 * @method \int[] getOrderIdList()
	 * @method \int[] fillOrderId()
	 * @method \int[] getRuleIdList()
	 * @method \int[] fillRuleId()
	 * @method \string[] getDescrList()
	 * @method \string[] fillDescr()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Sale\Internals\EO_OrderRulesDescr $object)
	 * @method bool has(\Bitrix\Sale\Internals\EO_OrderRulesDescr $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Sale\Internals\EO_OrderRulesDescr getByPrimary($primary)
	 * @method \Bitrix\Sale\Internals\EO_OrderRulesDescr[] getAll()
	 * @method bool remove(\Bitrix\Sale\Internals\EO_OrderRulesDescr $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Sale\Internals\EO_OrderRulesDescr_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Sale\Internals\EO_OrderRulesDescr current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 * @method EO_OrderRulesDescr_Collection merge(?EO_OrderRulesDescr_Collection $collection)
	 * @method bool isEmpty()
	 */
	class EO_OrderRulesDescr_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Sale\Internals\OrderRulesDescrTable */
		static public $dataClass = '\Bitrix\Sale\Internals\OrderRulesDescrTable';
	}
}
namespace Bitrix\Sale\Internals {
	/**
	 * Common methods:
	 * ---------------
	 *
	 * @method EO_OrderRulesDescr_Result exec()
	 * @method \Bitrix\Sale\Internals\EO_OrderRulesDescr fetchObject()
	 * @method \Bitrix\Sale\Internals\EO_OrderRulesDescr_Collection fetchCollection()
	 *
	 * Custom methods:
	 * ---------------
	 *
	 */
	class EO_OrderRulesDescr_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Sale\Internals\EO_OrderRulesDescr fetchObject()
	 * @method \Bitrix\Sale\Internals\EO_OrderRulesDescr_Collection fetchCollection()
	 */
	class EO_OrderRulesDescr_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Sale\Internals\EO_OrderRulesDescr createObject($setDefaultValues = true)
	 * @method \Bitrix\Sale\Internals\EO_OrderRulesDescr_Collection createCollection()
	 * @method \Bitrix\Sale\Internals\EO_OrderRulesDescr wakeUpObject($row)
	 * @method \Bitrix\Sale\Internals\EO_OrderRulesDescr_Collection wakeUpCollection($rows)
	 */
	class EO_OrderRulesDescr_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Sale\Internals\OrderPropsTable:sale\lib\internals\orderprops.php */
namespace Bitrix\Sale\Internals {
	/**
	 * EO_OrderProps
	 * @see \Bitrix\Sale\Internals\OrderPropsTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getId()
	 * @method \Bitrix\Sale\Internals\EO_OrderProps setId(\int|\Bitrix\Main\DB\SqlExpression $id)
	 * @method bool hasId()
	 * @method bool isIdFilled()
	 * @method bool isIdChanged()
	 * @method \int getPersonTypeId()
	 * @method \Bitrix\Sale\Internals\EO_OrderProps setPersonTypeId(\int|\Bitrix\Main\DB\SqlExpression $personTypeId)
	 * @method bool hasPersonTypeId()
	 * @method bool isPersonTypeIdFilled()
	 * @method bool isPersonTypeIdChanged()
	 * @method \int remindActualPersonTypeId()
	 * @method \int requirePersonTypeId()
	 * @method \Bitrix\Sale\Internals\EO_OrderProps resetPersonTypeId()
	 * @method \Bitrix\Sale\Internals\EO_OrderProps unsetPersonTypeId()
	 * @method \int fillPersonTypeId()
	 * @method \string getName()
	 * @method \Bitrix\Sale\Internals\EO_OrderProps setName(\string|\Bitrix\Main\DB\SqlExpression $name)
	 * @method bool hasName()
	 * @method bool isNameFilled()
	 * @method bool isNameChanged()
	 * @method \string remindActualName()
	 * @method \string requireName()
	 * @method \Bitrix\Sale\Internals\EO_OrderProps resetName()
	 * @method \Bitrix\Sale\Internals\EO_OrderProps unsetName()
	 * @method \string fillName()
	 * @method \string getType()
	 * @method \Bitrix\Sale\Internals\EO_OrderProps setType(\string|\Bitrix\Main\DB\SqlExpression $type)
	 * @method bool hasType()
	 * @method bool isTypeFilled()
	 * @method bool isTypeChanged()
	 * @method \string remindActualType()
	 * @method \string requireType()
	 * @method \Bitrix\Sale\Internals\EO_OrderProps resetType()
	 * @method \Bitrix\Sale\Internals\EO_OrderProps unsetType()
	 * @method \string fillType()
	 * @method \boolean getRequired()
	 * @method \Bitrix\Sale\Internals\EO_OrderProps setRequired(\boolean|\Bitrix\Main\DB\SqlExpression $required)
	 * @method bool hasRequired()
	 * @method bool isRequiredFilled()
	 * @method bool isRequiredChanged()
	 * @method \boolean remindActualRequired()
	 * @method \boolean requireRequired()
	 * @method \Bitrix\Sale\Internals\EO_OrderProps resetRequired()
	 * @method \Bitrix\Sale\Internals\EO_OrderProps unsetRequired()
	 * @method \boolean fillRequired()
	 * @method \string getDefaultValue()
	 * @method \Bitrix\Sale\Internals\EO_OrderProps setDefaultValue(\string|\Bitrix\Main\DB\SqlExpression $defaultValue)
	 * @method bool hasDefaultValue()
	 * @method bool isDefaultValueFilled()
	 * @method bool isDefaultValueChanged()
	 * @method \string remindActualDefaultValue()
	 * @method \string requireDefaultValue()
	 * @method \Bitrix\Sale\Internals\EO_OrderProps resetDefaultValue()
	 * @method \Bitrix\Sale\Internals\EO_OrderProps unsetDefaultValue()
	 * @method \string fillDefaultValue()
	 * @method \int getSort()
	 * @method \Bitrix\Sale\Internals\EO_OrderProps setSort(\int|\Bitrix\Main\DB\SqlExpression $sort)
	 * @method bool hasSort()
	 * @method bool isSortFilled()
	 * @method bool isSortChanged()
	 * @method \int remindActualSort()
	 * @method \int requireSort()
	 * @method \Bitrix\Sale\Internals\EO_OrderProps resetSort()
	 * @method \Bitrix\Sale\Internals\EO_OrderProps unsetSort()
	 * @method \int fillSort()
	 * @method \boolean getUserProps()
	 * @method \Bitrix\Sale\Internals\EO_OrderProps setUserProps(\boolean|\Bitrix\Main\DB\SqlExpression $userProps)
	 * @method bool hasUserProps()
	 * @method bool isUserPropsFilled()
	 * @method bool isUserPropsChanged()
	 * @method \boolean remindActualUserProps()
	 * @method \boolean requireUserProps()
	 * @method \Bitrix\Sale\Internals\EO_OrderProps resetUserProps()
	 * @method \Bitrix\Sale\Internals\EO_OrderProps unsetUserProps()
	 * @method \boolean fillUserProps()
	 * @method \boolean getIsLocation()
	 * @method \Bitrix\Sale\Internals\EO_OrderProps setIsLocation(\boolean|\Bitrix\Main\DB\SqlExpression $isLocation)
	 * @method bool hasIsLocation()
	 * @method bool isIsLocationFilled()
	 * @method bool isIsLocationChanged()
	 * @method \boolean remindActualIsLocation()
	 * @method \boolean requireIsLocation()
	 * @method \Bitrix\Sale\Internals\EO_OrderProps resetIsLocation()
	 * @method \Bitrix\Sale\Internals\EO_OrderProps unsetIsLocation()
	 * @method \boolean fillIsLocation()
	 * @method \int getPropsGroupId()
	 * @method \Bitrix\Sale\Internals\EO_OrderProps setPropsGroupId(\int|\Bitrix\Main\DB\SqlExpression $propsGroupId)
	 * @method bool hasPropsGroupId()
	 * @method bool isPropsGroupIdFilled()
	 * @method bool isPropsGroupIdChanged()
	 * @method \int remindActualPropsGroupId()
	 * @method \int requirePropsGroupId()
	 * @method \Bitrix\Sale\Internals\EO_OrderProps resetPropsGroupId()
	 * @method \Bitrix\Sale\Internals\EO_OrderProps unsetPropsGroupId()
	 * @method \int fillPropsGroupId()
	 * @method \string getDescription()
	 * @method \Bitrix\Sale\Internals\EO_OrderProps setDescription(\string|\Bitrix\Main\DB\SqlExpression $description)
	 * @method bool hasDescription()
	 * @method bool isDescriptionFilled()
	 * @method bool isDescriptionChanged()
	 * @method \string remindActualDescription()
	 * @method \string requireDescription()
	 * @method \Bitrix\Sale\Internals\EO_OrderProps resetDescription()
	 * @method \Bitrix\Sale\Internals\EO_OrderProps unsetDescription()
	 * @method \string fillDescription()
	 * @method \boolean getIsEmail()
	 * @method \Bitrix\Sale\Internals\EO_OrderProps setIsEmail(\boolean|\Bitrix\Main\DB\SqlExpression $isEmail)
	 * @method bool hasIsEmail()
	 * @method bool isIsEmailFilled()
	 * @method bool isIsEmailChanged()
	 * @method \boolean remindActualIsEmail()
	 * @method \boolean requireIsEmail()
	 * @method \Bitrix\Sale\Internals\EO_OrderProps resetIsEmail()
	 * @method \Bitrix\Sale\Internals\EO_OrderProps unsetIsEmail()
	 * @method \boolean fillIsEmail()
	 * @method \boolean getIsProfileName()
	 * @method \Bitrix\Sale\Internals\EO_OrderProps setIsProfileName(\boolean|\Bitrix\Main\DB\SqlExpression $isProfileName)
	 * @method bool hasIsProfileName()
	 * @method bool isIsProfileNameFilled()
	 * @method bool isIsProfileNameChanged()
	 * @method \boolean remindActualIsProfileName()
	 * @method \boolean requireIsProfileName()
	 * @method \Bitrix\Sale\Internals\EO_OrderProps resetIsProfileName()
	 * @method \Bitrix\Sale\Internals\EO_OrderProps unsetIsProfileName()
	 * @method \boolean fillIsProfileName()
	 * @method \boolean getIsPayer()
	 * @method \Bitrix\Sale\Internals\EO_OrderProps setIsPayer(\boolean|\Bitrix\Main\DB\SqlExpression $isPayer)
	 * @method bool hasIsPayer()
	 * @method bool isIsPayerFilled()
	 * @method bool isIsPayerChanged()
	 * @method \boolean remindActualIsPayer()
	 * @method \boolean requireIsPayer()
	 * @method \Bitrix\Sale\Internals\EO_OrderProps resetIsPayer()
	 * @method \Bitrix\Sale\Internals\EO_OrderProps unsetIsPayer()
	 * @method \boolean fillIsPayer()
	 * @method \boolean getIsLocation4tax()
	 * @method \Bitrix\Sale\Internals\EO_OrderProps setIsLocation4tax(\boolean|\Bitrix\Main\DB\SqlExpression $isLocation4tax)
	 * @method bool hasIsLocation4tax()
	 * @method bool isIsLocation4taxFilled()
	 * @method bool isIsLocation4taxChanged()
	 * @method \boolean remindActualIsLocation4tax()
	 * @method \boolean requireIsLocation4tax()
	 * @method \Bitrix\Sale\Internals\EO_OrderProps resetIsLocation4tax()
	 * @method \Bitrix\Sale\Internals\EO_OrderProps unsetIsLocation4tax()
	 * @method \boolean fillIsLocation4tax()
	 * @method \boolean getIsFiltered()
	 * @method \Bitrix\Sale\Internals\EO_OrderProps setIsFiltered(\boolean|\Bitrix\Main\DB\SqlExpression $isFiltered)
	 * @method bool hasIsFiltered()
	 * @method bool isIsFilteredFilled()
	 * @method bool isIsFilteredChanged()
	 * @method \boolean remindActualIsFiltered()
	 * @method \boolean requireIsFiltered()
	 * @method \Bitrix\Sale\Internals\EO_OrderProps resetIsFiltered()
	 * @method \Bitrix\Sale\Internals\EO_OrderProps unsetIsFiltered()
	 * @method \boolean fillIsFiltered()
	 * @method \string getCode()
	 * @method \Bitrix\Sale\Internals\EO_OrderProps setCode(\string|\Bitrix\Main\DB\SqlExpression $code)
	 * @method bool hasCode()
	 * @method bool isCodeFilled()
	 * @method bool isCodeChanged()
	 * @method \string remindActualCode()
	 * @method \string requireCode()
	 * @method \Bitrix\Sale\Internals\EO_OrderProps resetCode()
	 * @method \Bitrix\Sale\Internals\EO_OrderProps unsetCode()
	 * @method \string fillCode()
	 * @method \boolean getIsZip()
	 * @method \Bitrix\Sale\Internals\EO_OrderProps setIsZip(\boolean|\Bitrix\Main\DB\SqlExpression $isZip)
	 * @method bool hasIsZip()
	 * @method bool isIsZipFilled()
	 * @method bool isIsZipChanged()
	 * @method \boolean remindActualIsZip()
	 * @method \boolean requireIsZip()
	 * @method \Bitrix\Sale\Internals\EO_OrderProps resetIsZip()
	 * @method \Bitrix\Sale\Internals\EO_OrderProps unsetIsZip()
	 * @method \boolean fillIsZip()
	 * @method \boolean getIsPhone()
	 * @method \Bitrix\Sale\Internals\EO_OrderProps setIsPhone(\boolean|\Bitrix\Main\DB\SqlExpression $isPhone)
	 * @method bool hasIsPhone()
	 * @method bool isIsPhoneFilled()
	 * @method bool isIsPhoneChanged()
	 * @method \boolean remindActualIsPhone()
	 * @method \boolean requireIsPhone()
	 * @method \Bitrix\Sale\Internals\EO_OrderProps resetIsPhone()
	 * @method \Bitrix\Sale\Internals\EO_OrderProps unsetIsPhone()
	 * @method \boolean fillIsPhone()
	 * @method \boolean getIsAddress()
	 * @method \Bitrix\Sale\Internals\EO_OrderProps setIsAddress(\boolean|\Bitrix\Main\DB\SqlExpression $isAddress)
	 * @method bool hasIsAddress()
	 * @method bool isIsAddressFilled()
	 * @method bool isIsAddressChanged()
	 * @method \boolean remindActualIsAddress()
	 * @method \boolean requireIsAddress()
	 * @method \Bitrix\Sale\Internals\EO_OrderProps resetIsAddress()
	 * @method \Bitrix\Sale\Internals\EO_OrderProps unsetIsAddress()
	 * @method \boolean fillIsAddress()
	 * @method \boolean getIsAddressFrom()
	 * @method \Bitrix\Sale\Internals\EO_OrderProps setIsAddressFrom(\boolean|\Bitrix\Main\DB\SqlExpression $isAddressFrom)
	 * @method bool hasIsAddressFrom()
	 * @method bool isIsAddressFromFilled()
	 * @method bool isIsAddressFromChanged()
	 * @method \boolean remindActualIsAddressFrom()
	 * @method \boolean requireIsAddressFrom()
	 * @method \Bitrix\Sale\Internals\EO_OrderProps resetIsAddressFrom()
	 * @method \Bitrix\Sale\Internals\EO_OrderProps unsetIsAddressFrom()
	 * @method \boolean fillIsAddressFrom()
	 * @method \boolean getIsAddressTo()
	 * @method \Bitrix\Sale\Internals\EO_OrderProps setIsAddressTo(\boolean|\Bitrix\Main\DB\SqlExpression $isAddressTo)
	 * @method bool hasIsAddressTo()
	 * @method bool isIsAddressToFilled()
	 * @method bool isIsAddressToChanged()
	 * @method \boolean remindActualIsAddressTo()
	 * @method \boolean requireIsAddressTo()
	 * @method \Bitrix\Sale\Internals\EO_OrderProps resetIsAddressTo()
	 * @method \Bitrix\Sale\Internals\EO_OrderProps unsetIsAddressTo()
	 * @method \boolean fillIsAddressTo()
	 * @method \boolean getActive()
	 * @method \Bitrix\Sale\Internals\EO_OrderProps setActive(\boolean|\Bitrix\Main\DB\SqlExpression $active)
	 * @method bool hasActive()
	 * @method bool isActiveFilled()
	 * @method bool isActiveChanged()
	 * @method \boolean remindActualActive()
	 * @method \boolean requireActive()
	 * @method \Bitrix\Sale\Internals\EO_OrderProps resetActive()
	 * @method \Bitrix\Sale\Internals\EO_OrderProps unsetActive()
	 * @method \boolean fillActive()
	 * @method \boolean getUtil()
	 * @method \Bitrix\Sale\Internals\EO_OrderProps setUtil(\boolean|\Bitrix\Main\DB\SqlExpression $util)
	 * @method bool hasUtil()
	 * @method bool isUtilFilled()
	 * @method bool isUtilChanged()
	 * @method \boolean remindActualUtil()
	 * @method \boolean requireUtil()
	 * @method \Bitrix\Sale\Internals\EO_OrderProps resetUtil()
	 * @method \Bitrix\Sale\Internals\EO_OrderProps unsetUtil()
	 * @method \boolean fillUtil()
	 * @method \int getInputFieldLocation()
	 * @method \Bitrix\Sale\Internals\EO_OrderProps setInputFieldLocation(\int|\Bitrix\Main\DB\SqlExpression $inputFieldLocation)
	 * @method bool hasInputFieldLocation()
	 * @method bool isInputFieldLocationFilled()
	 * @method bool isInputFieldLocationChanged()
	 * @method \int remindActualInputFieldLocation()
	 * @method \int requireInputFieldLocation()
	 * @method \Bitrix\Sale\Internals\EO_OrderProps resetInputFieldLocation()
	 * @method \Bitrix\Sale\Internals\EO_OrderProps unsetInputFieldLocation()
	 * @method \int fillInputFieldLocation()
	 * @method \boolean getMultiple()
	 * @method \Bitrix\Sale\Internals\EO_OrderProps setMultiple(\boolean|\Bitrix\Main\DB\SqlExpression $multiple)
	 * @method bool hasMultiple()
	 * @method bool isMultipleFilled()
	 * @method bool isMultipleChanged()
	 * @method \boolean remindActualMultiple()
	 * @method \boolean requireMultiple()
	 * @method \Bitrix\Sale\Internals\EO_OrderProps resetMultiple()
	 * @method \Bitrix\Sale\Internals\EO_OrderProps unsetMultiple()
	 * @method \boolean fillMultiple()
	 * @method \string getSettings()
	 * @method \Bitrix\Sale\Internals\EO_OrderProps setSettings(\string|\Bitrix\Main\DB\SqlExpression $settings)
	 * @method bool hasSettings()
	 * @method bool isSettingsFilled()
	 * @method bool isSettingsChanged()
	 * @method \string remindActualSettings()
	 * @method \string requireSettings()
	 * @method \Bitrix\Sale\Internals\EO_OrderProps resetSettings()
	 * @method \Bitrix\Sale\Internals\EO_OrderProps unsetSettings()
	 * @method \string fillSettings()
	 * @method \Bitrix\Sale\Internals\EO_OrderPropsGroup getGroup()
	 * @method \Bitrix\Sale\Internals\EO_OrderPropsGroup remindActualGroup()
	 * @method \Bitrix\Sale\Internals\EO_OrderPropsGroup requireGroup()
	 * @method \Bitrix\Sale\Internals\EO_OrderProps setGroup(\Bitrix\Sale\Internals\EO_OrderPropsGroup $object)
	 * @method \Bitrix\Sale\Internals\EO_OrderProps resetGroup()
	 * @method \Bitrix\Sale\Internals\EO_OrderProps unsetGroup()
	 * @method bool hasGroup()
	 * @method bool isGroupFilled()
	 * @method bool isGroupChanged()
	 * @method \Bitrix\Sale\Internals\EO_OrderPropsGroup fillGroup()
	 * @method \Bitrix\Sale\Internals\EO_PersonType getPersonType()
	 * @method \Bitrix\Sale\Internals\EO_PersonType remindActualPersonType()
	 * @method \Bitrix\Sale\Internals\EO_PersonType requirePersonType()
	 * @method \Bitrix\Sale\Internals\EO_OrderProps setPersonType(\Bitrix\Sale\Internals\EO_PersonType $object)
	 * @method \Bitrix\Sale\Internals\EO_OrderProps resetPersonType()
	 * @method \Bitrix\Sale\Internals\EO_OrderProps unsetPersonType()
	 * @method bool hasPersonType()
	 * @method bool isPersonTypeFilled()
	 * @method bool isPersonTypeChanged()
	 * @method \Bitrix\Sale\Internals\EO_PersonType fillPersonType()
	 * @method \string getEntityRegistryType()
	 * @method \Bitrix\Sale\Internals\EO_OrderProps setEntityRegistryType(\string|\Bitrix\Main\DB\SqlExpression $entityRegistryType)
	 * @method bool hasEntityRegistryType()
	 * @method bool isEntityRegistryTypeFilled()
	 * @method bool isEntityRegistryTypeChanged()
	 * @method \string remindActualEntityRegistryType()
	 * @method \string requireEntityRegistryType()
	 * @method \Bitrix\Sale\Internals\EO_OrderProps resetEntityRegistryType()
	 * @method \Bitrix\Sale\Internals\EO_OrderProps unsetEntityRegistryType()
	 * @method \string fillEntityRegistryType()
	 * @method \string getXmlId()
	 * @method \Bitrix\Sale\Internals\EO_OrderProps setXmlId(\string|\Bitrix\Main\DB\SqlExpression $xmlId)
	 * @method bool hasXmlId()
	 * @method bool isXmlIdFilled()
	 * @method bool isXmlIdChanged()
	 * @method \string remindActualXmlId()
	 * @method \string requireXmlId()
	 * @method \Bitrix\Sale\Internals\EO_OrderProps resetXmlId()
	 * @method \Bitrix\Sale\Internals\EO_OrderProps unsetXmlId()
	 * @method \string fillXmlId()
	 * @method \string getEntityType()
	 * @method \Bitrix\Sale\Internals\EO_OrderProps setEntityType(\string|\Bitrix\Main\DB\SqlExpression $entityType)
	 * @method bool hasEntityType()
	 * @method bool isEntityTypeFilled()
	 * @method bool isEntityTypeChanged()
	 * @method \string remindActualEntityType()
	 * @method \string requireEntityType()
	 * @method \Bitrix\Sale\Internals\EO_OrderProps resetEntityType()
	 * @method \Bitrix\Sale\Internals\EO_OrderProps unsetEntityType()
	 * @method \string fillEntityType()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Sale\Internals\EO_OrderProps set($fieldName, $value)
	 * @method \Bitrix\Sale\Internals\EO_OrderProps reset($fieldName)
	 * @method \Bitrix\Sale\Internals\EO_OrderProps unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Sale\Internals\EO_OrderProps wakeUp($data)
	 */
	class EO_OrderProps {
		/* @var \Bitrix\Sale\Internals\OrderPropsTable */
		static public $dataClass = '\Bitrix\Sale\Internals\OrderPropsTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Sale\Internals {
	/**
	 * EO_OrderProps_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getIdList()
	 * @method \int[] getPersonTypeIdList()
	 * @method \int[] fillPersonTypeId()
	 * @method \string[] getNameList()
	 * @method \string[] fillName()
	 * @method \string[] getTypeList()
	 * @method \string[] fillType()
	 * @method \boolean[] getRequiredList()
	 * @method \boolean[] fillRequired()
	 * @method \string[] getDefaultValueList()
	 * @method \string[] fillDefaultValue()
	 * @method \int[] getSortList()
	 * @method \int[] fillSort()
	 * @method \boolean[] getUserPropsList()
	 * @method \boolean[] fillUserProps()
	 * @method \boolean[] getIsLocationList()
	 * @method \boolean[] fillIsLocation()
	 * @method \int[] getPropsGroupIdList()
	 * @method \int[] fillPropsGroupId()
	 * @method \string[] getDescriptionList()
	 * @method \string[] fillDescription()
	 * @method \boolean[] getIsEmailList()
	 * @method \boolean[] fillIsEmail()
	 * @method \boolean[] getIsProfileNameList()
	 * @method \boolean[] fillIsProfileName()
	 * @method \boolean[] getIsPayerList()
	 * @method \boolean[] fillIsPayer()
	 * @method \boolean[] getIsLocation4taxList()
	 * @method \boolean[] fillIsLocation4tax()
	 * @method \boolean[] getIsFilteredList()
	 * @method \boolean[] fillIsFiltered()
	 * @method \string[] getCodeList()
	 * @method \string[] fillCode()
	 * @method \boolean[] getIsZipList()
	 * @method \boolean[] fillIsZip()
	 * @method \boolean[] getIsPhoneList()
	 * @method \boolean[] fillIsPhone()
	 * @method \boolean[] getIsAddressList()
	 * @method \boolean[] fillIsAddress()
	 * @method \boolean[] getIsAddressFromList()
	 * @method \boolean[] fillIsAddressFrom()
	 * @method \boolean[] getIsAddressToList()
	 * @method \boolean[] fillIsAddressTo()
	 * @method \boolean[] getActiveList()
	 * @method \boolean[] fillActive()
	 * @method \boolean[] getUtilList()
	 * @method \boolean[] fillUtil()
	 * @method \int[] getInputFieldLocationList()
	 * @method \int[] fillInputFieldLocation()
	 * @method \boolean[] getMultipleList()
	 * @method \boolean[] fillMultiple()
	 * @method \string[] getSettingsList()
	 * @method \string[] fillSettings()
	 * @method \Bitrix\Sale\Internals\EO_OrderPropsGroup[] getGroupList()
	 * @method \Bitrix\Sale\Internals\EO_OrderProps_Collection getGroupCollection()
	 * @method \Bitrix\Sale\Internals\EO_OrderPropsGroup_Collection fillGroup()
	 * @method \Bitrix\Sale\Internals\EO_PersonType[] getPersonTypeList()
	 * @method \Bitrix\Sale\Internals\EO_OrderProps_Collection getPersonTypeCollection()
	 * @method \Bitrix\Sale\Internals\EO_PersonType_Collection fillPersonType()
	 * @method \string[] getEntityRegistryTypeList()
	 * @method \string[] fillEntityRegistryType()
	 * @method \string[] getXmlIdList()
	 * @method \string[] fillXmlId()
	 * @method \string[] getEntityTypeList()
	 * @method \string[] fillEntityType()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Sale\Internals\EO_OrderProps $object)
	 * @method bool has(\Bitrix\Sale\Internals\EO_OrderProps $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Sale\Internals\EO_OrderProps getByPrimary($primary)
	 * @method \Bitrix\Sale\Internals\EO_OrderProps[] getAll()
	 * @method bool remove(\Bitrix\Sale\Internals\EO_OrderProps $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Sale\Internals\EO_OrderProps_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Sale\Internals\EO_OrderProps current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 * @method EO_OrderProps_Collection merge(?EO_OrderProps_Collection $collection)
	 * @method bool isEmpty()
	 */
	class EO_OrderProps_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Sale\Internals\OrderPropsTable */
		static public $dataClass = '\Bitrix\Sale\Internals\OrderPropsTable';
	}
}
namespace Bitrix\Sale\Internals {
	/**
	 * Common methods:
	 * ---------------
	 *
	 * @method EO_OrderProps_Result exec()
	 * @method \Bitrix\Sale\Internals\EO_OrderProps fetchObject()
	 * @method \Bitrix\Sale\Internals\EO_OrderProps_Collection fetchCollection()
	 *
	 * Custom methods:
	 * ---------------
	 *
	 */
	class EO_OrderProps_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Sale\Internals\EO_OrderProps fetchObject()
	 * @method \Bitrix\Sale\Internals\EO_OrderProps_Collection fetchCollection()
	 */
	class EO_OrderProps_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Sale\Internals\EO_OrderProps createObject($setDefaultValues = true)
	 * @method \Bitrix\Sale\Internals\EO_OrderProps_Collection createCollection()
	 * @method \Bitrix\Sale\Internals\EO_OrderProps wakeUpObject($row)
	 * @method \Bitrix\Sale\Internals\EO_OrderProps_Collection wakeUpCollection($rows)
	 */
	class EO_OrderProps_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Sale\Internals\OrderPropsGroupTable:sale\lib\internals\orderprops_group.php */
namespace Bitrix\Sale\Internals {
	/**
	 * EO_OrderPropsGroup
	 * @see \Bitrix\Sale\Internals\OrderPropsGroupTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getId()
	 * @method \Bitrix\Sale\Internals\EO_OrderPropsGroup setId(\int|\Bitrix\Main\DB\SqlExpression $id)
	 * @method bool hasId()
	 * @method bool isIdFilled()
	 * @method bool isIdChanged()
	 * @method \int getPersonTypeId()
	 * @method \Bitrix\Sale\Internals\EO_OrderPropsGroup setPersonTypeId(\int|\Bitrix\Main\DB\SqlExpression $personTypeId)
	 * @method bool hasPersonTypeId()
	 * @method bool isPersonTypeIdFilled()
	 * @method bool isPersonTypeIdChanged()
	 * @method \int remindActualPersonTypeId()
	 * @method \int requirePersonTypeId()
	 * @method \Bitrix\Sale\Internals\EO_OrderPropsGroup resetPersonTypeId()
	 * @method \Bitrix\Sale\Internals\EO_OrderPropsGroup unsetPersonTypeId()
	 * @method \int fillPersonTypeId()
	 * @method \string getName()
	 * @method \Bitrix\Sale\Internals\EO_OrderPropsGroup setName(\string|\Bitrix\Main\DB\SqlExpression $name)
	 * @method bool hasName()
	 * @method bool isNameFilled()
	 * @method bool isNameChanged()
	 * @method \string remindActualName()
	 * @method \string requireName()
	 * @method \Bitrix\Sale\Internals\EO_OrderPropsGroup resetName()
	 * @method \Bitrix\Sale\Internals\EO_OrderPropsGroup unsetName()
	 * @method \string fillName()
	 * @method \string getCode()
	 * @method \Bitrix\Sale\Internals\EO_OrderPropsGroup setCode(\string|\Bitrix\Main\DB\SqlExpression $code)
	 * @method bool hasCode()
	 * @method bool isCodeFilled()
	 * @method bool isCodeChanged()
	 * @method \string remindActualCode()
	 * @method \string requireCode()
	 * @method \Bitrix\Sale\Internals\EO_OrderPropsGroup resetCode()
	 * @method \Bitrix\Sale\Internals\EO_OrderPropsGroup unsetCode()
	 * @method \string fillCode()
	 * @method \int getSort()
	 * @method \Bitrix\Sale\Internals\EO_OrderPropsGroup setSort(\int|\Bitrix\Main\DB\SqlExpression $sort)
	 * @method bool hasSort()
	 * @method bool isSortFilled()
	 * @method bool isSortChanged()
	 * @method \int remindActualSort()
	 * @method \int requireSort()
	 * @method \Bitrix\Sale\Internals\EO_OrderPropsGroup resetSort()
	 * @method \Bitrix\Sale\Internals\EO_OrderPropsGroup unsetSort()
	 * @method \int fillSort()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Sale\Internals\EO_OrderPropsGroup set($fieldName, $value)
	 * @method \Bitrix\Sale\Internals\EO_OrderPropsGroup reset($fieldName)
	 * @method \Bitrix\Sale\Internals\EO_OrderPropsGroup unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Sale\Internals\EO_OrderPropsGroup wakeUp($data)
	 */
	class EO_OrderPropsGroup {
		/* @var \Bitrix\Sale\Internals\OrderPropsGroupTable */
		static public $dataClass = '\Bitrix\Sale\Internals\OrderPropsGroupTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Sale\Internals {
	/**
	 * EO_OrderPropsGroup_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getIdList()
	 * @method \int[] getPersonTypeIdList()
	 * @method \int[] fillPersonTypeId()
	 * @method \string[] getNameList()
	 * @method \string[] fillName()
	 * @method \string[] getCodeList()
	 * @method \string[] fillCode()
	 * @method \int[] getSortList()
	 * @method \int[] fillSort()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Sale\Internals\EO_OrderPropsGroup $object)
	 * @method bool has(\Bitrix\Sale\Internals\EO_OrderPropsGroup $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Sale\Internals\EO_OrderPropsGroup getByPrimary($primary)
	 * @method \Bitrix\Sale\Internals\EO_OrderPropsGroup[] getAll()
	 * @method bool remove(\Bitrix\Sale\Internals\EO_OrderPropsGroup $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Sale\Internals\EO_OrderPropsGroup_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Sale\Internals\EO_OrderPropsGroup current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 * @method EO_OrderPropsGroup_Collection merge(?EO_OrderPropsGroup_Collection $collection)
	 * @method bool isEmpty()
	 */
	class EO_OrderPropsGroup_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Sale\Internals\OrderPropsGroupTable */
		static public $dataClass = '\Bitrix\Sale\Internals\OrderPropsGroupTable';
	}
}
namespace Bitrix\Sale\Internals {
	/**
	 * Common methods:
	 * ---------------
	 *
	 * @method EO_OrderPropsGroup_Result exec()
	 * @method \Bitrix\Sale\Internals\EO_OrderPropsGroup fetchObject()
	 * @method \Bitrix\Sale\Internals\EO_OrderPropsGroup_Collection fetchCollection()
	 *
	 * Custom methods:
	 * ---------------
	 *
	 */
	class EO_OrderPropsGroup_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Sale\Internals\EO_OrderPropsGroup fetchObject()
	 * @method \Bitrix\Sale\Internals\EO_OrderPropsGroup_Collection fetchCollection()
	 */
	class EO_OrderPropsGroup_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Sale\Internals\EO_OrderPropsGroup createObject($setDefaultValues = true)
	 * @method \Bitrix\Sale\Internals\EO_OrderPropsGroup_Collection createCollection()
	 * @method \Bitrix\Sale\Internals\EO_OrderPropsGroup wakeUpObject($row)
	 * @method \Bitrix\Sale\Internals\EO_OrderPropsGroup_Collection wakeUpCollection($rows)
	 */
	class EO_OrderPropsGroup_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Sale\Internals\OrderPropsRelationTable:sale\lib\internals\orderprops_relation.php */
namespace Bitrix\Sale\Internals {
	/**
	 * EO_OrderPropsRelation
	 * @see \Bitrix\Sale\Internals\OrderPropsRelationTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getPropertyId()
	 * @method \Bitrix\Sale\Internals\EO_OrderPropsRelation setPropertyId(\int|\Bitrix\Main\DB\SqlExpression $propertyId)
	 * @method bool hasPropertyId()
	 * @method bool isPropertyIdFilled()
	 * @method bool isPropertyIdChanged()
	 * @method \string getEntityId()
	 * @method \Bitrix\Sale\Internals\EO_OrderPropsRelation setEntityId(\string|\Bitrix\Main\DB\SqlExpression $entityId)
	 * @method bool hasEntityId()
	 * @method bool isEntityIdFilled()
	 * @method bool isEntityIdChanged()
	 * @method \string getEntityType()
	 * @method \Bitrix\Sale\Internals\EO_OrderPropsRelation setEntityType(\string|\Bitrix\Main\DB\SqlExpression $entityType)
	 * @method bool hasEntityType()
	 * @method bool isEntityTypeFilled()
	 * @method bool isEntityTypeChanged()
	 * @method \Bitrix\Sale\Internals\EO_OrderProps getLproperty()
	 * @method \Bitrix\Sale\Internals\EO_OrderProps remindActualLproperty()
	 * @method \Bitrix\Sale\Internals\EO_OrderProps requireLproperty()
	 * @method \Bitrix\Sale\Internals\EO_OrderPropsRelation setLproperty(\Bitrix\Sale\Internals\EO_OrderProps $object)
	 * @method \Bitrix\Sale\Internals\EO_OrderPropsRelation resetLproperty()
	 * @method \Bitrix\Sale\Internals\EO_OrderPropsRelation unsetLproperty()
	 * @method bool hasLproperty()
	 * @method bool isLpropertyFilled()
	 * @method bool isLpropertyChanged()
	 * @method \Bitrix\Sale\Internals\EO_OrderProps fillLproperty()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Sale\Internals\EO_OrderPropsRelation set($fieldName, $value)
	 * @method \Bitrix\Sale\Internals\EO_OrderPropsRelation reset($fieldName)
	 * @method \Bitrix\Sale\Internals\EO_OrderPropsRelation unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Sale\Internals\EO_OrderPropsRelation wakeUp($data)
	 */
	class EO_OrderPropsRelation {
		/* @var \Bitrix\Sale\Internals\OrderPropsRelationTable */
		static public $dataClass = '\Bitrix\Sale\Internals\OrderPropsRelationTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Sale\Internals {
	/**
	 * EO_OrderPropsRelation_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getPropertyIdList()
	 * @method \string[] getEntityIdList()
	 * @method \string[] getEntityTypeList()
	 * @method \Bitrix\Sale\Internals\EO_OrderProps[] getLpropertyList()
	 * @method \Bitrix\Sale\Internals\EO_OrderPropsRelation_Collection getLpropertyCollection()
	 * @method \Bitrix\Sale\Internals\EO_OrderProps_Collection fillLproperty()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Sale\Internals\EO_OrderPropsRelation $object)
	 * @method bool has(\Bitrix\Sale\Internals\EO_OrderPropsRelation $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Sale\Internals\EO_OrderPropsRelation getByPrimary($primary)
	 * @method \Bitrix\Sale\Internals\EO_OrderPropsRelation[] getAll()
	 * @method bool remove(\Bitrix\Sale\Internals\EO_OrderPropsRelation $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Sale\Internals\EO_OrderPropsRelation_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Sale\Internals\EO_OrderPropsRelation current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 * @method EO_OrderPropsRelation_Collection merge(?EO_OrderPropsRelation_Collection $collection)
	 * @method bool isEmpty()
	 */
	class EO_OrderPropsRelation_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Sale\Internals\OrderPropsRelationTable */
		static public $dataClass = '\Bitrix\Sale\Internals\OrderPropsRelationTable';
	}
}
namespace Bitrix\Sale\Internals {
	/**
	 * Common methods:
	 * ---------------
	 *
	 * @method EO_OrderPropsRelation_Result exec()
	 * @method \Bitrix\Sale\Internals\EO_OrderPropsRelation fetchObject()
	 * @method \Bitrix\Sale\Internals\EO_OrderPropsRelation_Collection fetchCollection()
	 *
	 * Custom methods:
	 * ---------------
	 *
	 */
	class EO_OrderPropsRelation_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Sale\Internals\EO_OrderPropsRelation fetchObject()
	 * @method \Bitrix\Sale\Internals\EO_OrderPropsRelation_Collection fetchCollection()
	 */
	class EO_OrderPropsRelation_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Sale\Internals\EO_OrderPropsRelation createObject($setDefaultValues = true)
	 * @method \Bitrix\Sale\Internals\EO_OrderPropsRelation_Collection createCollection()
	 * @method \Bitrix\Sale\Internals\EO_OrderPropsRelation wakeUpObject($row)
	 * @method \Bitrix\Sale\Internals\EO_OrderPropsRelation_Collection wakeUpCollection($rows)
	 */
	class EO_OrderPropsRelation_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Sale\Internals\OrderPropsValueTable:sale\lib\internals\orderprops_value.php */
namespace Bitrix\Sale\Internals {
	/**
	 * EO_OrderPropsValue
	 * @see \Bitrix\Sale\Internals\OrderPropsValueTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getId()
	 * @method \Bitrix\Sale\Internals\EO_OrderPropsValue setId(\int|\Bitrix\Main\DB\SqlExpression $id)
	 * @method bool hasId()
	 * @method bool isIdFilled()
	 * @method bool isIdChanged()
	 * @method \int getOrderId()
	 * @method \Bitrix\Sale\Internals\EO_OrderPropsValue setOrderId(\int|\Bitrix\Main\DB\SqlExpression $orderId)
	 * @method bool hasOrderId()
	 * @method bool isOrderIdFilled()
	 * @method bool isOrderIdChanged()
	 * @method \int remindActualOrderId()
	 * @method \int requireOrderId()
	 * @method \Bitrix\Sale\Internals\EO_OrderPropsValue resetOrderId()
	 * @method \Bitrix\Sale\Internals\EO_OrderPropsValue unsetOrderId()
	 * @method \int fillOrderId()
	 * @method \int getOrderPropsId()
	 * @method \Bitrix\Sale\Internals\EO_OrderPropsValue setOrderPropsId(\int|\Bitrix\Main\DB\SqlExpression $orderPropsId)
	 * @method bool hasOrderPropsId()
	 * @method bool isOrderPropsIdFilled()
	 * @method bool isOrderPropsIdChanged()
	 * @method \int remindActualOrderPropsId()
	 * @method \int requireOrderPropsId()
	 * @method \Bitrix\Sale\Internals\EO_OrderPropsValue resetOrderPropsId()
	 * @method \Bitrix\Sale\Internals\EO_OrderPropsValue unsetOrderPropsId()
	 * @method \int fillOrderPropsId()
	 * @method \string getName()
	 * @method \Bitrix\Sale\Internals\EO_OrderPropsValue setName(\string|\Bitrix\Main\DB\SqlExpression $name)
	 * @method bool hasName()
	 * @method bool isNameFilled()
	 * @method bool isNameChanged()
	 * @method \string remindActualName()
	 * @method \string requireName()
	 * @method \Bitrix\Sale\Internals\EO_OrderPropsValue resetName()
	 * @method \Bitrix\Sale\Internals\EO_OrderPropsValue unsetName()
	 * @method \string fillName()
	 * @method \string getValue()
	 * @method \Bitrix\Sale\Internals\EO_OrderPropsValue setValue(\string|\Bitrix\Main\DB\SqlExpression $value)
	 * @method bool hasValue()
	 * @method bool isValueFilled()
	 * @method bool isValueChanged()
	 * @method \string remindActualValue()
	 * @method \string requireValue()
	 * @method \Bitrix\Sale\Internals\EO_OrderPropsValue resetValue()
	 * @method \Bitrix\Sale\Internals\EO_OrderPropsValue unsetValue()
	 * @method \string fillValue()
	 * @method \string getCode()
	 * @method \Bitrix\Sale\Internals\EO_OrderPropsValue setCode(\string|\Bitrix\Main\DB\SqlExpression $code)
	 * @method bool hasCode()
	 * @method bool isCodeFilled()
	 * @method bool isCodeChanged()
	 * @method \string remindActualCode()
	 * @method \string requireCode()
	 * @method \Bitrix\Sale\Internals\EO_OrderPropsValue resetCode()
	 * @method \Bitrix\Sale\Internals\EO_OrderPropsValue unsetCode()
	 * @method \string fillCode()
	 * @method \Bitrix\Sale\Internals\EO_OrderProps getProperty()
	 * @method \Bitrix\Sale\Internals\EO_OrderProps remindActualProperty()
	 * @method \Bitrix\Sale\Internals\EO_OrderProps requireProperty()
	 * @method \Bitrix\Sale\Internals\EO_OrderPropsValue setProperty(\Bitrix\Sale\Internals\EO_OrderProps $object)
	 * @method \Bitrix\Sale\Internals\EO_OrderPropsValue resetProperty()
	 * @method \Bitrix\Sale\Internals\EO_OrderPropsValue unsetProperty()
	 * @method bool hasProperty()
	 * @method bool isPropertyFilled()
	 * @method bool isPropertyChanged()
	 * @method \Bitrix\Sale\Internals\EO_OrderProps fillProperty()
	 * @method \string getXmlId()
	 * @method \Bitrix\Sale\Internals\EO_OrderPropsValue setXmlId(\string|\Bitrix\Main\DB\SqlExpression $xmlId)
	 * @method bool hasXmlId()
	 * @method bool isXmlIdFilled()
	 * @method bool isXmlIdChanged()
	 * @method \string remindActualXmlId()
	 * @method \string requireXmlId()
	 * @method \Bitrix\Sale\Internals\EO_OrderPropsValue resetXmlId()
	 * @method \Bitrix\Sale\Internals\EO_OrderPropsValue unsetXmlId()
	 * @method \string fillXmlId()
	 * @method \int getEntityId()
	 * @method \Bitrix\Sale\Internals\EO_OrderPropsValue setEntityId(\int|\Bitrix\Main\DB\SqlExpression $entityId)
	 * @method bool hasEntityId()
	 * @method bool isEntityIdFilled()
	 * @method bool isEntityIdChanged()
	 * @method \int remindActualEntityId()
	 * @method \int requireEntityId()
	 * @method \Bitrix\Sale\Internals\EO_OrderPropsValue resetEntityId()
	 * @method \Bitrix\Sale\Internals\EO_OrderPropsValue unsetEntityId()
	 * @method \int fillEntityId()
	 * @method \string getEntityType()
	 * @method \Bitrix\Sale\Internals\EO_OrderPropsValue setEntityType(\string|\Bitrix\Main\DB\SqlExpression $entityType)
	 * @method bool hasEntityType()
	 * @method bool isEntityTypeFilled()
	 * @method bool isEntityTypeChanged()
	 * @method \string remindActualEntityType()
	 * @method \string requireEntityType()
	 * @method \Bitrix\Sale\Internals\EO_OrderPropsValue resetEntityType()
	 * @method \Bitrix\Sale\Internals\EO_OrderPropsValue unsetEntityType()
	 * @method \string fillEntityType()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Sale\Internals\EO_OrderPropsValue set($fieldName, $value)
	 * @method \Bitrix\Sale\Internals\EO_OrderPropsValue reset($fieldName)
	 * @method \Bitrix\Sale\Internals\EO_OrderPropsValue unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Sale\Internals\EO_OrderPropsValue wakeUp($data)
	 */
	class EO_OrderPropsValue {
		/* @var \Bitrix\Sale\Internals\OrderPropsValueTable */
		static public $dataClass = '\Bitrix\Sale\Internals\OrderPropsValueTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Sale\Internals {
	/**
	 * EO_OrderPropsValue_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getIdList()
	 * @method \int[] getOrderIdList()
	 * @method \int[] fillOrderId()
	 * @method \int[] getOrderPropsIdList()
	 * @method \int[] fillOrderPropsId()
	 * @method \string[] getNameList()
	 * @method \string[] fillName()
	 * @method \string[] getValueList()
	 * @method \string[] fillValue()
	 * @method \string[] getCodeList()
	 * @method \string[] fillCode()
	 * @method \Bitrix\Sale\Internals\EO_OrderProps[] getPropertyList()
	 * @method \Bitrix\Sale\Internals\EO_OrderPropsValue_Collection getPropertyCollection()
	 * @method \Bitrix\Sale\Internals\EO_OrderProps_Collection fillProperty()
	 * @method \string[] getXmlIdList()
	 * @method \string[] fillXmlId()
	 * @method \int[] getEntityIdList()
	 * @method \int[] fillEntityId()
	 * @method \string[] getEntityTypeList()
	 * @method \string[] fillEntityType()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Sale\Internals\EO_OrderPropsValue $object)
	 * @method bool has(\Bitrix\Sale\Internals\EO_OrderPropsValue $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Sale\Internals\EO_OrderPropsValue getByPrimary($primary)
	 * @method \Bitrix\Sale\Internals\EO_OrderPropsValue[] getAll()
	 * @method bool remove(\Bitrix\Sale\Internals\EO_OrderPropsValue $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Sale\Internals\EO_OrderPropsValue_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Sale\Internals\EO_OrderPropsValue current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 * @method EO_OrderPropsValue_Collection merge(?EO_OrderPropsValue_Collection $collection)
	 * @method bool isEmpty()
	 */
	class EO_OrderPropsValue_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Sale\Internals\OrderPropsValueTable */
		static public $dataClass = '\Bitrix\Sale\Internals\OrderPropsValueTable';
	}
}
namespace Bitrix\Sale\Internals {
	/**
	 * Common methods:
	 * ---------------
	 *
	 * @method EO_OrderPropsValue_Result exec()
	 * @method \Bitrix\Sale\Internals\EO_OrderPropsValue fetchObject()
	 * @method \Bitrix\Sale\Internals\EO_OrderPropsValue_Collection fetchCollection()
	 *
	 * Custom methods:
	 * ---------------
	 *
	 */
	class EO_OrderPropsValue_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Sale\Internals\EO_OrderPropsValue fetchObject()
	 * @method \Bitrix\Sale\Internals\EO_OrderPropsValue_Collection fetchCollection()
	 */
	class EO_OrderPropsValue_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Sale\Internals\EO_OrderPropsValue createObject($setDefaultValues = true)
	 * @method \Bitrix\Sale\Internals\EO_OrderPropsValue_Collection createCollection()
	 * @method \Bitrix\Sale\Internals\EO_OrderPropsValue wakeUpObject($row)
	 * @method \Bitrix\Sale\Internals\EO_OrderPropsValue_Collection wakeUpCollection($rows)
	 */
	class EO_OrderPropsValue_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Sale\Internals\OrderPropsVariantTable:sale\lib\internals\orderprops_variant.php */
namespace Bitrix\Sale\Internals {
	/**
	 * EO_OrderPropsVariant
	 * @see \Bitrix\Sale\Internals\OrderPropsVariantTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getId()
	 * @method \Bitrix\Sale\Internals\EO_OrderPropsVariant setId(\int|\Bitrix\Main\DB\SqlExpression $id)
	 * @method bool hasId()
	 * @method bool isIdFilled()
	 * @method bool isIdChanged()
	 * @method \int getOrderPropsId()
	 * @method \Bitrix\Sale\Internals\EO_OrderPropsVariant setOrderPropsId(\int|\Bitrix\Main\DB\SqlExpression $orderPropsId)
	 * @method bool hasOrderPropsId()
	 * @method bool isOrderPropsIdFilled()
	 * @method bool isOrderPropsIdChanged()
	 * @method \int remindActualOrderPropsId()
	 * @method \int requireOrderPropsId()
	 * @method \Bitrix\Sale\Internals\EO_OrderPropsVariant resetOrderPropsId()
	 * @method \Bitrix\Sale\Internals\EO_OrderPropsVariant unsetOrderPropsId()
	 * @method \int fillOrderPropsId()
	 * @method \string getName()
	 * @method \Bitrix\Sale\Internals\EO_OrderPropsVariant setName(\string|\Bitrix\Main\DB\SqlExpression $name)
	 * @method bool hasName()
	 * @method bool isNameFilled()
	 * @method bool isNameChanged()
	 * @method \string remindActualName()
	 * @method \string requireName()
	 * @method \Bitrix\Sale\Internals\EO_OrderPropsVariant resetName()
	 * @method \Bitrix\Sale\Internals\EO_OrderPropsVariant unsetName()
	 * @method \string fillName()
	 * @method \string getValue()
	 * @method \Bitrix\Sale\Internals\EO_OrderPropsVariant setValue(\string|\Bitrix\Main\DB\SqlExpression $value)
	 * @method bool hasValue()
	 * @method bool isValueFilled()
	 * @method bool isValueChanged()
	 * @method \string remindActualValue()
	 * @method \string requireValue()
	 * @method \Bitrix\Sale\Internals\EO_OrderPropsVariant resetValue()
	 * @method \Bitrix\Sale\Internals\EO_OrderPropsVariant unsetValue()
	 * @method \string fillValue()
	 * @method \int getSort()
	 * @method \Bitrix\Sale\Internals\EO_OrderPropsVariant setSort(\int|\Bitrix\Main\DB\SqlExpression $sort)
	 * @method bool hasSort()
	 * @method bool isSortFilled()
	 * @method bool isSortChanged()
	 * @method \int remindActualSort()
	 * @method \int requireSort()
	 * @method \Bitrix\Sale\Internals\EO_OrderPropsVariant resetSort()
	 * @method \Bitrix\Sale\Internals\EO_OrderPropsVariant unsetSort()
	 * @method \int fillSort()
	 * @method \string getDescription()
	 * @method \Bitrix\Sale\Internals\EO_OrderPropsVariant setDescription(\string|\Bitrix\Main\DB\SqlExpression $description)
	 * @method bool hasDescription()
	 * @method bool isDescriptionFilled()
	 * @method bool isDescriptionChanged()
	 * @method \string remindActualDescription()
	 * @method \string requireDescription()
	 * @method \Bitrix\Sale\Internals\EO_OrderPropsVariant resetDescription()
	 * @method \Bitrix\Sale\Internals\EO_OrderPropsVariant unsetDescription()
	 * @method \string fillDescription()
	 * @method \string getXmlId()
	 * @method \Bitrix\Sale\Internals\EO_OrderPropsVariant setXmlId(\string|\Bitrix\Main\DB\SqlExpression $xmlId)
	 * @method bool hasXmlId()
	 * @method bool isXmlIdFilled()
	 * @method bool isXmlIdChanged()
	 * @method \string remindActualXmlId()
	 * @method \string requireXmlId()
	 * @method \Bitrix\Sale\Internals\EO_OrderPropsVariant resetXmlId()
	 * @method \Bitrix\Sale\Internals\EO_OrderPropsVariant unsetXmlId()
	 * @method \string fillXmlId()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Sale\Internals\EO_OrderPropsVariant set($fieldName, $value)
	 * @method \Bitrix\Sale\Internals\EO_OrderPropsVariant reset($fieldName)
	 * @method \Bitrix\Sale\Internals\EO_OrderPropsVariant unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Sale\Internals\EO_OrderPropsVariant wakeUp($data)
	 */
	class EO_OrderPropsVariant {
		/* @var \Bitrix\Sale\Internals\OrderPropsVariantTable */
		static public $dataClass = '\Bitrix\Sale\Internals\OrderPropsVariantTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Sale\Internals {
	/**
	 * EO_OrderPropsVariant_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getIdList()
	 * @method \int[] getOrderPropsIdList()
	 * @method \int[] fillOrderPropsId()
	 * @method \string[] getNameList()
	 * @method \string[] fillName()
	 * @method \string[] getValueList()
	 * @method \string[] fillValue()
	 * @method \int[] getSortList()
	 * @method \int[] fillSort()
	 * @method \string[] getDescriptionList()
	 * @method \string[] fillDescription()
	 * @method \string[] getXmlIdList()
	 * @method \string[] fillXmlId()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Sale\Internals\EO_OrderPropsVariant $object)
	 * @method bool has(\Bitrix\Sale\Internals\EO_OrderPropsVariant $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Sale\Internals\EO_OrderPropsVariant getByPrimary($primary)
	 * @method \Bitrix\Sale\Internals\EO_OrderPropsVariant[] getAll()
	 * @method bool remove(\Bitrix\Sale\Internals\EO_OrderPropsVariant $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Sale\Internals\EO_OrderPropsVariant_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Sale\Internals\EO_OrderPropsVariant current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 * @method EO_OrderPropsVariant_Collection merge(?EO_OrderPropsVariant_Collection $collection)
	 * @method bool isEmpty()
	 */
	class EO_OrderPropsVariant_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Sale\Internals\OrderPropsVariantTable */
		static public $dataClass = '\Bitrix\Sale\Internals\OrderPropsVariantTable';
	}
}
namespace Bitrix\Sale\Internals {
	/**
	 * Common methods:
	 * ---------------
	 *
	 * @method EO_OrderPropsVariant_Result exec()
	 * @method \Bitrix\Sale\Internals\EO_OrderPropsVariant fetchObject()
	 * @method \Bitrix\Sale\Internals\EO_OrderPropsVariant_Collection fetchCollection()
	 *
	 * Custom methods:
	 * ---------------
	 *
	 */
	class EO_OrderPropsVariant_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Sale\Internals\EO_OrderPropsVariant fetchObject()
	 * @method \Bitrix\Sale\Internals\EO_OrderPropsVariant_Collection fetchCollection()
	 */
	class EO_OrderPropsVariant_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Sale\Internals\EO_OrderPropsVariant createObject($setDefaultValues = true)
	 * @method \Bitrix\Sale\Internals\EO_OrderPropsVariant_Collection createCollection()
	 * @method \Bitrix\Sale\Internals\EO_OrderPropsVariant wakeUpObject($row)
	 * @method \Bitrix\Sale\Internals\EO_OrderPropsVariant_Collection wakeUpCollection($rows)
	 */
	class EO_OrderPropsVariant_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Sale\Internals\OrderRoundTable:sale\lib\internals\orderround.php */
namespace Bitrix\Sale\Internals {
	/**
	 * EO_OrderRound
	 * @see \Bitrix\Sale\Internals\OrderRoundTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getId()
	 * @method \Bitrix\Sale\Internals\EO_OrderRound setId(\int|\Bitrix\Main\DB\SqlExpression $id)
	 * @method bool hasId()
	 * @method bool isIdFilled()
	 * @method bool isIdChanged()
	 * @method \int getOrderId()
	 * @method \Bitrix\Sale\Internals\EO_OrderRound setOrderId(\int|\Bitrix\Main\DB\SqlExpression $orderId)
	 * @method bool hasOrderId()
	 * @method bool isOrderIdFilled()
	 * @method bool isOrderIdChanged()
	 * @method \int remindActualOrderId()
	 * @method \int requireOrderId()
	 * @method \Bitrix\Sale\Internals\EO_OrderRound resetOrderId()
	 * @method \Bitrix\Sale\Internals\EO_OrderRound unsetOrderId()
	 * @method \int fillOrderId()
	 * @method \int getApplyBlockCounter()
	 * @method \Bitrix\Sale\Internals\EO_OrderRound setApplyBlockCounter(\int|\Bitrix\Main\DB\SqlExpression $applyBlockCounter)
	 * @method bool hasApplyBlockCounter()
	 * @method bool isApplyBlockCounterFilled()
	 * @method bool isApplyBlockCounterChanged()
	 * @method \int remindActualApplyBlockCounter()
	 * @method \int requireApplyBlockCounter()
	 * @method \Bitrix\Sale\Internals\EO_OrderRound resetApplyBlockCounter()
	 * @method \Bitrix\Sale\Internals\EO_OrderRound unsetApplyBlockCounter()
	 * @method \int fillApplyBlockCounter()
	 * @method \boolean getOrderRound()
	 * @method \Bitrix\Sale\Internals\EO_OrderRound setOrderRound(\boolean|\Bitrix\Main\DB\SqlExpression $orderRound)
	 * @method bool hasOrderRound()
	 * @method bool isOrderRoundFilled()
	 * @method bool isOrderRoundChanged()
	 * @method \boolean remindActualOrderRound()
	 * @method \boolean requireOrderRound()
	 * @method \Bitrix\Sale\Internals\EO_OrderRound resetOrderRound()
	 * @method \Bitrix\Sale\Internals\EO_OrderRound unsetOrderRound()
	 * @method \boolean fillOrderRound()
	 * @method \string getEntityType()
	 * @method \Bitrix\Sale\Internals\EO_OrderRound setEntityType(\string|\Bitrix\Main\DB\SqlExpression $entityType)
	 * @method bool hasEntityType()
	 * @method bool isEntityTypeFilled()
	 * @method bool isEntityTypeChanged()
	 * @method \string remindActualEntityType()
	 * @method \string requireEntityType()
	 * @method \Bitrix\Sale\Internals\EO_OrderRound resetEntityType()
	 * @method \Bitrix\Sale\Internals\EO_OrderRound unsetEntityType()
	 * @method \string fillEntityType()
	 * @method \int getEntityId()
	 * @method \Bitrix\Sale\Internals\EO_OrderRound setEntityId(\int|\Bitrix\Main\DB\SqlExpression $entityId)
	 * @method bool hasEntityId()
	 * @method bool isEntityIdFilled()
	 * @method bool isEntityIdChanged()
	 * @method \int remindActualEntityId()
	 * @method \int requireEntityId()
	 * @method \Bitrix\Sale\Internals\EO_OrderRound resetEntityId()
	 * @method \Bitrix\Sale\Internals\EO_OrderRound unsetEntityId()
	 * @method \int fillEntityId()
	 * @method \string getEntityValue()
	 * @method \Bitrix\Sale\Internals\EO_OrderRound setEntityValue(\string|\Bitrix\Main\DB\SqlExpression $entityValue)
	 * @method bool hasEntityValue()
	 * @method bool isEntityValueFilled()
	 * @method bool isEntityValueChanged()
	 * @method \string remindActualEntityValue()
	 * @method \string requireEntityValue()
	 * @method \Bitrix\Sale\Internals\EO_OrderRound resetEntityValue()
	 * @method \Bitrix\Sale\Internals\EO_OrderRound unsetEntityValue()
	 * @method \string fillEntityValue()
	 * @method \boolean getApply()
	 * @method \Bitrix\Sale\Internals\EO_OrderRound setApply(\boolean|\Bitrix\Main\DB\SqlExpression $apply)
	 * @method bool hasApply()
	 * @method bool isApplyFilled()
	 * @method bool isApplyChanged()
	 * @method \boolean remindActualApply()
	 * @method \boolean requireApply()
	 * @method \Bitrix\Sale\Internals\EO_OrderRound resetApply()
	 * @method \Bitrix\Sale\Internals\EO_OrderRound unsetApply()
	 * @method \boolean fillApply()
	 * @method \string getRoundRule()
	 * @method \Bitrix\Sale\Internals\EO_OrderRound setRoundRule(\string|\Bitrix\Main\DB\SqlExpression $roundRule)
	 * @method bool hasRoundRule()
	 * @method bool isRoundRuleFilled()
	 * @method bool isRoundRuleChanged()
	 * @method \string remindActualRoundRule()
	 * @method \string requireRoundRule()
	 * @method \Bitrix\Sale\Internals\EO_OrderRound resetRoundRule()
	 * @method \Bitrix\Sale\Internals\EO_OrderRound unsetRoundRule()
	 * @method \string fillRoundRule()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Sale\Internals\EO_OrderRound set($fieldName, $value)
	 * @method \Bitrix\Sale\Internals\EO_OrderRound reset($fieldName)
	 * @method \Bitrix\Sale\Internals\EO_OrderRound unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Sale\Internals\EO_OrderRound wakeUp($data)
	 */
	class EO_OrderRound {
		/* @var \Bitrix\Sale\Internals\OrderRoundTable */
		static public $dataClass = '\Bitrix\Sale\Internals\OrderRoundTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Sale\Internals {
	/**
	 * EO_OrderRound_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getIdList()
	 * @method \int[] getOrderIdList()
	 * @method \int[] fillOrderId()
	 * @method \int[] getApplyBlockCounterList()
	 * @method \int[] fillApplyBlockCounter()
	 * @method \boolean[] getOrderRoundList()
	 * @method \boolean[] fillOrderRound()
	 * @method \string[] getEntityTypeList()
	 * @method \string[] fillEntityType()
	 * @method \int[] getEntityIdList()
	 * @method \int[] fillEntityId()
	 * @method \string[] getEntityValueList()
	 * @method \string[] fillEntityValue()
	 * @method \boolean[] getApplyList()
	 * @method \boolean[] fillApply()
	 * @method \string[] getRoundRuleList()
	 * @method \string[] fillRoundRule()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Sale\Internals\EO_OrderRound $object)
	 * @method bool has(\Bitrix\Sale\Internals\EO_OrderRound $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Sale\Internals\EO_OrderRound getByPrimary($primary)
	 * @method \Bitrix\Sale\Internals\EO_OrderRound[] getAll()
	 * @method bool remove(\Bitrix\Sale\Internals\EO_OrderRound $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Sale\Internals\EO_OrderRound_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Sale\Internals\EO_OrderRound current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 * @method EO_OrderRound_Collection merge(?EO_OrderRound_Collection $collection)
	 * @method bool isEmpty()
	 */
	class EO_OrderRound_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Sale\Internals\OrderRoundTable */
		static public $dataClass = '\Bitrix\Sale\Internals\OrderRoundTable';
	}
}
namespace Bitrix\Sale\Internals {
	/**
	 * Common methods:
	 * ---------------
	 *
	 * @method EO_OrderRound_Result exec()
	 * @method \Bitrix\Sale\Internals\EO_OrderRound fetchObject()
	 * @method \Bitrix\Sale\Internals\EO_OrderRound_Collection fetchCollection()
	 *
	 * Custom methods:
	 * ---------------
	 *
	 */
	class EO_OrderRound_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Sale\Internals\EO_OrderRound fetchObject()
	 * @method \Bitrix\Sale\Internals\EO_OrderRound_Collection fetchCollection()
	 */
	class EO_OrderRound_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Sale\Internals\EO_OrderRound createObject($setDefaultValues = true)
	 * @method \Bitrix\Sale\Internals\EO_OrderRound_Collection createCollection()
	 * @method \Bitrix\Sale\Internals\EO_OrderRound wakeUpObject($row)
	 * @method \Bitrix\Sale\Internals\EO_OrderRound_Collection wakeUpCollection($rows)
	 */
	class EO_OrderRound_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Sale\Internals\PayableItemTable:sale\lib\internals\payableitem.php */
namespace Bitrix\Sale\Internals {
	/**
	 * EO_PayableItem
	 * @see \Bitrix\Sale\Internals\PayableItemTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getId()
	 * @method \Bitrix\Sale\Internals\EO_PayableItem setId(\int|\Bitrix\Main\DB\SqlExpression $id)
	 * @method bool hasId()
	 * @method bool isIdFilled()
	 * @method bool isIdChanged()
	 * @method \int getEntityId()
	 * @method \Bitrix\Sale\Internals\EO_PayableItem setEntityId(\int|\Bitrix\Main\DB\SqlExpression $entityId)
	 * @method bool hasEntityId()
	 * @method bool isEntityIdFilled()
	 * @method bool isEntityIdChanged()
	 * @method \int remindActualEntityId()
	 * @method \int requireEntityId()
	 * @method \Bitrix\Sale\Internals\EO_PayableItem resetEntityId()
	 * @method \Bitrix\Sale\Internals\EO_PayableItem unsetEntityId()
	 * @method \int fillEntityId()
	 * @method \string getEntityType()
	 * @method \Bitrix\Sale\Internals\EO_PayableItem setEntityType(\string|\Bitrix\Main\DB\SqlExpression $entityType)
	 * @method bool hasEntityType()
	 * @method bool isEntityTypeFilled()
	 * @method bool isEntityTypeChanged()
	 * @method \string remindActualEntityType()
	 * @method \string requireEntityType()
	 * @method \Bitrix\Sale\Internals\EO_PayableItem resetEntityType()
	 * @method \Bitrix\Sale\Internals\EO_PayableItem unsetEntityType()
	 * @method \string fillEntityType()
	 * @method \int getPaymentId()
	 * @method \Bitrix\Sale\Internals\EO_PayableItem setPaymentId(\int|\Bitrix\Main\DB\SqlExpression $paymentId)
	 * @method bool hasPaymentId()
	 * @method bool isPaymentIdFilled()
	 * @method bool isPaymentIdChanged()
	 * @method \int remindActualPaymentId()
	 * @method \int requirePaymentId()
	 * @method \Bitrix\Sale\Internals\EO_PayableItem resetPaymentId()
	 * @method \Bitrix\Sale\Internals\EO_PayableItem unsetPaymentId()
	 * @method \int fillPaymentId()
	 * @method \Bitrix\Main\Type\DateTime getDateInsert()
	 * @method \Bitrix\Sale\Internals\EO_PayableItem setDateInsert(\Bitrix\Main\Type\DateTime|\Bitrix\Main\DB\SqlExpression $dateInsert)
	 * @method bool hasDateInsert()
	 * @method bool isDateInsertFilled()
	 * @method bool isDateInsertChanged()
	 * @method \Bitrix\Main\Type\DateTime remindActualDateInsert()
	 * @method \Bitrix\Main\Type\DateTime requireDateInsert()
	 * @method \Bitrix\Sale\Internals\EO_PayableItem resetDateInsert()
	 * @method \Bitrix\Sale\Internals\EO_PayableItem unsetDateInsert()
	 * @method \Bitrix\Main\Type\DateTime fillDateInsert()
	 * @method \Bitrix\Main\Type\DateTime getDateInsertShort()
	 * @method \Bitrix\Main\Type\DateTime remindActualDateInsertShort()
	 * @method \Bitrix\Main\Type\DateTime requireDateInsertShort()
	 * @method bool hasDateInsertShort()
	 * @method bool isDateInsertShortFilled()
	 * @method \Bitrix\Sale\Internals\EO_PayableItem unsetDateInsertShort()
	 * @method \Bitrix\Main\Type\DateTime fillDateInsertShort()
	 * @method \float getQuantity()
	 * @method \Bitrix\Sale\Internals\EO_PayableItem setQuantity(\float|\Bitrix\Main\DB\SqlExpression $quantity)
	 * @method bool hasQuantity()
	 * @method bool isQuantityFilled()
	 * @method bool isQuantityChanged()
	 * @method \float remindActualQuantity()
	 * @method \float requireQuantity()
	 * @method \Bitrix\Sale\Internals\EO_PayableItem resetQuantity()
	 * @method \Bitrix\Sale\Internals\EO_PayableItem unsetQuantity()
	 * @method \float fillQuantity()
	 * @method \string getXmlId()
	 * @method \Bitrix\Sale\Internals\EO_PayableItem setXmlId(\string|\Bitrix\Main\DB\SqlExpression $xmlId)
	 * @method bool hasXmlId()
	 * @method bool isXmlIdFilled()
	 * @method bool isXmlIdChanged()
	 * @method \string remindActualXmlId()
	 * @method \string requireXmlId()
	 * @method \Bitrix\Sale\Internals\EO_PayableItem resetXmlId()
	 * @method \Bitrix\Sale\Internals\EO_PayableItem unsetXmlId()
	 * @method \string fillXmlId()
	 * @method \Bitrix\Sale\Internals\EO_Payment getPayment()
	 * @method \Bitrix\Sale\Internals\EO_Payment remindActualPayment()
	 * @method \Bitrix\Sale\Internals\EO_Payment requirePayment()
	 * @method \Bitrix\Sale\Internals\EO_PayableItem setPayment(\Bitrix\Sale\Internals\EO_Payment $object)
	 * @method \Bitrix\Sale\Internals\EO_PayableItem resetPayment()
	 * @method \Bitrix\Sale\Internals\EO_PayableItem unsetPayment()
	 * @method bool hasPayment()
	 * @method bool isPaymentFilled()
	 * @method bool isPaymentChanged()
	 * @method \Bitrix\Sale\Internals\EO_Payment fillPayment()
	 * @method \Bitrix\Sale\Internals\EO_Basket getBasket()
	 * @method \Bitrix\Sale\Internals\EO_Basket remindActualBasket()
	 * @method \Bitrix\Sale\Internals\EO_Basket requireBasket()
	 * @method \Bitrix\Sale\Internals\EO_PayableItem setBasket(\Bitrix\Sale\Internals\EO_Basket $object)
	 * @method \Bitrix\Sale\Internals\EO_PayableItem resetBasket()
	 * @method \Bitrix\Sale\Internals\EO_PayableItem unsetBasket()
	 * @method bool hasBasket()
	 * @method bool isBasketFilled()
	 * @method bool isBasketChanged()
	 * @method \Bitrix\Sale\Internals\EO_Basket fillBasket()
	 * @method \Bitrix\Sale\Internals\EO_Shipment getShipment()
	 * @method \Bitrix\Sale\Internals\EO_Shipment remindActualShipment()
	 * @method \Bitrix\Sale\Internals\EO_Shipment requireShipment()
	 * @method \Bitrix\Sale\Internals\EO_PayableItem setShipment(\Bitrix\Sale\Internals\EO_Shipment $object)
	 * @method \Bitrix\Sale\Internals\EO_PayableItem resetShipment()
	 * @method \Bitrix\Sale\Internals\EO_PayableItem unsetShipment()
	 * @method bool hasShipment()
	 * @method bool isShipmentFilled()
	 * @method bool isShipmentChanged()
	 * @method \Bitrix\Sale\Internals\EO_Shipment fillShipment()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Sale\Internals\EO_PayableItem set($fieldName, $value)
	 * @method \Bitrix\Sale\Internals\EO_PayableItem reset($fieldName)
	 * @method \Bitrix\Sale\Internals\EO_PayableItem unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Sale\Internals\EO_PayableItem wakeUp($data)
	 */
	class EO_PayableItem {
		/* @var \Bitrix\Sale\Internals\PayableItemTable */
		static public $dataClass = '\Bitrix\Sale\Internals\PayableItemTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Sale\Internals {
	/**
	 * EO_PayableItem_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getIdList()
	 * @method \int[] getEntityIdList()
	 * @method \int[] fillEntityId()
	 * @method \string[] getEntityTypeList()
	 * @method \string[] fillEntityType()
	 * @method \int[] getPaymentIdList()
	 * @method \int[] fillPaymentId()
	 * @method \Bitrix\Main\Type\DateTime[] getDateInsertList()
	 * @method \Bitrix\Main\Type\DateTime[] fillDateInsert()
	 * @method \Bitrix\Main\Type\DateTime[] getDateInsertShortList()
	 * @method \Bitrix\Main\Type\DateTime[] fillDateInsertShort()
	 * @method \float[] getQuantityList()
	 * @method \float[] fillQuantity()
	 * @method \string[] getXmlIdList()
	 * @method \string[] fillXmlId()
	 * @method \Bitrix\Sale\Internals\EO_Payment[] getPaymentList()
	 * @method \Bitrix\Sale\Internals\EO_PayableItem_Collection getPaymentCollection()
	 * @method \Bitrix\Sale\Internals\EO_Payment_Collection fillPayment()
	 * @method \Bitrix\Sale\Internals\EO_Basket[] getBasketList()
	 * @method \Bitrix\Sale\Internals\EO_PayableItem_Collection getBasketCollection()
	 * @method \Bitrix\Sale\Internals\EO_Basket_Collection fillBasket()
	 * @method \Bitrix\Sale\Internals\EO_Shipment[] getShipmentList()
	 * @method \Bitrix\Sale\Internals\EO_PayableItem_Collection getShipmentCollection()
	 * @method \Bitrix\Sale\Internals\EO_Shipment_Collection fillShipment()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Sale\Internals\EO_PayableItem $object)
	 * @method bool has(\Bitrix\Sale\Internals\EO_PayableItem $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Sale\Internals\EO_PayableItem getByPrimary($primary)
	 * @method \Bitrix\Sale\Internals\EO_PayableItem[] getAll()
	 * @method bool remove(\Bitrix\Sale\Internals\EO_PayableItem $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Sale\Internals\EO_PayableItem_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Sale\Internals\EO_PayableItem current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 * @method EO_PayableItem_Collection merge(?EO_PayableItem_Collection $collection)
	 * @method bool isEmpty()
	 */
	class EO_PayableItem_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Sale\Internals\PayableItemTable */
		static public $dataClass = '\Bitrix\Sale\Internals\PayableItemTable';
	}
}
namespace Bitrix\Sale\Internals {
	/**
	 * Common methods:
	 * ---------------
	 *
	 * @method EO_PayableItem_Result exec()
	 * @method \Bitrix\Sale\Internals\EO_PayableItem fetchObject()
	 * @method \Bitrix\Sale\Internals\EO_PayableItem_Collection fetchCollection()
	 *
	 * Custom methods:
	 * ---------------
	 *
	 */
	class EO_PayableItem_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Sale\Internals\EO_PayableItem fetchObject()
	 * @method \Bitrix\Sale\Internals\EO_PayableItem_Collection fetchCollection()
	 */
	class EO_PayableItem_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Sale\Internals\EO_PayableItem createObject($setDefaultValues = true)
	 * @method \Bitrix\Sale\Internals\EO_PayableItem_Collection createCollection()
	 * @method \Bitrix\Sale\Internals\EO_PayableItem wakeUpObject($row)
	 * @method \Bitrix\Sale\Internals\EO_PayableItem_Collection wakeUpCollection($rows)
	 */
	class EO_PayableItem_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Sale\Internals\PaymentTable:sale\lib\internals\payment.php */
namespace Bitrix\Sale\Internals {
	/**
	 * EO_Payment
	 * @see \Bitrix\Sale\Internals\PaymentTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getId()
	 * @method \Bitrix\Sale\Internals\EO_Payment setId(\int|\Bitrix\Main\DB\SqlExpression $id)
	 * @method bool hasId()
	 * @method bool isIdFilled()
	 * @method bool isIdChanged()
	 * @method \int getOrderId()
	 * @method \Bitrix\Sale\Internals\EO_Payment setOrderId(\int|\Bitrix\Main\DB\SqlExpression $orderId)
	 * @method bool hasOrderId()
	 * @method bool isOrderIdFilled()
	 * @method bool isOrderIdChanged()
	 * @method \int remindActualOrderId()
	 * @method \int requireOrderId()
	 * @method \Bitrix\Sale\Internals\EO_Payment resetOrderId()
	 * @method \Bitrix\Sale\Internals\EO_Payment unsetOrderId()
	 * @method \int fillOrderId()
	 * @method \string getAccountNumber()
	 * @method \Bitrix\Sale\Internals\EO_Payment setAccountNumber(\string|\Bitrix\Main\DB\SqlExpression $accountNumber)
	 * @method bool hasAccountNumber()
	 * @method bool isAccountNumberFilled()
	 * @method bool isAccountNumberChanged()
	 * @method \string remindActualAccountNumber()
	 * @method \string requireAccountNumber()
	 * @method \Bitrix\Sale\Internals\EO_Payment resetAccountNumber()
	 * @method \Bitrix\Sale\Internals\EO_Payment unsetAccountNumber()
	 * @method \string fillAccountNumber()
	 * @method \Bitrix\Sale\Internals\EO_Order getOrder()
	 * @method \Bitrix\Sale\Internals\EO_Order remindActualOrder()
	 * @method \Bitrix\Sale\Internals\EO_Order requireOrder()
	 * @method \Bitrix\Sale\Internals\EO_Payment setOrder(\Bitrix\Sale\Internals\EO_Order $object)
	 * @method \Bitrix\Sale\Internals\EO_Payment resetOrder()
	 * @method \Bitrix\Sale\Internals\EO_Payment unsetOrder()
	 * @method bool hasOrder()
	 * @method bool isOrderFilled()
	 * @method bool isOrderChanged()
	 * @method \Bitrix\Sale\Internals\EO_Order fillOrder()
	 * @method \boolean getPaid()
	 * @method \Bitrix\Sale\Internals\EO_Payment setPaid(\boolean|\Bitrix\Main\DB\SqlExpression $paid)
	 * @method bool hasPaid()
	 * @method bool isPaidFilled()
	 * @method bool isPaidChanged()
	 * @method \boolean remindActualPaid()
	 * @method \boolean requirePaid()
	 * @method \Bitrix\Sale\Internals\EO_Payment resetPaid()
	 * @method \Bitrix\Sale\Internals\EO_Payment unsetPaid()
	 * @method \boolean fillPaid()
	 * @method \Bitrix\Main\Type\DateTime getDatePaid()
	 * @method \Bitrix\Sale\Internals\EO_Payment setDatePaid(\Bitrix\Main\Type\DateTime|\Bitrix\Main\DB\SqlExpression $datePaid)
	 * @method bool hasDatePaid()
	 * @method bool isDatePaidFilled()
	 * @method bool isDatePaidChanged()
	 * @method \Bitrix\Main\Type\DateTime remindActualDatePaid()
	 * @method \Bitrix\Main\Type\DateTime requireDatePaid()
	 * @method \Bitrix\Sale\Internals\EO_Payment resetDatePaid()
	 * @method \Bitrix\Sale\Internals\EO_Payment unsetDatePaid()
	 * @method \Bitrix\Main\Type\DateTime fillDatePaid()
	 * @method \int getEmpPaidId()
	 * @method \Bitrix\Sale\Internals\EO_Payment setEmpPaidId(\int|\Bitrix\Main\DB\SqlExpression $empPaidId)
	 * @method bool hasEmpPaidId()
	 * @method bool isEmpPaidIdFilled()
	 * @method bool isEmpPaidIdChanged()
	 * @method \int remindActualEmpPaidId()
	 * @method \int requireEmpPaidId()
	 * @method \Bitrix\Sale\Internals\EO_Payment resetEmpPaidId()
	 * @method \Bitrix\Sale\Internals\EO_Payment unsetEmpPaidId()
	 * @method \int fillEmpPaidId()
	 * @method \Bitrix\Main\EO_User getEmpPaidBy()
	 * @method \Bitrix\Main\EO_User remindActualEmpPaidBy()
	 * @method \Bitrix\Main\EO_User requireEmpPaidBy()
	 * @method \Bitrix\Sale\Internals\EO_Payment setEmpPaidBy(\Bitrix\Main\EO_User $object)
	 * @method \Bitrix\Sale\Internals\EO_Payment resetEmpPaidBy()
	 * @method \Bitrix\Sale\Internals\EO_Payment unsetEmpPaidBy()
	 * @method bool hasEmpPaidBy()
	 * @method bool isEmpPaidByFilled()
	 * @method bool isEmpPaidByChanged()
	 * @method \Bitrix\Main\EO_User fillEmpPaidBy()
	 * @method \int getPaySystemId()
	 * @method \Bitrix\Sale\Internals\EO_Payment setPaySystemId(\int|\Bitrix\Main\DB\SqlExpression $paySystemId)
	 * @method bool hasPaySystemId()
	 * @method bool isPaySystemIdFilled()
	 * @method bool isPaySystemIdChanged()
	 * @method \int remindActualPaySystemId()
	 * @method \int requirePaySystemId()
	 * @method \Bitrix\Sale\Internals\EO_Payment resetPaySystemId()
	 * @method \Bitrix\Sale\Internals\EO_Payment unsetPaySystemId()
	 * @method \int fillPaySystemId()
	 * @method \Bitrix\Sale\Internals\EO_PaySystemAction getPaySystem()
	 * @method \Bitrix\Sale\Internals\EO_PaySystemAction remindActualPaySystem()
	 * @method \Bitrix\Sale\Internals\EO_PaySystemAction requirePaySystem()
	 * @method \Bitrix\Sale\Internals\EO_Payment setPaySystem(\Bitrix\Sale\Internals\EO_PaySystemAction $object)
	 * @method \Bitrix\Sale\Internals\EO_Payment resetPaySystem()
	 * @method \Bitrix\Sale\Internals\EO_Payment unsetPaySystem()
	 * @method bool hasPaySystem()
	 * @method bool isPaySystemFilled()
	 * @method bool isPaySystemChanged()
	 * @method \Bitrix\Sale\Internals\EO_PaySystemAction fillPaySystem()
	 * @method \boolean getPsStatus()
	 * @method \Bitrix\Sale\Internals\EO_Payment setPsStatus(\boolean|\Bitrix\Main\DB\SqlExpression $psStatus)
	 * @method bool hasPsStatus()
	 * @method bool isPsStatusFilled()
	 * @method bool isPsStatusChanged()
	 * @method \boolean remindActualPsStatus()
	 * @method \boolean requirePsStatus()
	 * @method \Bitrix\Sale\Internals\EO_Payment resetPsStatus()
	 * @method \Bitrix\Sale\Internals\EO_Payment unsetPsStatus()
	 * @method \boolean fillPsStatus()
	 * @method \string getPsStatusCode()
	 * @method \Bitrix\Sale\Internals\EO_Payment setPsStatusCode(\string|\Bitrix\Main\DB\SqlExpression $psStatusCode)
	 * @method bool hasPsStatusCode()
	 * @method bool isPsStatusCodeFilled()
	 * @method bool isPsStatusCodeChanged()
	 * @method \string remindActualPsStatusCode()
	 * @method \string requirePsStatusCode()
	 * @method \Bitrix\Sale\Internals\EO_Payment resetPsStatusCode()
	 * @method \Bitrix\Sale\Internals\EO_Payment unsetPsStatusCode()
	 * @method \string fillPsStatusCode()
	 * @method \string getPsInvoiceId()
	 * @method \Bitrix\Sale\Internals\EO_Payment setPsInvoiceId(\string|\Bitrix\Main\DB\SqlExpression $psInvoiceId)
	 * @method bool hasPsInvoiceId()
	 * @method bool isPsInvoiceIdFilled()
	 * @method bool isPsInvoiceIdChanged()
	 * @method \string remindActualPsInvoiceId()
	 * @method \string requirePsInvoiceId()
	 * @method \Bitrix\Sale\Internals\EO_Payment resetPsInvoiceId()
	 * @method \Bitrix\Sale\Internals\EO_Payment unsetPsInvoiceId()
	 * @method \string fillPsInvoiceId()
	 * @method \string getPsStatusDescription()
	 * @method \Bitrix\Sale\Internals\EO_Payment setPsStatusDescription(\string|\Bitrix\Main\DB\SqlExpression $psStatusDescription)
	 * @method bool hasPsStatusDescription()
	 * @method bool isPsStatusDescriptionFilled()
	 * @method bool isPsStatusDescriptionChanged()
	 * @method \string remindActualPsStatusDescription()
	 * @method \string requirePsStatusDescription()
	 * @method \Bitrix\Sale\Internals\EO_Payment resetPsStatusDescription()
	 * @method \Bitrix\Sale\Internals\EO_Payment unsetPsStatusDescription()
	 * @method \string fillPsStatusDescription()
	 * @method \string getPsStatusMessage()
	 * @method \Bitrix\Sale\Internals\EO_Payment setPsStatusMessage(\string|\Bitrix\Main\DB\SqlExpression $psStatusMessage)
	 * @method bool hasPsStatusMessage()
	 * @method bool isPsStatusMessageFilled()
	 * @method bool isPsStatusMessageChanged()
	 * @method \string remindActualPsStatusMessage()
	 * @method \string requirePsStatusMessage()
	 * @method \Bitrix\Sale\Internals\EO_Payment resetPsStatusMessage()
	 * @method \Bitrix\Sale\Internals\EO_Payment unsetPsStatusMessage()
	 * @method \string fillPsStatusMessage()
	 * @method \float getPsSum()
	 * @method \Bitrix\Sale\Internals\EO_Payment setPsSum(\float|\Bitrix\Main\DB\SqlExpression $psSum)
	 * @method bool hasPsSum()
	 * @method bool isPsSumFilled()
	 * @method bool isPsSumChanged()
	 * @method \float remindActualPsSum()
	 * @method \float requirePsSum()
	 * @method \Bitrix\Sale\Internals\EO_Payment resetPsSum()
	 * @method \Bitrix\Sale\Internals\EO_Payment unsetPsSum()
	 * @method \float fillPsSum()
	 * @method \string getPsCurrency()
	 * @method \Bitrix\Sale\Internals\EO_Payment setPsCurrency(\string|\Bitrix\Main\DB\SqlExpression $psCurrency)
	 * @method bool hasPsCurrency()
	 * @method bool isPsCurrencyFilled()
	 * @method bool isPsCurrencyChanged()
	 * @method \string remindActualPsCurrency()
	 * @method \string requirePsCurrency()
	 * @method \Bitrix\Sale\Internals\EO_Payment resetPsCurrency()
	 * @method \Bitrix\Sale\Internals\EO_Payment unsetPsCurrency()
	 * @method \string fillPsCurrency()
	 * @method \Bitrix\Main\Type\DateTime getPsResponseDate()
	 * @method \Bitrix\Sale\Internals\EO_Payment setPsResponseDate(\Bitrix\Main\Type\DateTime|\Bitrix\Main\DB\SqlExpression $psResponseDate)
	 * @method bool hasPsResponseDate()
	 * @method bool isPsResponseDateFilled()
	 * @method bool isPsResponseDateChanged()
	 * @method \Bitrix\Main\Type\DateTime remindActualPsResponseDate()
	 * @method \Bitrix\Main\Type\DateTime requirePsResponseDate()
	 * @method \Bitrix\Sale\Internals\EO_Payment resetPsResponseDate()
	 * @method \Bitrix\Sale\Internals\EO_Payment unsetPsResponseDate()
	 * @method \Bitrix\Main\Type\DateTime fillPsResponseDate()
	 * @method \string getPsRecurringToken()
	 * @method \Bitrix\Sale\Internals\EO_Payment setPsRecurringToken(\string|\Bitrix\Main\DB\SqlExpression $psRecurringToken)
	 * @method bool hasPsRecurringToken()
	 * @method bool isPsRecurringTokenFilled()
	 * @method bool isPsRecurringTokenChanged()
	 * @method \string remindActualPsRecurringToken()
	 * @method \string requirePsRecurringToken()
	 * @method \Bitrix\Sale\Internals\EO_Payment resetPsRecurringToken()
	 * @method \Bitrix\Sale\Internals\EO_Payment unsetPsRecurringToken()
	 * @method \string fillPsRecurringToken()
	 * @method \string getPsCardNumber()
	 * @method \Bitrix\Sale\Internals\EO_Payment setPsCardNumber(\string|\Bitrix\Main\DB\SqlExpression $psCardNumber)
	 * @method bool hasPsCardNumber()
	 * @method bool isPsCardNumberFilled()
	 * @method bool isPsCardNumberChanged()
	 * @method \string remindActualPsCardNumber()
	 * @method \string requirePsCardNumber()
	 * @method \Bitrix\Sale\Internals\EO_Payment resetPsCardNumber()
	 * @method \Bitrix\Sale\Internals\EO_Payment unsetPsCardNumber()
	 * @method \string fillPsCardNumber()
	 * @method \string getPayVoucherNum()
	 * @method \Bitrix\Sale\Internals\EO_Payment setPayVoucherNum(\string|\Bitrix\Main\DB\SqlExpression $payVoucherNum)
	 * @method bool hasPayVoucherNum()
	 * @method bool isPayVoucherNumFilled()
	 * @method bool isPayVoucherNumChanged()
	 * @method \string remindActualPayVoucherNum()
	 * @method \string requirePayVoucherNum()
	 * @method \Bitrix\Sale\Internals\EO_Payment resetPayVoucherNum()
	 * @method \Bitrix\Sale\Internals\EO_Payment unsetPayVoucherNum()
	 * @method \string fillPayVoucherNum()
	 * @method \Bitrix\Main\Type\Date getPayVoucherDate()
	 * @method \Bitrix\Sale\Internals\EO_Payment setPayVoucherDate(\Bitrix\Main\Type\Date|\Bitrix\Main\DB\SqlExpression $payVoucherDate)
	 * @method bool hasPayVoucherDate()
	 * @method bool isPayVoucherDateFilled()
	 * @method bool isPayVoucherDateChanged()
	 * @method \Bitrix\Main\Type\Date remindActualPayVoucherDate()
	 * @method \Bitrix\Main\Type\Date requirePayVoucherDate()
	 * @method \Bitrix\Sale\Internals\EO_Payment resetPayVoucherDate()
	 * @method \Bitrix\Sale\Internals\EO_Payment unsetPayVoucherDate()
	 * @method \Bitrix\Main\Type\Date fillPayVoucherDate()
	 * @method \Bitrix\Main\Type\Date getDatePayBefore()
	 * @method \Bitrix\Sale\Internals\EO_Payment setDatePayBefore(\Bitrix\Main\Type\Date|\Bitrix\Main\DB\SqlExpression $datePayBefore)
	 * @method bool hasDatePayBefore()
	 * @method bool isDatePayBeforeFilled()
	 * @method bool isDatePayBeforeChanged()
	 * @method \Bitrix\Main\Type\Date remindActualDatePayBefore()
	 * @method \Bitrix\Main\Type\Date requireDatePayBefore()
	 * @method \Bitrix\Sale\Internals\EO_Payment resetDatePayBefore()
	 * @method \Bitrix\Sale\Internals\EO_Payment unsetDatePayBefore()
	 * @method \Bitrix\Main\Type\Date fillDatePayBefore()
	 * @method \Bitrix\Main\Type\DateTime getDateBill()
	 * @method \Bitrix\Sale\Internals\EO_Payment setDateBill(\Bitrix\Main\Type\DateTime|\Bitrix\Main\DB\SqlExpression $dateBill)
	 * @method bool hasDateBill()
	 * @method bool isDateBillFilled()
	 * @method bool isDateBillChanged()
	 * @method \Bitrix\Main\Type\DateTime remindActualDateBill()
	 * @method \Bitrix\Main\Type\DateTime requireDateBill()
	 * @method \Bitrix\Sale\Internals\EO_Payment resetDateBill()
	 * @method \Bitrix\Sale\Internals\EO_Payment unsetDateBill()
	 * @method \Bitrix\Main\Type\DateTime fillDateBill()
	 * @method \string getXmlId()
	 * @method \Bitrix\Sale\Internals\EO_Payment setXmlId(\string|\Bitrix\Main\DB\SqlExpression $xmlId)
	 * @method bool hasXmlId()
	 * @method bool isXmlIdFilled()
	 * @method bool isXmlIdChanged()
	 * @method \string remindActualXmlId()
	 * @method \string requireXmlId()
	 * @method \Bitrix\Sale\Internals\EO_Payment resetXmlId()
	 * @method \Bitrix\Sale\Internals\EO_Payment unsetXmlId()
	 * @method \string fillXmlId()
	 * @method \float getSum()
	 * @method \Bitrix\Sale\Internals\EO_Payment setSum(\float|\Bitrix\Main\DB\SqlExpression $sum)
	 * @method bool hasSum()
	 * @method bool isSumFilled()
	 * @method bool isSumChanged()
	 * @method \float remindActualSum()
	 * @method \float requireSum()
	 * @method \Bitrix\Sale\Internals\EO_Payment resetSum()
	 * @method \Bitrix\Sale\Internals\EO_Payment unsetSum()
	 * @method \float fillSum()
	 * @method \float getPriceCod()
	 * @method \Bitrix\Sale\Internals\EO_Payment setPriceCod(\float|\Bitrix\Main\DB\SqlExpression $priceCod)
	 * @method bool hasPriceCod()
	 * @method bool isPriceCodFilled()
	 * @method bool isPriceCodChanged()
	 * @method \float remindActualPriceCod()
	 * @method \float requirePriceCod()
	 * @method \Bitrix\Sale\Internals\EO_Payment resetPriceCod()
	 * @method \Bitrix\Sale\Internals\EO_Payment unsetPriceCod()
	 * @method \float fillPriceCod()
	 * @method \string getCurrency()
	 * @method \Bitrix\Sale\Internals\EO_Payment setCurrency(\string|\Bitrix\Main\DB\SqlExpression $currency)
	 * @method bool hasCurrency()
	 * @method bool isCurrencyFilled()
	 * @method bool isCurrencyChanged()
	 * @method \string remindActualCurrency()
	 * @method \string requireCurrency()
	 * @method \Bitrix\Sale\Internals\EO_Payment resetCurrency()
	 * @method \Bitrix\Sale\Internals\EO_Payment unsetCurrency()
	 * @method \string fillCurrency()
	 * @method \string getPaySystemName()
	 * @method \Bitrix\Sale\Internals\EO_Payment setPaySystemName(\string|\Bitrix\Main\DB\SqlExpression $paySystemName)
	 * @method bool hasPaySystemName()
	 * @method bool isPaySystemNameFilled()
	 * @method bool isPaySystemNameChanged()
	 * @method \string remindActualPaySystemName()
	 * @method \string requirePaySystemName()
	 * @method \Bitrix\Sale\Internals\EO_Payment resetPaySystemName()
	 * @method \Bitrix\Sale\Internals\EO_Payment unsetPaySystemName()
	 * @method \string fillPaySystemName()
	 * @method \int getResponsibleId()
	 * @method \Bitrix\Sale\Internals\EO_Payment setResponsibleId(\int|\Bitrix\Main\DB\SqlExpression $responsibleId)
	 * @method bool hasResponsibleId()
	 * @method bool isResponsibleIdFilled()
	 * @method bool isResponsibleIdChanged()
	 * @method \int remindActualResponsibleId()
	 * @method \int requireResponsibleId()
	 * @method \Bitrix\Sale\Internals\EO_Payment resetResponsibleId()
	 * @method \Bitrix\Sale\Internals\EO_Payment unsetResponsibleId()
	 * @method \int fillResponsibleId()
	 * @method \Bitrix\Main\EO_User getResponsibleBy()
	 * @method \Bitrix\Main\EO_User remindActualResponsibleBy()
	 * @method \Bitrix\Main\EO_User requireResponsibleBy()
	 * @method \Bitrix\Sale\Internals\EO_Payment setResponsibleBy(\Bitrix\Main\EO_User $object)
	 * @method \Bitrix\Sale\Internals\EO_Payment resetResponsibleBy()
	 * @method \Bitrix\Sale\Internals\EO_Payment unsetResponsibleBy()
	 * @method bool hasResponsibleBy()
	 * @method bool isResponsibleByFilled()
	 * @method bool isResponsibleByChanged()
	 * @method \Bitrix\Main\EO_User fillResponsibleBy()
	 * @method \int getEmpResponsibleId()
	 * @method \Bitrix\Sale\Internals\EO_Payment setEmpResponsibleId(\int|\Bitrix\Main\DB\SqlExpression $empResponsibleId)
	 * @method bool hasEmpResponsibleId()
	 * @method bool isEmpResponsibleIdFilled()
	 * @method bool isEmpResponsibleIdChanged()
	 * @method \int remindActualEmpResponsibleId()
	 * @method \int requireEmpResponsibleId()
	 * @method \Bitrix\Sale\Internals\EO_Payment resetEmpResponsibleId()
	 * @method \Bitrix\Sale\Internals\EO_Payment unsetEmpResponsibleId()
	 * @method \int fillEmpResponsibleId()
	 * @method \Bitrix\Main\EO_User getEmpResponsibleBy()
	 * @method \Bitrix\Main\EO_User remindActualEmpResponsibleBy()
	 * @method \Bitrix\Main\EO_User requireEmpResponsibleBy()
	 * @method \Bitrix\Sale\Internals\EO_Payment setEmpResponsibleBy(\Bitrix\Main\EO_User $object)
	 * @method \Bitrix\Sale\Internals\EO_Payment resetEmpResponsibleBy()
	 * @method \Bitrix\Sale\Internals\EO_Payment unsetEmpResponsibleBy()
	 * @method bool hasEmpResponsibleBy()
	 * @method bool isEmpResponsibleByFilled()
	 * @method bool isEmpResponsibleByChanged()
	 * @method \Bitrix\Main\EO_User fillEmpResponsibleBy()
	 * @method \Bitrix\Main\Type\DateTime getDateResponsibleId()
	 * @method \Bitrix\Sale\Internals\EO_Payment setDateResponsibleId(\Bitrix\Main\Type\DateTime|\Bitrix\Main\DB\SqlExpression $dateResponsibleId)
	 * @method bool hasDateResponsibleId()
	 * @method bool isDateResponsibleIdFilled()
	 * @method bool isDateResponsibleIdChanged()
	 * @method \Bitrix\Main\Type\DateTime remindActualDateResponsibleId()
	 * @method \Bitrix\Main\Type\DateTime requireDateResponsibleId()
	 * @method \Bitrix\Sale\Internals\EO_Payment resetDateResponsibleId()
	 * @method \Bitrix\Sale\Internals\EO_Payment unsetDateResponsibleId()
	 * @method \Bitrix\Main\Type\DateTime fillDateResponsibleId()
	 * @method \string getComments()
	 * @method \Bitrix\Sale\Internals\EO_Payment setComments(\string|\Bitrix\Main\DB\SqlExpression $comments)
	 * @method bool hasComments()
	 * @method bool isCommentsFilled()
	 * @method bool isCommentsChanged()
	 * @method \string remindActualComments()
	 * @method \string requireComments()
	 * @method \Bitrix\Sale\Internals\EO_Payment resetComments()
	 * @method \Bitrix\Sale\Internals\EO_Payment unsetComments()
	 * @method \string fillComments()
	 * @method \int getCompanyId()
	 * @method \Bitrix\Sale\Internals\EO_Payment setCompanyId(\int|\Bitrix\Main\DB\SqlExpression $companyId)
	 * @method bool hasCompanyId()
	 * @method bool isCompanyIdFilled()
	 * @method bool isCompanyIdChanged()
	 * @method \int remindActualCompanyId()
	 * @method \int requireCompanyId()
	 * @method \Bitrix\Sale\Internals\EO_Payment resetCompanyId()
	 * @method \Bitrix\Sale\Internals\EO_Payment unsetCompanyId()
	 * @method \int fillCompanyId()
	 * @method \Bitrix\Sale\Internals\EO_Company getCompanyBy()
	 * @method \Bitrix\Sale\Internals\EO_Company remindActualCompanyBy()
	 * @method \Bitrix\Sale\Internals\EO_Company requireCompanyBy()
	 * @method \Bitrix\Sale\Internals\EO_Payment setCompanyBy(\Bitrix\Sale\Internals\EO_Company $object)
	 * @method \Bitrix\Sale\Internals\EO_Payment resetCompanyBy()
	 * @method \Bitrix\Sale\Internals\EO_Payment unsetCompanyBy()
	 * @method bool hasCompanyBy()
	 * @method bool isCompanyByFilled()
	 * @method bool isCompanyByChanged()
	 * @method \Bitrix\Sale\Internals\EO_Company fillCompanyBy()
	 * @method \string getPayReturnNum()
	 * @method \Bitrix\Sale\Internals\EO_Payment setPayReturnNum(\string|\Bitrix\Main\DB\SqlExpression $payReturnNum)
	 * @method bool hasPayReturnNum()
	 * @method bool isPayReturnNumFilled()
	 * @method bool isPayReturnNumChanged()
	 * @method \string remindActualPayReturnNum()
	 * @method \string requirePayReturnNum()
	 * @method \Bitrix\Sale\Internals\EO_Payment resetPayReturnNum()
	 * @method \Bitrix\Sale\Internals\EO_Payment unsetPayReturnNum()
	 * @method \string fillPayReturnNum()
	 * @method \Bitrix\Main\Type\Date getPayReturnDate()
	 * @method \Bitrix\Sale\Internals\EO_Payment setPayReturnDate(\Bitrix\Main\Type\Date|\Bitrix\Main\DB\SqlExpression $payReturnDate)
	 * @method bool hasPayReturnDate()
	 * @method bool isPayReturnDateFilled()
	 * @method bool isPayReturnDateChanged()
	 * @method \Bitrix\Main\Type\Date remindActualPayReturnDate()
	 * @method \Bitrix\Main\Type\Date requirePayReturnDate()
	 * @method \Bitrix\Sale\Internals\EO_Payment resetPayReturnDate()
	 * @method \Bitrix\Sale\Internals\EO_Payment unsetPayReturnDate()
	 * @method \Bitrix\Main\Type\Date fillPayReturnDate()
	 * @method \int getEmpReturnId()
	 * @method \Bitrix\Sale\Internals\EO_Payment setEmpReturnId(\int|\Bitrix\Main\DB\SqlExpression $empReturnId)
	 * @method bool hasEmpReturnId()
	 * @method bool isEmpReturnIdFilled()
	 * @method bool isEmpReturnIdChanged()
	 * @method \int remindActualEmpReturnId()
	 * @method \int requireEmpReturnId()
	 * @method \Bitrix\Sale\Internals\EO_Payment resetEmpReturnId()
	 * @method \Bitrix\Sale\Internals\EO_Payment unsetEmpReturnId()
	 * @method \int fillEmpReturnId()
	 * @method \Bitrix\Main\EO_User getEmpReturnBy()
	 * @method \Bitrix\Main\EO_User remindActualEmpReturnBy()
	 * @method \Bitrix\Main\EO_User requireEmpReturnBy()
	 * @method \Bitrix\Sale\Internals\EO_Payment setEmpReturnBy(\Bitrix\Main\EO_User $object)
	 * @method \Bitrix\Sale\Internals\EO_Payment resetEmpReturnBy()
	 * @method \Bitrix\Sale\Internals\EO_Payment unsetEmpReturnBy()
	 * @method bool hasEmpReturnBy()
	 * @method bool isEmpReturnByFilled()
	 * @method bool isEmpReturnByChanged()
	 * @method \Bitrix\Main\EO_User fillEmpReturnBy()
	 * @method \string getPayReturnComment()
	 * @method \Bitrix\Sale\Internals\EO_Payment setPayReturnComment(\string|\Bitrix\Main\DB\SqlExpression $payReturnComment)
	 * @method bool hasPayReturnComment()
	 * @method bool isPayReturnCommentFilled()
	 * @method bool isPayReturnCommentChanged()
	 * @method \string remindActualPayReturnComment()
	 * @method \string requirePayReturnComment()
	 * @method \Bitrix\Sale\Internals\EO_Payment resetPayReturnComment()
	 * @method \Bitrix\Sale\Internals\EO_Payment unsetPayReturnComment()
	 * @method \string fillPayReturnComment()
	 * @method \string getIsReturn()
	 * @method \Bitrix\Sale\Internals\EO_Payment setIsReturn(\string|\Bitrix\Main\DB\SqlExpression $isReturn)
	 * @method bool hasIsReturn()
	 * @method bool isIsReturnFilled()
	 * @method bool isIsReturnChanged()
	 * @method \string remindActualIsReturn()
	 * @method \string requireIsReturn()
	 * @method \Bitrix\Sale\Internals\EO_Payment resetIsReturn()
	 * @method \Bitrix\Sale\Internals\EO_Payment unsetIsReturn()
	 * @method \string fillIsReturn()
	 * @method \boolean getMarked()
	 * @method \Bitrix\Sale\Internals\EO_Payment setMarked(\boolean|\Bitrix\Main\DB\SqlExpression $marked)
	 * @method bool hasMarked()
	 * @method bool isMarkedFilled()
	 * @method bool isMarkedChanged()
	 * @method \boolean remindActualMarked()
	 * @method \boolean requireMarked()
	 * @method \Bitrix\Sale\Internals\EO_Payment resetMarked()
	 * @method \Bitrix\Sale\Internals\EO_Payment unsetMarked()
	 * @method \boolean fillMarked()
	 * @method \Bitrix\Main\Type\DateTime getDateMarked()
	 * @method \Bitrix\Sale\Internals\EO_Payment setDateMarked(\Bitrix\Main\Type\DateTime|\Bitrix\Main\DB\SqlExpression $dateMarked)
	 * @method bool hasDateMarked()
	 * @method bool isDateMarkedFilled()
	 * @method bool isDateMarkedChanged()
	 * @method \Bitrix\Main\Type\DateTime remindActualDateMarked()
	 * @method \Bitrix\Main\Type\DateTime requireDateMarked()
	 * @method \Bitrix\Sale\Internals\EO_Payment resetDateMarked()
	 * @method \Bitrix\Sale\Internals\EO_Payment unsetDateMarked()
	 * @method \Bitrix\Main\Type\DateTime fillDateMarked()
	 * @method \int getEmpMarkedId()
	 * @method \Bitrix\Sale\Internals\EO_Payment setEmpMarkedId(\int|\Bitrix\Main\DB\SqlExpression $empMarkedId)
	 * @method bool hasEmpMarkedId()
	 * @method bool isEmpMarkedIdFilled()
	 * @method bool isEmpMarkedIdChanged()
	 * @method \int remindActualEmpMarkedId()
	 * @method \int requireEmpMarkedId()
	 * @method \Bitrix\Sale\Internals\EO_Payment resetEmpMarkedId()
	 * @method \Bitrix\Sale\Internals\EO_Payment unsetEmpMarkedId()
	 * @method \int fillEmpMarkedId()
	 * @method \Bitrix\Main\EO_User getEmpMarkedBy()
	 * @method \Bitrix\Main\EO_User remindActualEmpMarkedBy()
	 * @method \Bitrix\Main\EO_User requireEmpMarkedBy()
	 * @method \Bitrix\Sale\Internals\EO_Payment setEmpMarkedBy(\Bitrix\Main\EO_User $object)
	 * @method \Bitrix\Sale\Internals\EO_Payment resetEmpMarkedBy()
	 * @method \Bitrix\Sale\Internals\EO_Payment unsetEmpMarkedBy()
	 * @method bool hasEmpMarkedBy()
	 * @method bool isEmpMarkedByFilled()
	 * @method bool isEmpMarkedByChanged()
	 * @method \Bitrix\Main\EO_User fillEmpMarkedBy()
	 * @method \string getReasonMarked()
	 * @method \Bitrix\Sale\Internals\EO_Payment setReasonMarked(\string|\Bitrix\Main\DB\SqlExpression $reasonMarked)
	 * @method bool hasReasonMarked()
	 * @method bool isReasonMarkedFilled()
	 * @method bool isReasonMarkedChanged()
	 * @method \string remindActualReasonMarked()
	 * @method \string requireReasonMarked()
	 * @method \Bitrix\Sale\Internals\EO_Payment resetReasonMarked()
	 * @method \Bitrix\Sale\Internals\EO_Payment unsetReasonMarked()
	 * @method \string fillReasonMarked()
	 * @method \boolean getUpdated1c()
	 * @method \Bitrix\Sale\Internals\EO_Payment setUpdated1c(\boolean|\Bitrix\Main\DB\SqlExpression $updated1c)
	 * @method bool hasUpdated1c()
	 * @method bool isUpdated1cFilled()
	 * @method bool isUpdated1cChanged()
	 * @method \boolean remindActualUpdated1c()
	 * @method \boolean requireUpdated1c()
	 * @method \Bitrix\Sale\Internals\EO_Payment resetUpdated1c()
	 * @method \Bitrix\Sale\Internals\EO_Payment unsetUpdated1c()
	 * @method \boolean fillUpdated1c()
	 * @method \string getId1c()
	 * @method \Bitrix\Sale\Internals\EO_Payment setId1c(\string|\Bitrix\Main\DB\SqlExpression $id1c)
	 * @method bool hasId1c()
	 * @method bool isId1cFilled()
	 * @method bool isId1cChanged()
	 * @method \string remindActualId1c()
	 * @method \string requireId1c()
	 * @method \Bitrix\Sale\Internals\EO_Payment resetId1c()
	 * @method \Bitrix\Sale\Internals\EO_Payment unsetId1c()
	 * @method \string fillId1c()
	 * @method \string getVersion1c()
	 * @method \Bitrix\Sale\Internals\EO_Payment setVersion1c(\string|\Bitrix\Main\DB\SqlExpression $version1c)
	 * @method bool hasVersion1c()
	 * @method bool isVersion1cFilled()
	 * @method bool isVersion1cChanged()
	 * @method \string remindActualVersion1c()
	 * @method \string requireVersion1c()
	 * @method \Bitrix\Sale\Internals\EO_Payment resetVersion1c()
	 * @method \Bitrix\Sale\Internals\EO_Payment unsetVersion1c()
	 * @method \string fillVersion1c()
	 * @method \string getExternalPayment()
	 * @method \Bitrix\Sale\Internals\EO_Payment setExternalPayment(\string|\Bitrix\Main\DB\SqlExpression $externalPayment)
	 * @method bool hasExternalPayment()
	 * @method bool isExternalPaymentFilled()
	 * @method bool isExternalPaymentChanged()
	 * @method \string remindActualExternalPayment()
	 * @method \string requireExternalPayment()
	 * @method \Bitrix\Sale\Internals\EO_Payment resetExternalPayment()
	 * @method \Bitrix\Sale\Internals\EO_Payment unsetExternalPayment()
	 * @method \string fillExternalPayment()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Sale\Internals\EO_Payment set($fieldName, $value)
	 * @method \Bitrix\Sale\Internals\EO_Payment reset($fieldName)
	 * @method \Bitrix\Sale\Internals\EO_Payment unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Sale\Internals\EO_Payment wakeUp($data)
	 */
	class EO_Payment {
		/* @var \Bitrix\Sale\Internals\PaymentTable */
		static public $dataClass = '\Bitrix\Sale\Internals\PaymentTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Sale\Internals {
	/**
	 * EO_Payment_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getIdList()
	 * @method \int[] getOrderIdList()
	 * @method \int[] fillOrderId()
	 * @method \string[] getAccountNumberList()
	 * @method \string[] fillAccountNumber()
	 * @method \Bitrix\Sale\Internals\EO_Order[] getOrderList()
	 * @method \Bitrix\Sale\Internals\EO_Payment_Collection getOrderCollection()
	 * @method \Bitrix\Sale\Internals\EO_Order_Collection fillOrder()
	 * @method \boolean[] getPaidList()
	 * @method \boolean[] fillPaid()
	 * @method \Bitrix\Main\Type\DateTime[] getDatePaidList()
	 * @method \Bitrix\Main\Type\DateTime[] fillDatePaid()
	 * @method \int[] getEmpPaidIdList()
	 * @method \int[] fillEmpPaidId()
	 * @method \Bitrix\Main\EO_User[] getEmpPaidByList()
	 * @method \Bitrix\Sale\Internals\EO_Payment_Collection getEmpPaidByCollection()
	 * @method \Bitrix\Main\EO_User_Collection fillEmpPaidBy()
	 * @method \int[] getPaySystemIdList()
	 * @method \int[] fillPaySystemId()
	 * @method \Bitrix\Sale\Internals\EO_PaySystemAction[] getPaySystemList()
	 * @method \Bitrix\Sale\Internals\EO_Payment_Collection getPaySystemCollection()
	 * @method \Bitrix\Sale\Internals\EO_PaySystemAction_Collection fillPaySystem()
	 * @method \boolean[] getPsStatusList()
	 * @method \boolean[] fillPsStatus()
	 * @method \string[] getPsStatusCodeList()
	 * @method \string[] fillPsStatusCode()
	 * @method \string[] getPsInvoiceIdList()
	 * @method \string[] fillPsInvoiceId()
	 * @method \string[] getPsStatusDescriptionList()
	 * @method \string[] fillPsStatusDescription()
	 * @method \string[] getPsStatusMessageList()
	 * @method \string[] fillPsStatusMessage()
	 * @method \float[] getPsSumList()
	 * @method \float[] fillPsSum()
	 * @method \string[] getPsCurrencyList()
	 * @method \string[] fillPsCurrency()
	 * @method \Bitrix\Main\Type\DateTime[] getPsResponseDateList()
	 * @method \Bitrix\Main\Type\DateTime[] fillPsResponseDate()
	 * @method \string[] getPsRecurringTokenList()
	 * @method \string[] fillPsRecurringToken()
	 * @method \string[] getPsCardNumberList()
	 * @method \string[] fillPsCardNumber()
	 * @method \string[] getPayVoucherNumList()
	 * @method \string[] fillPayVoucherNum()
	 * @method \Bitrix\Main\Type\Date[] getPayVoucherDateList()
	 * @method \Bitrix\Main\Type\Date[] fillPayVoucherDate()
	 * @method \Bitrix\Main\Type\Date[] getDatePayBeforeList()
	 * @method \Bitrix\Main\Type\Date[] fillDatePayBefore()
	 * @method \Bitrix\Main\Type\DateTime[] getDateBillList()
	 * @method \Bitrix\Main\Type\DateTime[] fillDateBill()
	 * @method \string[] getXmlIdList()
	 * @method \string[] fillXmlId()
	 * @method \float[] getSumList()
	 * @method \float[] fillSum()
	 * @method \float[] getPriceCodList()
	 * @method \float[] fillPriceCod()
	 * @method \string[] getCurrencyList()
	 * @method \string[] fillCurrency()
	 * @method \string[] getPaySystemNameList()
	 * @method \string[] fillPaySystemName()
	 * @method \int[] getResponsibleIdList()
	 * @method \int[] fillResponsibleId()
	 * @method \Bitrix\Main\EO_User[] getResponsibleByList()
	 * @method \Bitrix\Sale\Internals\EO_Payment_Collection getResponsibleByCollection()
	 * @method \Bitrix\Main\EO_User_Collection fillResponsibleBy()
	 * @method \int[] getEmpResponsibleIdList()
	 * @method \int[] fillEmpResponsibleId()
	 * @method \Bitrix\Main\EO_User[] getEmpResponsibleByList()
	 * @method \Bitrix\Sale\Internals\EO_Payment_Collection getEmpResponsibleByCollection()
	 * @method \Bitrix\Main\EO_User_Collection fillEmpResponsibleBy()
	 * @method \Bitrix\Main\Type\DateTime[] getDateResponsibleIdList()
	 * @method \Bitrix\Main\Type\DateTime[] fillDateResponsibleId()
	 * @method \string[] getCommentsList()
	 * @method \string[] fillComments()
	 * @method \int[] getCompanyIdList()
	 * @method \int[] fillCompanyId()
	 * @method \Bitrix\Sale\Internals\EO_Company[] getCompanyByList()
	 * @method \Bitrix\Sale\Internals\EO_Payment_Collection getCompanyByCollection()
	 * @method \Bitrix\Sale\Internals\EO_Company_Collection fillCompanyBy()
	 * @method \string[] getPayReturnNumList()
	 * @method \string[] fillPayReturnNum()
	 * @method \Bitrix\Main\Type\Date[] getPayReturnDateList()
	 * @method \Bitrix\Main\Type\Date[] fillPayReturnDate()
	 * @method \int[] getEmpReturnIdList()
	 * @method \int[] fillEmpReturnId()
	 * @method \Bitrix\Main\EO_User[] getEmpReturnByList()
	 * @method \Bitrix\Sale\Internals\EO_Payment_Collection getEmpReturnByCollection()
	 * @method \Bitrix\Main\EO_User_Collection fillEmpReturnBy()
	 * @method \string[] getPayReturnCommentList()
	 * @method \string[] fillPayReturnComment()
	 * @method \string[] getIsReturnList()
	 * @method \string[] fillIsReturn()
	 * @method \boolean[] getMarkedList()
	 * @method \boolean[] fillMarked()
	 * @method \Bitrix\Main\Type\DateTime[] getDateMarkedList()
	 * @method \Bitrix\Main\Type\DateTime[] fillDateMarked()
	 * @method \int[] getEmpMarkedIdList()
	 * @method \int[] fillEmpMarkedId()
	 * @method \Bitrix\Main\EO_User[] getEmpMarkedByList()
	 * @method \Bitrix\Sale\Internals\EO_Payment_Collection getEmpMarkedByCollection()
	 * @method \Bitrix\Main\EO_User_Collection fillEmpMarkedBy()
	 * @method \string[] getReasonMarkedList()
	 * @method \string[] fillReasonMarked()
	 * @method \boolean[] getUpdated1cList()
	 * @method \boolean[] fillUpdated1c()
	 * @method \string[] getId1cList()
	 * @method \string[] fillId1c()
	 * @method \string[] getVersion1cList()
	 * @method \string[] fillVersion1c()
	 * @method \string[] getExternalPaymentList()
	 * @method \string[] fillExternalPayment()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Sale\Internals\EO_Payment $object)
	 * @method bool has(\Bitrix\Sale\Internals\EO_Payment $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Sale\Internals\EO_Payment getByPrimary($primary)
	 * @method \Bitrix\Sale\Internals\EO_Payment[] getAll()
	 * @method bool remove(\Bitrix\Sale\Internals\EO_Payment $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Sale\Internals\EO_Payment_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Sale\Internals\EO_Payment current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 * @method EO_Payment_Collection merge(?EO_Payment_Collection $collection)
	 * @method bool isEmpty()
	 */
	class EO_Payment_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Sale\Internals\PaymentTable */
		static public $dataClass = '\Bitrix\Sale\Internals\PaymentTable';
	}
}
namespace Bitrix\Sale\Internals {
	/**
	 * Common methods:
	 * ---------------
	 *
	 * @method EO_Payment_Result exec()
	 * @method \Bitrix\Sale\Internals\EO_Payment fetchObject()
	 * @method \Bitrix\Sale\Internals\EO_Payment_Collection fetchCollection()
	 *
	 * Custom methods:
	 * ---------------
	 *
	 */
	class EO_Payment_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Sale\Internals\EO_Payment fetchObject()
	 * @method \Bitrix\Sale\Internals\EO_Payment_Collection fetchCollection()
	 */
	class EO_Payment_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Sale\Internals\EO_Payment createObject($setDefaultValues = true)
	 * @method \Bitrix\Sale\Internals\EO_Payment_Collection createCollection()
	 * @method \Bitrix\Sale\Internals\EO_Payment wakeUpObject($row)
	 * @method \Bitrix\Sale\Internals\EO_Payment_Collection wakeUpCollection($rows)
	 */
	class EO_Payment_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Sale\Internals\PaymentPaySystemAvailableTable:sale\lib\internals\paymentpaysystemavailabletable.php */
namespace Bitrix\Sale\Internals {
	/**
	 * EO_PaymentPaySystemAvailable
	 * @see \Bitrix\Sale\Internals\PaymentPaySystemAvailableTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getId()
	 * @method \Bitrix\Sale\Internals\EO_PaymentPaySystemAvailable setId(\int|\Bitrix\Main\DB\SqlExpression $id)
	 * @method bool hasId()
	 * @method bool isIdFilled()
	 * @method bool isIdChanged()
	 * @method \int getPaymentId()
	 * @method \Bitrix\Sale\Internals\EO_PaymentPaySystemAvailable setPaymentId(\int|\Bitrix\Main\DB\SqlExpression $paymentId)
	 * @method bool hasPaymentId()
	 * @method bool isPaymentIdFilled()
	 * @method bool isPaymentIdChanged()
	 * @method \int remindActualPaymentId()
	 * @method \int requirePaymentId()
	 * @method \Bitrix\Sale\Internals\EO_PaymentPaySystemAvailable resetPaymentId()
	 * @method \Bitrix\Sale\Internals\EO_PaymentPaySystemAvailable unsetPaymentId()
	 * @method \int fillPaymentId()
	 * @method \int getPaySystemId()
	 * @method \Bitrix\Sale\Internals\EO_PaymentPaySystemAvailable setPaySystemId(\int|\Bitrix\Main\DB\SqlExpression $paySystemId)
	 * @method bool hasPaySystemId()
	 * @method bool isPaySystemIdFilled()
	 * @method bool isPaySystemIdChanged()
	 * @method \int remindActualPaySystemId()
	 * @method \int requirePaySystemId()
	 * @method \Bitrix\Sale\Internals\EO_PaymentPaySystemAvailable resetPaySystemId()
	 * @method \Bitrix\Sale\Internals\EO_PaymentPaySystemAvailable unsetPaySystemId()
	 * @method \int fillPaySystemId()
	 * @method \Bitrix\Sale\Internals\EO_Payment getPayment()
	 * @method \Bitrix\Sale\Internals\EO_Payment remindActualPayment()
	 * @method \Bitrix\Sale\Internals\EO_Payment requirePayment()
	 * @method \Bitrix\Sale\Internals\EO_PaymentPaySystemAvailable setPayment(\Bitrix\Sale\Internals\EO_Payment $object)
	 * @method \Bitrix\Sale\Internals\EO_PaymentPaySystemAvailable resetPayment()
	 * @method \Bitrix\Sale\Internals\EO_PaymentPaySystemAvailable unsetPayment()
	 * @method bool hasPayment()
	 * @method bool isPaymentFilled()
	 * @method bool isPaymentChanged()
	 * @method \Bitrix\Sale\Internals\EO_Payment fillPayment()
	 * @method \Bitrix\Sale\Internals\EO_PaySystemAction getPaySystem()
	 * @method \Bitrix\Sale\Internals\EO_PaySystemAction remindActualPaySystem()
	 * @method \Bitrix\Sale\Internals\EO_PaySystemAction requirePaySystem()
	 * @method \Bitrix\Sale\Internals\EO_PaymentPaySystemAvailable setPaySystem(\Bitrix\Sale\Internals\EO_PaySystemAction $object)
	 * @method \Bitrix\Sale\Internals\EO_PaymentPaySystemAvailable resetPaySystem()
	 * @method \Bitrix\Sale\Internals\EO_PaymentPaySystemAvailable unsetPaySystem()
	 * @method bool hasPaySystem()
	 * @method bool isPaySystemFilled()
	 * @method bool isPaySystemChanged()
	 * @method \Bitrix\Sale\Internals\EO_PaySystemAction fillPaySystem()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Sale\Internals\EO_PaymentPaySystemAvailable set($fieldName, $value)
	 * @method \Bitrix\Sale\Internals\EO_PaymentPaySystemAvailable reset($fieldName)
	 * @method \Bitrix\Sale\Internals\EO_PaymentPaySystemAvailable unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Sale\Internals\EO_PaymentPaySystemAvailable wakeUp($data)
	 */
	class EO_PaymentPaySystemAvailable {
		/* @var \Bitrix\Sale\Internals\PaymentPaySystemAvailableTable */
		static public $dataClass = '\Bitrix\Sale\Internals\PaymentPaySystemAvailableTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Sale\Internals {
	/**
	 * EO_PaymentPaySystemAvailable_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getIdList()
	 * @method \int[] getPaymentIdList()
	 * @method \int[] fillPaymentId()
	 * @method \int[] getPaySystemIdList()
	 * @method \int[] fillPaySystemId()
	 * @method \Bitrix\Sale\Internals\EO_Payment[] getPaymentList()
	 * @method \Bitrix\Sale\Internals\EO_PaymentPaySystemAvailable_Collection getPaymentCollection()
	 * @method \Bitrix\Sale\Internals\EO_Payment_Collection fillPayment()
	 * @method \Bitrix\Sale\Internals\EO_PaySystemAction[] getPaySystemList()
	 * @method \Bitrix\Sale\Internals\EO_PaymentPaySystemAvailable_Collection getPaySystemCollection()
	 * @method \Bitrix\Sale\Internals\EO_PaySystemAction_Collection fillPaySystem()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Sale\Internals\EO_PaymentPaySystemAvailable $object)
	 * @method bool has(\Bitrix\Sale\Internals\EO_PaymentPaySystemAvailable $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Sale\Internals\EO_PaymentPaySystemAvailable getByPrimary($primary)
	 * @method \Bitrix\Sale\Internals\EO_PaymentPaySystemAvailable[] getAll()
	 * @method bool remove(\Bitrix\Sale\Internals\EO_PaymentPaySystemAvailable $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Sale\Internals\EO_PaymentPaySystemAvailable_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Sale\Internals\EO_PaymentPaySystemAvailable current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 * @method EO_PaymentPaySystemAvailable_Collection merge(?EO_PaymentPaySystemAvailable_Collection $collection)
	 * @method bool isEmpty()
	 */
	class EO_PaymentPaySystemAvailable_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Sale\Internals\PaymentPaySystemAvailableTable */
		static public $dataClass = '\Bitrix\Sale\Internals\PaymentPaySystemAvailableTable';
	}
}
namespace Bitrix\Sale\Internals {
	/**
	 * Common methods:
	 * ---------------
	 *
	 * @method EO_PaymentPaySystemAvailable_Result exec()
	 * @method \Bitrix\Sale\Internals\EO_PaymentPaySystemAvailable fetchObject()
	 * @method \Bitrix\Sale\Internals\EO_PaymentPaySystemAvailable_Collection fetchCollection()
	 *
	 * Custom methods:
	 * ---------------
	 *
	 */
	class EO_PaymentPaySystemAvailable_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Sale\Internals\EO_PaymentPaySystemAvailable fetchObject()
	 * @method \Bitrix\Sale\Internals\EO_PaymentPaySystemAvailable_Collection fetchCollection()
	 */
	class EO_PaymentPaySystemAvailable_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Sale\Internals\EO_PaymentPaySystemAvailable createObject($setDefaultValues = true)
	 * @method \Bitrix\Sale\Internals\EO_PaymentPaySystemAvailable_Collection createCollection()
	 * @method \Bitrix\Sale\Internals\EO_PaymentPaySystemAvailable wakeUpObject($row)
	 * @method \Bitrix\Sale\Internals\EO_PaymentPaySystemAvailable_Collection wakeUpCollection($rows)
	 */
	class EO_PaymentPaySystemAvailable_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Sale\Internals\PaySystemActionTable:sale\lib\internals\paysystemaction.php */
namespace Bitrix\Sale\Internals {
	/**
	 * EO_PaySystemAction
	 * @see \Bitrix\Sale\Internals\PaySystemActionTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getId()
	 * @method \Bitrix\Sale\Internals\EO_PaySystemAction setId(\int|\Bitrix\Main\DB\SqlExpression $id)
	 * @method bool hasId()
	 * @method bool isIdFilled()
	 * @method bool isIdChanged()
	 * @method \int getPaySystemId()
	 * @method \Bitrix\Sale\Internals\EO_PaySystemAction setPaySystemId(\int|\Bitrix\Main\DB\SqlExpression $paySystemId)
	 * @method bool hasPaySystemId()
	 * @method bool isPaySystemIdFilled()
	 * @method bool isPaySystemIdChanged()
	 * @method \int remindActualPaySystemId()
	 * @method \int requirePaySystemId()
	 * @method \Bitrix\Sale\Internals\EO_PaySystemAction resetPaySystemId()
	 * @method \Bitrix\Sale\Internals\EO_PaySystemAction unsetPaySystemId()
	 * @method \int fillPaySystemId()
	 * @method \int getPersonTypeId()
	 * @method \Bitrix\Sale\Internals\EO_PaySystemAction setPersonTypeId(\int|\Bitrix\Main\DB\SqlExpression $personTypeId)
	 * @method bool hasPersonTypeId()
	 * @method bool isPersonTypeIdFilled()
	 * @method bool isPersonTypeIdChanged()
	 * @method \int remindActualPersonTypeId()
	 * @method \int requirePersonTypeId()
	 * @method \Bitrix\Sale\Internals\EO_PaySystemAction resetPersonTypeId()
	 * @method \Bitrix\Sale\Internals\EO_PaySystemAction unsetPersonTypeId()
	 * @method \int fillPersonTypeId()
	 * @method \string getName()
	 * @method \Bitrix\Sale\Internals\EO_PaySystemAction setName(\string|\Bitrix\Main\DB\SqlExpression $name)
	 * @method bool hasName()
	 * @method bool isNameFilled()
	 * @method bool isNameChanged()
	 * @method \string remindActualName()
	 * @method \string requireName()
	 * @method \Bitrix\Sale\Internals\EO_PaySystemAction resetName()
	 * @method \Bitrix\Sale\Internals\EO_PaySystemAction unsetName()
	 * @method \string fillName()
	 * @method \string getPsaName()
	 * @method \Bitrix\Sale\Internals\EO_PaySystemAction setPsaName(\string|\Bitrix\Main\DB\SqlExpression $psaName)
	 * @method bool hasPsaName()
	 * @method bool isPsaNameFilled()
	 * @method bool isPsaNameChanged()
	 * @method \string remindActualPsaName()
	 * @method \string requirePsaName()
	 * @method \Bitrix\Sale\Internals\EO_PaySystemAction resetPsaName()
	 * @method \Bitrix\Sale\Internals\EO_PaySystemAction unsetPsaName()
	 * @method \string fillPsaName()
	 * @method \string getCode()
	 * @method \Bitrix\Sale\Internals\EO_PaySystemAction setCode(\string|\Bitrix\Main\DB\SqlExpression $code)
	 * @method bool hasCode()
	 * @method bool isCodeFilled()
	 * @method bool isCodeChanged()
	 * @method \string remindActualCode()
	 * @method \string requireCode()
	 * @method \Bitrix\Sale\Internals\EO_PaySystemAction resetCode()
	 * @method \Bitrix\Sale\Internals\EO_PaySystemAction unsetCode()
	 * @method \string fillCode()
	 * @method \int getSort()
	 * @method \Bitrix\Sale\Internals\EO_PaySystemAction setSort(\int|\Bitrix\Main\DB\SqlExpression $sort)
	 * @method bool hasSort()
	 * @method bool isSortFilled()
	 * @method bool isSortChanged()
	 * @method \int remindActualSort()
	 * @method \int requireSort()
	 * @method \Bitrix\Sale\Internals\EO_PaySystemAction resetSort()
	 * @method \Bitrix\Sale\Internals\EO_PaySystemAction unsetSort()
	 * @method \int fillSort()
	 * @method \string getActionFile()
	 * @method \Bitrix\Sale\Internals\EO_PaySystemAction setActionFile(\string|\Bitrix\Main\DB\SqlExpression $actionFile)
	 * @method bool hasActionFile()
	 * @method bool isActionFileFilled()
	 * @method bool isActionFileChanged()
	 * @method \string remindActualActionFile()
	 * @method \string requireActionFile()
	 * @method \Bitrix\Sale\Internals\EO_PaySystemAction resetActionFile()
	 * @method \Bitrix\Sale\Internals\EO_PaySystemAction unsetActionFile()
	 * @method \string fillActionFile()
	 * @method \string getResultFile()
	 * @method \Bitrix\Sale\Internals\EO_PaySystemAction setResultFile(\string|\Bitrix\Main\DB\SqlExpression $resultFile)
	 * @method bool hasResultFile()
	 * @method bool isResultFileFilled()
	 * @method bool isResultFileChanged()
	 * @method \string remindActualResultFile()
	 * @method \string requireResultFile()
	 * @method \Bitrix\Sale\Internals\EO_PaySystemAction resetResultFile()
	 * @method \Bitrix\Sale\Internals\EO_PaySystemAction unsetResultFile()
	 * @method \string fillResultFile()
	 * @method \string getDescription()
	 * @method \Bitrix\Sale\Internals\EO_PaySystemAction setDescription(\string|\Bitrix\Main\DB\SqlExpression $description)
	 * @method bool hasDescription()
	 * @method bool isDescriptionFilled()
	 * @method bool isDescriptionChanged()
	 * @method \string remindActualDescription()
	 * @method \string requireDescription()
	 * @method \Bitrix\Sale\Internals\EO_PaySystemAction resetDescription()
	 * @method \Bitrix\Sale\Internals\EO_PaySystemAction unsetDescription()
	 * @method \string fillDescription()
	 * @method \boolean getNewWindow()
	 * @method \Bitrix\Sale\Internals\EO_PaySystemAction setNewWindow(\boolean|\Bitrix\Main\DB\SqlExpression $newWindow)
	 * @method bool hasNewWindow()
	 * @method bool isNewWindowFilled()
	 * @method bool isNewWindowChanged()
	 * @method \boolean remindActualNewWindow()
	 * @method \boolean requireNewWindow()
	 * @method \Bitrix\Sale\Internals\EO_PaySystemAction resetNewWindow()
	 * @method \Bitrix\Sale\Internals\EO_PaySystemAction unsetNewWindow()
	 * @method \boolean fillNewWindow()
	 * @method \string getParams()
	 * @method \Bitrix\Sale\Internals\EO_PaySystemAction setParams(\string|\Bitrix\Main\DB\SqlExpression $params)
	 * @method bool hasParams()
	 * @method bool isParamsFilled()
	 * @method bool isParamsChanged()
	 * @method \string remindActualParams()
	 * @method \string requireParams()
	 * @method \Bitrix\Sale\Internals\EO_PaySystemAction resetParams()
	 * @method \Bitrix\Sale\Internals\EO_PaySystemAction unsetParams()
	 * @method \string fillParams()
	 * @method \string getTarif()
	 * @method \Bitrix\Sale\Internals\EO_PaySystemAction setTarif(\string|\Bitrix\Main\DB\SqlExpression $tarif)
	 * @method bool hasTarif()
	 * @method bool isTarifFilled()
	 * @method bool isTarifChanged()
	 * @method \string remindActualTarif()
	 * @method \string requireTarif()
	 * @method \Bitrix\Sale\Internals\EO_PaySystemAction resetTarif()
	 * @method \Bitrix\Sale\Internals\EO_PaySystemAction unsetTarif()
	 * @method \string fillTarif()
	 * @method \string getPsMode()
	 * @method \Bitrix\Sale\Internals\EO_PaySystemAction setPsMode(\string|\Bitrix\Main\DB\SqlExpression $psMode)
	 * @method bool hasPsMode()
	 * @method bool isPsModeFilled()
	 * @method bool isPsModeChanged()
	 * @method \string remindActualPsMode()
	 * @method \string requirePsMode()
	 * @method \Bitrix\Sale\Internals\EO_PaySystemAction resetPsMode()
	 * @method \Bitrix\Sale\Internals\EO_PaySystemAction unsetPsMode()
	 * @method \string fillPsMode()
	 * @method \string getPsClientType()
	 * @method \Bitrix\Sale\Internals\EO_PaySystemAction setPsClientType(\string|\Bitrix\Main\DB\SqlExpression $psClientType)
	 * @method bool hasPsClientType()
	 * @method bool isPsClientTypeFilled()
	 * @method bool isPsClientTypeChanged()
	 * @method \string remindActualPsClientType()
	 * @method \string requirePsClientType()
	 * @method \Bitrix\Sale\Internals\EO_PaySystemAction resetPsClientType()
	 * @method \Bitrix\Sale\Internals\EO_PaySystemAction unsetPsClientType()
	 * @method \string fillPsClientType()
	 * @method \boolean getHavePayment()
	 * @method \Bitrix\Sale\Internals\EO_PaySystemAction setHavePayment(\boolean|\Bitrix\Main\DB\SqlExpression $havePayment)
	 * @method bool hasHavePayment()
	 * @method bool isHavePaymentFilled()
	 * @method bool isHavePaymentChanged()
	 * @method \boolean remindActualHavePayment()
	 * @method \boolean requireHavePayment()
	 * @method \Bitrix\Sale\Internals\EO_PaySystemAction resetHavePayment()
	 * @method \Bitrix\Sale\Internals\EO_PaySystemAction unsetHavePayment()
	 * @method \boolean fillHavePayment()
	 * @method \boolean getHaveAction()
	 * @method \Bitrix\Sale\Internals\EO_PaySystemAction setHaveAction(\boolean|\Bitrix\Main\DB\SqlExpression $haveAction)
	 * @method bool hasHaveAction()
	 * @method bool isHaveActionFilled()
	 * @method bool isHaveActionChanged()
	 * @method \boolean remindActualHaveAction()
	 * @method \boolean requireHaveAction()
	 * @method \Bitrix\Sale\Internals\EO_PaySystemAction resetHaveAction()
	 * @method \Bitrix\Sale\Internals\EO_PaySystemAction unsetHaveAction()
	 * @method \boolean fillHaveAction()
	 * @method \boolean getHaveResult()
	 * @method \Bitrix\Sale\Internals\EO_PaySystemAction setHaveResult(\boolean|\Bitrix\Main\DB\SqlExpression $haveResult)
	 * @method bool hasHaveResult()
	 * @method bool isHaveResultFilled()
	 * @method bool isHaveResultChanged()
	 * @method \boolean remindActualHaveResult()
	 * @method \boolean requireHaveResult()
	 * @method \Bitrix\Sale\Internals\EO_PaySystemAction resetHaveResult()
	 * @method \Bitrix\Sale\Internals\EO_PaySystemAction unsetHaveResult()
	 * @method \boolean fillHaveResult()
	 * @method \boolean getHavePrepay()
	 * @method \Bitrix\Sale\Internals\EO_PaySystemAction setHavePrepay(\boolean|\Bitrix\Main\DB\SqlExpression $havePrepay)
	 * @method bool hasHavePrepay()
	 * @method bool isHavePrepayFilled()
	 * @method bool isHavePrepayChanged()
	 * @method \boolean remindActualHavePrepay()
	 * @method \boolean requireHavePrepay()
	 * @method \Bitrix\Sale\Internals\EO_PaySystemAction resetHavePrepay()
	 * @method \Bitrix\Sale\Internals\EO_PaySystemAction unsetHavePrepay()
	 * @method \boolean fillHavePrepay()
	 * @method \boolean getHavePrice()
	 * @method \Bitrix\Sale\Internals\EO_PaySystemAction setHavePrice(\boolean|\Bitrix\Main\DB\SqlExpression $havePrice)
	 * @method bool hasHavePrice()
	 * @method bool isHavePriceFilled()
	 * @method bool isHavePriceChanged()
	 * @method \boolean remindActualHavePrice()
	 * @method \boolean requireHavePrice()
	 * @method \Bitrix\Sale\Internals\EO_PaySystemAction resetHavePrice()
	 * @method \Bitrix\Sale\Internals\EO_PaySystemAction unsetHavePrice()
	 * @method \boolean fillHavePrice()
	 * @method \boolean getHaveResultReceive()
	 * @method \Bitrix\Sale\Internals\EO_PaySystemAction setHaveResultReceive(\boolean|\Bitrix\Main\DB\SqlExpression $haveResultReceive)
	 * @method bool hasHaveResultReceive()
	 * @method bool isHaveResultReceiveFilled()
	 * @method bool isHaveResultReceiveChanged()
	 * @method \boolean remindActualHaveResultReceive()
	 * @method \boolean requireHaveResultReceive()
	 * @method \Bitrix\Sale\Internals\EO_PaySystemAction resetHaveResultReceive()
	 * @method \Bitrix\Sale\Internals\EO_PaySystemAction unsetHaveResultReceive()
	 * @method \boolean fillHaveResultReceive()
	 * @method \string getEncoding()
	 * @method \Bitrix\Sale\Internals\EO_PaySystemAction setEncoding(\string|\Bitrix\Main\DB\SqlExpression $encoding)
	 * @method bool hasEncoding()
	 * @method bool isEncodingFilled()
	 * @method bool isEncodingChanged()
	 * @method \string remindActualEncoding()
	 * @method \string requireEncoding()
	 * @method \Bitrix\Sale\Internals\EO_PaySystemAction resetEncoding()
	 * @method \Bitrix\Sale\Internals\EO_PaySystemAction unsetEncoding()
	 * @method \string fillEncoding()
	 * @method \int getLogotip()
	 * @method \Bitrix\Sale\Internals\EO_PaySystemAction setLogotip(\int|\Bitrix\Main\DB\SqlExpression $logotip)
	 * @method bool hasLogotip()
	 * @method bool isLogotipFilled()
	 * @method bool isLogotipChanged()
	 * @method \int remindActualLogotip()
	 * @method \int requireLogotip()
	 * @method \Bitrix\Sale\Internals\EO_PaySystemAction resetLogotip()
	 * @method \Bitrix\Sale\Internals\EO_PaySystemAction unsetLogotip()
	 * @method \int fillLogotip()
	 * @method \boolean getActive()
	 * @method \Bitrix\Sale\Internals\EO_PaySystemAction setActive(\boolean|\Bitrix\Main\DB\SqlExpression $active)
	 * @method bool hasActive()
	 * @method bool isActiveFilled()
	 * @method bool isActiveChanged()
	 * @method \boolean remindActualActive()
	 * @method \boolean requireActive()
	 * @method \Bitrix\Sale\Internals\EO_PaySystemAction resetActive()
	 * @method \Bitrix\Sale\Internals\EO_PaySystemAction unsetActive()
	 * @method \boolean fillActive()
	 * @method \boolean getAllowEditPayment()
	 * @method \Bitrix\Sale\Internals\EO_PaySystemAction setAllowEditPayment(\boolean|\Bitrix\Main\DB\SqlExpression $allowEditPayment)
	 * @method bool hasAllowEditPayment()
	 * @method bool isAllowEditPaymentFilled()
	 * @method bool isAllowEditPaymentChanged()
	 * @method \boolean remindActualAllowEditPayment()
	 * @method \boolean requireAllowEditPayment()
	 * @method \Bitrix\Sale\Internals\EO_PaySystemAction resetAllowEditPayment()
	 * @method \Bitrix\Sale\Internals\EO_PaySystemAction unsetAllowEditPayment()
	 * @method \boolean fillAllowEditPayment()
	 * @method \string getIsCash()
	 * @method \Bitrix\Sale\Internals\EO_PaySystemAction setIsCash(\string|\Bitrix\Main\DB\SqlExpression $isCash)
	 * @method bool hasIsCash()
	 * @method bool isIsCashFilled()
	 * @method bool isIsCashChanged()
	 * @method \string remindActualIsCash()
	 * @method \string requireIsCash()
	 * @method \Bitrix\Sale\Internals\EO_PaySystemAction resetIsCash()
	 * @method \Bitrix\Sale\Internals\EO_PaySystemAction unsetIsCash()
	 * @method \string fillIsCash()
	 * @method \boolean getAutoChange1c()
	 * @method \Bitrix\Sale\Internals\EO_PaySystemAction setAutoChange1c(\boolean|\Bitrix\Main\DB\SqlExpression $autoChange1c)
	 * @method bool hasAutoChange1c()
	 * @method bool isAutoChange1cFilled()
	 * @method bool isAutoChange1cChanged()
	 * @method \boolean remindActualAutoChange1c()
	 * @method \boolean requireAutoChange1c()
	 * @method \Bitrix\Sale\Internals\EO_PaySystemAction resetAutoChange1c()
	 * @method \Bitrix\Sale\Internals\EO_PaySystemAction unsetAutoChange1c()
	 * @method \boolean fillAutoChange1c()
	 * @method \boolean getCanPrintCheck()
	 * @method \Bitrix\Sale\Internals\EO_PaySystemAction setCanPrintCheck(\boolean|\Bitrix\Main\DB\SqlExpression $canPrintCheck)
	 * @method bool hasCanPrintCheck()
	 * @method bool isCanPrintCheckFilled()
	 * @method bool isCanPrintCheckChanged()
	 * @method \boolean remindActualCanPrintCheck()
	 * @method \boolean requireCanPrintCheck()
	 * @method \Bitrix\Sale\Internals\EO_PaySystemAction resetCanPrintCheck()
	 * @method \Bitrix\Sale\Internals\EO_PaySystemAction unsetCanPrintCheck()
	 * @method \boolean fillCanPrintCheck()
	 * @method \string getEntityRegistryType()
	 * @method \Bitrix\Sale\Internals\EO_PaySystemAction setEntityRegistryType(\string|\Bitrix\Main\DB\SqlExpression $entityRegistryType)
	 * @method bool hasEntityRegistryType()
	 * @method bool isEntityRegistryTypeFilled()
	 * @method bool isEntityRegistryTypeChanged()
	 * @method \string remindActualEntityRegistryType()
	 * @method \string requireEntityRegistryType()
	 * @method \Bitrix\Sale\Internals\EO_PaySystemAction resetEntityRegistryType()
	 * @method \Bitrix\Sale\Internals\EO_PaySystemAction unsetEntityRegistryType()
	 * @method \string fillEntityRegistryType()
	 * @method \string getXmlId()
	 * @method \Bitrix\Sale\Internals\EO_PaySystemAction setXmlId(\string|\Bitrix\Main\DB\SqlExpression $xmlId)
	 * @method bool hasXmlId()
	 * @method bool isXmlIdFilled()
	 * @method bool isXmlIdChanged()
	 * @method \string remindActualXmlId()
	 * @method \string requireXmlId()
	 * @method \Bitrix\Sale\Internals\EO_PaySystemAction resetXmlId()
	 * @method \Bitrix\Sale\Internals\EO_PaySystemAction unsetXmlId()
	 * @method \string fillXmlId()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Sale\Internals\EO_PaySystemAction set($fieldName, $value)
	 * @method \Bitrix\Sale\Internals\EO_PaySystemAction reset($fieldName)
	 * @method \Bitrix\Sale\Internals\EO_PaySystemAction unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Sale\Internals\EO_PaySystemAction wakeUp($data)
	 */
	class EO_PaySystemAction {
		/* @var \Bitrix\Sale\Internals\PaySystemActionTable */
		static public $dataClass = '\Bitrix\Sale\Internals\PaySystemActionTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Sale\Internals {
	/**
	 * EO_PaySystemAction_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getIdList()
	 * @method \int[] getPaySystemIdList()
	 * @method \int[] fillPaySystemId()
	 * @method \int[] getPersonTypeIdList()
	 * @method \int[] fillPersonTypeId()
	 * @method \string[] getNameList()
	 * @method \string[] fillName()
	 * @method \string[] getPsaNameList()
	 * @method \string[] fillPsaName()
	 * @method \string[] getCodeList()
	 * @method \string[] fillCode()
	 * @method \int[] getSortList()
	 * @method \int[] fillSort()
	 * @method \string[] getActionFileList()
	 * @method \string[] fillActionFile()
	 * @method \string[] getResultFileList()
	 * @method \string[] fillResultFile()
	 * @method \string[] getDescriptionList()
	 * @method \string[] fillDescription()
	 * @method \boolean[] getNewWindowList()
	 * @method \boolean[] fillNewWindow()
	 * @method \string[] getParamsList()
	 * @method \string[] fillParams()
	 * @method \string[] getTarifList()
	 * @method \string[] fillTarif()
	 * @method \string[] getPsModeList()
	 * @method \string[] fillPsMode()
	 * @method \string[] getPsClientTypeList()
	 * @method \string[] fillPsClientType()
	 * @method \boolean[] getHavePaymentList()
	 * @method \boolean[] fillHavePayment()
	 * @method \boolean[] getHaveActionList()
	 * @method \boolean[] fillHaveAction()
	 * @method \boolean[] getHaveResultList()
	 * @method \boolean[] fillHaveResult()
	 * @method \boolean[] getHavePrepayList()
	 * @method \boolean[] fillHavePrepay()
	 * @method \boolean[] getHavePriceList()
	 * @method \boolean[] fillHavePrice()
	 * @method \boolean[] getHaveResultReceiveList()
	 * @method \boolean[] fillHaveResultReceive()
	 * @method \string[] getEncodingList()
	 * @method \string[] fillEncoding()
	 * @method \int[] getLogotipList()
	 * @method \int[] fillLogotip()
	 * @method \boolean[] getActiveList()
	 * @method \boolean[] fillActive()
	 * @method \boolean[] getAllowEditPaymentList()
	 * @method \boolean[] fillAllowEditPayment()
	 * @method \string[] getIsCashList()
	 * @method \string[] fillIsCash()
	 * @method \boolean[] getAutoChange1cList()
	 * @method \boolean[] fillAutoChange1c()
	 * @method \boolean[] getCanPrintCheckList()
	 * @method \boolean[] fillCanPrintCheck()
	 * @method \string[] getEntityRegistryTypeList()
	 * @method \string[] fillEntityRegistryType()
	 * @method \string[] getXmlIdList()
	 * @method \string[] fillXmlId()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Sale\Internals\EO_PaySystemAction $object)
	 * @method bool has(\Bitrix\Sale\Internals\EO_PaySystemAction $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Sale\Internals\EO_PaySystemAction getByPrimary($primary)
	 * @method \Bitrix\Sale\Internals\EO_PaySystemAction[] getAll()
	 * @method bool remove(\Bitrix\Sale\Internals\EO_PaySystemAction $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Sale\Internals\EO_PaySystemAction_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Sale\Internals\EO_PaySystemAction current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 * @method EO_PaySystemAction_Collection merge(?EO_PaySystemAction_Collection $collection)
	 * @method bool isEmpty()
	 */
	class EO_PaySystemAction_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Sale\Internals\PaySystemActionTable */
		static public $dataClass = '\Bitrix\Sale\Internals\PaySystemActionTable';
	}
}
namespace Bitrix\Sale\Internals {
	/**
	 * Common methods:
	 * ---------------
	 *
	 * @method EO_PaySystemAction_Result exec()
	 * @method \Bitrix\Sale\Internals\EO_PaySystemAction fetchObject()
	 * @method \Bitrix\Sale\Internals\EO_PaySystemAction_Collection fetchCollection()
	 *
	 * Custom methods:
	 * ---------------
	 *
	 */
	class EO_PaySystemAction_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Sale\Internals\EO_PaySystemAction fetchObject()
	 * @method \Bitrix\Sale\Internals\EO_PaySystemAction_Collection fetchCollection()
	 */
	class EO_PaySystemAction_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Sale\Internals\EO_PaySystemAction createObject($setDefaultValues = true)
	 * @method \Bitrix\Sale\Internals\EO_PaySystemAction_Collection createCollection()
	 * @method \Bitrix\Sale\Internals\EO_PaySystemAction wakeUpObject($row)
	 * @method \Bitrix\Sale\Internals\EO_PaySystemAction_Collection wakeUpCollection($rows)
	 */
	class EO_PaySystemAction_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Sale\Internals\PaySystemErrLogTable:sale\lib\internals\paysystemerrlog.php */
namespace Bitrix\Sale\Internals {
	/**
	 * EO_PaySystemErrLog
	 * @see \Bitrix\Sale\Internals\PaySystemErrLogTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getId()
	 * @method \Bitrix\Sale\Internals\EO_PaySystemErrLog setId(\int|\Bitrix\Main\DB\SqlExpression $id)
	 * @method bool hasId()
	 * @method bool isIdFilled()
	 * @method bool isIdChanged()
	 * @method \Bitrix\Main\Type\DateTime getDateInsert()
	 * @method \Bitrix\Sale\Internals\EO_PaySystemErrLog setDateInsert(\Bitrix\Main\Type\DateTime|\Bitrix\Main\DB\SqlExpression $dateInsert)
	 * @method bool hasDateInsert()
	 * @method bool isDateInsertFilled()
	 * @method bool isDateInsertChanged()
	 * @method \Bitrix\Main\Type\DateTime remindActualDateInsert()
	 * @method \Bitrix\Main\Type\DateTime requireDateInsert()
	 * @method \Bitrix\Sale\Internals\EO_PaySystemErrLog resetDateInsert()
	 * @method \Bitrix\Sale\Internals\EO_PaySystemErrLog unsetDateInsert()
	 * @method \Bitrix\Main\Type\DateTime fillDateInsert()
	 * @method \string getMessage()
	 * @method \Bitrix\Sale\Internals\EO_PaySystemErrLog setMessage(\string|\Bitrix\Main\DB\SqlExpression $message)
	 * @method bool hasMessage()
	 * @method bool isMessageFilled()
	 * @method bool isMessageChanged()
	 * @method \string remindActualMessage()
	 * @method \string requireMessage()
	 * @method \Bitrix\Sale\Internals\EO_PaySystemErrLog resetMessage()
	 * @method \Bitrix\Sale\Internals\EO_PaySystemErrLog unsetMessage()
	 * @method \string fillMessage()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Sale\Internals\EO_PaySystemErrLog set($fieldName, $value)
	 * @method \Bitrix\Sale\Internals\EO_PaySystemErrLog reset($fieldName)
	 * @method \Bitrix\Sale\Internals\EO_PaySystemErrLog unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Sale\Internals\EO_PaySystemErrLog wakeUp($data)
	 */
	class EO_PaySystemErrLog {
		/* @var \Bitrix\Sale\Internals\PaySystemErrLogTable */
		static public $dataClass = '\Bitrix\Sale\Internals\PaySystemErrLogTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Sale\Internals {
	/**
	 * EO_PaySystemErrLog_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getIdList()
	 * @method \Bitrix\Main\Type\DateTime[] getDateInsertList()
	 * @method \Bitrix\Main\Type\DateTime[] fillDateInsert()
	 * @method \string[] getMessageList()
	 * @method \string[] fillMessage()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Sale\Internals\EO_PaySystemErrLog $object)
	 * @method bool has(\Bitrix\Sale\Internals\EO_PaySystemErrLog $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Sale\Internals\EO_PaySystemErrLog getByPrimary($primary)
	 * @method \Bitrix\Sale\Internals\EO_PaySystemErrLog[] getAll()
	 * @method bool remove(\Bitrix\Sale\Internals\EO_PaySystemErrLog $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Sale\Internals\EO_PaySystemErrLog_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Sale\Internals\EO_PaySystemErrLog current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 * @method EO_PaySystemErrLog_Collection merge(?EO_PaySystemErrLog_Collection $collection)
	 * @method bool isEmpty()
	 */
	class EO_PaySystemErrLog_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Sale\Internals\PaySystemErrLogTable */
		static public $dataClass = '\Bitrix\Sale\Internals\PaySystemErrLogTable';
	}
}
namespace Bitrix\Sale\Internals {
	/**
	 * Common methods:
	 * ---------------
	 *
	 * @method EO_PaySystemErrLog_Result exec()
	 * @method \Bitrix\Sale\Internals\EO_PaySystemErrLog fetchObject()
	 * @method \Bitrix\Sale\Internals\EO_PaySystemErrLog_Collection fetchCollection()
	 *
	 * Custom methods:
	 * ---------------
	 *
	 */
	class EO_PaySystemErrLog_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Sale\Internals\EO_PaySystemErrLog fetchObject()
	 * @method \Bitrix\Sale\Internals\EO_PaySystemErrLog_Collection fetchCollection()
	 */
	class EO_PaySystemErrLog_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Sale\Internals\EO_PaySystemErrLog createObject($setDefaultValues = true)
	 * @method \Bitrix\Sale\Internals\EO_PaySystemErrLog_Collection createCollection()
	 * @method \Bitrix\Sale\Internals\EO_PaySystemErrLog wakeUpObject($row)
	 * @method \Bitrix\Sale\Internals\EO_PaySystemErrLog_Collection wakeUpCollection($rows)
	 */
	class EO_PaySystemErrLog_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Sale\Internals\PaySystemRestHandlersTable:sale\lib\internals\paysystemresthandlers.php */
namespace Bitrix\Sale\Internals {
	/**
	 * EO_PaySystemRestHandlers
	 * @see \Bitrix\Sale\Internals\PaySystemRestHandlersTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getId()
	 * @method \Bitrix\Sale\Internals\EO_PaySystemRestHandlers setId(\int|\Bitrix\Main\DB\SqlExpression $id)
	 * @method bool hasId()
	 * @method bool isIdFilled()
	 * @method bool isIdChanged()
	 * @method \string getName()
	 * @method \Bitrix\Sale\Internals\EO_PaySystemRestHandlers setName(\string|\Bitrix\Main\DB\SqlExpression $name)
	 * @method bool hasName()
	 * @method bool isNameFilled()
	 * @method bool isNameChanged()
	 * @method \string remindActualName()
	 * @method \string requireName()
	 * @method \Bitrix\Sale\Internals\EO_PaySystemRestHandlers resetName()
	 * @method \Bitrix\Sale\Internals\EO_PaySystemRestHandlers unsetName()
	 * @method \string fillName()
	 * @method \string getCode()
	 * @method \Bitrix\Sale\Internals\EO_PaySystemRestHandlers setCode(\string|\Bitrix\Main\DB\SqlExpression $code)
	 * @method bool hasCode()
	 * @method bool isCodeFilled()
	 * @method bool isCodeChanged()
	 * @method \string remindActualCode()
	 * @method \string requireCode()
	 * @method \Bitrix\Sale\Internals\EO_PaySystemRestHandlers resetCode()
	 * @method \Bitrix\Sale\Internals\EO_PaySystemRestHandlers unsetCode()
	 * @method \string fillCode()
	 * @method \int getSort()
	 * @method \Bitrix\Sale\Internals\EO_PaySystemRestHandlers setSort(\int|\Bitrix\Main\DB\SqlExpression $sort)
	 * @method bool hasSort()
	 * @method bool isSortFilled()
	 * @method bool isSortChanged()
	 * @method \int remindActualSort()
	 * @method \int requireSort()
	 * @method \Bitrix\Sale\Internals\EO_PaySystemRestHandlers resetSort()
	 * @method \Bitrix\Sale\Internals\EO_PaySystemRestHandlers unsetSort()
	 * @method \int fillSort()
	 * @method \string getSettings()
	 * @method \Bitrix\Sale\Internals\EO_PaySystemRestHandlers setSettings(\string|\Bitrix\Main\DB\SqlExpression $settings)
	 * @method bool hasSettings()
	 * @method bool isSettingsFilled()
	 * @method bool isSettingsChanged()
	 * @method \string remindActualSettings()
	 * @method \string requireSettings()
	 * @method \Bitrix\Sale\Internals\EO_PaySystemRestHandlers resetSettings()
	 * @method \Bitrix\Sale\Internals\EO_PaySystemRestHandlers unsetSettings()
	 * @method \string fillSettings()
	 * @method \string getAppId()
	 * @method \Bitrix\Sale\Internals\EO_PaySystemRestHandlers setAppId(\string|\Bitrix\Main\DB\SqlExpression $appId)
	 * @method bool hasAppId()
	 * @method bool isAppIdFilled()
	 * @method bool isAppIdChanged()
	 * @method \string remindActualAppId()
	 * @method \string requireAppId()
	 * @method \Bitrix\Sale\Internals\EO_PaySystemRestHandlers resetAppId()
	 * @method \Bitrix\Sale\Internals\EO_PaySystemRestHandlers unsetAppId()
	 * @method \string fillAppId()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Sale\Internals\EO_PaySystemRestHandlers set($fieldName, $value)
	 * @method \Bitrix\Sale\Internals\EO_PaySystemRestHandlers reset($fieldName)
	 * @method \Bitrix\Sale\Internals\EO_PaySystemRestHandlers unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Sale\Internals\EO_PaySystemRestHandlers wakeUp($data)
	 */
	class EO_PaySystemRestHandlers {
		/* @var \Bitrix\Sale\Internals\PaySystemRestHandlersTable */
		static public $dataClass = '\Bitrix\Sale\Internals\PaySystemRestHandlersTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Sale\Internals {
	/**
	 * EO_PaySystemRestHandlers_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getIdList()
	 * @method \string[] getNameList()
	 * @method \string[] fillName()
	 * @method \string[] getCodeList()
	 * @method \string[] fillCode()
	 * @method \int[] getSortList()
	 * @method \int[] fillSort()
	 * @method \string[] getSettingsList()
	 * @method \string[] fillSettings()
	 * @method \string[] getAppIdList()
	 * @method \string[] fillAppId()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Sale\Internals\EO_PaySystemRestHandlers $object)
	 * @method bool has(\Bitrix\Sale\Internals\EO_PaySystemRestHandlers $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Sale\Internals\EO_PaySystemRestHandlers getByPrimary($primary)
	 * @method \Bitrix\Sale\Internals\EO_PaySystemRestHandlers[] getAll()
	 * @method bool remove(\Bitrix\Sale\Internals\EO_PaySystemRestHandlers $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Sale\Internals\EO_PaySystemRestHandlers_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Sale\Internals\EO_PaySystemRestHandlers current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 * @method EO_PaySystemRestHandlers_Collection merge(?EO_PaySystemRestHandlers_Collection $collection)
	 * @method bool isEmpty()
	 */
	class EO_PaySystemRestHandlers_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Sale\Internals\PaySystemRestHandlersTable */
		static public $dataClass = '\Bitrix\Sale\Internals\PaySystemRestHandlersTable';
	}
}
namespace Bitrix\Sale\Internals {
	/**
	 * Common methods:
	 * ---------------
	 *
	 * @method EO_PaySystemRestHandlers_Result exec()
	 * @method \Bitrix\Sale\Internals\EO_PaySystemRestHandlers fetchObject()
	 * @method \Bitrix\Sale\Internals\EO_PaySystemRestHandlers_Collection fetchCollection()
	 *
	 * Custom methods:
	 * ---------------
	 *
	 */
	class EO_PaySystemRestHandlers_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Sale\Internals\EO_PaySystemRestHandlers fetchObject()
	 * @method \Bitrix\Sale\Internals\EO_PaySystemRestHandlers_Collection fetchCollection()
	 */
	class EO_PaySystemRestHandlers_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Sale\Internals\EO_PaySystemRestHandlers createObject($setDefaultValues = true)
	 * @method \Bitrix\Sale\Internals\EO_PaySystemRestHandlers_Collection createCollection()
	 * @method \Bitrix\Sale\Internals\EO_PaySystemRestHandlers wakeUpObject($row)
	 * @method \Bitrix\Sale\Internals\EO_PaySystemRestHandlers_Collection wakeUpCollection($rows)
	 */
	class EO_PaySystemRestHandlers_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Sale\Internals\PaySystemRestrictionTable:sale\lib\internals\paysystemrestriction.php */
namespace Bitrix\Sale\Internals {
	/**
	 * EO_PaySystemRestriction
	 * @see \Bitrix\Sale\Internals\PaySystemRestrictionTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getId()
	 * @method \Bitrix\Sale\Internals\EO_PaySystemRestriction setId(\int|\Bitrix\Main\DB\SqlExpression $id)
	 * @method bool hasId()
	 * @method bool isIdFilled()
	 * @method bool isIdChanged()
	 * @method \int getPaySystemId()
	 * @method \Bitrix\Sale\Internals\EO_PaySystemRestriction setPaySystemId(\int|\Bitrix\Main\DB\SqlExpression $paySystemId)
	 * @method bool hasPaySystemId()
	 * @method bool isPaySystemIdFilled()
	 * @method bool isPaySystemIdChanged()
	 * @method \int remindActualPaySystemId()
	 * @method \int requirePaySystemId()
	 * @method \Bitrix\Sale\Internals\EO_PaySystemRestriction resetPaySystemId()
	 * @method \Bitrix\Sale\Internals\EO_PaySystemRestriction unsetPaySystemId()
	 * @method \int fillPaySystemId()
	 * @method \int getSort()
	 * @method \Bitrix\Sale\Internals\EO_PaySystemRestriction setSort(\int|\Bitrix\Main\DB\SqlExpression $sort)
	 * @method bool hasSort()
	 * @method bool isSortFilled()
	 * @method bool isSortChanged()
	 * @method \int remindActualSort()
	 * @method \int requireSort()
	 * @method \Bitrix\Sale\Internals\EO_PaySystemRestriction resetSort()
	 * @method \Bitrix\Sale\Internals\EO_PaySystemRestriction unsetSort()
	 * @method \int fillSort()
	 * @method \string getClassName()
	 * @method \Bitrix\Sale\Internals\EO_PaySystemRestriction setClassName(\string|\Bitrix\Main\DB\SqlExpression $className)
	 * @method bool hasClassName()
	 * @method bool isClassNameFilled()
	 * @method bool isClassNameChanged()
	 * @method \string remindActualClassName()
	 * @method \string requireClassName()
	 * @method \Bitrix\Sale\Internals\EO_PaySystemRestriction resetClassName()
	 * @method \Bitrix\Sale\Internals\EO_PaySystemRestriction unsetClassName()
	 * @method \string fillClassName()
	 * @method \string getParams()
	 * @method \Bitrix\Sale\Internals\EO_PaySystemRestriction setParams(\string|\Bitrix\Main\DB\SqlExpression $params)
	 * @method bool hasParams()
	 * @method bool isParamsFilled()
	 * @method bool isParamsChanged()
	 * @method \string remindActualParams()
	 * @method \string requireParams()
	 * @method \Bitrix\Sale\Internals\EO_PaySystemRestriction resetParams()
	 * @method \Bitrix\Sale\Internals\EO_PaySystemRestriction unsetParams()
	 * @method \string fillParams()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Sale\Internals\EO_PaySystemRestriction set($fieldName, $value)
	 * @method \Bitrix\Sale\Internals\EO_PaySystemRestriction reset($fieldName)
	 * @method \Bitrix\Sale\Internals\EO_PaySystemRestriction unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Sale\Internals\EO_PaySystemRestriction wakeUp($data)
	 */
	class EO_PaySystemRestriction {
		/* @var \Bitrix\Sale\Internals\PaySystemRestrictionTable */
		static public $dataClass = '\Bitrix\Sale\Internals\PaySystemRestrictionTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Sale\Internals {
	/**
	 * EO_PaySystemRestriction_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getIdList()
	 * @method \int[] getPaySystemIdList()
	 * @method \int[] fillPaySystemId()
	 * @method \int[] getSortList()
	 * @method \int[] fillSort()
	 * @method \string[] getClassNameList()
	 * @method \string[] fillClassName()
	 * @method \string[] getParamsList()
	 * @method \string[] fillParams()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Sale\Internals\EO_PaySystemRestriction $object)
	 * @method bool has(\Bitrix\Sale\Internals\EO_PaySystemRestriction $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Sale\Internals\EO_PaySystemRestriction getByPrimary($primary)
	 * @method \Bitrix\Sale\Internals\EO_PaySystemRestriction[] getAll()
	 * @method bool remove(\Bitrix\Sale\Internals\EO_PaySystemRestriction $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Sale\Internals\EO_PaySystemRestriction_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Sale\Internals\EO_PaySystemRestriction current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 * @method EO_PaySystemRestriction_Collection merge(?EO_PaySystemRestriction_Collection $collection)
	 * @method bool isEmpty()
	 */
	class EO_PaySystemRestriction_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Sale\Internals\PaySystemRestrictionTable */
		static public $dataClass = '\Bitrix\Sale\Internals\PaySystemRestrictionTable';
	}
}
namespace Bitrix\Sale\Internals {
	/**
	 * Common methods:
	 * ---------------
	 *
	 * @method EO_PaySystemRestriction_Result exec()
	 * @method \Bitrix\Sale\Internals\EO_PaySystemRestriction fetchObject()
	 * @method \Bitrix\Sale\Internals\EO_PaySystemRestriction_Collection fetchCollection()
	 *
	 * Custom methods:
	 * ---------------
	 *
	 */
	class EO_PaySystemRestriction_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Sale\Internals\EO_PaySystemRestriction fetchObject()
	 * @method \Bitrix\Sale\Internals\EO_PaySystemRestriction_Collection fetchCollection()
	 */
	class EO_PaySystemRestriction_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Sale\Internals\EO_PaySystemRestriction createObject($setDefaultValues = true)
	 * @method \Bitrix\Sale\Internals\EO_PaySystemRestriction_Collection createCollection()
	 * @method \Bitrix\Sale\Internals\EO_PaySystemRestriction wakeUpObject($row)
	 * @method \Bitrix\Sale\Internals\EO_PaySystemRestriction_Collection wakeUpCollection($rows)
	 */
	class EO_PaySystemRestriction_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Sale\Internals\PaySystemServiceTable:sale\lib\internals\paysystemservice.php */
namespace Bitrix\Sale\Internals {
	/**
	 * EO_PaySystemService
	 * @see \Bitrix\Sale\Internals\PaySystemServiceTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getId()
	 * @method \Bitrix\Sale\Internals\EO_PaySystemService setId(\int|\Bitrix\Main\DB\SqlExpression $id)
	 * @method bool hasId()
	 * @method bool isIdFilled()
	 * @method bool isIdChanged()
	 * @method \string getLid()
	 * @method \Bitrix\Sale\Internals\EO_PaySystemService setLid(\string|\Bitrix\Main\DB\SqlExpression $lid)
	 * @method bool hasLid()
	 * @method bool isLidFilled()
	 * @method bool isLidChanged()
	 * @method \string remindActualLid()
	 * @method \string requireLid()
	 * @method \Bitrix\Sale\Internals\EO_PaySystemService resetLid()
	 * @method \Bitrix\Sale\Internals\EO_PaySystemService unsetLid()
	 * @method \string fillLid()
	 * @method \string getCurrency()
	 * @method \Bitrix\Sale\Internals\EO_PaySystemService setCurrency(\string|\Bitrix\Main\DB\SqlExpression $currency)
	 * @method bool hasCurrency()
	 * @method bool isCurrencyFilled()
	 * @method bool isCurrencyChanged()
	 * @method \string remindActualCurrency()
	 * @method \string requireCurrency()
	 * @method \Bitrix\Sale\Internals\EO_PaySystemService resetCurrency()
	 * @method \Bitrix\Sale\Internals\EO_PaySystemService unsetCurrency()
	 * @method \string fillCurrency()
	 * @method \string getName()
	 * @method \Bitrix\Sale\Internals\EO_PaySystemService setName(\string|\Bitrix\Main\DB\SqlExpression $name)
	 * @method bool hasName()
	 * @method bool isNameFilled()
	 * @method bool isNameChanged()
	 * @method \string remindActualName()
	 * @method \string requireName()
	 * @method \Bitrix\Sale\Internals\EO_PaySystemService resetName()
	 * @method \Bitrix\Sale\Internals\EO_PaySystemService unsetName()
	 * @method \string fillName()
	 * @method \boolean getActive()
	 * @method \Bitrix\Sale\Internals\EO_PaySystemService setActive(\boolean|\Bitrix\Main\DB\SqlExpression $active)
	 * @method bool hasActive()
	 * @method bool isActiveFilled()
	 * @method bool isActiveChanged()
	 * @method \boolean remindActualActive()
	 * @method \boolean requireActive()
	 * @method \Bitrix\Sale\Internals\EO_PaySystemService resetActive()
	 * @method \Bitrix\Sale\Internals\EO_PaySystemService unsetActive()
	 * @method \boolean fillActive()
	 * @method \boolean getAllowEditPayment()
	 * @method \Bitrix\Sale\Internals\EO_PaySystemService setAllowEditPayment(\boolean|\Bitrix\Main\DB\SqlExpression $allowEditPayment)
	 * @method bool hasAllowEditPayment()
	 * @method bool isAllowEditPaymentFilled()
	 * @method bool isAllowEditPaymentChanged()
	 * @method \boolean remindActualAllowEditPayment()
	 * @method \boolean requireAllowEditPayment()
	 * @method \Bitrix\Sale\Internals\EO_PaySystemService resetAllowEditPayment()
	 * @method \Bitrix\Sale\Internals\EO_PaySystemService unsetAllowEditPayment()
	 * @method \boolean fillAllowEditPayment()
	 * @method \int getSort()
	 * @method \Bitrix\Sale\Internals\EO_PaySystemService setSort(\int|\Bitrix\Main\DB\SqlExpression $sort)
	 * @method bool hasSort()
	 * @method bool isSortFilled()
	 * @method bool isSortChanged()
	 * @method \int remindActualSort()
	 * @method \int requireSort()
	 * @method \Bitrix\Sale\Internals\EO_PaySystemService resetSort()
	 * @method \Bitrix\Sale\Internals\EO_PaySystemService unsetSort()
	 * @method \int fillSort()
	 * @method \string getDescription()
	 * @method \Bitrix\Sale\Internals\EO_PaySystemService setDescription(\string|\Bitrix\Main\DB\SqlExpression $description)
	 * @method bool hasDescription()
	 * @method bool isDescriptionFilled()
	 * @method bool isDescriptionChanged()
	 * @method \string remindActualDescription()
	 * @method \string requireDescription()
	 * @method \Bitrix\Sale\Internals\EO_PaySystemService resetDescription()
	 * @method \Bitrix\Sale\Internals\EO_PaySystemService unsetDescription()
	 * @method \string fillDescription()
	 * @method \Bitrix\Sale\Internals\EO_PaySystemAction getAction()
	 * @method \Bitrix\Sale\Internals\EO_PaySystemAction remindActualAction()
	 * @method \Bitrix\Sale\Internals\EO_PaySystemAction requireAction()
	 * @method \Bitrix\Sale\Internals\EO_PaySystemService setAction(\Bitrix\Sale\Internals\EO_PaySystemAction $object)
	 * @method \Bitrix\Sale\Internals\EO_PaySystemService resetAction()
	 * @method \Bitrix\Sale\Internals\EO_PaySystemService unsetAction()
	 * @method bool hasAction()
	 * @method bool isActionFilled()
	 * @method bool isActionChanged()
	 * @method \Bitrix\Sale\Internals\EO_PaySystemAction fillAction()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Sale\Internals\EO_PaySystemService set($fieldName, $value)
	 * @method \Bitrix\Sale\Internals\EO_PaySystemService reset($fieldName)
	 * @method \Bitrix\Sale\Internals\EO_PaySystemService unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Sale\Internals\EO_PaySystemService wakeUp($data)
	 */
	class EO_PaySystemService {
		/* @var \Bitrix\Sale\Internals\PaySystemServiceTable */
		static public $dataClass = '\Bitrix\Sale\Internals\PaySystemServiceTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Sale\Internals {
	/**
	 * EO_PaySystemService_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getIdList()
	 * @method \string[] getLidList()
	 * @method \string[] fillLid()
	 * @method \string[] getCurrencyList()
	 * @method \string[] fillCurrency()
	 * @method \string[] getNameList()
	 * @method \string[] fillName()
	 * @method \boolean[] getActiveList()
	 * @method \boolean[] fillActive()
	 * @method \boolean[] getAllowEditPaymentList()
	 * @method \boolean[] fillAllowEditPayment()
	 * @method \int[] getSortList()
	 * @method \int[] fillSort()
	 * @method \string[] getDescriptionList()
	 * @method \string[] fillDescription()
	 * @method \Bitrix\Sale\Internals\EO_PaySystemAction[] getActionList()
	 * @method \Bitrix\Sale\Internals\EO_PaySystemService_Collection getActionCollection()
	 * @method \Bitrix\Sale\Internals\EO_PaySystemAction_Collection fillAction()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Sale\Internals\EO_PaySystemService $object)
	 * @method bool has(\Bitrix\Sale\Internals\EO_PaySystemService $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Sale\Internals\EO_PaySystemService getByPrimary($primary)
	 * @method \Bitrix\Sale\Internals\EO_PaySystemService[] getAll()
	 * @method bool remove(\Bitrix\Sale\Internals\EO_PaySystemService $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Sale\Internals\EO_PaySystemService_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Sale\Internals\EO_PaySystemService current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 * @method EO_PaySystemService_Collection merge(?EO_PaySystemService_Collection $collection)
	 * @method bool isEmpty()
	 */
	class EO_PaySystemService_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Sale\Internals\PaySystemServiceTable */
		static public $dataClass = '\Bitrix\Sale\Internals\PaySystemServiceTable';
	}
}
namespace Bitrix\Sale\Internals {
	/**
	 * Common methods:
	 * ---------------
	 *
	 * @method EO_PaySystemService_Result exec()
	 * @method \Bitrix\Sale\Internals\EO_PaySystemService fetchObject()
	 * @method \Bitrix\Sale\Internals\EO_PaySystemService_Collection fetchCollection()
	 *
	 * Custom methods:
	 * ---------------
	 *
	 */
	class EO_PaySystemService_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Sale\Internals\EO_PaySystemService fetchObject()
	 * @method \Bitrix\Sale\Internals\EO_PaySystemService_Collection fetchCollection()
	 */
	class EO_PaySystemService_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Sale\Internals\EO_PaySystemService createObject($setDefaultValues = true)
	 * @method \Bitrix\Sale\Internals\EO_PaySystemService_Collection createCollection()
	 * @method \Bitrix\Sale\Internals\EO_PaySystemService wakeUpObject($row)
	 * @method \Bitrix\Sale\Internals\EO_PaySystemService_Collection wakeUpCollection($rows)
	 */
	class EO_PaySystemService_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Sale\Internals\ReliabilityTable:sale\lib\internals\reliability.php */
namespace Bitrix\Sale\Internals {
	/**
	 * Reliability
	 * @see \Bitrix\Sale\Internals\ReliabilityTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \string getHash()
	 * @method \Sale\Handlers\Delivery\Additional\RusPost\Reliability\Reliability setHash(\string|\Bitrix\Main\DB\SqlExpression $hash)
	 * @method bool hasHash()
	 * @method bool isHashFilled()
	 * @method bool isHashChanged()
	 * @method \int getReliability()
	 * @method \Sale\Handlers\Delivery\Additional\RusPost\Reliability\Reliability setReliability(\int|\Bitrix\Main\DB\SqlExpression $reliability)
	 * @method bool hasReliability()
	 * @method bool isReliabilityFilled()
	 * @method bool isReliabilityChanged()
	 * @method \int remindActualReliability()
	 * @method \int requireReliability()
	 * @method \Sale\Handlers\Delivery\Additional\RusPost\Reliability\Reliability resetReliability()
	 * @method \Sale\Handlers\Delivery\Additional\RusPost\Reliability\Reliability unsetReliability()
	 * @method \int fillReliability()
	 * @method \string getAddress()
	 * @method \Sale\Handlers\Delivery\Additional\RusPost\Reliability\Reliability setAddress(\string|\Bitrix\Main\DB\SqlExpression $address)
	 * @method bool hasAddress()
	 * @method bool isAddressFilled()
	 * @method bool isAddressChanged()
	 * @method \string remindActualAddress()
	 * @method \string requireAddress()
	 * @method \Sale\Handlers\Delivery\Additional\RusPost\Reliability\Reliability resetAddress()
	 * @method \Sale\Handlers\Delivery\Additional\RusPost\Reliability\Reliability unsetAddress()
	 * @method \string fillAddress()
	 * @method \string getFullName()
	 * @method \Sale\Handlers\Delivery\Additional\RusPost\Reliability\Reliability setFullName(\string|\Bitrix\Main\DB\SqlExpression $fullName)
	 * @method bool hasFullName()
	 * @method bool isFullNameFilled()
	 * @method bool isFullNameChanged()
	 * @method \string remindActualFullName()
	 * @method \string requireFullName()
	 * @method \Sale\Handlers\Delivery\Additional\RusPost\Reliability\Reliability resetFullName()
	 * @method \Sale\Handlers\Delivery\Additional\RusPost\Reliability\Reliability unsetFullName()
	 * @method \string fillFullName()
	 * @method \string getPhone()
	 * @method \Sale\Handlers\Delivery\Additional\RusPost\Reliability\Reliability setPhone(\string|\Bitrix\Main\DB\SqlExpression $phone)
	 * @method bool hasPhone()
	 * @method bool isPhoneFilled()
	 * @method bool isPhoneChanged()
	 * @method \string remindActualPhone()
	 * @method \string requirePhone()
	 * @method \Sale\Handlers\Delivery\Additional\RusPost\Reliability\Reliability resetPhone()
	 * @method \Sale\Handlers\Delivery\Additional\RusPost\Reliability\Reliability unsetPhone()
	 * @method \string fillPhone()
	 * @method \Bitrix\Main\Type\DateTime getUpdatedAt()
	 * @method \Sale\Handlers\Delivery\Additional\RusPost\Reliability\Reliability setUpdatedAt(\Bitrix\Main\Type\DateTime|\Bitrix\Main\DB\SqlExpression $updatedAt)
	 * @method bool hasUpdatedAt()
	 * @method bool isUpdatedAtFilled()
	 * @method bool isUpdatedAtChanged()
	 * @method \Bitrix\Main\Type\DateTime remindActualUpdatedAt()
	 * @method \Bitrix\Main\Type\DateTime requireUpdatedAt()
	 * @method \Sale\Handlers\Delivery\Additional\RusPost\Reliability\Reliability resetUpdatedAt()
	 * @method \Sale\Handlers\Delivery\Additional\RusPost\Reliability\Reliability unsetUpdatedAt()
	 * @method \Bitrix\Main\Type\DateTime fillUpdatedAt()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Sale\Handlers\Delivery\Additional\RusPost\Reliability\Reliability set($fieldName, $value)
	 * @method \Sale\Handlers\Delivery\Additional\RusPost\Reliability\Reliability reset($fieldName)
	 * @method \Sale\Handlers\Delivery\Additional\RusPost\Reliability\Reliability unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Sale\Handlers\Delivery\Additional\RusPost\Reliability\Reliability wakeUp($data)
	 */
	class EO_Reliability {
		/* @var \Bitrix\Sale\Internals\ReliabilityTable */
		static public $dataClass = '\Bitrix\Sale\Internals\ReliabilityTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Sale\Internals {
	/**
	 * ReliabilityCollection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \string[] getHashList()
	 * @method \int[] getReliabilityList()
	 * @method \int[] fillReliability()
	 * @method \string[] getAddressList()
	 * @method \string[] fillAddress()
	 * @method \string[] getFullNameList()
	 * @method \string[] fillFullName()
	 * @method \string[] getPhoneList()
	 * @method \string[] fillPhone()
	 * @method \Bitrix\Main\Type\DateTime[] getUpdatedAtList()
	 * @method \Bitrix\Main\Type\DateTime[] fillUpdatedAt()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Sale\Handlers\Delivery\Additional\RusPost\Reliability\Reliability $object)
	 * @method bool has(\Sale\Handlers\Delivery\Additional\RusPost\Reliability\Reliability $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Sale\Handlers\Delivery\Additional\RusPost\Reliability\Reliability getByPrimary($primary)
	 * @method \Sale\Handlers\Delivery\Additional\RusPost\Reliability\Reliability[] getAll()
	 * @method bool remove(\Sale\Handlers\Delivery\Additional\RusPost\Reliability\Reliability $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Sale\Handlers\Delivery\Additional\RusPost\Reliability\ReliabilityCollection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Sale\Handlers\Delivery\Additional\RusPost\Reliability\Reliability current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 * @method ReliabilityCollection merge(?ReliabilityCollection $collection)
	 * @method bool isEmpty()
	 */
	class EO_Reliability_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Sale\Internals\ReliabilityTable */
		static public $dataClass = '\Bitrix\Sale\Internals\ReliabilityTable';
	}
}
namespace Bitrix\Sale\Internals {
	/**
	 * Common methods:
	 * ---------------
	 *
	 * @method EO_Reliability_Result exec()
	 * @method \Sale\Handlers\Delivery\Additional\RusPost\Reliability\Reliability fetchObject()
	 * @method \Sale\Handlers\Delivery\Additional\RusPost\Reliability\ReliabilityCollection fetchCollection()
	 *
	 * Custom methods:
	 * ---------------
	 *
	 */
	class EO_Reliability_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Sale\Handlers\Delivery\Additional\RusPost\Reliability\Reliability fetchObject()
	 * @method \Sale\Handlers\Delivery\Additional\RusPost\Reliability\ReliabilityCollection fetchCollection()
	 */
	class EO_Reliability_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Sale\Handlers\Delivery\Additional\RusPost\Reliability\Reliability createObject($setDefaultValues = true)
	 * @method \Sale\Handlers\Delivery\Additional\RusPost\Reliability\ReliabilityCollection createCollection()
	 * @method \Sale\Handlers\Delivery\Additional\RusPost\Reliability\Reliability wakeUpObject($row)
	 * @method \Sale\Handlers\Delivery\Additional\RusPost\Reliability\ReliabilityCollection wakeUpCollection($rows)
	 */
	class EO_Reliability_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Sale\Internals\ServiceRestrictionTable:sale\lib\internals\servicerestriction.php */
namespace Bitrix\Sale\Internals {
	/**
	 * EO_ServiceRestriction
	 * @see \Bitrix\Sale\Internals\ServiceRestrictionTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getId()
	 * @method \Bitrix\Sale\Internals\EO_ServiceRestriction setId(\int|\Bitrix\Main\DB\SqlExpression $id)
	 * @method bool hasId()
	 * @method bool isIdFilled()
	 * @method bool isIdChanged()
	 * @method \int getServiceId()
	 * @method \Bitrix\Sale\Internals\EO_ServiceRestriction setServiceId(\int|\Bitrix\Main\DB\SqlExpression $serviceId)
	 * @method bool hasServiceId()
	 * @method bool isServiceIdFilled()
	 * @method bool isServiceIdChanged()
	 * @method \int remindActualServiceId()
	 * @method \int requireServiceId()
	 * @method \Bitrix\Sale\Internals\EO_ServiceRestriction resetServiceId()
	 * @method \Bitrix\Sale\Internals\EO_ServiceRestriction unsetServiceId()
	 * @method \int fillServiceId()
	 * @method \int getServiceType()
	 * @method \Bitrix\Sale\Internals\EO_ServiceRestriction setServiceType(\int|\Bitrix\Main\DB\SqlExpression $serviceType)
	 * @method bool hasServiceType()
	 * @method bool isServiceTypeFilled()
	 * @method bool isServiceTypeChanged()
	 * @method \int remindActualServiceType()
	 * @method \int requireServiceType()
	 * @method \Bitrix\Sale\Internals\EO_ServiceRestriction resetServiceType()
	 * @method \Bitrix\Sale\Internals\EO_ServiceRestriction unsetServiceType()
	 * @method \int fillServiceType()
	 * @method \int getSort()
	 * @method \Bitrix\Sale\Internals\EO_ServiceRestriction setSort(\int|\Bitrix\Main\DB\SqlExpression $sort)
	 * @method bool hasSort()
	 * @method bool isSortFilled()
	 * @method bool isSortChanged()
	 * @method \int remindActualSort()
	 * @method \int requireSort()
	 * @method \Bitrix\Sale\Internals\EO_ServiceRestriction resetSort()
	 * @method \Bitrix\Sale\Internals\EO_ServiceRestriction unsetSort()
	 * @method \int fillSort()
	 * @method \string getClassName()
	 * @method \Bitrix\Sale\Internals\EO_ServiceRestriction setClassName(\string|\Bitrix\Main\DB\SqlExpression $className)
	 * @method bool hasClassName()
	 * @method bool isClassNameFilled()
	 * @method bool isClassNameChanged()
	 * @method \string remindActualClassName()
	 * @method \string requireClassName()
	 * @method \Bitrix\Sale\Internals\EO_ServiceRestriction resetClassName()
	 * @method \Bitrix\Sale\Internals\EO_ServiceRestriction unsetClassName()
	 * @method \string fillClassName()
	 * @method \string getParams()
	 * @method \Bitrix\Sale\Internals\EO_ServiceRestriction setParams(\string|\Bitrix\Main\DB\SqlExpression $params)
	 * @method bool hasParams()
	 * @method bool isParamsFilled()
	 * @method bool isParamsChanged()
	 * @method \string remindActualParams()
	 * @method \string requireParams()
	 * @method \Bitrix\Sale\Internals\EO_ServiceRestriction resetParams()
	 * @method \Bitrix\Sale\Internals\EO_ServiceRestriction unsetParams()
	 * @method \string fillParams()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Sale\Internals\EO_ServiceRestriction set($fieldName, $value)
	 * @method \Bitrix\Sale\Internals\EO_ServiceRestriction reset($fieldName)
	 * @method \Bitrix\Sale\Internals\EO_ServiceRestriction unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Sale\Internals\EO_ServiceRestriction wakeUp($data)
	 */
	class EO_ServiceRestriction {
		/* @var \Bitrix\Sale\Internals\ServiceRestrictionTable */
		static public $dataClass = '\Bitrix\Sale\Internals\ServiceRestrictionTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Sale\Internals {
	/**
	 * EO_ServiceRestriction_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getIdList()
	 * @method \int[] getServiceIdList()
	 * @method \int[] fillServiceId()
	 * @method \int[] getServiceTypeList()
	 * @method \int[] fillServiceType()
	 * @method \int[] getSortList()
	 * @method \int[] fillSort()
	 * @method \string[] getClassNameList()
	 * @method \string[] fillClassName()
	 * @method \string[] getParamsList()
	 * @method \string[] fillParams()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Sale\Internals\EO_ServiceRestriction $object)
	 * @method bool has(\Bitrix\Sale\Internals\EO_ServiceRestriction $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Sale\Internals\EO_ServiceRestriction getByPrimary($primary)
	 * @method \Bitrix\Sale\Internals\EO_ServiceRestriction[] getAll()
	 * @method bool remove(\Bitrix\Sale\Internals\EO_ServiceRestriction $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Sale\Internals\EO_ServiceRestriction_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Sale\Internals\EO_ServiceRestriction current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 * @method EO_ServiceRestriction_Collection merge(?EO_ServiceRestriction_Collection $collection)
	 * @method bool isEmpty()
	 */
	class EO_ServiceRestriction_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Sale\Internals\ServiceRestrictionTable */
		static public $dataClass = '\Bitrix\Sale\Internals\ServiceRestrictionTable';
	}
}
namespace Bitrix\Sale\Internals {
	/**
	 * Common methods:
	 * ---------------
	 *
	 * @method EO_ServiceRestriction_Result exec()
	 * @method \Bitrix\Sale\Internals\EO_ServiceRestriction fetchObject()
	 * @method \Bitrix\Sale\Internals\EO_ServiceRestriction_Collection fetchCollection()
	 *
	 * Custom methods:
	 * ---------------
	 *
	 */
	class EO_ServiceRestriction_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Sale\Internals\EO_ServiceRestriction fetchObject()
	 * @method \Bitrix\Sale\Internals\EO_ServiceRestriction_Collection fetchCollection()
	 */
	class EO_ServiceRestriction_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Sale\Internals\EO_ServiceRestriction createObject($setDefaultValues = true)
	 * @method \Bitrix\Sale\Internals\EO_ServiceRestriction_Collection createCollection()
	 * @method \Bitrix\Sale\Internals\EO_ServiceRestriction wakeUpObject($row)
	 * @method \Bitrix\Sale\Internals\EO_ServiceRestriction_Collection wakeUpCollection($rows)
	 */
	class EO_ServiceRestriction_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Sale\Internals\ShipmentTable:sale\lib\internals\shipment.php */
namespace Bitrix\Sale\Internals {
	/**
	 * EO_Shipment
	 * @see \Bitrix\Sale\Internals\ShipmentTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getId()
	 * @method \Bitrix\Sale\Internals\EO_Shipment setId(\int|\Bitrix\Main\DB\SqlExpression $id)
	 * @method bool hasId()
	 * @method bool isIdFilled()
	 * @method bool isIdChanged()
	 * @method \int getOrderId()
	 * @method \Bitrix\Sale\Internals\EO_Shipment setOrderId(\int|\Bitrix\Main\DB\SqlExpression $orderId)
	 * @method bool hasOrderId()
	 * @method bool isOrderIdFilled()
	 * @method bool isOrderIdChanged()
	 * @method \int remindActualOrderId()
	 * @method \int requireOrderId()
	 * @method \Bitrix\Sale\Internals\EO_Shipment resetOrderId()
	 * @method \Bitrix\Sale\Internals\EO_Shipment unsetOrderId()
	 * @method \int fillOrderId()
	 * @method \string getAccountNumber()
	 * @method \Bitrix\Sale\Internals\EO_Shipment setAccountNumber(\string|\Bitrix\Main\DB\SqlExpression $accountNumber)
	 * @method bool hasAccountNumber()
	 * @method bool isAccountNumberFilled()
	 * @method bool isAccountNumberChanged()
	 * @method \string remindActualAccountNumber()
	 * @method \string requireAccountNumber()
	 * @method \Bitrix\Sale\Internals\EO_Shipment resetAccountNumber()
	 * @method \Bitrix\Sale\Internals\EO_Shipment unsetAccountNumber()
	 * @method \string fillAccountNumber()
	 * @method \Bitrix\Sale\Internals\EO_Order getOrder()
	 * @method \Bitrix\Sale\Internals\EO_Order remindActualOrder()
	 * @method \Bitrix\Sale\Internals\EO_Order requireOrder()
	 * @method \Bitrix\Sale\Internals\EO_Shipment setOrder(\Bitrix\Sale\Internals\EO_Order $object)
	 * @method \Bitrix\Sale\Internals\EO_Shipment resetOrder()
	 * @method \Bitrix\Sale\Internals\EO_Shipment unsetOrder()
	 * @method bool hasOrder()
	 * @method bool isOrderFilled()
	 * @method bool isOrderChanged()
	 * @method \Bitrix\Sale\Internals\EO_Order fillOrder()
	 * @method \Bitrix\Main\Type\DateTime getDateInsert()
	 * @method \Bitrix\Sale\Internals\EO_Shipment setDateInsert(\Bitrix\Main\Type\DateTime|\Bitrix\Main\DB\SqlExpression $dateInsert)
	 * @method bool hasDateInsert()
	 * @method bool isDateInsertFilled()
	 * @method bool isDateInsertChanged()
	 * @method \Bitrix\Main\Type\DateTime remindActualDateInsert()
	 * @method \Bitrix\Main\Type\DateTime requireDateInsert()
	 * @method \Bitrix\Sale\Internals\EO_Shipment resetDateInsert()
	 * @method \Bitrix\Sale\Internals\EO_Shipment unsetDateInsert()
	 * @method \Bitrix\Main\Type\DateTime fillDateInsert()
	 * @method \Bitrix\Main\Type\DateTime getDateUpdate()
	 * @method \Bitrix\Sale\Internals\EO_Shipment setDateUpdate(\Bitrix\Main\Type\DateTime|\Bitrix\Main\DB\SqlExpression $dateUpdate)
	 * @method bool hasDateUpdate()
	 * @method bool isDateUpdateFilled()
	 * @method bool isDateUpdateChanged()
	 * @method \Bitrix\Main\Type\DateTime remindActualDateUpdate()
	 * @method \Bitrix\Main\Type\DateTime requireDateUpdate()
	 * @method \Bitrix\Sale\Internals\EO_Shipment resetDateUpdate()
	 * @method \Bitrix\Sale\Internals\EO_Shipment unsetDateUpdate()
	 * @method \Bitrix\Main\Type\DateTime fillDateUpdate()
	 * @method \string getDateInsertShort()
	 * @method \string remindActualDateInsertShort()
	 * @method \string requireDateInsertShort()
	 * @method bool hasDateInsertShort()
	 * @method bool isDateInsertShortFilled()
	 * @method \Bitrix\Sale\Internals\EO_Shipment unsetDateInsertShort()
	 * @method \string fillDateInsertShort()
	 * @method \string getStatusId()
	 * @method \Bitrix\Sale\Internals\EO_Shipment setStatusId(\string|\Bitrix\Main\DB\SqlExpression $statusId)
	 * @method bool hasStatusId()
	 * @method bool isStatusIdFilled()
	 * @method bool isStatusIdChanged()
	 * @method \string remindActualStatusId()
	 * @method \string requireStatusId()
	 * @method \Bitrix\Sale\Internals\EO_Shipment resetStatusId()
	 * @method \Bitrix\Sale\Internals\EO_Shipment unsetStatusId()
	 * @method \string fillStatusId()
	 * @method \string getDeliveryLocation()
	 * @method \Bitrix\Sale\Internals\EO_Shipment setDeliveryLocation(\string|\Bitrix\Main\DB\SqlExpression $deliveryLocation)
	 * @method bool hasDeliveryLocation()
	 * @method bool isDeliveryLocationFilled()
	 * @method bool isDeliveryLocationChanged()
	 * @method \string remindActualDeliveryLocation()
	 * @method \string requireDeliveryLocation()
	 * @method \Bitrix\Sale\Internals\EO_Shipment resetDeliveryLocation()
	 * @method \Bitrix\Sale\Internals\EO_Shipment unsetDeliveryLocation()
	 * @method \string fillDeliveryLocation()
	 * @method \float getBasePriceDelivery()
	 * @method \Bitrix\Sale\Internals\EO_Shipment setBasePriceDelivery(\float|\Bitrix\Main\DB\SqlExpression $basePriceDelivery)
	 * @method bool hasBasePriceDelivery()
	 * @method bool isBasePriceDeliveryFilled()
	 * @method bool isBasePriceDeliveryChanged()
	 * @method \float remindActualBasePriceDelivery()
	 * @method \float requireBasePriceDelivery()
	 * @method \Bitrix\Sale\Internals\EO_Shipment resetBasePriceDelivery()
	 * @method \Bitrix\Sale\Internals\EO_Shipment unsetBasePriceDelivery()
	 * @method \float fillBasePriceDelivery()
	 * @method \float getPriceDelivery()
	 * @method \Bitrix\Sale\Internals\EO_Shipment setPriceDelivery(\float|\Bitrix\Main\DB\SqlExpression $priceDelivery)
	 * @method bool hasPriceDelivery()
	 * @method bool isPriceDeliveryFilled()
	 * @method bool isPriceDeliveryChanged()
	 * @method \float remindActualPriceDelivery()
	 * @method \float requirePriceDelivery()
	 * @method \Bitrix\Sale\Internals\EO_Shipment resetPriceDelivery()
	 * @method \Bitrix\Sale\Internals\EO_Shipment unsetPriceDelivery()
	 * @method \float fillPriceDelivery()
	 * @method \float getWeight()
	 * @method \Bitrix\Sale\Internals\EO_Shipment setWeight(\float|\Bitrix\Main\DB\SqlExpression $weight)
	 * @method bool hasWeight()
	 * @method bool isWeightFilled()
	 * @method bool isWeightChanged()
	 * @method \float remindActualWeight()
	 * @method \float requireWeight()
	 * @method \Bitrix\Sale\Internals\EO_Shipment resetWeight()
	 * @method \Bitrix\Sale\Internals\EO_Shipment unsetWeight()
	 * @method \float fillWeight()
	 * @method \boolean getCustomPriceDelivery()
	 * @method \Bitrix\Sale\Internals\EO_Shipment setCustomPriceDelivery(\boolean|\Bitrix\Main\DB\SqlExpression $customPriceDelivery)
	 * @method bool hasCustomPriceDelivery()
	 * @method bool isCustomPriceDeliveryFilled()
	 * @method bool isCustomPriceDeliveryChanged()
	 * @method \boolean remindActualCustomPriceDelivery()
	 * @method \boolean requireCustomPriceDelivery()
	 * @method \Bitrix\Sale\Internals\EO_Shipment resetCustomPriceDelivery()
	 * @method \Bitrix\Sale\Internals\EO_Shipment unsetCustomPriceDelivery()
	 * @method \boolean fillCustomPriceDelivery()
	 * @method \string getCurrency()
	 * @method \Bitrix\Sale\Internals\EO_Shipment setCurrency(\string|\Bitrix\Main\DB\SqlExpression $currency)
	 * @method bool hasCurrency()
	 * @method bool isCurrencyFilled()
	 * @method bool isCurrencyChanged()
	 * @method \string remindActualCurrency()
	 * @method \string requireCurrency()
	 * @method \Bitrix\Sale\Internals\EO_Shipment resetCurrency()
	 * @method \Bitrix\Sale\Internals\EO_Shipment unsetCurrency()
	 * @method \string fillCurrency()
	 * @method \float getDiscountPrice()
	 * @method \Bitrix\Sale\Internals\EO_Shipment setDiscountPrice(\float|\Bitrix\Main\DB\SqlExpression $discountPrice)
	 * @method bool hasDiscountPrice()
	 * @method bool isDiscountPriceFilled()
	 * @method bool isDiscountPriceChanged()
	 * @method \float remindActualDiscountPrice()
	 * @method \float requireDiscountPrice()
	 * @method \Bitrix\Sale\Internals\EO_Shipment resetDiscountPrice()
	 * @method \Bitrix\Sale\Internals\EO_Shipment unsetDiscountPrice()
	 * @method \float fillDiscountPrice()
	 * @method \boolean getAllowDelivery()
	 * @method \Bitrix\Sale\Internals\EO_Shipment setAllowDelivery(\boolean|\Bitrix\Main\DB\SqlExpression $allowDelivery)
	 * @method bool hasAllowDelivery()
	 * @method bool isAllowDeliveryFilled()
	 * @method bool isAllowDeliveryChanged()
	 * @method \boolean remindActualAllowDelivery()
	 * @method \boolean requireAllowDelivery()
	 * @method \Bitrix\Sale\Internals\EO_Shipment resetAllowDelivery()
	 * @method \Bitrix\Sale\Internals\EO_Shipment unsetAllowDelivery()
	 * @method \boolean fillAllowDelivery()
	 * @method \Bitrix\Main\Type\DateTime getDateAllowDelivery()
	 * @method \Bitrix\Sale\Internals\EO_Shipment setDateAllowDelivery(\Bitrix\Main\Type\DateTime|\Bitrix\Main\DB\SqlExpression $dateAllowDelivery)
	 * @method bool hasDateAllowDelivery()
	 * @method bool isDateAllowDeliveryFilled()
	 * @method bool isDateAllowDeliveryChanged()
	 * @method \Bitrix\Main\Type\DateTime remindActualDateAllowDelivery()
	 * @method \Bitrix\Main\Type\DateTime requireDateAllowDelivery()
	 * @method \Bitrix\Sale\Internals\EO_Shipment resetDateAllowDelivery()
	 * @method \Bitrix\Sale\Internals\EO_Shipment unsetDateAllowDelivery()
	 * @method \Bitrix\Main\Type\DateTime fillDateAllowDelivery()
	 * @method \string getDateAllowDeliveryShort()
	 * @method \string remindActualDateAllowDeliveryShort()
	 * @method \string requireDateAllowDeliveryShort()
	 * @method bool hasDateAllowDeliveryShort()
	 * @method bool isDateAllowDeliveryShortFilled()
	 * @method \Bitrix\Sale\Internals\EO_Shipment unsetDateAllowDeliveryShort()
	 * @method \string fillDateAllowDeliveryShort()
	 * @method \int getEmpAllowDeliveryId()
	 * @method \Bitrix\Sale\Internals\EO_Shipment setEmpAllowDeliveryId(\int|\Bitrix\Main\DB\SqlExpression $empAllowDeliveryId)
	 * @method bool hasEmpAllowDeliveryId()
	 * @method bool isEmpAllowDeliveryIdFilled()
	 * @method bool isEmpAllowDeliveryIdChanged()
	 * @method \int remindActualEmpAllowDeliveryId()
	 * @method \int requireEmpAllowDeliveryId()
	 * @method \Bitrix\Sale\Internals\EO_Shipment resetEmpAllowDeliveryId()
	 * @method \Bitrix\Sale\Internals\EO_Shipment unsetEmpAllowDeliveryId()
	 * @method \int fillEmpAllowDeliveryId()
	 * @method \Bitrix\Main\EO_User getEmpAllowDeliveryBy()
	 * @method \Bitrix\Main\EO_User remindActualEmpAllowDeliveryBy()
	 * @method \Bitrix\Main\EO_User requireEmpAllowDeliveryBy()
	 * @method \Bitrix\Sale\Internals\EO_Shipment setEmpAllowDeliveryBy(\Bitrix\Main\EO_User $object)
	 * @method \Bitrix\Sale\Internals\EO_Shipment resetEmpAllowDeliveryBy()
	 * @method \Bitrix\Sale\Internals\EO_Shipment unsetEmpAllowDeliveryBy()
	 * @method bool hasEmpAllowDeliveryBy()
	 * @method bool isEmpAllowDeliveryByFilled()
	 * @method bool isEmpAllowDeliveryByChanged()
	 * @method \Bitrix\Main\EO_User fillEmpAllowDeliveryBy()
	 * @method \boolean getDeducted()
	 * @method \Bitrix\Sale\Internals\EO_Shipment setDeducted(\boolean|\Bitrix\Main\DB\SqlExpression $deducted)
	 * @method bool hasDeducted()
	 * @method bool isDeductedFilled()
	 * @method bool isDeductedChanged()
	 * @method \boolean remindActualDeducted()
	 * @method \boolean requireDeducted()
	 * @method \Bitrix\Sale\Internals\EO_Shipment resetDeducted()
	 * @method \Bitrix\Sale\Internals\EO_Shipment unsetDeducted()
	 * @method \boolean fillDeducted()
	 * @method \Bitrix\Main\Type\DateTime getDateDeducted()
	 * @method \Bitrix\Sale\Internals\EO_Shipment setDateDeducted(\Bitrix\Main\Type\DateTime|\Bitrix\Main\DB\SqlExpression $dateDeducted)
	 * @method bool hasDateDeducted()
	 * @method bool isDateDeductedFilled()
	 * @method bool isDateDeductedChanged()
	 * @method \Bitrix\Main\Type\DateTime remindActualDateDeducted()
	 * @method \Bitrix\Main\Type\DateTime requireDateDeducted()
	 * @method \Bitrix\Sale\Internals\EO_Shipment resetDateDeducted()
	 * @method \Bitrix\Sale\Internals\EO_Shipment unsetDateDeducted()
	 * @method \Bitrix\Main\Type\DateTime fillDateDeducted()
	 * @method \string getDateDeductedShort()
	 * @method \string remindActualDateDeductedShort()
	 * @method \string requireDateDeductedShort()
	 * @method bool hasDateDeductedShort()
	 * @method bool isDateDeductedShortFilled()
	 * @method \Bitrix\Sale\Internals\EO_Shipment unsetDateDeductedShort()
	 * @method \string fillDateDeductedShort()
	 * @method \int getEmpDeductedId()
	 * @method \Bitrix\Sale\Internals\EO_Shipment setEmpDeductedId(\int|\Bitrix\Main\DB\SqlExpression $empDeductedId)
	 * @method bool hasEmpDeductedId()
	 * @method bool isEmpDeductedIdFilled()
	 * @method bool isEmpDeductedIdChanged()
	 * @method \int remindActualEmpDeductedId()
	 * @method \int requireEmpDeductedId()
	 * @method \Bitrix\Sale\Internals\EO_Shipment resetEmpDeductedId()
	 * @method \Bitrix\Sale\Internals\EO_Shipment unsetEmpDeductedId()
	 * @method \int fillEmpDeductedId()
	 * @method \Bitrix\Main\EO_User getEmpDeductedBy()
	 * @method \Bitrix\Main\EO_User remindActualEmpDeductedBy()
	 * @method \Bitrix\Main\EO_User requireEmpDeductedBy()
	 * @method \Bitrix\Sale\Internals\EO_Shipment setEmpDeductedBy(\Bitrix\Main\EO_User $object)
	 * @method \Bitrix\Sale\Internals\EO_Shipment resetEmpDeductedBy()
	 * @method \Bitrix\Sale\Internals\EO_Shipment unsetEmpDeductedBy()
	 * @method bool hasEmpDeductedBy()
	 * @method bool isEmpDeductedByFilled()
	 * @method bool isEmpDeductedByChanged()
	 * @method \Bitrix\Main\EO_User fillEmpDeductedBy()
	 * @method \string getReasonUndoDeducted()
	 * @method \Bitrix\Sale\Internals\EO_Shipment setReasonUndoDeducted(\string|\Bitrix\Main\DB\SqlExpression $reasonUndoDeducted)
	 * @method bool hasReasonUndoDeducted()
	 * @method bool isReasonUndoDeductedFilled()
	 * @method bool isReasonUndoDeductedChanged()
	 * @method \string remindActualReasonUndoDeducted()
	 * @method \string requireReasonUndoDeducted()
	 * @method \Bitrix\Sale\Internals\EO_Shipment resetReasonUndoDeducted()
	 * @method \Bitrix\Sale\Internals\EO_Shipment unsetReasonUndoDeducted()
	 * @method \string fillReasonUndoDeducted()
	 * @method \boolean getReserved()
	 * @method \Bitrix\Sale\Internals\EO_Shipment setReserved(\boolean|\Bitrix\Main\DB\SqlExpression $reserved)
	 * @method bool hasReserved()
	 * @method bool isReservedFilled()
	 * @method bool isReservedChanged()
	 * @method \boolean remindActualReserved()
	 * @method \boolean requireReserved()
	 * @method \Bitrix\Sale\Internals\EO_Shipment resetReserved()
	 * @method \Bitrix\Sale\Internals\EO_Shipment unsetReserved()
	 * @method \boolean fillReserved()
	 * @method \int getDeliveryId()
	 * @method \Bitrix\Sale\Internals\EO_Shipment setDeliveryId(\int|\Bitrix\Main\DB\SqlExpression $deliveryId)
	 * @method bool hasDeliveryId()
	 * @method bool isDeliveryIdFilled()
	 * @method bool isDeliveryIdChanged()
	 * @method \int remindActualDeliveryId()
	 * @method \int requireDeliveryId()
	 * @method \Bitrix\Sale\Internals\EO_Shipment resetDeliveryId()
	 * @method \Bitrix\Sale\Internals\EO_Shipment unsetDeliveryId()
	 * @method \int fillDeliveryId()
	 * @method \Bitrix\Sale\Delivery\Services\EO_NNM_Object getDelivery()
	 * @method \Bitrix\Sale\Delivery\Services\EO_NNM_Object remindActualDelivery()
	 * @method \Bitrix\Sale\Delivery\Services\EO_NNM_Object requireDelivery()
	 * @method \Bitrix\Sale\Internals\EO_Shipment setDelivery(\Bitrix\Sale\Delivery\Services\EO_NNM_Object $object)
	 * @method \Bitrix\Sale\Internals\EO_Shipment resetDelivery()
	 * @method \Bitrix\Sale\Internals\EO_Shipment unsetDelivery()
	 * @method bool hasDelivery()
	 * @method bool isDeliveryFilled()
	 * @method bool isDeliveryChanged()
	 * @method \Bitrix\Sale\Delivery\Services\EO_NNM_Object fillDelivery()
	 * @method \string getDeliveryDocNum()
	 * @method \Bitrix\Sale\Internals\EO_Shipment setDeliveryDocNum(\string|\Bitrix\Main\DB\SqlExpression $deliveryDocNum)
	 * @method bool hasDeliveryDocNum()
	 * @method bool isDeliveryDocNumFilled()
	 * @method bool isDeliveryDocNumChanged()
	 * @method \string remindActualDeliveryDocNum()
	 * @method \string requireDeliveryDocNum()
	 * @method \Bitrix\Sale\Internals\EO_Shipment resetDeliveryDocNum()
	 * @method \Bitrix\Sale\Internals\EO_Shipment unsetDeliveryDocNum()
	 * @method \string fillDeliveryDocNum()
	 * @method \Bitrix\Main\Type\DateTime getDeliveryDocDate()
	 * @method \Bitrix\Sale\Internals\EO_Shipment setDeliveryDocDate(\Bitrix\Main\Type\DateTime|\Bitrix\Main\DB\SqlExpression $deliveryDocDate)
	 * @method bool hasDeliveryDocDate()
	 * @method bool isDeliveryDocDateFilled()
	 * @method bool isDeliveryDocDateChanged()
	 * @method \Bitrix\Main\Type\DateTime remindActualDeliveryDocDate()
	 * @method \Bitrix\Main\Type\DateTime requireDeliveryDocDate()
	 * @method \Bitrix\Sale\Internals\EO_Shipment resetDeliveryDocDate()
	 * @method \Bitrix\Sale\Internals\EO_Shipment unsetDeliveryDocDate()
	 * @method \Bitrix\Main\Type\DateTime fillDeliveryDocDate()
	 * @method \string getDeliveryDocDateShort()
	 * @method \string remindActualDeliveryDocDateShort()
	 * @method \string requireDeliveryDocDateShort()
	 * @method bool hasDeliveryDocDateShort()
	 * @method bool isDeliveryDocDateShortFilled()
	 * @method \Bitrix\Sale\Internals\EO_Shipment unsetDeliveryDocDateShort()
	 * @method \string fillDeliveryDocDateShort()
	 * @method \string getTrackingNumber()
	 * @method \Bitrix\Sale\Internals\EO_Shipment setTrackingNumber(\string|\Bitrix\Main\DB\SqlExpression $trackingNumber)
	 * @method bool hasTrackingNumber()
	 * @method bool isTrackingNumberFilled()
	 * @method bool isTrackingNumberChanged()
	 * @method \string remindActualTrackingNumber()
	 * @method \string requireTrackingNumber()
	 * @method \Bitrix\Sale\Internals\EO_Shipment resetTrackingNumber()
	 * @method \Bitrix\Sale\Internals\EO_Shipment unsetTrackingNumber()
	 * @method \string fillTrackingNumber()
	 * @method \int getTrackingStatus()
	 * @method \Bitrix\Sale\Internals\EO_Shipment setTrackingStatus(\int|\Bitrix\Main\DB\SqlExpression $trackingStatus)
	 * @method bool hasTrackingStatus()
	 * @method bool isTrackingStatusFilled()
	 * @method bool isTrackingStatusChanged()
	 * @method \int remindActualTrackingStatus()
	 * @method \int requireTrackingStatus()
	 * @method \Bitrix\Sale\Internals\EO_Shipment resetTrackingStatus()
	 * @method \Bitrix\Sale\Internals\EO_Shipment unsetTrackingStatus()
	 * @method \int fillTrackingStatus()
	 * @method \string getTrackingDescription()
	 * @method \Bitrix\Sale\Internals\EO_Shipment setTrackingDescription(\string|\Bitrix\Main\DB\SqlExpression $trackingDescription)
	 * @method bool hasTrackingDescription()
	 * @method bool isTrackingDescriptionFilled()
	 * @method bool isTrackingDescriptionChanged()
	 * @method \string remindActualTrackingDescription()
	 * @method \string requireTrackingDescription()
	 * @method \Bitrix\Sale\Internals\EO_Shipment resetTrackingDescription()
	 * @method \Bitrix\Sale\Internals\EO_Shipment unsetTrackingDescription()
	 * @method \string fillTrackingDescription()
	 * @method \Bitrix\Main\Type\DateTime getTrackingLastCheck()
	 * @method \Bitrix\Sale\Internals\EO_Shipment setTrackingLastCheck(\Bitrix\Main\Type\DateTime|\Bitrix\Main\DB\SqlExpression $trackingLastCheck)
	 * @method bool hasTrackingLastCheck()
	 * @method bool isTrackingLastCheckFilled()
	 * @method bool isTrackingLastCheckChanged()
	 * @method \Bitrix\Main\Type\DateTime remindActualTrackingLastCheck()
	 * @method \Bitrix\Main\Type\DateTime requireTrackingLastCheck()
	 * @method \Bitrix\Sale\Internals\EO_Shipment resetTrackingLastCheck()
	 * @method \Bitrix\Sale\Internals\EO_Shipment unsetTrackingLastCheck()
	 * @method \Bitrix\Main\Type\DateTime fillTrackingLastCheck()
	 * @method \Bitrix\Main\Type\DateTime getTrackingLastChange()
	 * @method \Bitrix\Sale\Internals\EO_Shipment setTrackingLastChange(\Bitrix\Main\Type\DateTime|\Bitrix\Main\DB\SqlExpression $trackingLastChange)
	 * @method bool hasTrackingLastChange()
	 * @method bool isTrackingLastChangeFilled()
	 * @method bool isTrackingLastChangeChanged()
	 * @method \Bitrix\Main\Type\DateTime remindActualTrackingLastChange()
	 * @method \Bitrix\Main\Type\DateTime requireTrackingLastChange()
	 * @method \Bitrix\Sale\Internals\EO_Shipment resetTrackingLastChange()
	 * @method \Bitrix\Sale\Internals\EO_Shipment unsetTrackingLastChange()
	 * @method \Bitrix\Main\Type\DateTime fillTrackingLastChange()
	 * @method \string getXmlId()
	 * @method \Bitrix\Sale\Internals\EO_Shipment setXmlId(\string|\Bitrix\Main\DB\SqlExpression $xmlId)
	 * @method bool hasXmlId()
	 * @method bool isXmlIdFilled()
	 * @method bool isXmlIdChanged()
	 * @method \string remindActualXmlId()
	 * @method \string requireXmlId()
	 * @method \Bitrix\Sale\Internals\EO_Shipment resetXmlId()
	 * @method \Bitrix\Sale\Internals\EO_Shipment unsetXmlId()
	 * @method \string fillXmlId()
	 * @method \string getParams()
	 * @method \Bitrix\Sale\Internals\EO_Shipment setParams(\string|\Bitrix\Main\DB\SqlExpression $params)
	 * @method bool hasParams()
	 * @method bool isParamsFilled()
	 * @method bool isParamsChanged()
	 * @method \string remindActualParams()
	 * @method \string requireParams()
	 * @method \Bitrix\Sale\Internals\EO_Shipment resetParams()
	 * @method \Bitrix\Sale\Internals\EO_Shipment unsetParams()
	 * @method \string fillParams()
	 * @method \string getDeliveryName()
	 * @method \Bitrix\Sale\Internals\EO_Shipment setDeliveryName(\string|\Bitrix\Main\DB\SqlExpression $deliveryName)
	 * @method bool hasDeliveryName()
	 * @method bool isDeliveryNameFilled()
	 * @method bool isDeliveryNameChanged()
	 * @method \string remindActualDeliveryName()
	 * @method \string requireDeliveryName()
	 * @method \Bitrix\Sale\Internals\EO_Shipment resetDeliveryName()
	 * @method \Bitrix\Sale\Internals\EO_Shipment unsetDeliveryName()
	 * @method \string fillDeliveryName()
	 * @method \boolean getCanceled()
	 * @method \Bitrix\Sale\Internals\EO_Shipment setCanceled(\boolean|\Bitrix\Main\DB\SqlExpression $canceled)
	 * @method bool hasCanceled()
	 * @method bool isCanceledFilled()
	 * @method bool isCanceledChanged()
	 * @method \boolean remindActualCanceled()
	 * @method \boolean requireCanceled()
	 * @method \Bitrix\Sale\Internals\EO_Shipment resetCanceled()
	 * @method \Bitrix\Sale\Internals\EO_Shipment unsetCanceled()
	 * @method \boolean fillCanceled()
	 * @method \Bitrix\Main\Type\DateTime getDateCanceled()
	 * @method \Bitrix\Sale\Internals\EO_Shipment setDateCanceled(\Bitrix\Main\Type\DateTime|\Bitrix\Main\DB\SqlExpression $dateCanceled)
	 * @method bool hasDateCanceled()
	 * @method bool isDateCanceledFilled()
	 * @method bool isDateCanceledChanged()
	 * @method \Bitrix\Main\Type\DateTime remindActualDateCanceled()
	 * @method \Bitrix\Main\Type\DateTime requireDateCanceled()
	 * @method \Bitrix\Sale\Internals\EO_Shipment resetDateCanceled()
	 * @method \Bitrix\Sale\Internals\EO_Shipment unsetDateCanceled()
	 * @method \Bitrix\Main\Type\DateTime fillDateCanceled()
	 * @method \int getEmpCanceledId()
	 * @method \Bitrix\Sale\Internals\EO_Shipment setEmpCanceledId(\int|\Bitrix\Main\DB\SqlExpression $empCanceledId)
	 * @method bool hasEmpCanceledId()
	 * @method bool isEmpCanceledIdFilled()
	 * @method bool isEmpCanceledIdChanged()
	 * @method \int remindActualEmpCanceledId()
	 * @method \int requireEmpCanceledId()
	 * @method \Bitrix\Sale\Internals\EO_Shipment resetEmpCanceledId()
	 * @method \Bitrix\Sale\Internals\EO_Shipment unsetEmpCanceledId()
	 * @method \int fillEmpCanceledId()
	 * @method \string getReasonCanceled()
	 * @method \Bitrix\Sale\Internals\EO_Shipment setReasonCanceled(\string|\Bitrix\Main\DB\SqlExpression $reasonCanceled)
	 * @method bool hasReasonCanceled()
	 * @method bool isReasonCanceledFilled()
	 * @method bool isReasonCanceledChanged()
	 * @method \string remindActualReasonCanceled()
	 * @method \string requireReasonCanceled()
	 * @method \Bitrix\Sale\Internals\EO_Shipment resetReasonCanceled()
	 * @method \Bitrix\Sale\Internals\EO_Shipment unsetReasonCanceled()
	 * @method \string fillReasonCanceled()
	 * @method \Bitrix\Main\EO_User getEmpCanceledBy()
	 * @method \Bitrix\Main\EO_User remindActualEmpCanceledBy()
	 * @method \Bitrix\Main\EO_User requireEmpCanceledBy()
	 * @method \Bitrix\Sale\Internals\EO_Shipment setEmpCanceledBy(\Bitrix\Main\EO_User $object)
	 * @method \Bitrix\Sale\Internals\EO_Shipment resetEmpCanceledBy()
	 * @method \Bitrix\Sale\Internals\EO_Shipment unsetEmpCanceledBy()
	 * @method bool hasEmpCanceledBy()
	 * @method bool isEmpCanceledByFilled()
	 * @method bool isEmpCanceledByChanged()
	 * @method \Bitrix\Main\EO_User fillEmpCanceledBy()
	 * @method \boolean getMarked()
	 * @method \Bitrix\Sale\Internals\EO_Shipment setMarked(\boolean|\Bitrix\Main\DB\SqlExpression $marked)
	 * @method bool hasMarked()
	 * @method bool isMarkedFilled()
	 * @method bool isMarkedChanged()
	 * @method \boolean remindActualMarked()
	 * @method \boolean requireMarked()
	 * @method \Bitrix\Sale\Internals\EO_Shipment resetMarked()
	 * @method \Bitrix\Sale\Internals\EO_Shipment unsetMarked()
	 * @method \boolean fillMarked()
	 * @method \Bitrix\Main\Type\DateTime getDateMarked()
	 * @method \Bitrix\Sale\Internals\EO_Shipment setDateMarked(\Bitrix\Main\Type\DateTime|\Bitrix\Main\DB\SqlExpression $dateMarked)
	 * @method bool hasDateMarked()
	 * @method bool isDateMarkedFilled()
	 * @method bool isDateMarkedChanged()
	 * @method \Bitrix\Main\Type\DateTime remindActualDateMarked()
	 * @method \Bitrix\Main\Type\DateTime requireDateMarked()
	 * @method \Bitrix\Sale\Internals\EO_Shipment resetDateMarked()
	 * @method \Bitrix\Sale\Internals\EO_Shipment unsetDateMarked()
	 * @method \Bitrix\Main\Type\DateTime fillDateMarked()
	 * @method \int getEmpMarkedId()
	 * @method \Bitrix\Sale\Internals\EO_Shipment setEmpMarkedId(\int|\Bitrix\Main\DB\SqlExpression $empMarkedId)
	 * @method bool hasEmpMarkedId()
	 * @method bool isEmpMarkedIdFilled()
	 * @method bool isEmpMarkedIdChanged()
	 * @method \int remindActualEmpMarkedId()
	 * @method \int requireEmpMarkedId()
	 * @method \Bitrix\Sale\Internals\EO_Shipment resetEmpMarkedId()
	 * @method \Bitrix\Sale\Internals\EO_Shipment unsetEmpMarkedId()
	 * @method \int fillEmpMarkedId()
	 * @method \Bitrix\Main\EO_User getEmpMarkedBy()
	 * @method \Bitrix\Main\EO_User remindActualEmpMarkedBy()
	 * @method \Bitrix\Main\EO_User requireEmpMarkedBy()
	 * @method \Bitrix\Sale\Internals\EO_Shipment setEmpMarkedBy(\Bitrix\Main\EO_User $object)
	 * @method \Bitrix\Sale\Internals\EO_Shipment resetEmpMarkedBy()
	 * @method \Bitrix\Sale\Internals\EO_Shipment unsetEmpMarkedBy()
	 * @method bool hasEmpMarkedBy()
	 * @method bool isEmpMarkedByFilled()
	 * @method bool isEmpMarkedByChanged()
	 * @method \Bitrix\Main\EO_User fillEmpMarkedBy()
	 * @method \string getReasonMarked()
	 * @method \Bitrix\Sale\Internals\EO_Shipment setReasonMarked(\string|\Bitrix\Main\DB\SqlExpression $reasonMarked)
	 * @method bool hasReasonMarked()
	 * @method bool isReasonMarkedFilled()
	 * @method bool isReasonMarkedChanged()
	 * @method \string remindActualReasonMarked()
	 * @method \string requireReasonMarked()
	 * @method \Bitrix\Sale\Internals\EO_Shipment resetReasonMarked()
	 * @method \Bitrix\Sale\Internals\EO_Shipment unsetReasonMarked()
	 * @method \string fillReasonMarked()
	 * @method \boolean getSystem()
	 * @method \Bitrix\Sale\Internals\EO_Shipment setSystem(\boolean|\Bitrix\Main\DB\SqlExpression $system)
	 * @method bool hasSystem()
	 * @method bool isSystemFilled()
	 * @method bool isSystemChanged()
	 * @method \boolean remindActualSystem()
	 * @method \boolean requireSystem()
	 * @method \Bitrix\Sale\Internals\EO_Shipment resetSystem()
	 * @method \Bitrix\Sale\Internals\EO_Shipment unsetSystem()
	 * @method \boolean fillSystem()
	 * @method \int getResponsibleId()
	 * @method \Bitrix\Sale\Internals\EO_Shipment setResponsibleId(\int|\Bitrix\Main\DB\SqlExpression $responsibleId)
	 * @method bool hasResponsibleId()
	 * @method bool isResponsibleIdFilled()
	 * @method bool isResponsibleIdChanged()
	 * @method \int remindActualResponsibleId()
	 * @method \int requireResponsibleId()
	 * @method \Bitrix\Sale\Internals\EO_Shipment resetResponsibleId()
	 * @method \Bitrix\Sale\Internals\EO_Shipment unsetResponsibleId()
	 * @method \int fillResponsibleId()
	 * @method \Bitrix\Main\EO_User getResponsibleBy()
	 * @method \Bitrix\Main\EO_User remindActualResponsibleBy()
	 * @method \Bitrix\Main\EO_User requireResponsibleBy()
	 * @method \Bitrix\Sale\Internals\EO_Shipment setResponsibleBy(\Bitrix\Main\EO_User $object)
	 * @method \Bitrix\Sale\Internals\EO_Shipment resetResponsibleBy()
	 * @method \Bitrix\Sale\Internals\EO_Shipment unsetResponsibleBy()
	 * @method bool hasResponsibleBy()
	 * @method bool isResponsibleByFilled()
	 * @method bool isResponsibleByChanged()
	 * @method \Bitrix\Main\EO_User fillResponsibleBy()
	 * @method \int getEmpResponsibleId()
	 * @method \Bitrix\Sale\Internals\EO_Shipment setEmpResponsibleId(\int|\Bitrix\Main\DB\SqlExpression $empResponsibleId)
	 * @method bool hasEmpResponsibleId()
	 * @method bool isEmpResponsibleIdFilled()
	 * @method bool isEmpResponsibleIdChanged()
	 * @method \int remindActualEmpResponsibleId()
	 * @method \int requireEmpResponsibleId()
	 * @method \Bitrix\Sale\Internals\EO_Shipment resetEmpResponsibleId()
	 * @method \Bitrix\Sale\Internals\EO_Shipment unsetEmpResponsibleId()
	 * @method \int fillEmpResponsibleId()
	 * @method \Bitrix\Main\EO_User getEmpResponsibleBy()
	 * @method \Bitrix\Main\EO_User remindActualEmpResponsibleBy()
	 * @method \Bitrix\Main\EO_User requireEmpResponsibleBy()
	 * @method \Bitrix\Sale\Internals\EO_Shipment setEmpResponsibleBy(\Bitrix\Main\EO_User $object)
	 * @method \Bitrix\Sale\Internals\EO_Shipment resetEmpResponsibleBy()
	 * @method \Bitrix\Sale\Internals\EO_Shipment unsetEmpResponsibleBy()
	 * @method bool hasEmpResponsibleBy()
	 * @method bool isEmpResponsibleByFilled()
	 * @method bool isEmpResponsibleByChanged()
	 * @method \Bitrix\Main\EO_User fillEmpResponsibleBy()
	 * @method \Bitrix\Main\Type\DateTime getDateResponsibleId()
	 * @method \Bitrix\Sale\Internals\EO_Shipment setDateResponsibleId(\Bitrix\Main\Type\DateTime|\Bitrix\Main\DB\SqlExpression $dateResponsibleId)
	 * @method bool hasDateResponsibleId()
	 * @method bool isDateResponsibleIdFilled()
	 * @method bool isDateResponsibleIdChanged()
	 * @method \Bitrix\Main\Type\DateTime remindActualDateResponsibleId()
	 * @method \Bitrix\Main\Type\DateTime requireDateResponsibleId()
	 * @method \Bitrix\Sale\Internals\EO_Shipment resetDateResponsibleId()
	 * @method \Bitrix\Sale\Internals\EO_Shipment unsetDateResponsibleId()
	 * @method \Bitrix\Main\Type\DateTime fillDateResponsibleId()
	 * @method \string getComments()
	 * @method \Bitrix\Sale\Internals\EO_Shipment setComments(\string|\Bitrix\Main\DB\SqlExpression $comments)
	 * @method bool hasComments()
	 * @method bool isCommentsFilled()
	 * @method bool isCommentsChanged()
	 * @method \string remindActualComments()
	 * @method \string requireComments()
	 * @method \Bitrix\Sale\Internals\EO_Shipment resetComments()
	 * @method \Bitrix\Sale\Internals\EO_Shipment unsetComments()
	 * @method \string fillComments()
	 * @method \int getCompanyId()
	 * @method \Bitrix\Sale\Internals\EO_Shipment setCompanyId(\int|\Bitrix\Main\DB\SqlExpression $companyId)
	 * @method bool hasCompanyId()
	 * @method bool isCompanyIdFilled()
	 * @method bool isCompanyIdChanged()
	 * @method \int remindActualCompanyId()
	 * @method \int requireCompanyId()
	 * @method \Bitrix\Sale\Internals\EO_Shipment resetCompanyId()
	 * @method \Bitrix\Sale\Internals\EO_Shipment unsetCompanyId()
	 * @method \int fillCompanyId()
	 * @method \Bitrix\Sale\Internals\EO_Company getCompanyBy()
	 * @method \Bitrix\Sale\Internals\EO_Company remindActualCompanyBy()
	 * @method \Bitrix\Sale\Internals\EO_Company requireCompanyBy()
	 * @method \Bitrix\Sale\Internals\EO_Shipment setCompanyBy(\Bitrix\Sale\Internals\EO_Company $object)
	 * @method \Bitrix\Sale\Internals\EO_Shipment resetCompanyBy()
	 * @method \Bitrix\Sale\Internals\EO_Shipment unsetCompanyBy()
	 * @method bool hasCompanyBy()
	 * @method bool isCompanyByFilled()
	 * @method bool isCompanyByChanged()
	 * @method \Bitrix\Sale\Internals\EO_Company fillCompanyBy()
	 * @method \Bitrix\Sale\Internals\EO_Status getStatus()
	 * @method \Bitrix\Sale\Internals\EO_Status remindActualStatus()
	 * @method \Bitrix\Sale\Internals\EO_Status requireStatus()
	 * @method \Bitrix\Sale\Internals\EO_Shipment setStatus(\Bitrix\Sale\Internals\EO_Status $object)
	 * @method \Bitrix\Sale\Internals\EO_Shipment resetStatus()
	 * @method \Bitrix\Sale\Internals\EO_Shipment unsetStatus()
	 * @method bool hasStatus()
	 * @method bool isStatusFilled()
	 * @method bool isStatusChanged()
	 * @method \Bitrix\Sale\Internals\EO_Status fillStatus()
	 * @method \Bitrix\Sale\Internals\EO_ShipmentItem getShipmentItem()
	 * @method \Bitrix\Sale\Internals\EO_ShipmentItem remindActualShipmentItem()
	 * @method \Bitrix\Sale\Internals\EO_ShipmentItem requireShipmentItem()
	 * @method \Bitrix\Sale\Internals\EO_Shipment setShipmentItem(\Bitrix\Sale\Internals\EO_ShipmentItem $object)
	 * @method \Bitrix\Sale\Internals\EO_Shipment resetShipmentItem()
	 * @method \Bitrix\Sale\Internals\EO_Shipment unsetShipmentItem()
	 * @method bool hasShipmentItem()
	 * @method bool isShipmentItemFilled()
	 * @method bool isShipmentItemChanged()
	 * @method \Bitrix\Sale\Internals\EO_ShipmentItem fillShipmentItem()
	 * @method \boolean getUpdated1c()
	 * @method \Bitrix\Sale\Internals\EO_Shipment setUpdated1c(\boolean|\Bitrix\Main\DB\SqlExpression $updated1c)
	 * @method bool hasUpdated1c()
	 * @method bool isUpdated1cFilled()
	 * @method bool isUpdated1cChanged()
	 * @method \boolean remindActualUpdated1c()
	 * @method \boolean requireUpdated1c()
	 * @method \Bitrix\Sale\Internals\EO_Shipment resetUpdated1c()
	 * @method \Bitrix\Sale\Internals\EO_Shipment unsetUpdated1c()
	 * @method \boolean fillUpdated1c()
	 * @method \string getId1c()
	 * @method \Bitrix\Sale\Internals\EO_Shipment setId1c(\string|\Bitrix\Main\DB\SqlExpression $id1c)
	 * @method bool hasId1c()
	 * @method bool isId1cFilled()
	 * @method bool isId1cChanged()
	 * @method \string remindActualId1c()
	 * @method \string requireId1c()
	 * @method \Bitrix\Sale\Internals\EO_Shipment resetId1c()
	 * @method \Bitrix\Sale\Internals\EO_Shipment unsetId1c()
	 * @method \string fillId1c()
	 * @method \string getVersion1c()
	 * @method \Bitrix\Sale\Internals\EO_Shipment setVersion1c(\string|\Bitrix\Main\DB\SqlExpression $version1c)
	 * @method bool hasVersion1c()
	 * @method bool isVersion1cFilled()
	 * @method bool isVersion1cChanged()
	 * @method \string remindActualVersion1c()
	 * @method \string requireVersion1c()
	 * @method \Bitrix\Sale\Internals\EO_Shipment resetVersion1c()
	 * @method \Bitrix\Sale\Internals\EO_Shipment unsetVersion1c()
	 * @method \string fillVersion1c()
	 * @method \boolean getExternalDelivery()
	 * @method \Bitrix\Sale\Internals\EO_Shipment setExternalDelivery(\boolean|\Bitrix\Main\DB\SqlExpression $externalDelivery)
	 * @method bool hasExternalDelivery()
	 * @method bool isExternalDeliveryFilled()
	 * @method bool isExternalDeliveryChanged()
	 * @method \boolean remindActualExternalDelivery()
	 * @method \boolean requireExternalDelivery()
	 * @method \Bitrix\Sale\Internals\EO_Shipment resetExternalDelivery()
	 * @method \Bitrix\Sale\Internals\EO_Shipment unsetExternalDelivery()
	 * @method \boolean fillExternalDelivery()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Sale\Internals\EO_Shipment set($fieldName, $value)
	 * @method \Bitrix\Sale\Internals\EO_Shipment reset($fieldName)
	 * @method \Bitrix\Sale\Internals\EO_Shipment unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Sale\Internals\EO_Shipment wakeUp($data)
	 */
	class EO_Shipment {
		/* @var \Bitrix\Sale\Internals\ShipmentTable */
		static public $dataClass = '\Bitrix\Sale\Internals\ShipmentTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Sale\Internals {
	/**
	 * EO_Shipment_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getIdList()
	 * @method \int[] getOrderIdList()
	 * @method \int[] fillOrderId()
	 * @method \string[] getAccountNumberList()
	 * @method \string[] fillAccountNumber()
	 * @method \Bitrix\Sale\Internals\EO_Order[] getOrderList()
	 * @method \Bitrix\Sale\Internals\EO_Shipment_Collection getOrderCollection()
	 * @method \Bitrix\Sale\Internals\EO_Order_Collection fillOrder()
	 * @method \Bitrix\Main\Type\DateTime[] getDateInsertList()
	 * @method \Bitrix\Main\Type\DateTime[] fillDateInsert()
	 * @method \Bitrix\Main\Type\DateTime[] getDateUpdateList()
	 * @method \Bitrix\Main\Type\DateTime[] fillDateUpdate()
	 * @method \string[] getDateInsertShortList()
	 * @method \string[] fillDateInsertShort()
	 * @method \string[] getStatusIdList()
	 * @method \string[] fillStatusId()
	 * @method \string[] getDeliveryLocationList()
	 * @method \string[] fillDeliveryLocation()
	 * @method \float[] getBasePriceDeliveryList()
	 * @method \float[] fillBasePriceDelivery()
	 * @method \float[] getPriceDeliveryList()
	 * @method \float[] fillPriceDelivery()
	 * @method \float[] getWeightList()
	 * @method \float[] fillWeight()
	 * @method \boolean[] getCustomPriceDeliveryList()
	 * @method \boolean[] fillCustomPriceDelivery()
	 * @method \string[] getCurrencyList()
	 * @method \string[] fillCurrency()
	 * @method \float[] getDiscountPriceList()
	 * @method \float[] fillDiscountPrice()
	 * @method \boolean[] getAllowDeliveryList()
	 * @method \boolean[] fillAllowDelivery()
	 * @method \Bitrix\Main\Type\DateTime[] getDateAllowDeliveryList()
	 * @method \Bitrix\Main\Type\DateTime[] fillDateAllowDelivery()
	 * @method \string[] getDateAllowDeliveryShortList()
	 * @method \string[] fillDateAllowDeliveryShort()
	 * @method \int[] getEmpAllowDeliveryIdList()
	 * @method \int[] fillEmpAllowDeliveryId()
	 * @method \Bitrix\Main\EO_User[] getEmpAllowDeliveryByList()
	 * @method \Bitrix\Sale\Internals\EO_Shipment_Collection getEmpAllowDeliveryByCollection()
	 * @method \Bitrix\Main\EO_User_Collection fillEmpAllowDeliveryBy()
	 * @method \boolean[] getDeductedList()
	 * @method \boolean[] fillDeducted()
	 * @method \Bitrix\Main\Type\DateTime[] getDateDeductedList()
	 * @method \Bitrix\Main\Type\DateTime[] fillDateDeducted()
	 * @method \string[] getDateDeductedShortList()
	 * @method \string[] fillDateDeductedShort()
	 * @method \int[] getEmpDeductedIdList()
	 * @method \int[] fillEmpDeductedId()
	 * @method \Bitrix\Main\EO_User[] getEmpDeductedByList()
	 * @method \Bitrix\Sale\Internals\EO_Shipment_Collection getEmpDeductedByCollection()
	 * @method \Bitrix\Main\EO_User_Collection fillEmpDeductedBy()
	 * @method \string[] getReasonUndoDeductedList()
	 * @method \string[] fillReasonUndoDeducted()
	 * @method \boolean[] getReservedList()
	 * @method \boolean[] fillReserved()
	 * @method \int[] getDeliveryIdList()
	 * @method \int[] fillDeliveryId()
	 * @method \Bitrix\Sale\Delivery\Services\EO_NNM_Object[] getDeliveryList()
	 * @method \Bitrix\Sale\Internals\EO_Shipment_Collection getDeliveryCollection()
	 * @method \Bitrix\Sale\Delivery\Services\EO__Collection fillDelivery()
	 * @method \string[] getDeliveryDocNumList()
	 * @method \string[] fillDeliveryDocNum()
	 * @method \Bitrix\Main\Type\DateTime[] getDeliveryDocDateList()
	 * @method \Bitrix\Main\Type\DateTime[] fillDeliveryDocDate()
	 * @method \string[] getDeliveryDocDateShortList()
	 * @method \string[] fillDeliveryDocDateShort()
	 * @method \string[] getTrackingNumberList()
	 * @method \string[] fillTrackingNumber()
	 * @method \int[] getTrackingStatusList()
	 * @method \int[] fillTrackingStatus()
	 * @method \string[] getTrackingDescriptionList()
	 * @method \string[] fillTrackingDescription()
	 * @method \Bitrix\Main\Type\DateTime[] getTrackingLastCheckList()
	 * @method \Bitrix\Main\Type\DateTime[] fillTrackingLastCheck()
	 * @method \Bitrix\Main\Type\DateTime[] getTrackingLastChangeList()
	 * @method \Bitrix\Main\Type\DateTime[] fillTrackingLastChange()
	 * @method \string[] getXmlIdList()
	 * @method \string[] fillXmlId()
	 * @method \string[] getParamsList()
	 * @method \string[] fillParams()
	 * @method \string[] getDeliveryNameList()
	 * @method \string[] fillDeliveryName()
	 * @method \boolean[] getCanceledList()
	 * @method \boolean[] fillCanceled()
	 * @method \Bitrix\Main\Type\DateTime[] getDateCanceledList()
	 * @method \Bitrix\Main\Type\DateTime[] fillDateCanceled()
	 * @method \int[] getEmpCanceledIdList()
	 * @method \int[] fillEmpCanceledId()
	 * @method \string[] getReasonCanceledList()
	 * @method \string[] fillReasonCanceled()
	 * @method \Bitrix\Main\EO_User[] getEmpCanceledByList()
	 * @method \Bitrix\Sale\Internals\EO_Shipment_Collection getEmpCanceledByCollection()
	 * @method \Bitrix\Main\EO_User_Collection fillEmpCanceledBy()
	 * @method \boolean[] getMarkedList()
	 * @method \boolean[] fillMarked()
	 * @method \Bitrix\Main\Type\DateTime[] getDateMarkedList()
	 * @method \Bitrix\Main\Type\DateTime[] fillDateMarked()
	 * @method \int[] getEmpMarkedIdList()
	 * @method \int[] fillEmpMarkedId()
	 * @method \Bitrix\Main\EO_User[] getEmpMarkedByList()
	 * @method \Bitrix\Sale\Internals\EO_Shipment_Collection getEmpMarkedByCollection()
	 * @method \Bitrix\Main\EO_User_Collection fillEmpMarkedBy()
	 * @method \string[] getReasonMarkedList()
	 * @method \string[] fillReasonMarked()
	 * @method \boolean[] getSystemList()
	 * @method \boolean[] fillSystem()
	 * @method \int[] getResponsibleIdList()
	 * @method \int[] fillResponsibleId()
	 * @method \Bitrix\Main\EO_User[] getResponsibleByList()
	 * @method \Bitrix\Sale\Internals\EO_Shipment_Collection getResponsibleByCollection()
	 * @method \Bitrix\Main\EO_User_Collection fillResponsibleBy()
	 * @method \int[] getEmpResponsibleIdList()
	 * @method \int[] fillEmpResponsibleId()
	 * @method \Bitrix\Main\EO_User[] getEmpResponsibleByList()
	 * @method \Bitrix\Sale\Internals\EO_Shipment_Collection getEmpResponsibleByCollection()
	 * @method \Bitrix\Main\EO_User_Collection fillEmpResponsibleBy()
	 * @method \Bitrix\Main\Type\DateTime[] getDateResponsibleIdList()
	 * @method \Bitrix\Main\Type\DateTime[] fillDateResponsibleId()
	 * @method \string[] getCommentsList()
	 * @method \string[] fillComments()
	 * @method \int[] getCompanyIdList()
	 * @method \int[] fillCompanyId()
	 * @method \Bitrix\Sale\Internals\EO_Company[] getCompanyByList()
	 * @method \Bitrix\Sale\Internals\EO_Shipment_Collection getCompanyByCollection()
	 * @method \Bitrix\Sale\Internals\EO_Company_Collection fillCompanyBy()
	 * @method \Bitrix\Sale\Internals\EO_Status[] getStatusList()
	 * @method \Bitrix\Sale\Internals\EO_Shipment_Collection getStatusCollection()
	 * @method \Bitrix\Sale\Internals\EO_Status_Collection fillStatus()
	 * @method \Bitrix\Sale\Internals\EO_ShipmentItem[] getShipmentItemList()
	 * @method \Bitrix\Sale\Internals\EO_Shipment_Collection getShipmentItemCollection()
	 * @method \Bitrix\Sale\Internals\EO_ShipmentItem_Collection fillShipmentItem()
	 * @method \boolean[] getUpdated1cList()
	 * @method \boolean[] fillUpdated1c()
	 * @method \string[] getId1cList()
	 * @method \string[] fillId1c()
	 * @method \string[] getVersion1cList()
	 * @method \string[] fillVersion1c()
	 * @method \boolean[] getExternalDeliveryList()
	 * @method \boolean[] fillExternalDelivery()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Sale\Internals\EO_Shipment $object)
	 * @method bool has(\Bitrix\Sale\Internals\EO_Shipment $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Sale\Internals\EO_Shipment getByPrimary($primary)
	 * @method \Bitrix\Sale\Internals\EO_Shipment[] getAll()
	 * @method bool remove(\Bitrix\Sale\Internals\EO_Shipment $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Sale\Internals\EO_Shipment_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Sale\Internals\EO_Shipment current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 * @method EO_Shipment_Collection merge(?EO_Shipment_Collection $collection)
	 * @method bool isEmpty()
	 */
	class EO_Shipment_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Sale\Internals\ShipmentTable */
		static public $dataClass = '\Bitrix\Sale\Internals\ShipmentTable';
	}
}
namespace Bitrix\Sale\Internals {
	/**
	 * Common methods:
	 * ---------------
	 *
	 * @method EO_Shipment_Result exec()
	 * @method \Bitrix\Sale\Internals\EO_Shipment fetchObject()
	 * @method \Bitrix\Sale\Internals\EO_Shipment_Collection fetchCollection()
	 *
	 * Custom methods:
	 * ---------------
	 *
	 */
	class EO_Shipment_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Sale\Internals\EO_Shipment fetchObject()
	 * @method \Bitrix\Sale\Internals\EO_Shipment_Collection fetchCollection()
	 */
	class EO_Shipment_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Sale\Internals\EO_Shipment createObject($setDefaultValues = true)
	 * @method \Bitrix\Sale\Internals\EO_Shipment_Collection createCollection()
	 * @method \Bitrix\Sale\Internals\EO_Shipment wakeUpObject($row)
	 * @method \Bitrix\Sale\Internals\EO_Shipment_Collection wakeUpCollection($rows)
	 */
	class EO_Shipment_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Sale\Internals\ShipmentExtraServiceTable:sale\lib\internals\shipmentextraservice.php */
namespace Bitrix\Sale\Internals {
	/**
	 * EO_ShipmentExtraService
	 * @see \Bitrix\Sale\Internals\ShipmentExtraServiceTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getId()
	 * @method \Bitrix\Sale\Internals\EO_ShipmentExtraService setId(\int|\Bitrix\Main\DB\SqlExpression $id)
	 * @method bool hasId()
	 * @method bool isIdFilled()
	 * @method bool isIdChanged()
	 * @method \int getShipmentId()
	 * @method \Bitrix\Sale\Internals\EO_ShipmentExtraService setShipmentId(\int|\Bitrix\Main\DB\SqlExpression $shipmentId)
	 * @method bool hasShipmentId()
	 * @method bool isShipmentIdFilled()
	 * @method bool isShipmentIdChanged()
	 * @method \int remindActualShipmentId()
	 * @method \int requireShipmentId()
	 * @method \Bitrix\Sale\Internals\EO_ShipmentExtraService resetShipmentId()
	 * @method \Bitrix\Sale\Internals\EO_ShipmentExtraService unsetShipmentId()
	 * @method \int fillShipmentId()
	 * @method \int getExtraServiceId()
	 * @method \Bitrix\Sale\Internals\EO_ShipmentExtraService setExtraServiceId(\int|\Bitrix\Main\DB\SqlExpression $extraServiceId)
	 * @method bool hasExtraServiceId()
	 * @method bool isExtraServiceIdFilled()
	 * @method bool isExtraServiceIdChanged()
	 * @method \int remindActualExtraServiceId()
	 * @method \int requireExtraServiceId()
	 * @method \Bitrix\Sale\Internals\EO_ShipmentExtraService resetExtraServiceId()
	 * @method \Bitrix\Sale\Internals\EO_ShipmentExtraService unsetExtraServiceId()
	 * @method \int fillExtraServiceId()
	 * @method \string getValue()
	 * @method \Bitrix\Sale\Internals\EO_ShipmentExtraService setValue(\string|\Bitrix\Main\DB\SqlExpression $value)
	 * @method bool hasValue()
	 * @method bool isValueFilled()
	 * @method bool isValueChanged()
	 * @method \string remindActualValue()
	 * @method \string requireValue()
	 * @method \Bitrix\Sale\Internals\EO_ShipmentExtraService resetValue()
	 * @method \Bitrix\Sale\Internals\EO_ShipmentExtraService unsetValue()
	 * @method \string fillValue()
	 * @method \Bitrix\Sale\Delivery\ExtraServices\EO_NNM_Object getExtraService()
	 * @method \Bitrix\Sale\Delivery\ExtraServices\EO_NNM_Object remindActualExtraService()
	 * @method \Bitrix\Sale\Delivery\ExtraServices\EO_NNM_Object requireExtraService()
	 * @method \Bitrix\Sale\Internals\EO_ShipmentExtraService setExtraService(\Bitrix\Sale\Delivery\ExtraServices\EO_NNM_Object $object)
	 * @method \Bitrix\Sale\Internals\EO_ShipmentExtraService resetExtraService()
	 * @method \Bitrix\Sale\Internals\EO_ShipmentExtraService unsetExtraService()
	 * @method bool hasExtraService()
	 * @method bool isExtraServiceFilled()
	 * @method bool isExtraServiceChanged()
	 * @method \Bitrix\Sale\Delivery\ExtraServices\EO_NNM_Object fillExtraService()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Sale\Internals\EO_ShipmentExtraService set($fieldName, $value)
	 * @method \Bitrix\Sale\Internals\EO_ShipmentExtraService reset($fieldName)
	 * @method \Bitrix\Sale\Internals\EO_ShipmentExtraService unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Sale\Internals\EO_ShipmentExtraService wakeUp($data)
	 */
	class EO_ShipmentExtraService {
		/* @var \Bitrix\Sale\Internals\ShipmentExtraServiceTable */
		static public $dataClass = '\Bitrix\Sale\Internals\ShipmentExtraServiceTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Sale\Internals {
	/**
	 * EO_ShipmentExtraService_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getIdList()
	 * @method \int[] getShipmentIdList()
	 * @method \int[] fillShipmentId()
	 * @method \int[] getExtraServiceIdList()
	 * @method \int[] fillExtraServiceId()
	 * @method \string[] getValueList()
	 * @method \string[] fillValue()
	 * @method \Bitrix\Sale\Delivery\ExtraServices\EO_NNM_Object[] getExtraServiceList()
	 * @method \Bitrix\Sale\Internals\EO_ShipmentExtraService_Collection getExtraServiceCollection()
	 * @method \Bitrix\Sale\Delivery\ExtraServices\EO__Collection fillExtraService()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Sale\Internals\EO_ShipmentExtraService $object)
	 * @method bool has(\Bitrix\Sale\Internals\EO_ShipmentExtraService $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Sale\Internals\EO_ShipmentExtraService getByPrimary($primary)
	 * @method \Bitrix\Sale\Internals\EO_ShipmentExtraService[] getAll()
	 * @method bool remove(\Bitrix\Sale\Internals\EO_ShipmentExtraService $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Sale\Internals\EO_ShipmentExtraService_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Sale\Internals\EO_ShipmentExtraService current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 * @method EO_ShipmentExtraService_Collection merge(?EO_ShipmentExtraService_Collection $collection)
	 * @method bool isEmpty()
	 */
	class EO_ShipmentExtraService_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Sale\Internals\ShipmentExtraServiceTable */
		static public $dataClass = '\Bitrix\Sale\Internals\ShipmentExtraServiceTable';
	}
}
namespace Bitrix\Sale\Internals {
	/**
	 * Common methods:
	 * ---------------
	 *
	 * @method EO_ShipmentExtraService_Result exec()
	 * @method \Bitrix\Sale\Internals\EO_ShipmentExtraService fetchObject()
	 * @method \Bitrix\Sale\Internals\EO_ShipmentExtraService_Collection fetchCollection()
	 *
	 * Custom methods:
	 * ---------------
	 *
	 */
	class EO_ShipmentExtraService_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Sale\Internals\EO_ShipmentExtraService fetchObject()
	 * @method \Bitrix\Sale\Internals\EO_ShipmentExtraService_Collection fetchCollection()
	 */
	class EO_ShipmentExtraService_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Sale\Internals\EO_ShipmentExtraService createObject($setDefaultValues = true)
	 * @method \Bitrix\Sale\Internals\EO_ShipmentExtraService_Collection createCollection()
	 * @method \Bitrix\Sale\Internals\EO_ShipmentExtraService wakeUpObject($row)
	 * @method \Bitrix\Sale\Internals\EO_ShipmentExtraService_Collection wakeUpCollection($rows)
	 */
	class EO_ShipmentExtraService_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Sale\Internals\ShipmentItemTable:sale\lib\internals\shipmentitem.php */
namespace Bitrix\Sale\Internals {
	/**
	 * EO_ShipmentItem
	 * @see \Bitrix\Sale\Internals\ShipmentItemTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getId()
	 * @method \Bitrix\Sale\Internals\EO_ShipmentItem setId(\int|\Bitrix\Main\DB\SqlExpression $id)
	 * @method bool hasId()
	 * @method bool isIdFilled()
	 * @method bool isIdChanged()
	 * @method \int getOrderDeliveryId()
	 * @method \Bitrix\Sale\Internals\EO_ShipmentItem setOrderDeliveryId(\int|\Bitrix\Main\DB\SqlExpression $orderDeliveryId)
	 * @method bool hasOrderDeliveryId()
	 * @method bool isOrderDeliveryIdFilled()
	 * @method bool isOrderDeliveryIdChanged()
	 * @method \int remindActualOrderDeliveryId()
	 * @method \int requireOrderDeliveryId()
	 * @method \Bitrix\Sale\Internals\EO_ShipmentItem resetOrderDeliveryId()
	 * @method \Bitrix\Sale\Internals\EO_ShipmentItem unsetOrderDeliveryId()
	 * @method \int fillOrderDeliveryId()
	 * @method \Bitrix\Sale\Internals\EO_Shipment getDelivery()
	 * @method \Bitrix\Sale\Internals\EO_Shipment remindActualDelivery()
	 * @method \Bitrix\Sale\Internals\EO_Shipment requireDelivery()
	 * @method \Bitrix\Sale\Internals\EO_ShipmentItem setDelivery(\Bitrix\Sale\Internals\EO_Shipment $object)
	 * @method \Bitrix\Sale\Internals\EO_ShipmentItem resetDelivery()
	 * @method \Bitrix\Sale\Internals\EO_ShipmentItem unsetDelivery()
	 * @method bool hasDelivery()
	 * @method bool isDeliveryFilled()
	 * @method bool isDeliveryChanged()
	 * @method \Bitrix\Sale\Internals\EO_Shipment fillDelivery()
	 * @method \int getBasketId()
	 * @method \Bitrix\Sale\Internals\EO_ShipmentItem setBasketId(\int|\Bitrix\Main\DB\SqlExpression $basketId)
	 * @method bool hasBasketId()
	 * @method bool isBasketIdFilled()
	 * @method bool isBasketIdChanged()
	 * @method \int remindActualBasketId()
	 * @method \int requireBasketId()
	 * @method \Bitrix\Sale\Internals\EO_ShipmentItem resetBasketId()
	 * @method \Bitrix\Sale\Internals\EO_ShipmentItem unsetBasketId()
	 * @method \int fillBasketId()
	 * @method \Bitrix\Sale\Internals\EO_Basket getBasket()
	 * @method \Bitrix\Sale\Internals\EO_Basket remindActualBasket()
	 * @method \Bitrix\Sale\Internals\EO_Basket requireBasket()
	 * @method \Bitrix\Sale\Internals\EO_ShipmentItem setBasket(\Bitrix\Sale\Internals\EO_Basket $object)
	 * @method \Bitrix\Sale\Internals\EO_ShipmentItem resetBasket()
	 * @method \Bitrix\Sale\Internals\EO_ShipmentItem unsetBasket()
	 * @method bool hasBasket()
	 * @method bool isBasketFilled()
	 * @method bool isBasketChanged()
	 * @method \Bitrix\Sale\Internals\EO_Basket fillBasket()
	 * @method \Bitrix\Main\Type\DateTime getDateInsert()
	 * @method \Bitrix\Sale\Internals\EO_ShipmentItem setDateInsert(\Bitrix\Main\Type\DateTime|\Bitrix\Main\DB\SqlExpression $dateInsert)
	 * @method bool hasDateInsert()
	 * @method bool isDateInsertFilled()
	 * @method bool isDateInsertChanged()
	 * @method \Bitrix\Main\Type\DateTime remindActualDateInsert()
	 * @method \Bitrix\Main\Type\DateTime requireDateInsert()
	 * @method \Bitrix\Sale\Internals\EO_ShipmentItem resetDateInsert()
	 * @method \Bitrix\Sale\Internals\EO_ShipmentItem unsetDateInsert()
	 * @method \Bitrix\Main\Type\DateTime fillDateInsert()
	 * @method \Bitrix\Main\Type\DateTime getDateInsertShort()
	 * @method \Bitrix\Main\Type\DateTime remindActualDateInsertShort()
	 * @method \Bitrix\Main\Type\DateTime requireDateInsertShort()
	 * @method bool hasDateInsertShort()
	 * @method bool isDateInsertShortFilled()
	 * @method \Bitrix\Sale\Internals\EO_ShipmentItem unsetDateInsertShort()
	 * @method \Bitrix\Main\Type\DateTime fillDateInsertShort()
	 * @method \float getQuantity()
	 * @method \Bitrix\Sale\Internals\EO_ShipmentItem setQuantity(\float|\Bitrix\Main\DB\SqlExpression $quantity)
	 * @method bool hasQuantity()
	 * @method bool isQuantityFilled()
	 * @method bool isQuantityChanged()
	 * @method \float remindActualQuantity()
	 * @method \float requireQuantity()
	 * @method \Bitrix\Sale\Internals\EO_ShipmentItem resetQuantity()
	 * @method \Bitrix\Sale\Internals\EO_ShipmentItem unsetQuantity()
	 * @method \float fillQuantity()
	 * @method \float getReservedQuantity()
	 * @method \Bitrix\Sale\Internals\EO_ShipmentItem setReservedQuantity(\float|\Bitrix\Main\DB\SqlExpression $reservedQuantity)
	 * @method bool hasReservedQuantity()
	 * @method bool isReservedQuantityFilled()
	 * @method bool isReservedQuantityChanged()
	 * @method \float remindActualReservedQuantity()
	 * @method \float requireReservedQuantity()
	 * @method \Bitrix\Sale\Internals\EO_ShipmentItem resetReservedQuantity()
	 * @method \Bitrix\Sale\Internals\EO_ShipmentItem unsetReservedQuantity()
	 * @method \float fillReservedQuantity()
	 * @method \string getXmlId()
	 * @method \Bitrix\Sale\Internals\EO_ShipmentItem setXmlId(\string|\Bitrix\Main\DB\SqlExpression $xmlId)
	 * @method bool hasXmlId()
	 * @method bool isXmlIdFilled()
	 * @method bool isXmlIdChanged()
	 * @method \string remindActualXmlId()
	 * @method \string requireXmlId()
	 * @method \Bitrix\Sale\Internals\EO_ShipmentItem resetXmlId()
	 * @method \Bitrix\Sale\Internals\EO_ShipmentItem unsetXmlId()
	 * @method \string fillXmlId()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Sale\Internals\EO_ShipmentItem set($fieldName, $value)
	 * @method \Bitrix\Sale\Internals\EO_ShipmentItem reset($fieldName)
	 * @method \Bitrix\Sale\Internals\EO_ShipmentItem unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Sale\Internals\EO_ShipmentItem wakeUp($data)
	 */
	class EO_ShipmentItem {
		/* @var \Bitrix\Sale\Internals\ShipmentItemTable */
		static public $dataClass = '\Bitrix\Sale\Internals\ShipmentItemTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Sale\Internals {
	/**
	 * EO_ShipmentItem_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getIdList()
	 * @method \int[] getOrderDeliveryIdList()
	 * @method \int[] fillOrderDeliveryId()
	 * @method \Bitrix\Sale\Internals\EO_Shipment[] getDeliveryList()
	 * @method \Bitrix\Sale\Internals\EO_ShipmentItem_Collection getDeliveryCollection()
	 * @method \Bitrix\Sale\Internals\EO_Shipment_Collection fillDelivery()
	 * @method \int[] getBasketIdList()
	 * @method \int[] fillBasketId()
	 * @method \Bitrix\Sale\Internals\EO_Basket[] getBasketList()
	 * @method \Bitrix\Sale\Internals\EO_ShipmentItem_Collection getBasketCollection()
	 * @method \Bitrix\Sale\Internals\EO_Basket_Collection fillBasket()
	 * @method \Bitrix\Main\Type\DateTime[] getDateInsertList()
	 * @method \Bitrix\Main\Type\DateTime[] fillDateInsert()
	 * @method \Bitrix\Main\Type\DateTime[] getDateInsertShortList()
	 * @method \Bitrix\Main\Type\DateTime[] fillDateInsertShort()
	 * @method \float[] getQuantityList()
	 * @method \float[] fillQuantity()
	 * @method \float[] getReservedQuantityList()
	 * @method \float[] fillReservedQuantity()
	 * @method \string[] getXmlIdList()
	 * @method \string[] fillXmlId()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Sale\Internals\EO_ShipmentItem $object)
	 * @method bool has(\Bitrix\Sale\Internals\EO_ShipmentItem $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Sale\Internals\EO_ShipmentItem getByPrimary($primary)
	 * @method \Bitrix\Sale\Internals\EO_ShipmentItem[] getAll()
	 * @method bool remove(\Bitrix\Sale\Internals\EO_ShipmentItem $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Sale\Internals\EO_ShipmentItem_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Sale\Internals\EO_ShipmentItem current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 * @method EO_ShipmentItem_Collection merge(?EO_ShipmentItem_Collection $collection)
	 * @method bool isEmpty()
	 */
	class EO_ShipmentItem_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Sale\Internals\ShipmentItemTable */
		static public $dataClass = '\Bitrix\Sale\Internals\ShipmentItemTable';
	}
}
namespace Bitrix\Sale\Internals {
	/**
	 * Common methods:
	 * ---------------
	 *
	 * @method EO_ShipmentItem_Result exec()
	 * @method \Bitrix\Sale\Internals\EO_ShipmentItem fetchObject()
	 * @method \Bitrix\Sale\Internals\EO_ShipmentItem_Collection fetchCollection()
	 *
	 * Custom methods:
	 * ---------------
	 *
	 */
	class EO_ShipmentItem_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Sale\Internals\EO_ShipmentItem fetchObject()
	 * @method \Bitrix\Sale\Internals\EO_ShipmentItem_Collection fetchCollection()
	 */
	class EO_ShipmentItem_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Sale\Internals\EO_ShipmentItem createObject($setDefaultValues = true)
	 * @method \Bitrix\Sale\Internals\EO_ShipmentItem_Collection createCollection()
	 * @method \Bitrix\Sale\Internals\EO_ShipmentItem wakeUpObject($row)
	 * @method \Bitrix\Sale\Internals\EO_ShipmentItem_Collection wakeUpCollection($rows)
	 */
	class EO_ShipmentItem_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Sale\Internals\ShipmentItemStoreTable:sale\lib\internals\shipmentitemstore.php */
namespace Bitrix\Sale\Internals {
	/**
	 * EO_ShipmentItemStore
	 * @see \Bitrix\Sale\Internals\ShipmentItemStoreTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getId()
	 * @method \Bitrix\Sale\Internals\EO_ShipmentItemStore setId(\int|\Bitrix\Main\DB\SqlExpression $id)
	 * @method bool hasId()
	 * @method bool isIdFilled()
	 * @method bool isIdChanged()
	 * @method \int getOrderDeliveryBasketId()
	 * @method \Bitrix\Sale\Internals\EO_ShipmentItemStore setOrderDeliveryBasketId(\int|\Bitrix\Main\DB\SqlExpression $orderDeliveryBasketId)
	 * @method bool hasOrderDeliveryBasketId()
	 * @method bool isOrderDeliveryBasketIdFilled()
	 * @method bool isOrderDeliveryBasketIdChanged()
	 * @method \int remindActualOrderDeliveryBasketId()
	 * @method \int requireOrderDeliveryBasketId()
	 * @method \Bitrix\Sale\Internals\EO_ShipmentItemStore resetOrderDeliveryBasketId()
	 * @method \Bitrix\Sale\Internals\EO_ShipmentItemStore unsetOrderDeliveryBasketId()
	 * @method \int fillOrderDeliveryBasketId()
	 * @method \Bitrix\Sale\Internals\EO_ShipmentItem getOrderDeliveryBasket()
	 * @method \Bitrix\Sale\Internals\EO_ShipmentItem remindActualOrderDeliveryBasket()
	 * @method \Bitrix\Sale\Internals\EO_ShipmentItem requireOrderDeliveryBasket()
	 * @method \Bitrix\Sale\Internals\EO_ShipmentItemStore setOrderDeliveryBasket(\Bitrix\Sale\Internals\EO_ShipmentItem $object)
	 * @method \Bitrix\Sale\Internals\EO_ShipmentItemStore resetOrderDeliveryBasket()
	 * @method \Bitrix\Sale\Internals\EO_ShipmentItemStore unsetOrderDeliveryBasket()
	 * @method bool hasOrderDeliveryBasket()
	 * @method bool isOrderDeliveryBasketFilled()
	 * @method bool isOrderDeliveryBasketChanged()
	 * @method \Bitrix\Sale\Internals\EO_ShipmentItem fillOrderDeliveryBasket()
	 * @method \int getBasketId()
	 * @method \Bitrix\Sale\Internals\EO_ShipmentItemStore setBasketId(\int|\Bitrix\Main\DB\SqlExpression $basketId)
	 * @method bool hasBasketId()
	 * @method bool isBasketIdFilled()
	 * @method bool isBasketIdChanged()
	 * @method \int remindActualBasketId()
	 * @method \int requireBasketId()
	 * @method \Bitrix\Sale\Internals\EO_ShipmentItemStore resetBasketId()
	 * @method \Bitrix\Sale\Internals\EO_ShipmentItemStore unsetBasketId()
	 * @method \int fillBasketId()
	 * @method \string getBarcode()
	 * @method \Bitrix\Sale\Internals\EO_ShipmentItemStore setBarcode(\string|\Bitrix\Main\DB\SqlExpression $barcode)
	 * @method bool hasBarcode()
	 * @method bool isBarcodeFilled()
	 * @method bool isBarcodeChanged()
	 * @method \string remindActualBarcode()
	 * @method \string requireBarcode()
	 * @method \Bitrix\Sale\Internals\EO_ShipmentItemStore resetBarcode()
	 * @method \Bitrix\Sale\Internals\EO_ShipmentItemStore unsetBarcode()
	 * @method \string fillBarcode()
	 * @method \string getMarkingCode()
	 * @method \Bitrix\Sale\Internals\EO_ShipmentItemStore setMarkingCode(\string|\Bitrix\Main\DB\SqlExpression $markingCode)
	 * @method bool hasMarkingCode()
	 * @method bool isMarkingCodeFilled()
	 * @method bool isMarkingCodeChanged()
	 * @method \string remindActualMarkingCode()
	 * @method \string requireMarkingCode()
	 * @method \Bitrix\Sale\Internals\EO_ShipmentItemStore resetMarkingCode()
	 * @method \Bitrix\Sale\Internals\EO_ShipmentItemStore unsetMarkingCode()
	 * @method \string fillMarkingCode()
	 * @method \int getStoreId()
	 * @method \Bitrix\Sale\Internals\EO_ShipmentItemStore setStoreId(\int|\Bitrix\Main\DB\SqlExpression $storeId)
	 * @method bool hasStoreId()
	 * @method bool isStoreIdFilled()
	 * @method bool isStoreIdChanged()
	 * @method \int remindActualStoreId()
	 * @method \int requireStoreId()
	 * @method \Bitrix\Sale\Internals\EO_ShipmentItemStore resetStoreId()
	 * @method \Bitrix\Sale\Internals\EO_ShipmentItemStore unsetStoreId()
	 * @method \int fillStoreId()
	 * @method \float getQuantity()
	 * @method \Bitrix\Sale\Internals\EO_ShipmentItemStore setQuantity(\float|\Bitrix\Main\DB\SqlExpression $quantity)
	 * @method bool hasQuantity()
	 * @method bool isQuantityFilled()
	 * @method bool isQuantityChanged()
	 * @method \float remindActualQuantity()
	 * @method \float requireQuantity()
	 * @method \Bitrix\Sale\Internals\EO_ShipmentItemStore resetQuantity()
	 * @method \Bitrix\Sale\Internals\EO_ShipmentItemStore unsetQuantity()
	 * @method \float fillQuantity()
	 * @method \Bitrix\Main\Type\DateTime getDateCreate()
	 * @method \Bitrix\Sale\Internals\EO_ShipmentItemStore setDateCreate(\Bitrix\Main\Type\DateTime|\Bitrix\Main\DB\SqlExpression $dateCreate)
	 * @method bool hasDateCreate()
	 * @method bool isDateCreateFilled()
	 * @method bool isDateCreateChanged()
	 * @method \Bitrix\Main\Type\DateTime remindActualDateCreate()
	 * @method \Bitrix\Main\Type\DateTime requireDateCreate()
	 * @method \Bitrix\Sale\Internals\EO_ShipmentItemStore resetDateCreate()
	 * @method \Bitrix\Sale\Internals\EO_ShipmentItemStore unsetDateCreate()
	 * @method \Bitrix\Main\Type\DateTime fillDateCreate()
	 * @method \Bitrix\Main\Type\DateTime getDateModify()
	 * @method \Bitrix\Sale\Internals\EO_ShipmentItemStore setDateModify(\Bitrix\Main\Type\DateTime|\Bitrix\Main\DB\SqlExpression $dateModify)
	 * @method bool hasDateModify()
	 * @method bool isDateModifyFilled()
	 * @method bool isDateModifyChanged()
	 * @method \Bitrix\Main\Type\DateTime remindActualDateModify()
	 * @method \Bitrix\Main\Type\DateTime requireDateModify()
	 * @method \Bitrix\Sale\Internals\EO_ShipmentItemStore resetDateModify()
	 * @method \Bitrix\Sale\Internals\EO_ShipmentItemStore unsetDateModify()
	 * @method \Bitrix\Main\Type\DateTime fillDateModify()
	 * @method \int getCreatedBy()
	 * @method \Bitrix\Sale\Internals\EO_ShipmentItemStore setCreatedBy(\int|\Bitrix\Main\DB\SqlExpression $createdBy)
	 * @method bool hasCreatedBy()
	 * @method bool isCreatedByFilled()
	 * @method bool isCreatedByChanged()
	 * @method \int remindActualCreatedBy()
	 * @method \int requireCreatedBy()
	 * @method \Bitrix\Sale\Internals\EO_ShipmentItemStore resetCreatedBy()
	 * @method \Bitrix\Sale\Internals\EO_ShipmentItemStore unsetCreatedBy()
	 * @method \int fillCreatedBy()
	 * @method \int getModifiedBy()
	 * @method \Bitrix\Sale\Internals\EO_ShipmentItemStore setModifiedBy(\int|\Bitrix\Main\DB\SqlExpression $modifiedBy)
	 * @method bool hasModifiedBy()
	 * @method bool isModifiedByFilled()
	 * @method bool isModifiedByChanged()
	 * @method \int remindActualModifiedBy()
	 * @method \int requireModifiedBy()
	 * @method \Bitrix\Sale\Internals\EO_ShipmentItemStore resetModifiedBy()
	 * @method \Bitrix\Sale\Internals\EO_ShipmentItemStore unsetModifiedBy()
	 * @method \int fillModifiedBy()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Sale\Internals\EO_ShipmentItemStore set($fieldName, $value)
	 * @method \Bitrix\Sale\Internals\EO_ShipmentItemStore reset($fieldName)
	 * @method \Bitrix\Sale\Internals\EO_ShipmentItemStore unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Sale\Internals\EO_ShipmentItemStore wakeUp($data)
	 */
	class EO_ShipmentItemStore {
		/* @var \Bitrix\Sale\Internals\ShipmentItemStoreTable */
		static public $dataClass = '\Bitrix\Sale\Internals\ShipmentItemStoreTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Sale\Internals {
	/**
	 * EO_ShipmentItemStore_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getIdList()
	 * @method \int[] getOrderDeliveryBasketIdList()
	 * @method \int[] fillOrderDeliveryBasketId()
	 * @method \Bitrix\Sale\Internals\EO_ShipmentItem[] getOrderDeliveryBasketList()
	 * @method \Bitrix\Sale\Internals\EO_ShipmentItemStore_Collection getOrderDeliveryBasketCollection()
	 * @method \Bitrix\Sale\Internals\EO_ShipmentItem_Collection fillOrderDeliveryBasket()
	 * @method \int[] getBasketIdList()
	 * @method \int[] fillBasketId()
	 * @method \string[] getBarcodeList()
	 * @method \string[] fillBarcode()
	 * @method \string[] getMarkingCodeList()
	 * @method \string[] fillMarkingCode()
	 * @method \int[] getStoreIdList()
	 * @method \int[] fillStoreId()
	 * @method \float[] getQuantityList()
	 * @method \float[] fillQuantity()
	 * @method \Bitrix\Main\Type\DateTime[] getDateCreateList()
	 * @method \Bitrix\Main\Type\DateTime[] fillDateCreate()
	 * @method \Bitrix\Main\Type\DateTime[] getDateModifyList()
	 * @method \Bitrix\Main\Type\DateTime[] fillDateModify()
	 * @method \int[] getCreatedByList()
	 * @method \int[] fillCreatedBy()
	 * @method \int[] getModifiedByList()
	 * @method \int[] fillModifiedBy()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Sale\Internals\EO_ShipmentItemStore $object)
	 * @method bool has(\Bitrix\Sale\Internals\EO_ShipmentItemStore $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Sale\Internals\EO_ShipmentItemStore getByPrimary($primary)
	 * @method \Bitrix\Sale\Internals\EO_ShipmentItemStore[] getAll()
	 * @method bool remove(\Bitrix\Sale\Internals\EO_ShipmentItemStore $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Sale\Internals\EO_ShipmentItemStore_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Sale\Internals\EO_ShipmentItemStore current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 * @method EO_ShipmentItemStore_Collection merge(?EO_ShipmentItemStore_Collection $collection)
	 * @method bool isEmpty()
	 */
	class EO_ShipmentItemStore_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Sale\Internals\ShipmentItemStoreTable */
		static public $dataClass = '\Bitrix\Sale\Internals\ShipmentItemStoreTable';
	}
}
namespace Bitrix\Sale\Internals {
	/**
	 * Common methods:
	 * ---------------
	 *
	 * @method EO_ShipmentItemStore_Result exec()
	 * @method \Bitrix\Sale\Internals\EO_ShipmentItemStore fetchObject()
	 * @method \Bitrix\Sale\Internals\EO_ShipmentItemStore_Collection fetchCollection()
	 *
	 * Custom methods:
	 * ---------------
	 *
	 */
	class EO_ShipmentItemStore_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Sale\Internals\EO_ShipmentItemStore fetchObject()
	 * @method \Bitrix\Sale\Internals\EO_ShipmentItemStore_Collection fetchCollection()
	 */
	class EO_ShipmentItemStore_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Sale\Internals\EO_ShipmentItemStore createObject($setDefaultValues = true)
	 * @method \Bitrix\Sale\Internals\EO_ShipmentItemStore_Collection createCollection()
	 * @method \Bitrix\Sale\Internals\EO_ShipmentItemStore wakeUpObject($row)
	 * @method \Bitrix\Sale\Internals\EO_ShipmentItemStore_Collection wakeUpCollection($rows)
	 */
	class EO_ShipmentItemStore_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Sale\Internals\SiteCurrencyTable:sale\lib\internals\sitecurrency.php */
namespace Bitrix\Sale\Internals {
	/**
	 * EO_SiteCurrency
	 * @see \Bitrix\Sale\Internals\SiteCurrencyTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \string getLid()
	 * @method \Bitrix\Sale\Internals\EO_SiteCurrency setLid(\string|\Bitrix\Main\DB\SqlExpression $lid)
	 * @method bool hasLid()
	 * @method bool isLidFilled()
	 * @method bool isLidChanged()
	 * @method \string getCurrency()
	 * @method \Bitrix\Sale\Internals\EO_SiteCurrency setCurrency(\string|\Bitrix\Main\DB\SqlExpression $currency)
	 * @method bool hasCurrency()
	 * @method bool isCurrencyFilled()
	 * @method bool isCurrencyChanged()
	 * @method \string remindActualCurrency()
	 * @method \string requireCurrency()
	 * @method \Bitrix\Sale\Internals\EO_SiteCurrency resetCurrency()
	 * @method \Bitrix\Sale\Internals\EO_SiteCurrency unsetCurrency()
	 * @method \string fillCurrency()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Sale\Internals\EO_SiteCurrency set($fieldName, $value)
	 * @method \Bitrix\Sale\Internals\EO_SiteCurrency reset($fieldName)
	 * @method \Bitrix\Sale\Internals\EO_SiteCurrency unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Sale\Internals\EO_SiteCurrency wakeUp($data)
	 */
	class EO_SiteCurrency {
		/* @var \Bitrix\Sale\Internals\SiteCurrencyTable */
		static public $dataClass = '\Bitrix\Sale\Internals\SiteCurrencyTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Sale\Internals {
	/**
	 * EO_SiteCurrency_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \string[] getLidList()
	 * @method \string[] getCurrencyList()
	 * @method \string[] fillCurrency()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Sale\Internals\EO_SiteCurrency $object)
	 * @method bool has(\Bitrix\Sale\Internals\EO_SiteCurrency $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Sale\Internals\EO_SiteCurrency getByPrimary($primary)
	 * @method \Bitrix\Sale\Internals\EO_SiteCurrency[] getAll()
	 * @method bool remove(\Bitrix\Sale\Internals\EO_SiteCurrency $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Sale\Internals\EO_SiteCurrency_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Sale\Internals\EO_SiteCurrency current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 * @method EO_SiteCurrency_Collection merge(?EO_SiteCurrency_Collection $collection)
	 * @method bool isEmpty()
	 */
	class EO_SiteCurrency_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Sale\Internals\SiteCurrencyTable */
		static public $dataClass = '\Bitrix\Sale\Internals\SiteCurrencyTable';
	}
}
namespace Bitrix\Sale\Internals {
	/**
	 * Common methods:
	 * ---------------
	 *
	 * @method EO_SiteCurrency_Result exec()
	 * @method \Bitrix\Sale\Internals\EO_SiteCurrency fetchObject()
	 * @method \Bitrix\Sale\Internals\EO_SiteCurrency_Collection fetchCollection()
	 *
	 * Custom methods:
	 * ---------------
	 *
	 */
	class EO_SiteCurrency_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Sale\Internals\EO_SiteCurrency fetchObject()
	 * @method \Bitrix\Sale\Internals\EO_SiteCurrency_Collection fetchCollection()
	 */
	class EO_SiteCurrency_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Sale\Internals\EO_SiteCurrency createObject($setDefaultValues = true)
	 * @method \Bitrix\Sale\Internals\EO_SiteCurrency_Collection createCollection()
	 * @method \Bitrix\Sale\Internals\EO_SiteCurrency wakeUpObject($row)
	 * @method \Bitrix\Sale\Internals\EO_SiteCurrency_Collection wakeUpCollection($rows)
	 */
	class EO_SiteCurrency_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Sale\Internals\StatusTable:sale\lib\internals\status.php */
namespace Bitrix\Sale\Internals {
	/**
	 * EO_Status
	 * @see \Bitrix\Sale\Internals\StatusTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \string getId()
	 * @method \Bitrix\Sale\Internals\EO_Status setId(\string|\Bitrix\Main\DB\SqlExpression $id)
	 * @method bool hasId()
	 * @method bool isIdFilled()
	 * @method bool isIdChanged()
	 * @method \boolean getType()
	 * @method \Bitrix\Sale\Internals\EO_Status setType(\boolean|\Bitrix\Main\DB\SqlExpression $type)
	 * @method bool hasType()
	 * @method bool isTypeFilled()
	 * @method bool isTypeChanged()
	 * @method \boolean remindActualType()
	 * @method \boolean requireType()
	 * @method \Bitrix\Sale\Internals\EO_Status resetType()
	 * @method \Bitrix\Sale\Internals\EO_Status unsetType()
	 * @method \boolean fillType()
	 * @method \int getSort()
	 * @method \Bitrix\Sale\Internals\EO_Status setSort(\int|\Bitrix\Main\DB\SqlExpression $sort)
	 * @method bool hasSort()
	 * @method bool isSortFilled()
	 * @method bool isSortChanged()
	 * @method \int remindActualSort()
	 * @method \int requireSort()
	 * @method \Bitrix\Sale\Internals\EO_Status resetSort()
	 * @method \Bitrix\Sale\Internals\EO_Status unsetSort()
	 * @method \int fillSort()
	 * @method \boolean getNotify()
	 * @method \Bitrix\Sale\Internals\EO_Status setNotify(\boolean|\Bitrix\Main\DB\SqlExpression $notify)
	 * @method bool hasNotify()
	 * @method bool isNotifyFilled()
	 * @method bool isNotifyChanged()
	 * @method \boolean remindActualNotify()
	 * @method \boolean requireNotify()
	 * @method \Bitrix\Sale\Internals\EO_Status resetNotify()
	 * @method \Bitrix\Sale\Internals\EO_Status unsetNotify()
	 * @method \boolean fillNotify()
	 * @method \string getColor()
	 * @method \Bitrix\Sale\Internals\EO_Status setColor(\string|\Bitrix\Main\DB\SqlExpression $color)
	 * @method bool hasColor()
	 * @method bool isColorFilled()
	 * @method bool isColorChanged()
	 * @method \string remindActualColor()
	 * @method \string requireColor()
	 * @method \Bitrix\Sale\Internals\EO_Status resetColor()
	 * @method \Bitrix\Sale\Internals\EO_Status unsetColor()
	 * @method \string fillColor()
	 * @method \string getXmlId()
	 * @method \Bitrix\Sale\Internals\EO_Status setXmlId(\string|\Bitrix\Main\DB\SqlExpression $xmlId)
	 * @method bool hasXmlId()
	 * @method bool isXmlIdFilled()
	 * @method bool isXmlIdChanged()
	 * @method \string remindActualXmlId()
	 * @method \string requireXmlId()
	 * @method \Bitrix\Sale\Internals\EO_Status resetXmlId()
	 * @method \Bitrix\Sale\Internals\EO_Status unsetXmlId()
	 * @method \string fillXmlId()
	 * @method \Bitrix\Sale\Internals\EO_StatusLang getStatusLang()
	 * @method \Bitrix\Sale\Internals\EO_StatusLang remindActualStatusLang()
	 * @method \Bitrix\Sale\Internals\EO_StatusLang requireStatusLang()
	 * @method \Bitrix\Sale\Internals\EO_Status setStatusLang(\Bitrix\Sale\Internals\EO_StatusLang $object)
	 * @method \Bitrix\Sale\Internals\EO_Status resetStatusLang()
	 * @method \Bitrix\Sale\Internals\EO_Status unsetStatusLang()
	 * @method bool hasStatusLang()
	 * @method bool isStatusLangFilled()
	 * @method bool isStatusLangChanged()
	 * @method \Bitrix\Sale\Internals\EO_StatusLang fillStatusLang()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Sale\Internals\EO_Status set($fieldName, $value)
	 * @method \Bitrix\Sale\Internals\EO_Status reset($fieldName)
	 * @method \Bitrix\Sale\Internals\EO_Status unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Sale\Internals\EO_Status wakeUp($data)
	 */
	class EO_Status {
		/* @var \Bitrix\Sale\Internals\StatusTable */
		static public $dataClass = '\Bitrix\Sale\Internals\StatusTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Sale\Internals {
	/**
	 * EO_Status_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \string[] getIdList()
	 * @method \boolean[] getTypeList()
	 * @method \boolean[] fillType()
	 * @method \int[] getSortList()
	 * @method \int[] fillSort()
	 * @method \boolean[] getNotifyList()
	 * @method \boolean[] fillNotify()
	 * @method \string[] getColorList()
	 * @method \string[] fillColor()
	 * @method \string[] getXmlIdList()
	 * @method \string[] fillXmlId()
	 * @method \Bitrix\Sale\Internals\EO_StatusLang[] getStatusLangList()
	 * @method \Bitrix\Sale\Internals\EO_Status_Collection getStatusLangCollection()
	 * @method \Bitrix\Sale\Internals\EO_StatusLang_Collection fillStatusLang()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Sale\Internals\EO_Status $object)
	 * @method bool has(\Bitrix\Sale\Internals\EO_Status $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Sale\Internals\EO_Status getByPrimary($primary)
	 * @method \Bitrix\Sale\Internals\EO_Status[] getAll()
	 * @method bool remove(\Bitrix\Sale\Internals\EO_Status $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Sale\Internals\EO_Status_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Sale\Internals\EO_Status current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 * @method EO_Status_Collection merge(?EO_Status_Collection $collection)
	 * @method bool isEmpty()
	 */
	class EO_Status_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Sale\Internals\StatusTable */
		static public $dataClass = '\Bitrix\Sale\Internals\StatusTable';
	}
}
namespace Bitrix\Sale\Internals {
	/**
	 * Common methods:
	 * ---------------
	 *
	 * @method EO_Status_Result exec()
	 * @method \Bitrix\Sale\Internals\EO_Status fetchObject()
	 * @method \Bitrix\Sale\Internals\EO_Status_Collection fetchCollection()
	 *
	 * Custom methods:
	 * ---------------
	 *
	 */
	class EO_Status_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Sale\Internals\EO_Status fetchObject()
	 * @method \Bitrix\Sale\Internals\EO_Status_Collection fetchCollection()
	 */
	class EO_Status_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Sale\Internals\EO_Status createObject($setDefaultValues = true)
	 * @method \Bitrix\Sale\Internals\EO_Status_Collection createCollection()
	 * @method \Bitrix\Sale\Internals\EO_Status wakeUpObject($row)
	 * @method \Bitrix\Sale\Internals\EO_Status_Collection wakeUpCollection($rows)
	 */
	class EO_Status_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Sale\Internals\StatusGroupTaskTable:sale\lib\internals\status_grouptask.php */
namespace Bitrix\Sale\Internals {
	/**
	 * EO_StatusGroupTask
	 * @see \Bitrix\Sale\Internals\StatusGroupTaskTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \string getStatusId()
	 * @method \Bitrix\Sale\Internals\EO_StatusGroupTask setStatusId(\string|\Bitrix\Main\DB\SqlExpression $statusId)
	 * @method bool hasStatusId()
	 * @method bool isStatusIdFilled()
	 * @method bool isStatusIdChanged()
	 * @method \int getGroupId()
	 * @method \Bitrix\Sale\Internals\EO_StatusGroupTask setGroupId(\int|\Bitrix\Main\DB\SqlExpression $groupId)
	 * @method bool hasGroupId()
	 * @method bool isGroupIdFilled()
	 * @method bool isGroupIdChanged()
	 * @method \int getTaskId()
	 * @method \Bitrix\Sale\Internals\EO_StatusGroupTask setTaskId(\int|\Bitrix\Main\DB\SqlExpression $taskId)
	 * @method bool hasTaskId()
	 * @method bool isTaskIdFilled()
	 * @method bool isTaskIdChanged()
	 * @method \Bitrix\Sale\Internals\EO_Status getStatus()
	 * @method \Bitrix\Sale\Internals\EO_Status remindActualStatus()
	 * @method \Bitrix\Sale\Internals\EO_Status requireStatus()
	 * @method \Bitrix\Sale\Internals\EO_StatusGroupTask setStatus(\Bitrix\Sale\Internals\EO_Status $object)
	 * @method \Bitrix\Sale\Internals\EO_StatusGroupTask resetStatus()
	 * @method \Bitrix\Sale\Internals\EO_StatusGroupTask unsetStatus()
	 * @method bool hasStatus()
	 * @method bool isStatusFilled()
	 * @method bool isStatusChanged()
	 * @method \Bitrix\Sale\Internals\EO_Status fillStatus()
	 * @method \Bitrix\Main\EO_Group getGroup()
	 * @method \Bitrix\Main\EO_Group remindActualGroup()
	 * @method \Bitrix\Main\EO_Group requireGroup()
	 * @method \Bitrix\Sale\Internals\EO_StatusGroupTask setGroup(\Bitrix\Main\EO_Group $object)
	 * @method \Bitrix\Sale\Internals\EO_StatusGroupTask resetGroup()
	 * @method \Bitrix\Sale\Internals\EO_StatusGroupTask unsetGroup()
	 * @method bool hasGroup()
	 * @method bool isGroupFilled()
	 * @method bool isGroupChanged()
	 * @method \Bitrix\Main\EO_Group fillGroup()
	 * @method \Bitrix\Main\EO_Task getTask()
	 * @method \Bitrix\Main\EO_Task remindActualTask()
	 * @method \Bitrix\Main\EO_Task requireTask()
	 * @method \Bitrix\Sale\Internals\EO_StatusGroupTask setTask(\Bitrix\Main\EO_Task $object)
	 * @method \Bitrix\Sale\Internals\EO_StatusGroupTask resetTask()
	 * @method \Bitrix\Sale\Internals\EO_StatusGroupTask unsetTask()
	 * @method bool hasTask()
	 * @method bool isTaskFilled()
	 * @method bool isTaskChanged()
	 * @method \Bitrix\Main\EO_Task fillTask()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Sale\Internals\EO_StatusGroupTask set($fieldName, $value)
	 * @method \Bitrix\Sale\Internals\EO_StatusGroupTask reset($fieldName)
	 * @method \Bitrix\Sale\Internals\EO_StatusGroupTask unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Sale\Internals\EO_StatusGroupTask wakeUp($data)
	 */
	class EO_StatusGroupTask {
		/* @var \Bitrix\Sale\Internals\StatusGroupTaskTable */
		static public $dataClass = '\Bitrix\Sale\Internals\StatusGroupTaskTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Sale\Internals {
	/**
	 * EO_StatusGroupTask_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \string[] getStatusIdList()
	 * @method \int[] getGroupIdList()
	 * @method \int[] getTaskIdList()
	 * @method \Bitrix\Sale\Internals\EO_Status[] getStatusList()
	 * @method \Bitrix\Sale\Internals\EO_StatusGroupTask_Collection getStatusCollection()
	 * @method \Bitrix\Sale\Internals\EO_Status_Collection fillStatus()
	 * @method \Bitrix\Main\EO_Group[] getGroupList()
	 * @method \Bitrix\Sale\Internals\EO_StatusGroupTask_Collection getGroupCollection()
	 * @method \Bitrix\Main\EO_Group_Collection fillGroup()
	 * @method \Bitrix\Main\EO_Task[] getTaskList()
	 * @method \Bitrix\Sale\Internals\EO_StatusGroupTask_Collection getTaskCollection()
	 * @method \Bitrix\Main\EO_Task_Collection fillTask()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Sale\Internals\EO_StatusGroupTask $object)
	 * @method bool has(\Bitrix\Sale\Internals\EO_StatusGroupTask $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Sale\Internals\EO_StatusGroupTask getByPrimary($primary)
	 * @method \Bitrix\Sale\Internals\EO_StatusGroupTask[] getAll()
	 * @method bool remove(\Bitrix\Sale\Internals\EO_StatusGroupTask $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Sale\Internals\EO_StatusGroupTask_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Sale\Internals\EO_StatusGroupTask current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 * @method EO_StatusGroupTask_Collection merge(?EO_StatusGroupTask_Collection $collection)
	 * @method bool isEmpty()
	 */
	class EO_StatusGroupTask_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Sale\Internals\StatusGroupTaskTable */
		static public $dataClass = '\Bitrix\Sale\Internals\StatusGroupTaskTable';
	}
}
namespace Bitrix\Sale\Internals {
	/**
	 * Common methods:
	 * ---------------
	 *
	 * @method EO_StatusGroupTask_Result exec()
	 * @method \Bitrix\Sale\Internals\EO_StatusGroupTask fetchObject()
	 * @method \Bitrix\Sale\Internals\EO_StatusGroupTask_Collection fetchCollection()
	 *
	 * Custom methods:
	 * ---------------
	 *
	 */
	class EO_StatusGroupTask_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Sale\Internals\EO_StatusGroupTask fetchObject()
	 * @method \Bitrix\Sale\Internals\EO_StatusGroupTask_Collection fetchCollection()
	 */
	class EO_StatusGroupTask_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Sale\Internals\EO_StatusGroupTask createObject($setDefaultValues = true)
	 * @method \Bitrix\Sale\Internals\EO_StatusGroupTask_Collection createCollection()
	 * @method \Bitrix\Sale\Internals\EO_StatusGroupTask wakeUpObject($row)
	 * @method \Bitrix\Sale\Internals\EO_StatusGroupTask_Collection wakeUpCollection($rows)
	 */
	class EO_StatusGroupTask_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Sale\Internals\StatusLangTable:sale\lib\internals\status_lang.php */
namespace Bitrix\Sale\Internals {
	/**
	 * EO_StatusLang
	 * @see \Bitrix\Sale\Internals\StatusLangTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \string getStatusId()
	 * @method \Bitrix\Sale\Internals\EO_StatusLang setStatusId(\string|\Bitrix\Main\DB\SqlExpression $statusId)
	 * @method bool hasStatusId()
	 * @method bool isStatusIdFilled()
	 * @method bool isStatusIdChanged()
	 * @method \string getLid()
	 * @method \Bitrix\Sale\Internals\EO_StatusLang setLid(\string|\Bitrix\Main\DB\SqlExpression $lid)
	 * @method bool hasLid()
	 * @method bool isLidFilled()
	 * @method bool isLidChanged()
	 * @method \string getName()
	 * @method \Bitrix\Sale\Internals\EO_StatusLang setName(\string|\Bitrix\Main\DB\SqlExpression $name)
	 * @method bool hasName()
	 * @method bool isNameFilled()
	 * @method bool isNameChanged()
	 * @method \string remindActualName()
	 * @method \string requireName()
	 * @method \Bitrix\Sale\Internals\EO_StatusLang resetName()
	 * @method \Bitrix\Sale\Internals\EO_StatusLang unsetName()
	 * @method \string fillName()
	 * @method \string getDescription()
	 * @method \Bitrix\Sale\Internals\EO_StatusLang setDescription(\string|\Bitrix\Main\DB\SqlExpression $description)
	 * @method bool hasDescription()
	 * @method bool isDescriptionFilled()
	 * @method bool isDescriptionChanged()
	 * @method \string remindActualDescription()
	 * @method \string requireDescription()
	 * @method \Bitrix\Sale\Internals\EO_StatusLang resetDescription()
	 * @method \Bitrix\Sale\Internals\EO_StatusLang unsetDescription()
	 * @method \string fillDescription()
	 * @method \Bitrix\Sale\Internals\EO_Status getStatus()
	 * @method \Bitrix\Sale\Internals\EO_Status remindActualStatus()
	 * @method \Bitrix\Sale\Internals\EO_Status requireStatus()
	 * @method \Bitrix\Sale\Internals\EO_StatusLang setStatus(\Bitrix\Sale\Internals\EO_Status $object)
	 * @method \Bitrix\Sale\Internals\EO_StatusLang resetStatus()
	 * @method \Bitrix\Sale\Internals\EO_StatusLang unsetStatus()
	 * @method bool hasStatus()
	 * @method bool isStatusFilled()
	 * @method bool isStatusChanged()
	 * @method \Bitrix\Sale\Internals\EO_Status fillStatus()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Sale\Internals\EO_StatusLang set($fieldName, $value)
	 * @method \Bitrix\Sale\Internals\EO_StatusLang reset($fieldName)
	 * @method \Bitrix\Sale\Internals\EO_StatusLang unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Sale\Internals\EO_StatusLang wakeUp($data)
	 */
	class EO_StatusLang {
		/* @var \Bitrix\Sale\Internals\StatusLangTable */
		static public $dataClass = '\Bitrix\Sale\Internals\StatusLangTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Sale\Internals {
	/**
	 * EO_StatusLang_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \string[] getStatusIdList()
	 * @method \string[] getLidList()
	 * @method \string[] getNameList()
	 * @method \string[] fillName()
	 * @method \string[] getDescriptionList()
	 * @method \string[] fillDescription()
	 * @method \Bitrix\Sale\Internals\EO_Status[] getStatusList()
	 * @method \Bitrix\Sale\Internals\EO_StatusLang_Collection getStatusCollection()
	 * @method \Bitrix\Sale\Internals\EO_Status_Collection fillStatus()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Sale\Internals\EO_StatusLang $object)
	 * @method bool has(\Bitrix\Sale\Internals\EO_StatusLang $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Sale\Internals\EO_StatusLang getByPrimary($primary)
	 * @method \Bitrix\Sale\Internals\EO_StatusLang[] getAll()
	 * @method bool remove(\Bitrix\Sale\Internals\EO_StatusLang $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Sale\Internals\EO_StatusLang_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Sale\Internals\EO_StatusLang current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 * @method EO_StatusLang_Collection merge(?EO_StatusLang_Collection $collection)
	 * @method bool isEmpty()
	 */
	class EO_StatusLang_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Sale\Internals\StatusLangTable */
		static public $dataClass = '\Bitrix\Sale\Internals\StatusLangTable';
	}
}
namespace Bitrix\Sale\Internals {
	/**
	 * Common methods:
	 * ---------------
	 *
	 * @method EO_StatusLang_Result exec()
	 * @method \Bitrix\Sale\Internals\EO_StatusLang fetchObject()
	 * @method \Bitrix\Sale\Internals\EO_StatusLang_Collection fetchCollection()
	 *
	 * Custom methods:
	 * ---------------
	 *
	 */
	class EO_StatusLang_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Sale\Internals\EO_StatusLang fetchObject()
	 * @method \Bitrix\Sale\Internals\EO_StatusLang_Collection fetchCollection()
	 */
	class EO_StatusLang_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Sale\Internals\EO_StatusLang createObject($setDefaultValues = true)
	 * @method \Bitrix\Sale\Internals\EO_StatusLang_Collection createCollection()
	 * @method \Bitrix\Sale\Internals\EO_StatusLang wakeUpObject($row)
	 * @method \Bitrix\Sale\Internals\EO_StatusLang_Collection wakeUpCollection($rows)
	 */
	class EO_StatusLang_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Sale\Internals\SynchronizerLogTable:sale\lib\internals\synchronizerlog.php */
namespace Bitrix\Sale\Internals {
	/**
	 * EO_SynchronizerLog
	 * @see \Bitrix\Sale\Internals\SynchronizerLogTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getId()
	 * @method \Bitrix\Sale\Internals\EO_SynchronizerLog setId(\int|\Bitrix\Main\DB\SqlExpression $id)
	 * @method bool hasId()
	 * @method bool isIdFilled()
	 * @method bool isIdChanged()
	 * @method \string getMessageId()
	 * @method \Bitrix\Sale\Internals\EO_SynchronizerLog setMessageId(\string|\Bitrix\Main\DB\SqlExpression $messageId)
	 * @method bool hasMessageId()
	 * @method bool isMessageIdFilled()
	 * @method bool isMessageIdChanged()
	 * @method \string remindActualMessageId()
	 * @method \string requireMessageId()
	 * @method \Bitrix\Sale\Internals\EO_SynchronizerLog resetMessageId()
	 * @method \Bitrix\Sale\Internals\EO_SynchronizerLog unsetMessageId()
	 * @method \string fillMessageId()
	 * @method \string getMessage()
	 * @method \Bitrix\Sale\Internals\EO_SynchronizerLog setMessage(\string|\Bitrix\Main\DB\SqlExpression $message)
	 * @method bool hasMessage()
	 * @method bool isMessageFilled()
	 * @method bool isMessageChanged()
	 * @method \string remindActualMessage()
	 * @method \string requireMessage()
	 * @method \Bitrix\Sale\Internals\EO_SynchronizerLog resetMessage()
	 * @method \Bitrix\Sale\Internals\EO_SynchronizerLog unsetMessage()
	 * @method \string fillMessage()
	 * @method \Bitrix\Main\Type\DateTime getDateInsert()
	 * @method \Bitrix\Sale\Internals\EO_SynchronizerLog setDateInsert(\Bitrix\Main\Type\DateTime|\Bitrix\Main\DB\SqlExpression $dateInsert)
	 * @method bool hasDateInsert()
	 * @method bool isDateInsertFilled()
	 * @method bool isDateInsertChanged()
	 * @method \Bitrix\Main\Type\DateTime remindActualDateInsert()
	 * @method \Bitrix\Main\Type\DateTime requireDateInsert()
	 * @method \Bitrix\Sale\Internals\EO_SynchronizerLog resetDateInsert()
	 * @method \Bitrix\Sale\Internals\EO_SynchronizerLog unsetDateInsert()
	 * @method \Bitrix\Main\Type\DateTime fillDateInsert()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Sale\Internals\EO_SynchronizerLog set($fieldName, $value)
	 * @method \Bitrix\Sale\Internals\EO_SynchronizerLog reset($fieldName)
	 * @method \Bitrix\Sale\Internals\EO_SynchronizerLog unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Sale\Internals\EO_SynchronizerLog wakeUp($data)
	 */
	class EO_SynchronizerLog {
		/* @var \Bitrix\Sale\Internals\SynchronizerLogTable */
		static public $dataClass = '\Bitrix\Sale\Internals\SynchronizerLogTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Sale\Internals {
	/**
	 * EO_SynchronizerLog_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getIdList()
	 * @method \string[] getMessageIdList()
	 * @method \string[] fillMessageId()
	 * @method \string[] getMessageList()
	 * @method \string[] fillMessage()
	 * @method \Bitrix\Main\Type\DateTime[] getDateInsertList()
	 * @method \Bitrix\Main\Type\DateTime[] fillDateInsert()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Sale\Internals\EO_SynchronizerLog $object)
	 * @method bool has(\Bitrix\Sale\Internals\EO_SynchronizerLog $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Sale\Internals\EO_SynchronizerLog getByPrimary($primary)
	 * @method \Bitrix\Sale\Internals\EO_SynchronizerLog[] getAll()
	 * @method bool remove(\Bitrix\Sale\Internals\EO_SynchronizerLog $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Sale\Internals\EO_SynchronizerLog_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Sale\Internals\EO_SynchronizerLog current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 * @method EO_SynchronizerLog_Collection merge(?EO_SynchronizerLog_Collection $collection)
	 * @method bool isEmpty()
	 */
	class EO_SynchronizerLog_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Sale\Internals\SynchronizerLogTable */
		static public $dataClass = '\Bitrix\Sale\Internals\SynchronizerLogTable';
	}
}
namespace Bitrix\Sale\Internals {
	/**
	 * Common methods:
	 * ---------------
	 *
	 * @method EO_SynchronizerLog_Result exec()
	 * @method \Bitrix\Sale\Internals\EO_SynchronizerLog fetchObject()
	 * @method \Bitrix\Sale\Internals\EO_SynchronizerLog_Collection fetchCollection()
	 *
	 * Custom methods:
	 * ---------------
	 *
	 */
	class EO_SynchronizerLog_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Sale\Internals\EO_SynchronizerLog fetchObject()
	 * @method \Bitrix\Sale\Internals\EO_SynchronizerLog_Collection fetchCollection()
	 */
	class EO_SynchronizerLog_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Sale\Internals\EO_SynchronizerLog createObject($setDefaultValues = true)
	 * @method \Bitrix\Sale\Internals\EO_SynchronizerLog_Collection createCollection()
	 * @method \Bitrix\Sale\Internals\EO_SynchronizerLog wakeUpObject($row)
	 * @method \Bitrix\Sale\Internals\EO_SynchronizerLog_Collection wakeUpCollection($rows)
	 */
	class EO_SynchronizerLog_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Sale\TradingPlatformTable:sale\lib\internals\tradingplatform.php */
namespace Bitrix\Sale {
	/**
	 * EO_TradingPlatform
	 * @see \Bitrix\Sale\TradingPlatformTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getId()
	 * @method \Bitrix\Sale\EO_TradingPlatform setId(\int|\Bitrix\Main\DB\SqlExpression $id)
	 * @method bool hasId()
	 * @method bool isIdFilled()
	 * @method bool isIdChanged()
	 * @method \string getCode()
	 * @method \Bitrix\Sale\EO_TradingPlatform setCode(\string|\Bitrix\Main\DB\SqlExpression $code)
	 * @method bool hasCode()
	 * @method bool isCodeFilled()
	 * @method bool isCodeChanged()
	 * @method \string remindActualCode()
	 * @method \string requireCode()
	 * @method \Bitrix\Sale\EO_TradingPlatform resetCode()
	 * @method \Bitrix\Sale\EO_TradingPlatform unsetCode()
	 * @method \string fillCode()
	 * @method \string getActive()
	 * @method \Bitrix\Sale\EO_TradingPlatform setActive(\string|\Bitrix\Main\DB\SqlExpression $active)
	 * @method bool hasActive()
	 * @method bool isActiveFilled()
	 * @method bool isActiveChanged()
	 * @method \string remindActualActive()
	 * @method \string requireActive()
	 * @method \Bitrix\Sale\EO_TradingPlatform resetActive()
	 * @method \Bitrix\Sale\EO_TradingPlatform unsetActive()
	 * @method \string fillActive()
	 * @method \string getName()
	 * @method \Bitrix\Sale\EO_TradingPlatform setName(\string|\Bitrix\Main\DB\SqlExpression $name)
	 * @method bool hasName()
	 * @method bool isNameFilled()
	 * @method bool isNameChanged()
	 * @method \string remindActualName()
	 * @method \string requireName()
	 * @method \Bitrix\Sale\EO_TradingPlatform resetName()
	 * @method \Bitrix\Sale\EO_TradingPlatform unsetName()
	 * @method \string fillName()
	 * @method \string getDescription()
	 * @method \Bitrix\Sale\EO_TradingPlatform setDescription(\string|\Bitrix\Main\DB\SqlExpression $description)
	 * @method bool hasDescription()
	 * @method bool isDescriptionFilled()
	 * @method bool isDescriptionChanged()
	 * @method \string remindActualDescription()
	 * @method \string requireDescription()
	 * @method \Bitrix\Sale\EO_TradingPlatform resetDescription()
	 * @method \Bitrix\Sale\EO_TradingPlatform unsetDescription()
	 * @method \string fillDescription()
	 * @method \string getSettings()
	 * @method \Bitrix\Sale\EO_TradingPlatform setSettings(\string|\Bitrix\Main\DB\SqlExpression $settings)
	 * @method bool hasSettings()
	 * @method bool isSettingsFilled()
	 * @method bool isSettingsChanged()
	 * @method \string remindActualSettings()
	 * @method \string requireSettings()
	 * @method \Bitrix\Sale\EO_TradingPlatform resetSettings()
	 * @method \Bitrix\Sale\EO_TradingPlatform unsetSettings()
	 * @method \string fillSettings()
	 * @method \string getCatalogSectionTabClassName()
	 * @method \Bitrix\Sale\EO_TradingPlatform setCatalogSectionTabClassName(\string|\Bitrix\Main\DB\SqlExpression $catalogSectionTabClassName)
	 * @method bool hasCatalogSectionTabClassName()
	 * @method bool isCatalogSectionTabClassNameFilled()
	 * @method bool isCatalogSectionTabClassNameChanged()
	 * @method \string remindActualCatalogSectionTabClassName()
	 * @method \string requireCatalogSectionTabClassName()
	 * @method \Bitrix\Sale\EO_TradingPlatform resetCatalogSectionTabClassName()
	 * @method \Bitrix\Sale\EO_TradingPlatform unsetCatalogSectionTabClassName()
	 * @method \string fillCatalogSectionTabClassName()
	 * @method \string getClass()
	 * @method \Bitrix\Sale\EO_TradingPlatform setClass(\string|\Bitrix\Main\DB\SqlExpression $class)
	 * @method bool hasClass()
	 * @method bool isClassFilled()
	 * @method bool isClassChanged()
	 * @method \string remindActualClass()
	 * @method \string requireClass()
	 * @method \Bitrix\Sale\EO_TradingPlatform resetClass()
	 * @method \Bitrix\Sale\EO_TradingPlatform unsetClass()
	 * @method \string fillClass()
	 * @method \string getXmlId()
	 * @method \Bitrix\Sale\EO_TradingPlatform setXmlId(\string|\Bitrix\Main\DB\SqlExpression $xmlId)
	 * @method bool hasXmlId()
	 * @method bool isXmlIdFilled()
	 * @method bool isXmlIdChanged()
	 * @method \string remindActualXmlId()
	 * @method \string requireXmlId()
	 * @method \Bitrix\Sale\EO_TradingPlatform resetXmlId()
	 * @method \Bitrix\Sale\EO_TradingPlatform unsetXmlId()
	 * @method \string fillXmlId()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Sale\EO_TradingPlatform set($fieldName, $value)
	 * @method \Bitrix\Sale\EO_TradingPlatform reset($fieldName)
	 * @method \Bitrix\Sale\EO_TradingPlatform unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Sale\EO_TradingPlatform wakeUp($data)
	 */
	class EO_TradingPlatform {
		/* @var \Bitrix\Sale\TradingPlatformTable */
		static public $dataClass = '\Bitrix\Sale\TradingPlatformTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Sale {
	/**
	 * EO_TradingPlatform_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getIdList()
	 * @method \string[] getCodeList()
	 * @method \string[] fillCode()
	 * @method \string[] getActiveList()
	 * @method \string[] fillActive()
	 * @method \string[] getNameList()
	 * @method \string[] fillName()
	 * @method \string[] getDescriptionList()
	 * @method \string[] fillDescription()
	 * @method \string[] getSettingsList()
	 * @method \string[] fillSettings()
	 * @method \string[] getCatalogSectionTabClassNameList()
	 * @method \string[] fillCatalogSectionTabClassName()
	 * @method \string[] getClassList()
	 * @method \string[] fillClass()
	 * @method \string[] getXmlIdList()
	 * @method \string[] fillXmlId()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Sale\EO_TradingPlatform $object)
	 * @method bool has(\Bitrix\Sale\EO_TradingPlatform $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Sale\EO_TradingPlatform getByPrimary($primary)
	 * @method \Bitrix\Sale\EO_TradingPlatform[] getAll()
	 * @method bool remove(\Bitrix\Sale\EO_TradingPlatform $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Sale\EO_TradingPlatform_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Sale\EO_TradingPlatform current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 * @method EO_TradingPlatform_Collection merge(?EO_TradingPlatform_Collection $collection)
	 * @method bool isEmpty()
	 */
	class EO_TradingPlatform_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Sale\TradingPlatformTable */
		static public $dataClass = '\Bitrix\Sale\TradingPlatformTable';
	}
}
namespace Bitrix\Sale {
	/**
	 * Common methods:
	 * ---------------
	 *
	 * @method EO_TradingPlatform_Result exec()
	 * @method \Bitrix\Sale\EO_TradingPlatform fetchObject()
	 * @method \Bitrix\Sale\EO_TradingPlatform_Collection fetchCollection()
	 *
	 * Custom methods:
	 * ---------------
	 *
	 */
	class EO_TradingPlatform_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Sale\EO_TradingPlatform fetchObject()
	 * @method \Bitrix\Sale\EO_TradingPlatform_Collection fetchCollection()
	 */
	class EO_TradingPlatform_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Sale\EO_TradingPlatform createObject($setDefaultValues = true)
	 * @method \Bitrix\Sale\EO_TradingPlatform_Collection createCollection()
	 * @method \Bitrix\Sale\EO_TradingPlatform wakeUpObject($row)
	 * @method \Bitrix\Sale\EO_TradingPlatform_Collection wakeUpCollection($rows)
	 */
	class EO_TradingPlatform_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Sale\Internals\UserGroupRestrictionTable:sale\lib\internals\usergrouprestriction.php */
namespace Bitrix\Sale\Internals {
	/**
	 * EO_UserGroupRestriction
	 * @see \Bitrix\Sale\Internals\UserGroupRestrictionTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getId()
	 * @method \Bitrix\Sale\Internals\EO_UserGroupRestriction setId(\int|\Bitrix\Main\DB\SqlExpression $id)
	 * @method bool hasId()
	 * @method bool isIdFilled()
	 * @method bool isIdChanged()
	 * @method \int getEntityId()
	 * @method \Bitrix\Sale\Internals\EO_UserGroupRestriction setEntityId(\int|\Bitrix\Main\DB\SqlExpression $entityId)
	 * @method bool hasEntityId()
	 * @method bool isEntityIdFilled()
	 * @method bool isEntityIdChanged()
	 * @method \int remindActualEntityId()
	 * @method \int requireEntityId()
	 * @method \Bitrix\Sale\Internals\EO_UserGroupRestriction resetEntityId()
	 * @method \Bitrix\Sale\Internals\EO_UserGroupRestriction unsetEntityId()
	 * @method \int fillEntityId()
	 * @method \int getEntityTypeId()
	 * @method \Bitrix\Sale\Internals\EO_UserGroupRestriction setEntityTypeId(\int|\Bitrix\Main\DB\SqlExpression $entityTypeId)
	 * @method bool hasEntityTypeId()
	 * @method bool isEntityTypeIdFilled()
	 * @method bool isEntityTypeIdChanged()
	 * @method \int remindActualEntityTypeId()
	 * @method \int requireEntityTypeId()
	 * @method \Bitrix\Sale\Internals\EO_UserGroupRestriction resetEntityTypeId()
	 * @method \Bitrix\Sale\Internals\EO_UserGroupRestriction unsetEntityTypeId()
	 * @method \int fillEntityTypeId()
	 * @method \int getGroupId()
	 * @method \Bitrix\Sale\Internals\EO_UserGroupRestriction setGroupId(\int|\Bitrix\Main\DB\SqlExpression $groupId)
	 * @method bool hasGroupId()
	 * @method bool isGroupIdFilled()
	 * @method bool isGroupIdChanged()
	 * @method \int remindActualGroupId()
	 * @method \int requireGroupId()
	 * @method \Bitrix\Sale\Internals\EO_UserGroupRestriction resetGroupId()
	 * @method \Bitrix\Sale\Internals\EO_UserGroupRestriction unsetGroupId()
	 * @method \int fillGroupId()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Sale\Internals\EO_UserGroupRestriction set($fieldName, $value)
	 * @method \Bitrix\Sale\Internals\EO_UserGroupRestriction reset($fieldName)
	 * @method \Bitrix\Sale\Internals\EO_UserGroupRestriction unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Sale\Internals\EO_UserGroupRestriction wakeUp($data)
	 */
	class EO_UserGroupRestriction {
		/* @var \Bitrix\Sale\Internals\UserGroupRestrictionTable */
		static public $dataClass = '\Bitrix\Sale\Internals\UserGroupRestrictionTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Sale\Internals {
	/**
	 * EO_UserGroupRestriction_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getIdList()
	 * @method \int[] getEntityIdList()
	 * @method \int[] fillEntityId()
	 * @method \int[] getEntityTypeIdList()
	 * @method \int[] fillEntityTypeId()
	 * @method \int[] getGroupIdList()
	 * @method \int[] fillGroupId()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Sale\Internals\EO_UserGroupRestriction $object)
	 * @method bool has(\Bitrix\Sale\Internals\EO_UserGroupRestriction $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Sale\Internals\EO_UserGroupRestriction getByPrimary($primary)
	 * @method \Bitrix\Sale\Internals\EO_UserGroupRestriction[] getAll()
	 * @method bool remove(\Bitrix\Sale\Internals\EO_UserGroupRestriction $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Sale\Internals\EO_UserGroupRestriction_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Sale\Internals\EO_UserGroupRestriction current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 * @method EO_UserGroupRestriction_Collection merge(?EO_UserGroupRestriction_Collection $collection)
	 * @method bool isEmpty()
	 */
	class EO_UserGroupRestriction_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Sale\Internals\UserGroupRestrictionTable */
		static public $dataClass = '\Bitrix\Sale\Internals\UserGroupRestrictionTable';
	}
}
namespace Bitrix\Sale\Internals {
	/**
	 * Common methods:
	 * ---------------
	 *
	 * @method EO_UserGroupRestriction_Result exec()
	 * @method \Bitrix\Sale\Internals\EO_UserGroupRestriction fetchObject()
	 * @method \Bitrix\Sale\Internals\EO_UserGroupRestriction_Collection fetchCollection()
	 *
	 * Custom methods:
	 * ---------------
	 *
	 */
	class EO_UserGroupRestriction_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Sale\Internals\EO_UserGroupRestriction fetchObject()
	 * @method \Bitrix\Sale\Internals\EO_UserGroupRestriction_Collection fetchCollection()
	 */
	class EO_UserGroupRestriction_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Sale\Internals\EO_UserGroupRestriction createObject($setDefaultValues = true)
	 * @method \Bitrix\Sale\Internals\EO_UserGroupRestriction_Collection createCollection()
	 * @method \Bitrix\Sale\Internals\EO_UserGroupRestriction wakeUpObject($row)
	 * @method \Bitrix\Sale\Internals\EO_UserGroupRestriction_Collection wakeUpCollection($rows)
	 */
	class EO_UserGroupRestriction_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Sale\Internals\UserPropsTable:sale\lib\internals\userprops.php */
namespace Bitrix\Sale\Internals {
	/**
	 * EO_UserProps
	 * @see \Bitrix\Sale\Internals\UserPropsTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getId()
	 * @method \Bitrix\Sale\Internals\EO_UserProps setId(\int|\Bitrix\Main\DB\SqlExpression $id)
	 * @method bool hasId()
	 * @method bool isIdFilled()
	 * @method bool isIdChanged()
	 * @method \string getName()
	 * @method \Bitrix\Sale\Internals\EO_UserProps setName(\string|\Bitrix\Main\DB\SqlExpression $name)
	 * @method bool hasName()
	 * @method bool isNameFilled()
	 * @method bool isNameChanged()
	 * @method \string remindActualName()
	 * @method \string requireName()
	 * @method \Bitrix\Sale\Internals\EO_UserProps resetName()
	 * @method \Bitrix\Sale\Internals\EO_UserProps unsetName()
	 * @method \string fillName()
	 * @method \int getUserId()
	 * @method \Bitrix\Sale\Internals\EO_UserProps setUserId(\int|\Bitrix\Main\DB\SqlExpression $userId)
	 * @method bool hasUserId()
	 * @method bool isUserIdFilled()
	 * @method bool isUserIdChanged()
	 * @method \int remindActualUserId()
	 * @method \int requireUserId()
	 * @method \Bitrix\Sale\Internals\EO_UserProps resetUserId()
	 * @method \Bitrix\Sale\Internals\EO_UserProps unsetUserId()
	 * @method \int fillUserId()
	 * @method \int getPersonTypeId()
	 * @method \Bitrix\Sale\Internals\EO_UserProps setPersonTypeId(\int|\Bitrix\Main\DB\SqlExpression $personTypeId)
	 * @method bool hasPersonTypeId()
	 * @method bool isPersonTypeIdFilled()
	 * @method bool isPersonTypeIdChanged()
	 * @method \int remindActualPersonTypeId()
	 * @method \int requirePersonTypeId()
	 * @method \Bitrix\Sale\Internals\EO_UserProps resetPersonTypeId()
	 * @method \Bitrix\Sale\Internals\EO_UserProps unsetPersonTypeId()
	 * @method \int fillPersonTypeId()
	 * @method \Bitrix\Main\Type\DateTime getDateUpdate()
	 * @method \Bitrix\Sale\Internals\EO_UserProps setDateUpdate(\Bitrix\Main\Type\DateTime|\Bitrix\Main\DB\SqlExpression $dateUpdate)
	 * @method bool hasDateUpdate()
	 * @method bool isDateUpdateFilled()
	 * @method bool isDateUpdateChanged()
	 * @method \Bitrix\Main\Type\DateTime remindActualDateUpdate()
	 * @method \Bitrix\Main\Type\DateTime requireDateUpdate()
	 * @method \Bitrix\Sale\Internals\EO_UserProps resetDateUpdate()
	 * @method \Bitrix\Sale\Internals\EO_UserProps unsetDateUpdate()
	 * @method \Bitrix\Main\Type\DateTime fillDateUpdate()
	 * @method \string getXmlId()
	 * @method \Bitrix\Sale\Internals\EO_UserProps setXmlId(\string|\Bitrix\Main\DB\SqlExpression $xmlId)
	 * @method bool hasXmlId()
	 * @method bool isXmlIdFilled()
	 * @method bool isXmlIdChanged()
	 * @method \string remindActualXmlId()
	 * @method \string requireXmlId()
	 * @method \Bitrix\Sale\Internals\EO_UserProps resetXmlId()
	 * @method \Bitrix\Sale\Internals\EO_UserProps unsetXmlId()
	 * @method \string fillXmlId()
	 * @method \string getVersion1c()
	 * @method \Bitrix\Sale\Internals\EO_UserProps setVersion1c(\string|\Bitrix\Main\DB\SqlExpression $version1c)
	 * @method bool hasVersion1c()
	 * @method bool isVersion1cFilled()
	 * @method bool isVersion1cChanged()
	 * @method \string remindActualVersion1c()
	 * @method \string requireVersion1c()
	 * @method \Bitrix\Sale\Internals\EO_UserProps resetVersion1c()
	 * @method \Bitrix\Sale\Internals\EO_UserProps unsetVersion1c()
	 * @method \string fillVersion1c()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Sale\Internals\EO_UserProps set($fieldName, $value)
	 * @method \Bitrix\Sale\Internals\EO_UserProps reset($fieldName)
	 * @method \Bitrix\Sale\Internals\EO_UserProps unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Sale\Internals\EO_UserProps wakeUp($data)
	 */
	class EO_UserProps {
		/* @var \Bitrix\Sale\Internals\UserPropsTable */
		static public $dataClass = '\Bitrix\Sale\Internals\UserPropsTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Sale\Internals {
	/**
	 * EO_UserProps_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getIdList()
	 * @method \string[] getNameList()
	 * @method \string[] fillName()
	 * @method \int[] getUserIdList()
	 * @method \int[] fillUserId()
	 * @method \int[] getPersonTypeIdList()
	 * @method \int[] fillPersonTypeId()
	 * @method \Bitrix\Main\Type\DateTime[] getDateUpdateList()
	 * @method \Bitrix\Main\Type\DateTime[] fillDateUpdate()
	 * @method \string[] getXmlIdList()
	 * @method \string[] fillXmlId()
	 * @method \string[] getVersion1cList()
	 * @method \string[] fillVersion1c()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Sale\Internals\EO_UserProps $object)
	 * @method bool has(\Bitrix\Sale\Internals\EO_UserProps $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Sale\Internals\EO_UserProps getByPrimary($primary)
	 * @method \Bitrix\Sale\Internals\EO_UserProps[] getAll()
	 * @method bool remove(\Bitrix\Sale\Internals\EO_UserProps $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Sale\Internals\EO_UserProps_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Sale\Internals\EO_UserProps current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 * @method EO_UserProps_Collection merge(?EO_UserProps_Collection $collection)
	 * @method bool isEmpty()
	 */
	class EO_UserProps_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Sale\Internals\UserPropsTable */
		static public $dataClass = '\Bitrix\Sale\Internals\UserPropsTable';
	}
}
namespace Bitrix\Sale\Internals {
	/**
	 * Common methods:
	 * ---------------
	 *
	 * @method EO_UserProps_Result exec()
	 * @method \Bitrix\Sale\Internals\EO_UserProps fetchObject()
	 * @method \Bitrix\Sale\Internals\EO_UserProps_Collection fetchCollection()
	 *
	 * Custom methods:
	 * ---------------
	 *
	 */
	class EO_UserProps_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Sale\Internals\EO_UserProps fetchObject()
	 * @method \Bitrix\Sale\Internals\EO_UserProps_Collection fetchCollection()
	 */
	class EO_UserProps_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Sale\Internals\EO_UserProps createObject($setDefaultValues = true)
	 * @method \Bitrix\Sale\Internals\EO_UserProps_Collection createCollection()
	 * @method \Bitrix\Sale\Internals\EO_UserProps wakeUpObject($row)
	 * @method \Bitrix\Sale\Internals\EO_UserProps_Collection wakeUpCollection($rows)
	 */
	class EO_UserProps_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Sale\Internals\UserPropsValueTable:sale\lib\internals\userpropsvalue.php */
namespace Bitrix\Sale\Internals {
	/**
	 * EO_UserPropsValue
	 * @see \Bitrix\Sale\Internals\UserPropsValueTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getId()
	 * @method \Bitrix\Sale\Internals\EO_UserPropsValue setId(\int|\Bitrix\Main\DB\SqlExpression $id)
	 * @method bool hasId()
	 * @method bool isIdFilled()
	 * @method bool isIdChanged()
	 * @method \int getUserPropsId()
	 * @method \Bitrix\Sale\Internals\EO_UserPropsValue setUserPropsId(\int|\Bitrix\Main\DB\SqlExpression $userPropsId)
	 * @method bool hasUserPropsId()
	 * @method bool isUserPropsIdFilled()
	 * @method bool isUserPropsIdChanged()
	 * @method \int remindActualUserPropsId()
	 * @method \int requireUserPropsId()
	 * @method \Bitrix\Sale\Internals\EO_UserPropsValue resetUserPropsId()
	 * @method \Bitrix\Sale\Internals\EO_UserPropsValue unsetUserPropsId()
	 * @method \int fillUserPropsId()
	 * @method \int getOrderPropsId()
	 * @method \Bitrix\Sale\Internals\EO_UserPropsValue setOrderPropsId(\int|\Bitrix\Main\DB\SqlExpression $orderPropsId)
	 * @method bool hasOrderPropsId()
	 * @method bool isOrderPropsIdFilled()
	 * @method bool isOrderPropsIdChanged()
	 * @method \int remindActualOrderPropsId()
	 * @method \int requireOrderPropsId()
	 * @method \Bitrix\Sale\Internals\EO_UserPropsValue resetOrderPropsId()
	 * @method \Bitrix\Sale\Internals\EO_UserPropsValue unsetOrderPropsId()
	 * @method \int fillOrderPropsId()
	 * @method \string getName()
	 * @method \Bitrix\Sale\Internals\EO_UserPropsValue setName(\string|\Bitrix\Main\DB\SqlExpression $name)
	 * @method bool hasName()
	 * @method bool isNameFilled()
	 * @method bool isNameChanged()
	 * @method \string remindActualName()
	 * @method \string requireName()
	 * @method \Bitrix\Sale\Internals\EO_UserPropsValue resetName()
	 * @method \Bitrix\Sale\Internals\EO_UserPropsValue unsetName()
	 * @method \string fillName()
	 * @method \string getValue()
	 * @method \Bitrix\Sale\Internals\EO_UserPropsValue setValue(\string|\Bitrix\Main\DB\SqlExpression $value)
	 * @method bool hasValue()
	 * @method bool isValueFilled()
	 * @method bool isValueChanged()
	 * @method \string remindActualValue()
	 * @method \string requireValue()
	 * @method \Bitrix\Sale\Internals\EO_UserPropsValue resetValue()
	 * @method \Bitrix\Sale\Internals\EO_UserPropsValue unsetValue()
	 * @method \string fillValue()
	 * @method \Bitrix\Sale\Internals\EO_OrderProps getProperty()
	 * @method \Bitrix\Sale\Internals\EO_OrderProps remindActualProperty()
	 * @method \Bitrix\Sale\Internals\EO_OrderProps requireProperty()
	 * @method \Bitrix\Sale\Internals\EO_UserPropsValue setProperty(\Bitrix\Sale\Internals\EO_OrderProps $object)
	 * @method \Bitrix\Sale\Internals\EO_UserPropsValue resetProperty()
	 * @method \Bitrix\Sale\Internals\EO_UserPropsValue unsetProperty()
	 * @method bool hasProperty()
	 * @method bool isPropertyFilled()
	 * @method bool isPropertyChanged()
	 * @method \Bitrix\Sale\Internals\EO_OrderProps fillProperty()
	 * @method \Bitrix\Sale\Internals\EO_UserProps getUserProperty()
	 * @method \Bitrix\Sale\Internals\EO_UserProps remindActualUserProperty()
	 * @method \Bitrix\Sale\Internals\EO_UserProps requireUserProperty()
	 * @method \Bitrix\Sale\Internals\EO_UserPropsValue setUserProperty(\Bitrix\Sale\Internals\EO_UserProps $object)
	 * @method \Bitrix\Sale\Internals\EO_UserPropsValue resetUserProperty()
	 * @method \Bitrix\Sale\Internals\EO_UserPropsValue unsetUserProperty()
	 * @method bool hasUserProperty()
	 * @method bool isUserPropertyFilled()
	 * @method bool isUserPropertyChanged()
	 * @method \Bitrix\Sale\Internals\EO_UserProps fillUserProperty()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Sale\Internals\EO_UserPropsValue set($fieldName, $value)
	 * @method \Bitrix\Sale\Internals\EO_UserPropsValue reset($fieldName)
	 * @method \Bitrix\Sale\Internals\EO_UserPropsValue unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Sale\Internals\EO_UserPropsValue wakeUp($data)
	 */
	class EO_UserPropsValue {
		/* @var \Bitrix\Sale\Internals\UserPropsValueTable */
		static public $dataClass = '\Bitrix\Sale\Internals\UserPropsValueTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Sale\Internals {
	/**
	 * EO_UserPropsValue_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getIdList()
	 * @method \int[] getUserPropsIdList()
	 * @method \int[] fillUserPropsId()
	 * @method \int[] getOrderPropsIdList()
	 * @method \int[] fillOrderPropsId()
	 * @method \string[] getNameList()
	 * @method \string[] fillName()
	 * @method \string[] getValueList()
	 * @method \string[] fillValue()
	 * @method \Bitrix\Sale\Internals\EO_OrderProps[] getPropertyList()
	 * @method \Bitrix\Sale\Internals\EO_UserPropsValue_Collection getPropertyCollection()
	 * @method \Bitrix\Sale\Internals\EO_OrderProps_Collection fillProperty()
	 * @method \Bitrix\Sale\Internals\EO_UserProps[] getUserPropertyList()
	 * @method \Bitrix\Sale\Internals\EO_UserPropsValue_Collection getUserPropertyCollection()
	 * @method \Bitrix\Sale\Internals\EO_UserProps_Collection fillUserProperty()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Sale\Internals\EO_UserPropsValue $object)
	 * @method bool has(\Bitrix\Sale\Internals\EO_UserPropsValue $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Sale\Internals\EO_UserPropsValue getByPrimary($primary)
	 * @method \Bitrix\Sale\Internals\EO_UserPropsValue[] getAll()
	 * @method bool remove(\Bitrix\Sale\Internals\EO_UserPropsValue $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Sale\Internals\EO_UserPropsValue_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Sale\Internals\EO_UserPropsValue current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 * @method EO_UserPropsValue_Collection merge(?EO_UserPropsValue_Collection $collection)
	 * @method bool isEmpty()
	 */
	class EO_UserPropsValue_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Sale\Internals\UserPropsValueTable */
		static public $dataClass = '\Bitrix\Sale\Internals\UserPropsValueTable';
	}
}
namespace Bitrix\Sale\Internals {
	/**
	 * Common methods:
	 * ---------------
	 *
	 * @method EO_UserPropsValue_Result exec()
	 * @method \Bitrix\Sale\Internals\EO_UserPropsValue fetchObject()
	 * @method \Bitrix\Sale\Internals\EO_UserPropsValue_Collection fetchCollection()
	 *
	 * Custom methods:
	 * ---------------
	 *
	 */
	class EO_UserPropsValue_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Sale\Internals\EO_UserPropsValue fetchObject()
	 * @method \Bitrix\Sale\Internals\EO_UserPropsValue_Collection fetchCollection()
	 */
	class EO_UserPropsValue_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Sale\Internals\EO_UserPropsValue createObject($setDefaultValues = true)
	 * @method \Bitrix\Sale\Internals\EO_UserPropsValue_Collection createCollection()
	 * @method \Bitrix\Sale\Internals\EO_UserPropsValue wakeUpObject($row)
	 * @method \Bitrix\Sale\Internals\EO_UserPropsValue_Collection wakeUpCollection($rows)
	 */
	class EO_UserPropsValue_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Sale\Internals\UserTransactTable:sale\lib\internals\usertransacttable.php */
namespace Bitrix\Sale\Internals {
	/**
	 * EO_UserTransact
	 * @see \Bitrix\Sale\Internals\UserTransactTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getId()
	 * @method \Bitrix\Sale\Internals\EO_UserTransact setId(\int|\Bitrix\Main\DB\SqlExpression $id)
	 * @method bool hasId()
	 * @method bool isIdFilled()
	 * @method bool isIdChanged()
	 * @method \int getUserId()
	 * @method \Bitrix\Sale\Internals\EO_UserTransact setUserId(\int|\Bitrix\Main\DB\SqlExpression $userId)
	 * @method bool hasUserId()
	 * @method bool isUserIdFilled()
	 * @method bool isUserIdChanged()
	 * @method \int remindActualUserId()
	 * @method \int requireUserId()
	 * @method \Bitrix\Sale\Internals\EO_UserTransact resetUserId()
	 * @method \Bitrix\Sale\Internals\EO_UserTransact unsetUserId()
	 * @method \int fillUserId()
	 * @method \Bitrix\Main\Type\DateTime getTimestampX()
	 * @method \Bitrix\Sale\Internals\EO_UserTransact setTimestampX(\Bitrix\Main\Type\DateTime|\Bitrix\Main\DB\SqlExpression $timestampX)
	 * @method bool hasTimestampX()
	 * @method bool isTimestampXFilled()
	 * @method bool isTimestampXChanged()
	 * @method \Bitrix\Main\Type\DateTime remindActualTimestampX()
	 * @method \Bitrix\Main\Type\DateTime requireTimestampX()
	 * @method \Bitrix\Sale\Internals\EO_UserTransact resetTimestampX()
	 * @method \Bitrix\Sale\Internals\EO_UserTransact unsetTimestampX()
	 * @method \Bitrix\Main\Type\DateTime fillTimestampX()
	 * @method \Bitrix\Main\Type\DateTime getTransactDate()
	 * @method \Bitrix\Sale\Internals\EO_UserTransact setTransactDate(\Bitrix\Main\Type\DateTime|\Bitrix\Main\DB\SqlExpression $transactDate)
	 * @method bool hasTransactDate()
	 * @method bool isTransactDateFilled()
	 * @method bool isTransactDateChanged()
	 * @method \Bitrix\Main\Type\DateTime remindActualTransactDate()
	 * @method \Bitrix\Main\Type\DateTime requireTransactDate()
	 * @method \Bitrix\Sale\Internals\EO_UserTransact resetTransactDate()
	 * @method \Bitrix\Sale\Internals\EO_UserTransact unsetTransactDate()
	 * @method \Bitrix\Main\Type\DateTime fillTransactDate()
	 * @method \float getAmount()
	 * @method \Bitrix\Sale\Internals\EO_UserTransact setAmount(\float|\Bitrix\Main\DB\SqlExpression $amount)
	 * @method bool hasAmount()
	 * @method bool isAmountFilled()
	 * @method bool isAmountChanged()
	 * @method \float remindActualAmount()
	 * @method \float requireAmount()
	 * @method \Bitrix\Sale\Internals\EO_UserTransact resetAmount()
	 * @method \Bitrix\Sale\Internals\EO_UserTransact unsetAmount()
	 * @method \float fillAmount()
	 * @method \string getCurrency()
	 * @method \Bitrix\Sale\Internals\EO_UserTransact setCurrency(\string|\Bitrix\Main\DB\SqlExpression $currency)
	 * @method bool hasCurrency()
	 * @method bool isCurrencyFilled()
	 * @method bool isCurrencyChanged()
	 * @method \string remindActualCurrency()
	 * @method \string requireCurrency()
	 * @method \Bitrix\Sale\Internals\EO_UserTransact resetCurrency()
	 * @method \Bitrix\Sale\Internals\EO_UserTransact unsetCurrency()
	 * @method \string fillCurrency()
	 * @method \boolean getDebit()
	 * @method \Bitrix\Sale\Internals\EO_UserTransact setDebit(\boolean|\Bitrix\Main\DB\SqlExpression $debit)
	 * @method bool hasDebit()
	 * @method bool isDebitFilled()
	 * @method bool isDebitChanged()
	 * @method \boolean remindActualDebit()
	 * @method \boolean requireDebit()
	 * @method \Bitrix\Sale\Internals\EO_UserTransact resetDebit()
	 * @method \Bitrix\Sale\Internals\EO_UserTransact unsetDebit()
	 * @method \boolean fillDebit()
	 * @method \int getOrderId()
	 * @method \Bitrix\Sale\Internals\EO_UserTransact setOrderId(\int|\Bitrix\Main\DB\SqlExpression $orderId)
	 * @method bool hasOrderId()
	 * @method bool isOrderIdFilled()
	 * @method bool isOrderIdChanged()
	 * @method \int remindActualOrderId()
	 * @method \int requireOrderId()
	 * @method \Bitrix\Sale\Internals\EO_UserTransact resetOrderId()
	 * @method \Bitrix\Sale\Internals\EO_UserTransact unsetOrderId()
	 * @method \int fillOrderId()
	 * @method \string getDescription()
	 * @method \Bitrix\Sale\Internals\EO_UserTransact setDescription(\string|\Bitrix\Main\DB\SqlExpression $description)
	 * @method bool hasDescription()
	 * @method bool isDescriptionFilled()
	 * @method bool isDescriptionChanged()
	 * @method \string remindActualDescription()
	 * @method \string requireDescription()
	 * @method \Bitrix\Sale\Internals\EO_UserTransact resetDescription()
	 * @method \Bitrix\Sale\Internals\EO_UserTransact unsetDescription()
	 * @method \string fillDescription()
	 * @method \string getNotes()
	 * @method \Bitrix\Sale\Internals\EO_UserTransact setNotes(\string|\Bitrix\Main\DB\SqlExpression $notes)
	 * @method bool hasNotes()
	 * @method bool isNotesFilled()
	 * @method bool isNotesChanged()
	 * @method \string remindActualNotes()
	 * @method \string requireNotes()
	 * @method \Bitrix\Sale\Internals\EO_UserTransact resetNotes()
	 * @method \Bitrix\Sale\Internals\EO_UserTransact unsetNotes()
	 * @method \string fillNotes()
	 * @method \int getPaymentId()
	 * @method \Bitrix\Sale\Internals\EO_UserTransact setPaymentId(\int|\Bitrix\Main\DB\SqlExpression $paymentId)
	 * @method bool hasPaymentId()
	 * @method bool isPaymentIdFilled()
	 * @method bool isPaymentIdChanged()
	 * @method \int remindActualPaymentId()
	 * @method \int requirePaymentId()
	 * @method \Bitrix\Sale\Internals\EO_UserTransact resetPaymentId()
	 * @method \Bitrix\Sale\Internals\EO_UserTransact unsetPaymentId()
	 * @method \int fillPaymentId()
	 * @method \int getEmployeeId()
	 * @method \Bitrix\Sale\Internals\EO_UserTransact setEmployeeId(\int|\Bitrix\Main\DB\SqlExpression $employeeId)
	 * @method bool hasEmployeeId()
	 * @method bool isEmployeeIdFilled()
	 * @method bool isEmployeeIdChanged()
	 * @method \int remindActualEmployeeId()
	 * @method \int requireEmployeeId()
	 * @method \Bitrix\Sale\Internals\EO_UserTransact resetEmployeeId()
	 * @method \Bitrix\Sale\Internals\EO_UserTransact unsetEmployeeId()
	 * @method \int fillEmployeeId()
	 * @method \Bitrix\Sale\Internals\EO_Order getOrder()
	 * @method \Bitrix\Sale\Internals\EO_Order remindActualOrder()
	 * @method \Bitrix\Sale\Internals\EO_Order requireOrder()
	 * @method \Bitrix\Sale\Internals\EO_UserTransact setOrder(\Bitrix\Sale\Internals\EO_Order $object)
	 * @method \Bitrix\Sale\Internals\EO_UserTransact resetOrder()
	 * @method \Bitrix\Sale\Internals\EO_UserTransact unsetOrder()
	 * @method bool hasOrder()
	 * @method bool isOrderFilled()
	 * @method bool isOrderChanged()
	 * @method \Bitrix\Sale\Internals\EO_Order fillOrder()
	 * @method \Bitrix\Sale\Internals\EO_Payment getPayment()
	 * @method \Bitrix\Sale\Internals\EO_Payment remindActualPayment()
	 * @method \Bitrix\Sale\Internals\EO_Payment requirePayment()
	 * @method \Bitrix\Sale\Internals\EO_UserTransact setPayment(\Bitrix\Sale\Internals\EO_Payment $object)
	 * @method \Bitrix\Sale\Internals\EO_UserTransact resetPayment()
	 * @method \Bitrix\Sale\Internals\EO_UserTransact unsetPayment()
	 * @method bool hasPayment()
	 * @method bool isPaymentFilled()
	 * @method bool isPaymentChanged()
	 * @method \Bitrix\Sale\Internals\EO_Payment fillPayment()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Sale\Internals\EO_UserTransact set($fieldName, $value)
	 * @method \Bitrix\Sale\Internals\EO_UserTransact reset($fieldName)
	 * @method \Bitrix\Sale\Internals\EO_UserTransact unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Sale\Internals\EO_UserTransact wakeUp($data)
	 */
	class EO_UserTransact {
		/* @var \Bitrix\Sale\Internals\UserTransactTable */
		static public $dataClass = '\Bitrix\Sale\Internals\UserTransactTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Sale\Internals {
	/**
	 * EO_UserTransact_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getIdList()
	 * @method \int[] getUserIdList()
	 * @method \int[] fillUserId()
	 * @method \Bitrix\Main\Type\DateTime[] getTimestampXList()
	 * @method \Bitrix\Main\Type\DateTime[] fillTimestampX()
	 * @method \Bitrix\Main\Type\DateTime[] getTransactDateList()
	 * @method \Bitrix\Main\Type\DateTime[] fillTransactDate()
	 * @method \float[] getAmountList()
	 * @method \float[] fillAmount()
	 * @method \string[] getCurrencyList()
	 * @method \string[] fillCurrency()
	 * @method \boolean[] getDebitList()
	 * @method \boolean[] fillDebit()
	 * @method \int[] getOrderIdList()
	 * @method \int[] fillOrderId()
	 * @method \string[] getDescriptionList()
	 * @method \string[] fillDescription()
	 * @method \string[] getNotesList()
	 * @method \string[] fillNotes()
	 * @method \int[] getPaymentIdList()
	 * @method \int[] fillPaymentId()
	 * @method \int[] getEmployeeIdList()
	 * @method \int[] fillEmployeeId()
	 * @method \Bitrix\Sale\Internals\EO_Order[] getOrderList()
	 * @method \Bitrix\Sale\Internals\EO_UserTransact_Collection getOrderCollection()
	 * @method \Bitrix\Sale\Internals\EO_Order_Collection fillOrder()
	 * @method \Bitrix\Sale\Internals\EO_Payment[] getPaymentList()
	 * @method \Bitrix\Sale\Internals\EO_UserTransact_Collection getPaymentCollection()
	 * @method \Bitrix\Sale\Internals\EO_Payment_Collection fillPayment()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Sale\Internals\EO_UserTransact $object)
	 * @method bool has(\Bitrix\Sale\Internals\EO_UserTransact $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Sale\Internals\EO_UserTransact getByPrimary($primary)
	 * @method \Bitrix\Sale\Internals\EO_UserTransact[] getAll()
	 * @method bool remove(\Bitrix\Sale\Internals\EO_UserTransact $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Sale\Internals\EO_UserTransact_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Sale\Internals\EO_UserTransact current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 * @method EO_UserTransact_Collection merge(?EO_UserTransact_Collection $collection)
	 * @method bool isEmpty()
	 */
	class EO_UserTransact_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Sale\Internals\UserTransactTable */
		static public $dataClass = '\Bitrix\Sale\Internals\UserTransactTable';
	}
}
namespace Bitrix\Sale\Internals {
	/**
	 * Common methods:
	 * ---------------
	 *
	 * @method EO_UserTransact_Result exec()
	 * @method \Bitrix\Sale\Internals\EO_UserTransact fetchObject()
	 * @method \Bitrix\Sale\Internals\EO_UserTransact_Collection fetchCollection()
	 *
	 * Custom methods:
	 * ---------------
	 *
	 */
	class EO_UserTransact_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Sale\Internals\EO_UserTransact fetchObject()
	 * @method \Bitrix\Sale\Internals\EO_UserTransact_Collection fetchCollection()
	 */
	class EO_UserTransact_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Sale\Internals\EO_UserTransact createObject($setDefaultValues = true)
	 * @method \Bitrix\Sale\Internals\EO_UserTransact_Collection createCollection()
	 * @method \Bitrix\Sale\Internals\EO_UserTransact wakeUpObject($row)
	 * @method \Bitrix\Sale\Internals\EO_UserTransact_Collection wakeUpCollection($rows)
	 */
	class EO_UserTransact_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Sale\Internals\YandexSettingsTable:sale\lib\internals\yandexsettings.php */
namespace Bitrix\Sale\Internals {
	/**
	 * EO_YandexSettings
	 * @see \Bitrix\Sale\Internals\YandexSettingsTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getShopId()
	 * @method \Bitrix\Sale\Internals\EO_YandexSettings setShopId(\int|\Bitrix\Main\DB\SqlExpression $shopId)
	 * @method bool hasShopId()
	 * @method bool isShopIdFilled()
	 * @method bool isShopIdChanged()
	 * @method \string getCsr()
	 * @method \Bitrix\Sale\Internals\EO_YandexSettings setCsr(\string|\Bitrix\Main\DB\SqlExpression $csr)
	 * @method bool hasCsr()
	 * @method bool isCsrFilled()
	 * @method bool isCsrChanged()
	 * @method \string remindActualCsr()
	 * @method \string requireCsr()
	 * @method \Bitrix\Sale\Internals\EO_YandexSettings resetCsr()
	 * @method \Bitrix\Sale\Internals\EO_YandexSettings unsetCsr()
	 * @method \string fillCsr()
	 * @method \string getSign()
	 * @method \Bitrix\Sale\Internals\EO_YandexSettings setSign(\string|\Bitrix\Main\DB\SqlExpression $sign)
	 * @method bool hasSign()
	 * @method bool isSignFilled()
	 * @method bool isSignChanged()
	 * @method \string remindActualSign()
	 * @method \string requireSign()
	 * @method \Bitrix\Sale\Internals\EO_YandexSettings resetSign()
	 * @method \Bitrix\Sale\Internals\EO_YandexSettings unsetSign()
	 * @method \string fillSign()
	 * @method \string getCert()
	 * @method \Bitrix\Sale\Internals\EO_YandexSettings setCert(\string|\Bitrix\Main\DB\SqlExpression $cert)
	 * @method bool hasCert()
	 * @method bool isCertFilled()
	 * @method bool isCertChanged()
	 * @method \string remindActualCert()
	 * @method \string requireCert()
	 * @method \Bitrix\Sale\Internals\EO_YandexSettings resetCert()
	 * @method \Bitrix\Sale\Internals\EO_YandexSettings unsetCert()
	 * @method \string fillCert()
	 * @method \string getPkey()
	 * @method \Bitrix\Sale\Internals\EO_YandexSettings setPkey(\string|\Bitrix\Main\DB\SqlExpression $pkey)
	 * @method bool hasPkey()
	 * @method bool isPkeyFilled()
	 * @method bool isPkeyChanged()
	 * @method \string remindActualPkey()
	 * @method \string requirePkey()
	 * @method \Bitrix\Sale\Internals\EO_YandexSettings resetPkey()
	 * @method \Bitrix\Sale\Internals\EO_YandexSettings unsetPkey()
	 * @method \string fillPkey()
	 * @method \string getPubKey()
	 * @method \Bitrix\Sale\Internals\EO_YandexSettings setPubKey(\string|\Bitrix\Main\DB\SqlExpression $pubKey)
	 * @method bool hasPubKey()
	 * @method bool isPubKeyFilled()
	 * @method bool isPubKeyChanged()
	 * @method \string remindActualPubKey()
	 * @method \string requirePubKey()
	 * @method \Bitrix\Sale\Internals\EO_YandexSettings resetPubKey()
	 * @method \Bitrix\Sale\Internals\EO_YandexSettings unsetPubKey()
	 * @method \string fillPubKey()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Sale\Internals\EO_YandexSettings set($fieldName, $value)
	 * @method \Bitrix\Sale\Internals\EO_YandexSettings reset($fieldName)
	 * @method \Bitrix\Sale\Internals\EO_YandexSettings unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Sale\Internals\EO_YandexSettings wakeUp($data)
	 */
	class EO_YandexSettings {
		/* @var \Bitrix\Sale\Internals\YandexSettingsTable */
		static public $dataClass = '\Bitrix\Sale\Internals\YandexSettingsTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Sale\Internals {
	/**
	 * EO_YandexSettings_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getShopIdList()
	 * @method \string[] getCsrList()
	 * @method \string[] fillCsr()
	 * @method \string[] getSignList()
	 * @method \string[] fillSign()
	 * @method \string[] getCertList()
	 * @method \string[] fillCert()
	 * @method \string[] getPkeyList()
	 * @method \string[] fillPkey()
	 * @method \string[] getPubKeyList()
	 * @method \string[] fillPubKey()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Sale\Internals\EO_YandexSettings $object)
	 * @method bool has(\Bitrix\Sale\Internals\EO_YandexSettings $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Sale\Internals\EO_YandexSettings getByPrimary($primary)
	 * @method \Bitrix\Sale\Internals\EO_YandexSettings[] getAll()
	 * @method bool remove(\Bitrix\Sale\Internals\EO_YandexSettings $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Sale\Internals\EO_YandexSettings_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Sale\Internals\EO_YandexSettings current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 * @method EO_YandexSettings_Collection merge(?EO_YandexSettings_Collection $collection)
	 * @method bool isEmpty()
	 */
	class EO_YandexSettings_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Sale\Internals\YandexSettingsTable */
		static public $dataClass = '\Bitrix\Sale\Internals\YandexSettingsTable';
	}
}
namespace Bitrix\Sale\Internals {
	/**
	 * Common methods:
	 * ---------------
	 *
	 * @method EO_YandexSettings_Result exec()
	 * @method \Bitrix\Sale\Internals\EO_YandexSettings fetchObject()
	 * @method \Bitrix\Sale\Internals\EO_YandexSettings_Collection fetchCollection()
	 *
	 * Custom methods:
	 * ---------------
	 *
	 */
	class EO_YandexSettings_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Sale\Internals\EO_YandexSettings fetchObject()
	 * @method \Bitrix\Sale\Internals\EO_YandexSettings_Collection fetchCollection()
	 */
	class EO_YandexSettings_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Sale\Internals\EO_YandexSettings createObject($setDefaultValues = true)
	 * @method \Bitrix\Sale\Internals\EO_YandexSettings_Collection createCollection()
	 * @method \Bitrix\Sale\Internals\EO_YandexSettings wakeUpObject($row)
	 * @method \Bitrix\Sale\Internals\EO_YandexSettings_Collection wakeUpCollection($rows)
	 */
	class EO_YandexSettings_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Sale\Location\DefaultSiteTable:sale\lib\location\defaultsite.php */
namespace Bitrix\Sale\Location {
	/**
	 * EO_DefaultSite
	 * @see \Bitrix\Sale\Location\DefaultSiteTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getSort()
	 * @method \Bitrix\Sale\Location\EO_DefaultSite setSort(\int|\Bitrix\Main\DB\SqlExpression $sort)
	 * @method bool hasSort()
	 * @method bool isSortFilled()
	 * @method bool isSortChanged()
	 * @method \int remindActualSort()
	 * @method \int requireSort()
	 * @method \Bitrix\Sale\Location\EO_DefaultSite resetSort()
	 * @method \Bitrix\Sale\Location\EO_DefaultSite unsetSort()
	 * @method \int fillSort()
	 * @method \string getLocationCode()
	 * @method \Bitrix\Sale\Location\EO_DefaultSite setLocationCode(\string|\Bitrix\Main\DB\SqlExpression $locationCode)
	 * @method bool hasLocationCode()
	 * @method bool isLocationCodeFilled()
	 * @method bool isLocationCodeChanged()
	 * @method \string getSiteId()
	 * @method \Bitrix\Sale\Location\EO_DefaultSite setSiteId(\string|\Bitrix\Main\DB\SqlExpression $siteId)
	 * @method bool hasSiteId()
	 * @method bool isSiteIdFilled()
	 * @method bool isSiteIdChanged()
	 * @method \Bitrix\Sale\Location\EO_Location getLocation()
	 * @method \Bitrix\Sale\Location\EO_Location remindActualLocation()
	 * @method \Bitrix\Sale\Location\EO_Location requireLocation()
	 * @method \Bitrix\Sale\Location\EO_DefaultSite setLocation(\Bitrix\Sale\Location\EO_Location $object)
	 * @method \Bitrix\Sale\Location\EO_DefaultSite resetLocation()
	 * @method \Bitrix\Sale\Location\EO_DefaultSite unsetLocation()
	 * @method bool hasLocation()
	 * @method bool isLocationFilled()
	 * @method bool isLocationChanged()
	 * @method \Bitrix\Sale\Location\EO_Location fillLocation()
	 * @method \Bitrix\Main\EO_Site getSite()
	 * @method \Bitrix\Main\EO_Site remindActualSite()
	 * @method \Bitrix\Main\EO_Site requireSite()
	 * @method \Bitrix\Sale\Location\EO_DefaultSite setSite(\Bitrix\Main\EO_Site $object)
	 * @method \Bitrix\Sale\Location\EO_DefaultSite resetSite()
	 * @method \Bitrix\Sale\Location\EO_DefaultSite unsetSite()
	 * @method bool hasSite()
	 * @method bool isSiteFilled()
	 * @method bool isSiteChanged()
	 * @method \Bitrix\Main\EO_Site fillSite()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Sale\Location\EO_DefaultSite set($fieldName, $value)
	 * @method \Bitrix\Sale\Location\EO_DefaultSite reset($fieldName)
	 * @method \Bitrix\Sale\Location\EO_DefaultSite unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Sale\Location\EO_DefaultSite wakeUp($data)
	 */
	class EO_DefaultSite {
		/* @var \Bitrix\Sale\Location\DefaultSiteTable */
		static public $dataClass = '\Bitrix\Sale\Location\DefaultSiteTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Sale\Location {
	/**
	 * EO_DefaultSite_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getSortList()
	 * @method \int[] fillSort()
	 * @method \string[] getLocationCodeList()
	 * @method \string[] getSiteIdList()
	 * @method \Bitrix\Sale\Location\EO_Location[] getLocationList()
	 * @method \Bitrix\Sale\Location\EO_DefaultSite_Collection getLocationCollection()
	 * @method \Bitrix\Sale\Location\EO_Location_Collection fillLocation()
	 * @method \Bitrix\Main\EO_Site[] getSiteList()
	 * @method \Bitrix\Sale\Location\EO_DefaultSite_Collection getSiteCollection()
	 * @method \Bitrix\Main\EO_Site_Collection fillSite()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Sale\Location\EO_DefaultSite $object)
	 * @method bool has(\Bitrix\Sale\Location\EO_DefaultSite $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Sale\Location\EO_DefaultSite getByPrimary($primary)
	 * @method \Bitrix\Sale\Location\EO_DefaultSite[] getAll()
	 * @method bool remove(\Bitrix\Sale\Location\EO_DefaultSite $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Sale\Location\EO_DefaultSite_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Sale\Location\EO_DefaultSite current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 * @method EO_DefaultSite_Collection merge(?EO_DefaultSite_Collection $collection)
	 * @method bool isEmpty()
	 */
	class EO_DefaultSite_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Sale\Location\DefaultSiteTable */
		static public $dataClass = '\Bitrix\Sale\Location\DefaultSiteTable';
	}
}
namespace Bitrix\Sale\Location {
	/**
	 * Common methods:
	 * ---------------
	 *
	 * @method EO_DefaultSite_Result exec()
	 * @method \Bitrix\Sale\Location\EO_DefaultSite fetchObject()
	 * @method \Bitrix\Sale\Location\EO_DefaultSite_Collection fetchCollection()
	 *
	 * Custom methods:
	 * ---------------
	 *
	 */
	class EO_DefaultSite_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Sale\Location\EO_DefaultSite fetchObject()
	 * @method \Bitrix\Sale\Location\EO_DefaultSite_Collection fetchCollection()
	 */
	class EO_DefaultSite_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Sale\Location\EO_DefaultSite createObject($setDefaultValues = true)
	 * @method \Bitrix\Sale\Location\EO_DefaultSite_Collection createCollection()
	 * @method \Bitrix\Sale\Location\EO_DefaultSite wakeUpObject($row)
	 * @method \Bitrix\Sale\Location\EO_DefaultSite_Collection wakeUpCollection($rows)
	 */
	class EO_DefaultSite_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Sale\Location\ExternalTable:sale\lib\location\external.php */
namespace Bitrix\Sale\Location {
	/**
	 * EO_External
	 * @see \Bitrix\Sale\Location\ExternalTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getId()
	 * @method \Bitrix\Sale\Location\EO_External setId(\int|\Bitrix\Main\DB\SqlExpression $id)
	 * @method bool hasId()
	 * @method bool isIdFilled()
	 * @method bool isIdChanged()
	 * @method \int getServiceId()
	 * @method \Bitrix\Sale\Location\EO_External setServiceId(\int|\Bitrix\Main\DB\SqlExpression $serviceId)
	 * @method bool hasServiceId()
	 * @method bool isServiceIdFilled()
	 * @method bool isServiceIdChanged()
	 * @method \int remindActualServiceId()
	 * @method \int requireServiceId()
	 * @method \Bitrix\Sale\Location\EO_External resetServiceId()
	 * @method \Bitrix\Sale\Location\EO_External unsetServiceId()
	 * @method \int fillServiceId()
	 * @method \string getXmlId()
	 * @method \Bitrix\Sale\Location\EO_External setXmlId(\string|\Bitrix\Main\DB\SqlExpression $xmlId)
	 * @method bool hasXmlId()
	 * @method bool isXmlIdFilled()
	 * @method bool isXmlIdChanged()
	 * @method \string remindActualXmlId()
	 * @method \string requireXmlId()
	 * @method \Bitrix\Sale\Location\EO_External resetXmlId()
	 * @method \Bitrix\Sale\Location\EO_External unsetXmlId()
	 * @method \string fillXmlId()
	 * @method \int getLocationId()
	 * @method \Bitrix\Sale\Location\EO_External setLocationId(\int|\Bitrix\Main\DB\SqlExpression $locationId)
	 * @method bool hasLocationId()
	 * @method bool isLocationIdFilled()
	 * @method bool isLocationIdChanged()
	 * @method \int remindActualLocationId()
	 * @method \int requireLocationId()
	 * @method \Bitrix\Sale\Location\EO_External resetLocationId()
	 * @method \Bitrix\Sale\Location\EO_External unsetLocationId()
	 * @method \int fillLocationId()
	 * @method \Bitrix\Sale\Location\EO_ExternalService getService()
	 * @method \Bitrix\Sale\Location\EO_ExternalService remindActualService()
	 * @method \Bitrix\Sale\Location\EO_ExternalService requireService()
	 * @method \Bitrix\Sale\Location\EO_External setService(\Bitrix\Sale\Location\EO_ExternalService $object)
	 * @method \Bitrix\Sale\Location\EO_External resetService()
	 * @method \Bitrix\Sale\Location\EO_External unsetService()
	 * @method bool hasService()
	 * @method bool isServiceFilled()
	 * @method bool isServiceChanged()
	 * @method \Bitrix\Sale\Location\EO_ExternalService fillService()
	 * @method \Bitrix\Sale\Location\EO_Location getLocation()
	 * @method \Bitrix\Sale\Location\EO_Location remindActualLocation()
	 * @method \Bitrix\Sale\Location\EO_Location requireLocation()
	 * @method \Bitrix\Sale\Location\EO_External setLocation(\Bitrix\Sale\Location\EO_Location $object)
	 * @method \Bitrix\Sale\Location\EO_External resetLocation()
	 * @method \Bitrix\Sale\Location\EO_External unsetLocation()
	 * @method bool hasLocation()
	 * @method bool isLocationFilled()
	 * @method bool isLocationChanged()
	 * @method \Bitrix\Sale\Location\EO_Location fillLocation()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Sale\Location\EO_External set($fieldName, $value)
	 * @method \Bitrix\Sale\Location\EO_External reset($fieldName)
	 * @method \Bitrix\Sale\Location\EO_External unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Sale\Location\EO_External wakeUp($data)
	 */
	class EO_External {
		/* @var \Bitrix\Sale\Location\ExternalTable */
		static public $dataClass = '\Bitrix\Sale\Location\ExternalTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Sale\Location {
	/**
	 * EO_External_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getIdList()
	 * @method \int[] getServiceIdList()
	 * @method \int[] fillServiceId()
	 * @method \string[] getXmlIdList()
	 * @method \string[] fillXmlId()
	 * @method \int[] getLocationIdList()
	 * @method \int[] fillLocationId()
	 * @method \Bitrix\Sale\Location\EO_ExternalService[] getServiceList()
	 * @method \Bitrix\Sale\Location\EO_External_Collection getServiceCollection()
	 * @method \Bitrix\Sale\Location\EO_ExternalService_Collection fillService()
	 * @method \Bitrix\Sale\Location\EO_Location[] getLocationList()
	 * @method \Bitrix\Sale\Location\EO_External_Collection getLocationCollection()
	 * @method \Bitrix\Sale\Location\EO_Location_Collection fillLocation()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Sale\Location\EO_External $object)
	 * @method bool has(\Bitrix\Sale\Location\EO_External $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Sale\Location\EO_External getByPrimary($primary)
	 * @method \Bitrix\Sale\Location\EO_External[] getAll()
	 * @method bool remove(\Bitrix\Sale\Location\EO_External $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Sale\Location\EO_External_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Sale\Location\EO_External current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 * @method EO_External_Collection merge(?EO_External_Collection $collection)
	 * @method bool isEmpty()
	 */
	class EO_External_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Sale\Location\ExternalTable */
		static public $dataClass = '\Bitrix\Sale\Location\ExternalTable';
	}
}
namespace Bitrix\Sale\Location {
	/**
	 * Common methods:
	 * ---------------
	 *
	 * @method EO_External_Result exec()
	 * @method \Bitrix\Sale\Location\EO_External fetchObject()
	 * @method \Bitrix\Sale\Location\EO_External_Collection fetchCollection()
	 *
	 * Custom methods:
	 * ---------------
	 *
	 */
	class EO_External_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Sale\Location\EO_External fetchObject()
	 * @method \Bitrix\Sale\Location\EO_External_Collection fetchCollection()
	 */
	class EO_External_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Sale\Location\EO_External createObject($setDefaultValues = true)
	 * @method \Bitrix\Sale\Location\EO_External_Collection createCollection()
	 * @method \Bitrix\Sale\Location\EO_External wakeUpObject($row)
	 * @method \Bitrix\Sale\Location\EO_External_Collection wakeUpCollection($rows)
	 */
	class EO_External_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Sale\Location\ExternalServiceTable:sale\lib\location\externalservice.php */
namespace Bitrix\Sale\Location {
	/**
	 * EO_ExternalService
	 * @see \Bitrix\Sale\Location\ExternalServiceTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getId()
	 * @method \Bitrix\Sale\Location\EO_ExternalService setId(\int|\Bitrix\Main\DB\SqlExpression $id)
	 * @method bool hasId()
	 * @method bool isIdFilled()
	 * @method bool isIdChanged()
	 * @method \string getCode()
	 * @method \Bitrix\Sale\Location\EO_ExternalService setCode(\string|\Bitrix\Main\DB\SqlExpression $code)
	 * @method bool hasCode()
	 * @method bool isCodeFilled()
	 * @method bool isCodeChanged()
	 * @method \string remindActualCode()
	 * @method \string requireCode()
	 * @method \Bitrix\Sale\Location\EO_ExternalService resetCode()
	 * @method \Bitrix\Sale\Location\EO_ExternalService unsetCode()
	 * @method \string fillCode()
	 * @method \Bitrix\Sale\Location\EO_External getExternal()
	 * @method \Bitrix\Sale\Location\EO_External remindActualExternal()
	 * @method \Bitrix\Sale\Location\EO_External requireExternal()
	 * @method \Bitrix\Sale\Location\EO_ExternalService setExternal(\Bitrix\Sale\Location\EO_External $object)
	 * @method \Bitrix\Sale\Location\EO_ExternalService resetExternal()
	 * @method \Bitrix\Sale\Location\EO_ExternalService unsetExternal()
	 * @method bool hasExternal()
	 * @method bool isExternalFilled()
	 * @method bool isExternalChanged()
	 * @method \Bitrix\Sale\Location\EO_External fillExternal()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Sale\Location\EO_ExternalService set($fieldName, $value)
	 * @method \Bitrix\Sale\Location\EO_ExternalService reset($fieldName)
	 * @method \Bitrix\Sale\Location\EO_ExternalService unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Sale\Location\EO_ExternalService wakeUp($data)
	 */
	class EO_ExternalService {
		/* @var \Bitrix\Sale\Location\ExternalServiceTable */
		static public $dataClass = '\Bitrix\Sale\Location\ExternalServiceTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Sale\Location {
	/**
	 * EO_ExternalService_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getIdList()
	 * @method \string[] getCodeList()
	 * @method \string[] fillCode()
	 * @method \Bitrix\Sale\Location\EO_External[] getExternalList()
	 * @method \Bitrix\Sale\Location\EO_ExternalService_Collection getExternalCollection()
	 * @method \Bitrix\Sale\Location\EO_External_Collection fillExternal()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Sale\Location\EO_ExternalService $object)
	 * @method bool has(\Bitrix\Sale\Location\EO_ExternalService $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Sale\Location\EO_ExternalService getByPrimary($primary)
	 * @method \Bitrix\Sale\Location\EO_ExternalService[] getAll()
	 * @method bool remove(\Bitrix\Sale\Location\EO_ExternalService $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Sale\Location\EO_ExternalService_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Sale\Location\EO_ExternalService current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 * @method EO_ExternalService_Collection merge(?EO_ExternalService_Collection $collection)
	 * @method bool isEmpty()
	 */
	class EO_ExternalService_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Sale\Location\ExternalServiceTable */
		static public $dataClass = '\Bitrix\Sale\Location\ExternalServiceTable';
	}
}
namespace Bitrix\Sale\Location {
	/**
	 * Common methods:
	 * ---------------
	 *
	 * @method EO_ExternalService_Result exec()
	 * @method \Bitrix\Sale\Location\EO_ExternalService fetchObject()
	 * @method \Bitrix\Sale\Location\EO_ExternalService_Collection fetchCollection()
	 *
	 * Custom methods:
	 * ---------------
	 *
	 */
	class EO_ExternalService_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Sale\Location\EO_ExternalService fetchObject()
	 * @method \Bitrix\Sale\Location\EO_ExternalService_Collection fetchCollection()
	 */
	class EO_ExternalService_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Sale\Location\EO_ExternalService createObject($setDefaultValues = true)
	 * @method \Bitrix\Sale\Location\EO_ExternalService_Collection createCollection()
	 * @method \Bitrix\Sale\Location\EO_ExternalService wakeUpObject($row)
	 * @method \Bitrix\Sale\Location\EO_ExternalService_Collection wakeUpCollection($rows)
	 */
	class EO_ExternalService_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Sale\Location\GroupTable:sale\lib\location\group.php */
namespace Bitrix\Sale\Location {
	/**
	 * EO_Group
	 * @see \Bitrix\Sale\Location\GroupTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getId()
	 * @method \Bitrix\Sale\Location\EO_Group setId(\int|\Bitrix\Main\DB\SqlExpression $id)
	 * @method bool hasId()
	 * @method bool isIdFilled()
	 * @method bool isIdChanged()
	 * @method \string getCode()
	 * @method \Bitrix\Sale\Location\EO_Group setCode(\string|\Bitrix\Main\DB\SqlExpression $code)
	 * @method bool hasCode()
	 * @method bool isCodeFilled()
	 * @method bool isCodeChanged()
	 * @method \string remindActualCode()
	 * @method \string requireCode()
	 * @method \Bitrix\Sale\Location\EO_Group resetCode()
	 * @method \Bitrix\Sale\Location\EO_Group unsetCode()
	 * @method \string fillCode()
	 * @method \int getSort()
	 * @method \Bitrix\Sale\Location\EO_Group setSort(\int|\Bitrix\Main\DB\SqlExpression $sort)
	 * @method bool hasSort()
	 * @method bool isSortFilled()
	 * @method bool isSortChanged()
	 * @method \int remindActualSort()
	 * @method \int requireSort()
	 * @method \Bitrix\Sale\Location\EO_Group resetSort()
	 * @method \Bitrix\Sale\Location\EO_Group unsetSort()
	 * @method \int fillSort()
	 * @method \Bitrix\Sale\Location\Name\EO_Group getName()
	 * @method \Bitrix\Sale\Location\Name\EO_Group remindActualName()
	 * @method \Bitrix\Sale\Location\Name\EO_Group requireName()
	 * @method \Bitrix\Sale\Location\EO_Group setName(\Bitrix\Sale\Location\Name\EO_Group $object)
	 * @method \Bitrix\Sale\Location\EO_Group resetName()
	 * @method \Bitrix\Sale\Location\EO_Group unsetName()
	 * @method bool hasName()
	 * @method bool isNameFilled()
	 * @method bool isNameChanged()
	 * @method \Bitrix\Sale\Location\Name\EO_Group fillName()
	 * @method \Bitrix\Sale\Location\EO_Location getLocation()
	 * @method \Bitrix\Sale\Location\EO_Location remindActualLocation()
	 * @method \Bitrix\Sale\Location\EO_Location requireLocation()
	 * @method \Bitrix\Sale\Location\EO_Group setLocation(\Bitrix\Sale\Location\EO_Location $object)
	 * @method \Bitrix\Sale\Location\EO_Group resetLocation()
	 * @method \Bitrix\Sale\Location\EO_Group unsetLocation()
	 * @method bool hasLocation()
	 * @method bool isLocationFilled()
	 * @method bool isLocationChanged()
	 * @method \Bitrix\Sale\Location\EO_Location fillLocation()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Sale\Location\EO_Group set($fieldName, $value)
	 * @method \Bitrix\Sale\Location\EO_Group reset($fieldName)
	 * @method \Bitrix\Sale\Location\EO_Group unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Sale\Location\EO_Group wakeUp($data)
	 */
	class EO_Group {
		/* @var \Bitrix\Sale\Location\GroupTable */
		static public $dataClass = '\Bitrix\Sale\Location\GroupTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Sale\Location {
	/**
	 * EO_Group_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getIdList()
	 * @method \string[] getCodeList()
	 * @method \string[] fillCode()
	 * @method \int[] getSortList()
	 * @method \int[] fillSort()
	 * @method \Bitrix\Sale\Location\Name\EO_Group[] getNameList()
	 * @method \Bitrix\Sale\Location\EO_Group_Collection getNameCollection()
	 * @method \Bitrix\Sale\Location\Name\EO_Group_Collection fillName()
	 * @method \Bitrix\Sale\Location\EO_Location[] getLocationList()
	 * @method \Bitrix\Sale\Location\EO_Group_Collection getLocationCollection()
	 * @method \Bitrix\Sale\Location\EO_Location_Collection fillLocation()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Sale\Location\EO_Group $object)
	 * @method bool has(\Bitrix\Sale\Location\EO_Group $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Sale\Location\EO_Group getByPrimary($primary)
	 * @method \Bitrix\Sale\Location\EO_Group[] getAll()
	 * @method bool remove(\Bitrix\Sale\Location\EO_Group $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Sale\Location\EO_Group_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Sale\Location\EO_Group current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 * @method EO_Group_Collection merge(?EO_Group_Collection $collection)
	 * @method bool isEmpty()
	 */
	class EO_Group_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Sale\Location\GroupTable */
		static public $dataClass = '\Bitrix\Sale\Location\GroupTable';
	}
}
namespace Bitrix\Sale\Location {
	/**
	 * Common methods:
	 * ---------------
	 *
	 * @method EO_Group_Result exec()
	 * @method \Bitrix\Sale\Location\EO_Group fetchObject()
	 * @method \Bitrix\Sale\Location\EO_Group_Collection fetchCollection()
	 *
	 * Custom methods:
	 * ---------------
	 *
	 */
	class EO_Group_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Sale\Location\EO_Group fetchObject()
	 * @method \Bitrix\Sale\Location\EO_Group_Collection fetchCollection()
	 */
	class EO_Group_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Sale\Location\EO_Group createObject($setDefaultValues = true)
	 * @method \Bitrix\Sale\Location\EO_Group_Collection createCollection()
	 * @method \Bitrix\Sale\Location\EO_Group wakeUpObject($row)
	 * @method \Bitrix\Sale\Location\EO_Group_Collection wakeUpCollection($rows)
	 */
	class EO_Group_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Sale\Location\GroupLocationTable:sale\lib\location\grouplocation.php */
namespace Bitrix\Sale\Location {
	/**
	 * EO_GroupLocation
	 * @see \Bitrix\Sale\Location\GroupLocationTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getLocationId()
	 * @method \Bitrix\Sale\Location\EO_GroupLocation setLocationId(\int|\Bitrix\Main\DB\SqlExpression $locationId)
	 * @method bool hasLocationId()
	 * @method bool isLocationIdFilled()
	 * @method bool isLocationIdChanged()
	 * @method \int getLocationGroupId()
	 * @method \Bitrix\Sale\Location\EO_GroupLocation setLocationGroupId(\int|\Bitrix\Main\DB\SqlExpression $locationGroupId)
	 * @method bool hasLocationGroupId()
	 * @method bool isLocationGroupIdFilled()
	 * @method bool isLocationGroupIdChanged()
	 * @method \int getGroupId()
	 * @method \int remindActualGroupId()
	 * @method \int requireGroupId()
	 * @method bool hasGroupId()
	 * @method bool isGroupIdFilled()
	 * @method \Bitrix\Sale\Location\EO_GroupLocation unsetGroupId()
	 * @method \int fillGroupId()
	 * @method \Bitrix\Sale\Location\EO_Location getLocation()
	 * @method \Bitrix\Sale\Location\EO_Location remindActualLocation()
	 * @method \Bitrix\Sale\Location\EO_Location requireLocation()
	 * @method \Bitrix\Sale\Location\EO_GroupLocation setLocation(\Bitrix\Sale\Location\EO_Location $object)
	 * @method \Bitrix\Sale\Location\EO_GroupLocation resetLocation()
	 * @method \Bitrix\Sale\Location\EO_GroupLocation unsetLocation()
	 * @method bool hasLocation()
	 * @method bool isLocationFilled()
	 * @method bool isLocationChanged()
	 * @method \Bitrix\Sale\Location\EO_Location fillLocation()
	 * @method \Bitrix\Sale\Location\EO_Group getGroup()
	 * @method \Bitrix\Sale\Location\EO_Group remindActualGroup()
	 * @method \Bitrix\Sale\Location\EO_Group requireGroup()
	 * @method \Bitrix\Sale\Location\EO_GroupLocation setGroup(\Bitrix\Sale\Location\EO_Group $object)
	 * @method \Bitrix\Sale\Location\EO_GroupLocation resetGroup()
	 * @method \Bitrix\Sale\Location\EO_GroupLocation unsetGroup()
	 * @method bool hasGroup()
	 * @method bool isGroupFilled()
	 * @method bool isGroupChanged()
	 * @method \Bitrix\Sale\Location\EO_Group fillGroup()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Sale\Location\EO_GroupLocation set($fieldName, $value)
	 * @method \Bitrix\Sale\Location\EO_GroupLocation reset($fieldName)
	 * @method \Bitrix\Sale\Location\EO_GroupLocation unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Sale\Location\EO_GroupLocation wakeUp($data)
	 */
	class EO_GroupLocation {
		/* @var \Bitrix\Sale\Location\GroupLocationTable */
		static public $dataClass = '\Bitrix\Sale\Location\GroupLocationTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Sale\Location {
	/**
	 * EO_GroupLocation_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getLocationIdList()
	 * @method \int[] getLocationGroupIdList()
	 * @method \int[] getGroupIdList()
	 * @method \int[] fillGroupId()
	 * @method \Bitrix\Sale\Location\EO_Location[] getLocationList()
	 * @method \Bitrix\Sale\Location\EO_GroupLocation_Collection getLocationCollection()
	 * @method \Bitrix\Sale\Location\EO_Location_Collection fillLocation()
	 * @method \Bitrix\Sale\Location\EO_Group[] getGroupList()
	 * @method \Bitrix\Sale\Location\EO_GroupLocation_Collection getGroupCollection()
	 * @method \Bitrix\Sale\Location\EO_Group_Collection fillGroup()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Sale\Location\EO_GroupLocation $object)
	 * @method bool has(\Bitrix\Sale\Location\EO_GroupLocation $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Sale\Location\EO_GroupLocation getByPrimary($primary)
	 * @method \Bitrix\Sale\Location\EO_GroupLocation[] getAll()
	 * @method bool remove(\Bitrix\Sale\Location\EO_GroupLocation $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Sale\Location\EO_GroupLocation_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Sale\Location\EO_GroupLocation current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 * @method EO_GroupLocation_Collection merge(?EO_GroupLocation_Collection $collection)
	 * @method bool isEmpty()
	 */
	class EO_GroupLocation_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Sale\Location\GroupLocationTable */
		static public $dataClass = '\Bitrix\Sale\Location\GroupLocationTable';
	}
}
namespace Bitrix\Sale\Location {
	/**
	 * Common methods:
	 * ---------------
	 *
	 * @method EO_GroupLocation_Result exec()
	 * @method \Bitrix\Sale\Location\EO_GroupLocation fetchObject()
	 * @method \Bitrix\Sale\Location\EO_GroupLocation_Collection fetchCollection()
	 *
	 * Custom methods:
	 * ---------------
	 *
	 */
	class EO_GroupLocation_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Sale\Location\EO_GroupLocation fetchObject()
	 * @method \Bitrix\Sale\Location\EO_GroupLocation_Collection fetchCollection()
	 */
	class EO_GroupLocation_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Sale\Location\EO_GroupLocation createObject($setDefaultValues = true)
	 * @method \Bitrix\Sale\Location\EO_GroupLocation_Collection createCollection()
	 * @method \Bitrix\Sale\Location\EO_GroupLocation wakeUpObject($row)
	 * @method \Bitrix\Sale\Location\EO_GroupLocation_Collection wakeUpCollection($rows)
	 */
	class EO_GroupLocation_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Sale\Location\Import\Compiler\Db\ExportTreeTable:sale\lib\location\import\compiler\db\exporttree.php */
namespace Bitrix\Sale\Location\Import\Compiler\Db {
	/**
	 * EO_ExportTree
	 * @see \Bitrix\Sale\Location\Import\Compiler\Db\ExportTreeTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getId()
	 * @method \Bitrix\Sale\Location\Import\Compiler\Db\EO_ExportTree setId(\int|\Bitrix\Main\DB\SqlExpression $id)
	 * @method bool hasId()
	 * @method bool isIdFilled()
	 * @method bool isIdChanged()
	 * @method \string getCode()
	 * @method \Bitrix\Sale\Location\Import\Compiler\Db\EO_ExportTree setCode(\string|\Bitrix\Main\DB\SqlExpression $code)
	 * @method bool hasCode()
	 * @method bool isCodeFilled()
	 * @method bool isCodeChanged()
	 * @method \string remindActualCode()
	 * @method \string requireCode()
	 * @method \Bitrix\Sale\Location\Import\Compiler\Db\EO_ExportTree resetCode()
	 * @method \Bitrix\Sale\Location\Import\Compiler\Db\EO_ExportTree unsetCode()
	 * @method \string fillCode()
	 * @method \string getParentCode()
	 * @method \Bitrix\Sale\Location\Import\Compiler\Db\EO_ExportTree setParentCode(\string|\Bitrix\Main\DB\SqlExpression $parentCode)
	 * @method bool hasParentCode()
	 * @method bool isParentCodeFilled()
	 * @method bool isParentCodeChanged()
	 * @method \string remindActualParentCode()
	 * @method \string requireParentCode()
	 * @method \Bitrix\Sale\Location\Import\Compiler\Db\EO_ExportTree resetParentCode()
	 * @method \Bitrix\Sale\Location\Import\Compiler\Db\EO_ExportTree unsetParentCode()
	 * @method \string fillParentCode()
	 * @method \string getSysCode()
	 * @method \Bitrix\Sale\Location\Import\Compiler\Db\EO_ExportTree setSysCode(\string|\Bitrix\Main\DB\SqlExpression $sysCode)
	 * @method bool hasSysCode()
	 * @method bool isSysCodeFilled()
	 * @method bool isSysCodeChanged()
	 * @method \string remindActualSysCode()
	 * @method \string requireSysCode()
	 * @method \Bitrix\Sale\Location\Import\Compiler\Db\EO_ExportTree resetSysCode()
	 * @method \Bitrix\Sale\Location\Import\Compiler\Db\EO_ExportTree unsetSysCode()
	 * @method \string fillSysCode()
	 * @method \string getTypeCode()
	 * @method \Bitrix\Sale\Location\Import\Compiler\Db\EO_ExportTree setTypeCode(\string|\Bitrix\Main\DB\SqlExpression $typeCode)
	 * @method bool hasTypeCode()
	 * @method bool isTypeCodeFilled()
	 * @method bool isTypeCodeChanged()
	 * @method \string remindActualTypeCode()
	 * @method \string requireTypeCode()
	 * @method \Bitrix\Sale\Location\Import\Compiler\Db\EO_ExportTree resetTypeCode()
	 * @method \Bitrix\Sale\Location\Import\Compiler\Db\EO_ExportTree unsetTypeCode()
	 * @method \string fillTypeCode()
	 * @method \string getFiasType()
	 * @method \Bitrix\Sale\Location\Import\Compiler\Db\EO_ExportTree setFiasType(\string|\Bitrix\Main\DB\SqlExpression $fiasType)
	 * @method bool hasFiasType()
	 * @method bool isFiasTypeFilled()
	 * @method bool isFiasTypeChanged()
	 * @method \string remindActualFiasType()
	 * @method \string requireFiasType()
	 * @method \Bitrix\Sale\Location\Import\Compiler\Db\EO_ExportTree resetFiasType()
	 * @method \Bitrix\Sale\Location\Import\Compiler\Db\EO_ExportTree unsetFiasType()
	 * @method \string fillFiasType()
	 * @method \string getName()
	 * @method \Bitrix\Sale\Location\Import\Compiler\Db\EO_ExportTree setName(\string|\Bitrix\Main\DB\SqlExpression $name)
	 * @method bool hasName()
	 * @method bool isNameFilled()
	 * @method bool isNameChanged()
	 * @method \string remindActualName()
	 * @method \string requireName()
	 * @method \Bitrix\Sale\Location\Import\Compiler\Db\EO_ExportTree resetName()
	 * @method \Bitrix\Sale\Location\Import\Compiler\Db\EO_ExportTree unsetName()
	 * @method \string fillName()
	 * @method \string getLangnames()
	 * @method \Bitrix\Sale\Location\Import\Compiler\Db\EO_ExportTree setLangnames(\string|\Bitrix\Main\DB\SqlExpression $langnames)
	 * @method bool hasLangnames()
	 * @method bool isLangnamesFilled()
	 * @method bool isLangnamesChanged()
	 * @method \string remindActualLangnames()
	 * @method \string requireLangnames()
	 * @method \Bitrix\Sale\Location\Import\Compiler\Db\EO_ExportTree resetLangnames()
	 * @method \Bitrix\Sale\Location\Import\Compiler\Db\EO_ExportTree unsetLangnames()
	 * @method \string fillLangnames()
	 * @method \string getExternals()
	 * @method \Bitrix\Sale\Location\Import\Compiler\Db\EO_ExportTree setExternals(\string|\Bitrix\Main\DB\SqlExpression $externals)
	 * @method bool hasExternals()
	 * @method bool isExternalsFilled()
	 * @method bool isExternalsChanged()
	 * @method \string remindActualExternals()
	 * @method \string requireExternals()
	 * @method \Bitrix\Sale\Location\Import\Compiler\Db\EO_ExportTree resetExternals()
	 * @method \Bitrix\Sale\Location\Import\Compiler\Db\EO_ExportTree unsetExternals()
	 * @method \string fillExternals()
	 * @method \string getLatitude()
	 * @method \Bitrix\Sale\Location\Import\Compiler\Db\EO_ExportTree setLatitude(\string|\Bitrix\Main\DB\SqlExpression $latitude)
	 * @method bool hasLatitude()
	 * @method bool isLatitudeFilled()
	 * @method bool isLatitudeChanged()
	 * @method \string remindActualLatitude()
	 * @method \string requireLatitude()
	 * @method \Bitrix\Sale\Location\Import\Compiler\Db\EO_ExportTree resetLatitude()
	 * @method \Bitrix\Sale\Location\Import\Compiler\Db\EO_ExportTree unsetLatitude()
	 * @method \string fillLatitude()
	 * @method \string getLongitude()
	 * @method \Bitrix\Sale\Location\Import\Compiler\Db\EO_ExportTree setLongitude(\string|\Bitrix\Main\DB\SqlExpression $longitude)
	 * @method bool hasLongitude()
	 * @method bool isLongitudeFilled()
	 * @method bool isLongitudeChanged()
	 * @method \string remindActualLongitude()
	 * @method \string requireLongitude()
	 * @method \Bitrix\Sale\Location\Import\Compiler\Db\EO_ExportTree resetLongitude()
	 * @method \Bitrix\Sale\Location\Import\Compiler\Db\EO_ExportTree unsetLongitude()
	 * @method \string fillLongitude()
	 * @method \string getSource()
	 * @method \Bitrix\Sale\Location\Import\Compiler\Db\EO_ExportTree setSource(\string|\Bitrix\Main\DB\SqlExpression $source)
	 * @method bool hasSource()
	 * @method bool isSourceFilled()
	 * @method bool isSourceChanged()
	 * @method \string remindActualSource()
	 * @method \string requireSource()
	 * @method \Bitrix\Sale\Location\Import\Compiler\Db\EO_ExportTree resetSource()
	 * @method \Bitrix\Sale\Location\Import\Compiler\Db\EO_ExportTree unsetSource()
	 * @method \string fillSource()
	 * @method \string getAlternateCoords()
	 * @method \Bitrix\Sale\Location\Import\Compiler\Db\EO_ExportTree setAlternateCoords(\string|\Bitrix\Main\DB\SqlExpression $alternateCoords)
	 * @method bool hasAlternateCoords()
	 * @method bool isAlternateCoordsFilled()
	 * @method bool isAlternateCoordsChanged()
	 * @method \string remindActualAlternateCoords()
	 * @method \string requireAlternateCoords()
	 * @method \Bitrix\Sale\Location\Import\Compiler\Db\EO_ExportTree resetAlternateCoords()
	 * @method \Bitrix\Sale\Location\Import\Compiler\Db\EO_ExportTree unsetAlternateCoords()
	 * @method \string fillAlternateCoords()
	 * @method \string getBoundedWith()
	 * @method \Bitrix\Sale\Location\Import\Compiler\Db\EO_ExportTree setBoundedWith(\string|\Bitrix\Main\DB\SqlExpression $boundedWith)
	 * @method bool hasBoundedWith()
	 * @method bool isBoundedWithFilled()
	 * @method bool isBoundedWithChanged()
	 * @method \string remindActualBoundedWith()
	 * @method \string requireBoundedWith()
	 * @method \Bitrix\Sale\Location\Import\Compiler\Db\EO_ExportTree resetBoundedWith()
	 * @method \Bitrix\Sale\Location\Import\Compiler\Db\EO_ExportTree unsetBoundedWith()
	 * @method \string fillBoundedWith()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Sale\Location\Import\Compiler\Db\EO_ExportTree set($fieldName, $value)
	 * @method \Bitrix\Sale\Location\Import\Compiler\Db\EO_ExportTree reset($fieldName)
	 * @method \Bitrix\Sale\Location\Import\Compiler\Db\EO_ExportTree unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Sale\Location\Import\Compiler\Db\EO_ExportTree wakeUp($data)
	 */
	class EO_ExportTree {
		/* @var \Bitrix\Sale\Location\Import\Compiler\Db\ExportTreeTable */
		static public $dataClass = '\Bitrix\Sale\Location\Import\Compiler\Db\ExportTreeTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Sale\Location\Import\Compiler\Db {
	/**
	 * EO_ExportTree_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getIdList()
	 * @method \string[] getCodeList()
	 * @method \string[] fillCode()
	 * @method \string[] getParentCodeList()
	 * @method \string[] fillParentCode()
	 * @method \string[] getSysCodeList()
	 * @method \string[] fillSysCode()
	 * @method \string[] getTypeCodeList()
	 * @method \string[] fillTypeCode()
	 * @method \string[] getFiasTypeList()
	 * @method \string[] fillFiasType()
	 * @method \string[] getNameList()
	 * @method \string[] fillName()
	 * @method \string[] getLangnamesList()
	 * @method \string[] fillLangnames()
	 * @method \string[] getExternalsList()
	 * @method \string[] fillExternals()
	 * @method \string[] getLatitudeList()
	 * @method \string[] fillLatitude()
	 * @method \string[] getLongitudeList()
	 * @method \string[] fillLongitude()
	 * @method \string[] getSourceList()
	 * @method \string[] fillSource()
	 * @method \string[] getAlternateCoordsList()
	 * @method \string[] fillAlternateCoords()
	 * @method \string[] getBoundedWithList()
	 * @method \string[] fillBoundedWith()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Sale\Location\Import\Compiler\Db\EO_ExportTree $object)
	 * @method bool has(\Bitrix\Sale\Location\Import\Compiler\Db\EO_ExportTree $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Sale\Location\Import\Compiler\Db\EO_ExportTree getByPrimary($primary)
	 * @method \Bitrix\Sale\Location\Import\Compiler\Db\EO_ExportTree[] getAll()
	 * @method bool remove(\Bitrix\Sale\Location\Import\Compiler\Db\EO_ExportTree $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Sale\Location\Import\Compiler\Db\EO_ExportTree_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Sale\Location\Import\Compiler\Db\EO_ExportTree current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 * @method EO_ExportTree_Collection merge(?EO_ExportTree_Collection $collection)
	 * @method bool isEmpty()
	 */
	class EO_ExportTree_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Sale\Location\Import\Compiler\Db\ExportTreeTable */
		static public $dataClass = '\Bitrix\Sale\Location\Import\Compiler\Db\ExportTreeTable';
	}
}
namespace Bitrix\Sale\Location\Import\Compiler\Db {
	/**
	 * Common methods:
	 * ---------------
	 *
	 * @method EO_ExportTree_Result exec()
	 * @method \Bitrix\Sale\Location\Import\Compiler\Db\EO_ExportTree fetchObject()
	 * @method \Bitrix\Sale\Location\Import\Compiler\Db\EO_ExportTree_Collection fetchCollection()
	 *
	 * Custom methods:
	 * ---------------
	 *
	 */
	class EO_ExportTree_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Sale\Location\Import\Compiler\Db\EO_ExportTree fetchObject()
	 * @method \Bitrix\Sale\Location\Import\Compiler\Db\EO_ExportTree_Collection fetchCollection()
	 */
	class EO_ExportTree_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Sale\Location\Import\Compiler\Db\EO_ExportTree createObject($setDefaultValues = true)
	 * @method \Bitrix\Sale\Location\Import\Compiler\Db\EO_ExportTree_Collection createCollection()
	 * @method \Bitrix\Sale\Location\Import\Compiler\Db\EO_ExportTree wakeUpObject($row)
	 * @method \Bitrix\Sale\Location\Import\Compiler\Db\EO_ExportTree_Collection wakeUpCollection($rows)
	 */
	class EO_ExportTree_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Sale\Location\Import\Compiler\Db\ExportTreeBelarusTable:sale\lib\location\import\compiler\db\exporttreebelarus.php */
namespace Bitrix\Sale\Location\Import\Compiler\Db {
	/**
	 * EO_ExportTreeBelarus
	 * @see \Bitrix\Sale\Location\Import\Compiler\Db\ExportTreeBelarusTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getId()
	 * @method \Bitrix\Sale\Location\Import\Compiler\Db\EO_ExportTreeBelarus setId(\int|\Bitrix\Main\DB\SqlExpression $id)
	 * @method bool hasId()
	 * @method bool isIdFilled()
	 * @method bool isIdChanged()
	 * @method \string getCode()
	 * @method \Bitrix\Sale\Location\Import\Compiler\Db\EO_ExportTreeBelarus setCode(\string|\Bitrix\Main\DB\SqlExpression $code)
	 * @method bool hasCode()
	 * @method bool isCodeFilled()
	 * @method bool isCodeChanged()
	 * @method \string remindActualCode()
	 * @method \string requireCode()
	 * @method \Bitrix\Sale\Location\Import\Compiler\Db\EO_ExportTreeBelarus resetCode()
	 * @method \Bitrix\Sale\Location\Import\Compiler\Db\EO_ExportTreeBelarus unsetCode()
	 * @method \string fillCode()
	 * @method \string getParentCode()
	 * @method \Bitrix\Sale\Location\Import\Compiler\Db\EO_ExportTreeBelarus setParentCode(\string|\Bitrix\Main\DB\SqlExpression $parentCode)
	 * @method bool hasParentCode()
	 * @method bool isParentCodeFilled()
	 * @method bool isParentCodeChanged()
	 * @method \string remindActualParentCode()
	 * @method \string requireParentCode()
	 * @method \Bitrix\Sale\Location\Import\Compiler\Db\EO_ExportTreeBelarus resetParentCode()
	 * @method \Bitrix\Sale\Location\Import\Compiler\Db\EO_ExportTreeBelarus unsetParentCode()
	 * @method \string fillParentCode()
	 * @method \string getSysCode()
	 * @method \Bitrix\Sale\Location\Import\Compiler\Db\EO_ExportTreeBelarus setSysCode(\string|\Bitrix\Main\DB\SqlExpression $sysCode)
	 * @method bool hasSysCode()
	 * @method bool isSysCodeFilled()
	 * @method bool isSysCodeChanged()
	 * @method \string remindActualSysCode()
	 * @method \string requireSysCode()
	 * @method \Bitrix\Sale\Location\Import\Compiler\Db\EO_ExportTreeBelarus resetSysCode()
	 * @method \Bitrix\Sale\Location\Import\Compiler\Db\EO_ExportTreeBelarus unsetSysCode()
	 * @method \string fillSysCode()
	 * @method \string getTypeCode()
	 * @method \Bitrix\Sale\Location\Import\Compiler\Db\EO_ExportTreeBelarus setTypeCode(\string|\Bitrix\Main\DB\SqlExpression $typeCode)
	 * @method bool hasTypeCode()
	 * @method bool isTypeCodeFilled()
	 * @method bool isTypeCodeChanged()
	 * @method \string remindActualTypeCode()
	 * @method \string requireTypeCode()
	 * @method \Bitrix\Sale\Location\Import\Compiler\Db\EO_ExportTreeBelarus resetTypeCode()
	 * @method \Bitrix\Sale\Location\Import\Compiler\Db\EO_ExportTreeBelarus unsetTypeCode()
	 * @method \string fillTypeCode()
	 * @method \string getFiasType()
	 * @method \Bitrix\Sale\Location\Import\Compiler\Db\EO_ExportTreeBelarus setFiasType(\string|\Bitrix\Main\DB\SqlExpression $fiasType)
	 * @method bool hasFiasType()
	 * @method bool isFiasTypeFilled()
	 * @method bool isFiasTypeChanged()
	 * @method \string remindActualFiasType()
	 * @method \string requireFiasType()
	 * @method \Bitrix\Sale\Location\Import\Compiler\Db\EO_ExportTreeBelarus resetFiasType()
	 * @method \Bitrix\Sale\Location\Import\Compiler\Db\EO_ExportTreeBelarus unsetFiasType()
	 * @method \string fillFiasType()
	 * @method \string getName()
	 * @method \Bitrix\Sale\Location\Import\Compiler\Db\EO_ExportTreeBelarus setName(\string|\Bitrix\Main\DB\SqlExpression $name)
	 * @method bool hasName()
	 * @method bool isNameFilled()
	 * @method bool isNameChanged()
	 * @method \string remindActualName()
	 * @method \string requireName()
	 * @method \Bitrix\Sale\Location\Import\Compiler\Db\EO_ExportTreeBelarus resetName()
	 * @method \Bitrix\Sale\Location\Import\Compiler\Db\EO_ExportTreeBelarus unsetName()
	 * @method \string fillName()
	 * @method \string getLangnames()
	 * @method \Bitrix\Sale\Location\Import\Compiler\Db\EO_ExportTreeBelarus setLangnames(\string|\Bitrix\Main\DB\SqlExpression $langnames)
	 * @method bool hasLangnames()
	 * @method bool isLangnamesFilled()
	 * @method bool isLangnamesChanged()
	 * @method \string remindActualLangnames()
	 * @method \string requireLangnames()
	 * @method \Bitrix\Sale\Location\Import\Compiler\Db\EO_ExportTreeBelarus resetLangnames()
	 * @method \Bitrix\Sale\Location\Import\Compiler\Db\EO_ExportTreeBelarus unsetLangnames()
	 * @method \string fillLangnames()
	 * @method \string getExternals()
	 * @method \Bitrix\Sale\Location\Import\Compiler\Db\EO_ExportTreeBelarus setExternals(\string|\Bitrix\Main\DB\SqlExpression $externals)
	 * @method bool hasExternals()
	 * @method bool isExternalsFilled()
	 * @method bool isExternalsChanged()
	 * @method \string remindActualExternals()
	 * @method \string requireExternals()
	 * @method \Bitrix\Sale\Location\Import\Compiler\Db\EO_ExportTreeBelarus resetExternals()
	 * @method \Bitrix\Sale\Location\Import\Compiler\Db\EO_ExportTreeBelarus unsetExternals()
	 * @method \string fillExternals()
	 * @method \string getLatitude()
	 * @method \Bitrix\Sale\Location\Import\Compiler\Db\EO_ExportTreeBelarus setLatitude(\string|\Bitrix\Main\DB\SqlExpression $latitude)
	 * @method bool hasLatitude()
	 * @method bool isLatitudeFilled()
	 * @method bool isLatitudeChanged()
	 * @method \string remindActualLatitude()
	 * @method \string requireLatitude()
	 * @method \Bitrix\Sale\Location\Import\Compiler\Db\EO_ExportTreeBelarus resetLatitude()
	 * @method \Bitrix\Sale\Location\Import\Compiler\Db\EO_ExportTreeBelarus unsetLatitude()
	 * @method \string fillLatitude()
	 * @method \string getLongitude()
	 * @method \Bitrix\Sale\Location\Import\Compiler\Db\EO_ExportTreeBelarus setLongitude(\string|\Bitrix\Main\DB\SqlExpression $longitude)
	 * @method bool hasLongitude()
	 * @method bool isLongitudeFilled()
	 * @method bool isLongitudeChanged()
	 * @method \string remindActualLongitude()
	 * @method \string requireLongitude()
	 * @method \Bitrix\Sale\Location\Import\Compiler\Db\EO_ExportTreeBelarus resetLongitude()
	 * @method \Bitrix\Sale\Location\Import\Compiler\Db\EO_ExportTreeBelarus unsetLongitude()
	 * @method \string fillLongitude()
	 * @method \string getSource()
	 * @method \Bitrix\Sale\Location\Import\Compiler\Db\EO_ExportTreeBelarus setSource(\string|\Bitrix\Main\DB\SqlExpression $source)
	 * @method bool hasSource()
	 * @method bool isSourceFilled()
	 * @method bool isSourceChanged()
	 * @method \string remindActualSource()
	 * @method \string requireSource()
	 * @method \Bitrix\Sale\Location\Import\Compiler\Db\EO_ExportTreeBelarus resetSource()
	 * @method \Bitrix\Sale\Location\Import\Compiler\Db\EO_ExportTreeBelarus unsetSource()
	 * @method \string fillSource()
	 * @method \string getAlternateCoords()
	 * @method \Bitrix\Sale\Location\Import\Compiler\Db\EO_ExportTreeBelarus setAlternateCoords(\string|\Bitrix\Main\DB\SqlExpression $alternateCoords)
	 * @method bool hasAlternateCoords()
	 * @method bool isAlternateCoordsFilled()
	 * @method bool isAlternateCoordsChanged()
	 * @method \string remindActualAlternateCoords()
	 * @method \string requireAlternateCoords()
	 * @method \Bitrix\Sale\Location\Import\Compiler\Db\EO_ExportTreeBelarus resetAlternateCoords()
	 * @method \Bitrix\Sale\Location\Import\Compiler\Db\EO_ExportTreeBelarus unsetAlternateCoords()
	 * @method \string fillAlternateCoords()
	 * @method \string getBoundedWith()
	 * @method \Bitrix\Sale\Location\Import\Compiler\Db\EO_ExportTreeBelarus setBoundedWith(\string|\Bitrix\Main\DB\SqlExpression $boundedWith)
	 * @method bool hasBoundedWith()
	 * @method bool isBoundedWithFilled()
	 * @method bool isBoundedWithChanged()
	 * @method \string remindActualBoundedWith()
	 * @method \string requireBoundedWith()
	 * @method \Bitrix\Sale\Location\Import\Compiler\Db\EO_ExportTreeBelarus resetBoundedWith()
	 * @method \Bitrix\Sale\Location\Import\Compiler\Db\EO_ExportTreeBelarus unsetBoundedWith()
	 * @method \string fillBoundedWith()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Sale\Location\Import\Compiler\Db\EO_ExportTreeBelarus set($fieldName, $value)
	 * @method \Bitrix\Sale\Location\Import\Compiler\Db\EO_ExportTreeBelarus reset($fieldName)
	 * @method \Bitrix\Sale\Location\Import\Compiler\Db\EO_ExportTreeBelarus unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Sale\Location\Import\Compiler\Db\EO_ExportTreeBelarus wakeUp($data)
	 */
	class EO_ExportTreeBelarus {
		/* @var \Bitrix\Sale\Location\Import\Compiler\Db\ExportTreeBelarusTable */
		static public $dataClass = '\Bitrix\Sale\Location\Import\Compiler\Db\ExportTreeBelarusTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Sale\Location\Import\Compiler\Db {
	/**
	 * EO_ExportTreeBelarus_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getIdList()
	 * @method \string[] getCodeList()
	 * @method \string[] fillCode()
	 * @method \string[] getParentCodeList()
	 * @method \string[] fillParentCode()
	 * @method \string[] getSysCodeList()
	 * @method \string[] fillSysCode()
	 * @method \string[] getTypeCodeList()
	 * @method \string[] fillTypeCode()
	 * @method \string[] getFiasTypeList()
	 * @method \string[] fillFiasType()
	 * @method \string[] getNameList()
	 * @method \string[] fillName()
	 * @method \string[] getLangnamesList()
	 * @method \string[] fillLangnames()
	 * @method \string[] getExternalsList()
	 * @method \string[] fillExternals()
	 * @method \string[] getLatitudeList()
	 * @method \string[] fillLatitude()
	 * @method \string[] getLongitudeList()
	 * @method \string[] fillLongitude()
	 * @method \string[] getSourceList()
	 * @method \string[] fillSource()
	 * @method \string[] getAlternateCoordsList()
	 * @method \string[] fillAlternateCoords()
	 * @method \string[] getBoundedWithList()
	 * @method \string[] fillBoundedWith()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Sale\Location\Import\Compiler\Db\EO_ExportTreeBelarus $object)
	 * @method bool has(\Bitrix\Sale\Location\Import\Compiler\Db\EO_ExportTreeBelarus $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Sale\Location\Import\Compiler\Db\EO_ExportTreeBelarus getByPrimary($primary)
	 * @method \Bitrix\Sale\Location\Import\Compiler\Db\EO_ExportTreeBelarus[] getAll()
	 * @method bool remove(\Bitrix\Sale\Location\Import\Compiler\Db\EO_ExportTreeBelarus $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Sale\Location\Import\Compiler\Db\EO_ExportTreeBelarus_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Sale\Location\Import\Compiler\Db\EO_ExportTreeBelarus current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 * @method EO_ExportTreeBelarus_Collection merge(?EO_ExportTreeBelarus_Collection $collection)
	 * @method bool isEmpty()
	 */
	class EO_ExportTreeBelarus_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Sale\Location\Import\Compiler\Db\ExportTreeBelarusTable */
		static public $dataClass = '\Bitrix\Sale\Location\Import\Compiler\Db\ExportTreeBelarusTable';
	}
}
namespace Bitrix\Sale\Location\Import\Compiler\Db {
	/**
	 * Common methods:
	 * ---------------
	 *
	 * @method EO_ExportTreeBelarus_Result exec()
	 * @method \Bitrix\Sale\Location\Import\Compiler\Db\EO_ExportTreeBelarus fetchObject()
	 * @method \Bitrix\Sale\Location\Import\Compiler\Db\EO_ExportTreeBelarus_Collection fetchCollection()
	 *
	 * Custom methods:
	 * ---------------
	 *
	 */
	class EO_ExportTreeBelarus_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Sale\Location\Import\Compiler\Db\EO_ExportTreeBelarus fetchObject()
	 * @method \Bitrix\Sale\Location\Import\Compiler\Db\EO_ExportTreeBelarus_Collection fetchCollection()
	 */
	class EO_ExportTreeBelarus_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Sale\Location\Import\Compiler\Db\EO_ExportTreeBelarus createObject($setDefaultValues = true)
	 * @method \Bitrix\Sale\Location\Import\Compiler\Db\EO_ExportTreeBelarus_Collection createCollection()
	 * @method \Bitrix\Sale\Location\Import\Compiler\Db\EO_ExportTreeBelarus wakeUpObject($row)
	 * @method \Bitrix\Sale\Location\Import\Compiler\Db\EO_ExportTreeBelarus_Collection wakeUpCollection($rows)
	 */
	class EO_ExportTreeBelarus_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Sale\Location\Import\Compiler\Db\ExportTreeRussiaTable:sale\lib\location\import\compiler\db\exporttreerussia.php */
namespace Bitrix\Sale\Location\Import\Compiler\Db {
	/**
	 * EO_ExportTreeRussia
	 * @see \Bitrix\Sale\Location\Import\Compiler\Db\ExportTreeRussiaTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getId()
	 * @method \Bitrix\Sale\Location\Import\Compiler\Db\EO_ExportTreeRussia setId(\int|\Bitrix\Main\DB\SqlExpression $id)
	 * @method bool hasId()
	 * @method bool isIdFilled()
	 * @method bool isIdChanged()
	 * @method \string getCode()
	 * @method \Bitrix\Sale\Location\Import\Compiler\Db\EO_ExportTreeRussia setCode(\string|\Bitrix\Main\DB\SqlExpression $code)
	 * @method bool hasCode()
	 * @method bool isCodeFilled()
	 * @method bool isCodeChanged()
	 * @method \string remindActualCode()
	 * @method \string requireCode()
	 * @method \Bitrix\Sale\Location\Import\Compiler\Db\EO_ExportTreeRussia resetCode()
	 * @method \Bitrix\Sale\Location\Import\Compiler\Db\EO_ExportTreeRussia unsetCode()
	 * @method \string fillCode()
	 * @method \string getParentCode()
	 * @method \Bitrix\Sale\Location\Import\Compiler\Db\EO_ExportTreeRussia setParentCode(\string|\Bitrix\Main\DB\SqlExpression $parentCode)
	 * @method bool hasParentCode()
	 * @method bool isParentCodeFilled()
	 * @method bool isParentCodeChanged()
	 * @method \string remindActualParentCode()
	 * @method \string requireParentCode()
	 * @method \Bitrix\Sale\Location\Import\Compiler\Db\EO_ExportTreeRussia resetParentCode()
	 * @method \Bitrix\Sale\Location\Import\Compiler\Db\EO_ExportTreeRussia unsetParentCode()
	 * @method \string fillParentCode()
	 * @method \string getSysCode()
	 * @method \Bitrix\Sale\Location\Import\Compiler\Db\EO_ExportTreeRussia setSysCode(\string|\Bitrix\Main\DB\SqlExpression $sysCode)
	 * @method bool hasSysCode()
	 * @method bool isSysCodeFilled()
	 * @method bool isSysCodeChanged()
	 * @method \string remindActualSysCode()
	 * @method \string requireSysCode()
	 * @method \Bitrix\Sale\Location\Import\Compiler\Db\EO_ExportTreeRussia resetSysCode()
	 * @method \Bitrix\Sale\Location\Import\Compiler\Db\EO_ExportTreeRussia unsetSysCode()
	 * @method \string fillSysCode()
	 * @method \string getTypeCode()
	 * @method \Bitrix\Sale\Location\Import\Compiler\Db\EO_ExportTreeRussia setTypeCode(\string|\Bitrix\Main\DB\SqlExpression $typeCode)
	 * @method bool hasTypeCode()
	 * @method bool isTypeCodeFilled()
	 * @method bool isTypeCodeChanged()
	 * @method \string remindActualTypeCode()
	 * @method \string requireTypeCode()
	 * @method \Bitrix\Sale\Location\Import\Compiler\Db\EO_ExportTreeRussia resetTypeCode()
	 * @method \Bitrix\Sale\Location\Import\Compiler\Db\EO_ExportTreeRussia unsetTypeCode()
	 * @method \string fillTypeCode()
	 * @method \string getFiasType()
	 * @method \Bitrix\Sale\Location\Import\Compiler\Db\EO_ExportTreeRussia setFiasType(\string|\Bitrix\Main\DB\SqlExpression $fiasType)
	 * @method bool hasFiasType()
	 * @method bool isFiasTypeFilled()
	 * @method bool isFiasTypeChanged()
	 * @method \string remindActualFiasType()
	 * @method \string requireFiasType()
	 * @method \Bitrix\Sale\Location\Import\Compiler\Db\EO_ExportTreeRussia resetFiasType()
	 * @method \Bitrix\Sale\Location\Import\Compiler\Db\EO_ExportTreeRussia unsetFiasType()
	 * @method \string fillFiasType()
	 * @method \string getName()
	 * @method \Bitrix\Sale\Location\Import\Compiler\Db\EO_ExportTreeRussia setName(\string|\Bitrix\Main\DB\SqlExpression $name)
	 * @method bool hasName()
	 * @method bool isNameFilled()
	 * @method bool isNameChanged()
	 * @method \string remindActualName()
	 * @method \string requireName()
	 * @method \Bitrix\Sale\Location\Import\Compiler\Db\EO_ExportTreeRussia resetName()
	 * @method \Bitrix\Sale\Location\Import\Compiler\Db\EO_ExportTreeRussia unsetName()
	 * @method \string fillName()
	 * @method \string getLangnames()
	 * @method \Bitrix\Sale\Location\Import\Compiler\Db\EO_ExportTreeRussia setLangnames(\string|\Bitrix\Main\DB\SqlExpression $langnames)
	 * @method bool hasLangnames()
	 * @method bool isLangnamesFilled()
	 * @method bool isLangnamesChanged()
	 * @method \string remindActualLangnames()
	 * @method \string requireLangnames()
	 * @method \Bitrix\Sale\Location\Import\Compiler\Db\EO_ExportTreeRussia resetLangnames()
	 * @method \Bitrix\Sale\Location\Import\Compiler\Db\EO_ExportTreeRussia unsetLangnames()
	 * @method \string fillLangnames()
	 * @method \string getExternals()
	 * @method \Bitrix\Sale\Location\Import\Compiler\Db\EO_ExportTreeRussia setExternals(\string|\Bitrix\Main\DB\SqlExpression $externals)
	 * @method bool hasExternals()
	 * @method bool isExternalsFilled()
	 * @method bool isExternalsChanged()
	 * @method \string remindActualExternals()
	 * @method \string requireExternals()
	 * @method \Bitrix\Sale\Location\Import\Compiler\Db\EO_ExportTreeRussia resetExternals()
	 * @method \Bitrix\Sale\Location\Import\Compiler\Db\EO_ExportTreeRussia unsetExternals()
	 * @method \string fillExternals()
	 * @method \string getLatitude()
	 * @method \Bitrix\Sale\Location\Import\Compiler\Db\EO_ExportTreeRussia setLatitude(\string|\Bitrix\Main\DB\SqlExpression $latitude)
	 * @method bool hasLatitude()
	 * @method bool isLatitudeFilled()
	 * @method bool isLatitudeChanged()
	 * @method \string remindActualLatitude()
	 * @method \string requireLatitude()
	 * @method \Bitrix\Sale\Location\Import\Compiler\Db\EO_ExportTreeRussia resetLatitude()
	 * @method \Bitrix\Sale\Location\Import\Compiler\Db\EO_ExportTreeRussia unsetLatitude()
	 * @method \string fillLatitude()
	 * @method \string getLongitude()
	 * @method \Bitrix\Sale\Location\Import\Compiler\Db\EO_ExportTreeRussia setLongitude(\string|\Bitrix\Main\DB\SqlExpression $longitude)
	 * @method bool hasLongitude()
	 * @method bool isLongitudeFilled()
	 * @method bool isLongitudeChanged()
	 * @method \string remindActualLongitude()
	 * @method \string requireLongitude()
	 * @method \Bitrix\Sale\Location\Import\Compiler\Db\EO_ExportTreeRussia resetLongitude()
	 * @method \Bitrix\Sale\Location\Import\Compiler\Db\EO_ExportTreeRussia unsetLongitude()
	 * @method \string fillLongitude()
	 * @method \string getSource()
	 * @method \Bitrix\Sale\Location\Import\Compiler\Db\EO_ExportTreeRussia setSource(\string|\Bitrix\Main\DB\SqlExpression $source)
	 * @method bool hasSource()
	 * @method bool isSourceFilled()
	 * @method bool isSourceChanged()
	 * @method \string remindActualSource()
	 * @method \string requireSource()
	 * @method \Bitrix\Sale\Location\Import\Compiler\Db\EO_ExportTreeRussia resetSource()
	 * @method \Bitrix\Sale\Location\Import\Compiler\Db\EO_ExportTreeRussia unsetSource()
	 * @method \string fillSource()
	 * @method \string getAlternateCoords()
	 * @method \Bitrix\Sale\Location\Import\Compiler\Db\EO_ExportTreeRussia setAlternateCoords(\string|\Bitrix\Main\DB\SqlExpression $alternateCoords)
	 * @method bool hasAlternateCoords()
	 * @method bool isAlternateCoordsFilled()
	 * @method bool isAlternateCoordsChanged()
	 * @method \string remindActualAlternateCoords()
	 * @method \string requireAlternateCoords()
	 * @method \Bitrix\Sale\Location\Import\Compiler\Db\EO_ExportTreeRussia resetAlternateCoords()
	 * @method \Bitrix\Sale\Location\Import\Compiler\Db\EO_ExportTreeRussia unsetAlternateCoords()
	 * @method \string fillAlternateCoords()
	 * @method \string getBoundedWith()
	 * @method \Bitrix\Sale\Location\Import\Compiler\Db\EO_ExportTreeRussia setBoundedWith(\string|\Bitrix\Main\DB\SqlExpression $boundedWith)
	 * @method bool hasBoundedWith()
	 * @method bool isBoundedWithFilled()
	 * @method bool isBoundedWithChanged()
	 * @method \string remindActualBoundedWith()
	 * @method \string requireBoundedWith()
	 * @method \Bitrix\Sale\Location\Import\Compiler\Db\EO_ExportTreeRussia resetBoundedWith()
	 * @method \Bitrix\Sale\Location\Import\Compiler\Db\EO_ExportTreeRussia unsetBoundedWith()
	 * @method \string fillBoundedWith()
	 * @method \string getZip()
	 * @method \Bitrix\Sale\Location\Import\Compiler\Db\EO_ExportTreeRussia setZip(\string|\Bitrix\Main\DB\SqlExpression $zip)
	 * @method bool hasZip()
	 * @method bool isZipFilled()
	 * @method bool isZipChanged()
	 * @method \string remindActualZip()
	 * @method \string requireZip()
	 * @method \Bitrix\Sale\Location\Import\Compiler\Db\EO_ExportTreeRussia resetZip()
	 * @method \Bitrix\Sale\Location\Import\Compiler\Db\EO_ExportTreeRussia unsetZip()
	 * @method \string fillZip()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Sale\Location\Import\Compiler\Db\EO_ExportTreeRussia set($fieldName, $value)
	 * @method \Bitrix\Sale\Location\Import\Compiler\Db\EO_ExportTreeRussia reset($fieldName)
	 * @method \Bitrix\Sale\Location\Import\Compiler\Db\EO_ExportTreeRussia unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Sale\Location\Import\Compiler\Db\EO_ExportTreeRussia wakeUp($data)
	 */
	class EO_ExportTreeRussia {
		/* @var \Bitrix\Sale\Location\Import\Compiler\Db\ExportTreeRussiaTable */
		static public $dataClass = '\Bitrix\Sale\Location\Import\Compiler\Db\ExportTreeRussiaTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Sale\Location\Import\Compiler\Db {
	/**
	 * EO_ExportTreeRussia_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getIdList()
	 * @method \string[] getCodeList()
	 * @method \string[] fillCode()
	 * @method \string[] getParentCodeList()
	 * @method \string[] fillParentCode()
	 * @method \string[] getSysCodeList()
	 * @method \string[] fillSysCode()
	 * @method \string[] getTypeCodeList()
	 * @method \string[] fillTypeCode()
	 * @method \string[] getFiasTypeList()
	 * @method \string[] fillFiasType()
	 * @method \string[] getNameList()
	 * @method \string[] fillName()
	 * @method \string[] getLangnamesList()
	 * @method \string[] fillLangnames()
	 * @method \string[] getExternalsList()
	 * @method \string[] fillExternals()
	 * @method \string[] getLatitudeList()
	 * @method \string[] fillLatitude()
	 * @method \string[] getLongitudeList()
	 * @method \string[] fillLongitude()
	 * @method \string[] getSourceList()
	 * @method \string[] fillSource()
	 * @method \string[] getAlternateCoordsList()
	 * @method \string[] fillAlternateCoords()
	 * @method \string[] getBoundedWithList()
	 * @method \string[] fillBoundedWith()
	 * @method \string[] getZipList()
	 * @method \string[] fillZip()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Sale\Location\Import\Compiler\Db\EO_ExportTreeRussia $object)
	 * @method bool has(\Bitrix\Sale\Location\Import\Compiler\Db\EO_ExportTreeRussia $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Sale\Location\Import\Compiler\Db\EO_ExportTreeRussia getByPrimary($primary)
	 * @method \Bitrix\Sale\Location\Import\Compiler\Db\EO_ExportTreeRussia[] getAll()
	 * @method bool remove(\Bitrix\Sale\Location\Import\Compiler\Db\EO_ExportTreeRussia $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Sale\Location\Import\Compiler\Db\EO_ExportTreeRussia_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Sale\Location\Import\Compiler\Db\EO_ExportTreeRussia current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 * @method EO_ExportTreeRussia_Collection merge(?EO_ExportTreeRussia_Collection $collection)
	 * @method bool isEmpty()
	 */
	class EO_ExportTreeRussia_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Sale\Location\Import\Compiler\Db\ExportTreeRussiaTable */
		static public $dataClass = '\Bitrix\Sale\Location\Import\Compiler\Db\ExportTreeRussiaTable';
	}
}
namespace Bitrix\Sale\Location\Import\Compiler\Db {
	/**
	 * Common methods:
	 * ---------------
	 *
	 * @method EO_ExportTreeRussia_Result exec()
	 * @method \Bitrix\Sale\Location\Import\Compiler\Db\EO_ExportTreeRussia fetchObject()
	 * @method \Bitrix\Sale\Location\Import\Compiler\Db\EO_ExportTreeRussia_Collection fetchCollection()
	 *
	 * Custom methods:
	 * ---------------
	 *
	 */
	class EO_ExportTreeRussia_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Sale\Location\Import\Compiler\Db\EO_ExportTreeRussia fetchObject()
	 * @method \Bitrix\Sale\Location\Import\Compiler\Db\EO_ExportTreeRussia_Collection fetchCollection()
	 */
	class EO_ExportTreeRussia_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Sale\Location\Import\Compiler\Db\EO_ExportTreeRussia createObject($setDefaultValues = true)
	 * @method \Bitrix\Sale\Location\Import\Compiler\Db\EO_ExportTreeRussia_Collection createCollection()
	 * @method \Bitrix\Sale\Location\Import\Compiler\Db\EO_ExportTreeRussia wakeUpObject($row)
	 * @method \Bitrix\Sale\Location\Import\Compiler\Db\EO_ExportTreeRussia_Collection wakeUpCollection($rows)
	 */
	class EO_ExportTreeRussia_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Sale\Location\Import\Compiler\Db\ExportTreeUkrainTable:sale\lib\location\import\compiler\db\exporttreeukrain.php */
namespace Bitrix\Sale\Location\Import\Compiler\Db {
	/**
	 * EO_ExportTreeUkrain
	 * @see \Bitrix\Sale\Location\Import\Compiler\Db\ExportTreeUkrainTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getId()
	 * @method \Bitrix\Sale\Location\Import\Compiler\Db\EO_ExportTreeUkrain setId(\int|\Bitrix\Main\DB\SqlExpression $id)
	 * @method bool hasId()
	 * @method bool isIdFilled()
	 * @method bool isIdChanged()
	 * @method \string getCode()
	 * @method \Bitrix\Sale\Location\Import\Compiler\Db\EO_ExportTreeUkrain setCode(\string|\Bitrix\Main\DB\SqlExpression $code)
	 * @method bool hasCode()
	 * @method bool isCodeFilled()
	 * @method bool isCodeChanged()
	 * @method \string remindActualCode()
	 * @method \string requireCode()
	 * @method \Bitrix\Sale\Location\Import\Compiler\Db\EO_ExportTreeUkrain resetCode()
	 * @method \Bitrix\Sale\Location\Import\Compiler\Db\EO_ExportTreeUkrain unsetCode()
	 * @method \string fillCode()
	 * @method \string getParentCode()
	 * @method \Bitrix\Sale\Location\Import\Compiler\Db\EO_ExportTreeUkrain setParentCode(\string|\Bitrix\Main\DB\SqlExpression $parentCode)
	 * @method bool hasParentCode()
	 * @method bool isParentCodeFilled()
	 * @method bool isParentCodeChanged()
	 * @method \string remindActualParentCode()
	 * @method \string requireParentCode()
	 * @method \Bitrix\Sale\Location\Import\Compiler\Db\EO_ExportTreeUkrain resetParentCode()
	 * @method \Bitrix\Sale\Location\Import\Compiler\Db\EO_ExportTreeUkrain unsetParentCode()
	 * @method \string fillParentCode()
	 * @method \string getSysCode()
	 * @method \Bitrix\Sale\Location\Import\Compiler\Db\EO_ExportTreeUkrain setSysCode(\string|\Bitrix\Main\DB\SqlExpression $sysCode)
	 * @method bool hasSysCode()
	 * @method bool isSysCodeFilled()
	 * @method bool isSysCodeChanged()
	 * @method \string remindActualSysCode()
	 * @method \string requireSysCode()
	 * @method \Bitrix\Sale\Location\Import\Compiler\Db\EO_ExportTreeUkrain resetSysCode()
	 * @method \Bitrix\Sale\Location\Import\Compiler\Db\EO_ExportTreeUkrain unsetSysCode()
	 * @method \string fillSysCode()
	 * @method \string getTypeCode()
	 * @method \Bitrix\Sale\Location\Import\Compiler\Db\EO_ExportTreeUkrain setTypeCode(\string|\Bitrix\Main\DB\SqlExpression $typeCode)
	 * @method bool hasTypeCode()
	 * @method bool isTypeCodeFilled()
	 * @method bool isTypeCodeChanged()
	 * @method \string remindActualTypeCode()
	 * @method \string requireTypeCode()
	 * @method \Bitrix\Sale\Location\Import\Compiler\Db\EO_ExportTreeUkrain resetTypeCode()
	 * @method \Bitrix\Sale\Location\Import\Compiler\Db\EO_ExportTreeUkrain unsetTypeCode()
	 * @method \string fillTypeCode()
	 * @method \string getFiasType()
	 * @method \Bitrix\Sale\Location\Import\Compiler\Db\EO_ExportTreeUkrain setFiasType(\string|\Bitrix\Main\DB\SqlExpression $fiasType)
	 * @method bool hasFiasType()
	 * @method bool isFiasTypeFilled()
	 * @method bool isFiasTypeChanged()
	 * @method \string remindActualFiasType()
	 * @method \string requireFiasType()
	 * @method \Bitrix\Sale\Location\Import\Compiler\Db\EO_ExportTreeUkrain resetFiasType()
	 * @method \Bitrix\Sale\Location\Import\Compiler\Db\EO_ExportTreeUkrain unsetFiasType()
	 * @method \string fillFiasType()
	 * @method \string getName()
	 * @method \Bitrix\Sale\Location\Import\Compiler\Db\EO_ExportTreeUkrain setName(\string|\Bitrix\Main\DB\SqlExpression $name)
	 * @method bool hasName()
	 * @method bool isNameFilled()
	 * @method bool isNameChanged()
	 * @method \string remindActualName()
	 * @method \string requireName()
	 * @method \Bitrix\Sale\Location\Import\Compiler\Db\EO_ExportTreeUkrain resetName()
	 * @method \Bitrix\Sale\Location\Import\Compiler\Db\EO_ExportTreeUkrain unsetName()
	 * @method \string fillName()
	 * @method \string getLangnames()
	 * @method \Bitrix\Sale\Location\Import\Compiler\Db\EO_ExportTreeUkrain setLangnames(\string|\Bitrix\Main\DB\SqlExpression $langnames)
	 * @method bool hasLangnames()
	 * @method bool isLangnamesFilled()
	 * @method bool isLangnamesChanged()
	 * @method \string remindActualLangnames()
	 * @method \string requireLangnames()
	 * @method \Bitrix\Sale\Location\Import\Compiler\Db\EO_ExportTreeUkrain resetLangnames()
	 * @method \Bitrix\Sale\Location\Import\Compiler\Db\EO_ExportTreeUkrain unsetLangnames()
	 * @method \string fillLangnames()
	 * @method \string getExternals()
	 * @method \Bitrix\Sale\Location\Import\Compiler\Db\EO_ExportTreeUkrain setExternals(\string|\Bitrix\Main\DB\SqlExpression $externals)
	 * @method bool hasExternals()
	 * @method bool isExternalsFilled()
	 * @method bool isExternalsChanged()
	 * @method \string remindActualExternals()
	 * @method \string requireExternals()
	 * @method \Bitrix\Sale\Location\Import\Compiler\Db\EO_ExportTreeUkrain resetExternals()
	 * @method \Bitrix\Sale\Location\Import\Compiler\Db\EO_ExportTreeUkrain unsetExternals()
	 * @method \string fillExternals()
	 * @method \string getLatitude()
	 * @method \Bitrix\Sale\Location\Import\Compiler\Db\EO_ExportTreeUkrain setLatitude(\string|\Bitrix\Main\DB\SqlExpression $latitude)
	 * @method bool hasLatitude()
	 * @method bool isLatitudeFilled()
	 * @method bool isLatitudeChanged()
	 * @method \string remindActualLatitude()
	 * @method \string requireLatitude()
	 * @method \Bitrix\Sale\Location\Import\Compiler\Db\EO_ExportTreeUkrain resetLatitude()
	 * @method \Bitrix\Sale\Location\Import\Compiler\Db\EO_ExportTreeUkrain unsetLatitude()
	 * @method \string fillLatitude()
	 * @method \string getLongitude()
	 * @method \Bitrix\Sale\Location\Import\Compiler\Db\EO_ExportTreeUkrain setLongitude(\string|\Bitrix\Main\DB\SqlExpression $longitude)
	 * @method bool hasLongitude()
	 * @method bool isLongitudeFilled()
	 * @method bool isLongitudeChanged()
	 * @method \string remindActualLongitude()
	 * @method \string requireLongitude()
	 * @method \Bitrix\Sale\Location\Import\Compiler\Db\EO_ExportTreeUkrain resetLongitude()
	 * @method \Bitrix\Sale\Location\Import\Compiler\Db\EO_ExportTreeUkrain unsetLongitude()
	 * @method \string fillLongitude()
	 * @method \string getSource()
	 * @method \Bitrix\Sale\Location\Import\Compiler\Db\EO_ExportTreeUkrain setSource(\string|\Bitrix\Main\DB\SqlExpression $source)
	 * @method bool hasSource()
	 * @method bool isSourceFilled()
	 * @method bool isSourceChanged()
	 * @method \string remindActualSource()
	 * @method \string requireSource()
	 * @method \Bitrix\Sale\Location\Import\Compiler\Db\EO_ExportTreeUkrain resetSource()
	 * @method \Bitrix\Sale\Location\Import\Compiler\Db\EO_ExportTreeUkrain unsetSource()
	 * @method \string fillSource()
	 * @method \string getAlternateCoords()
	 * @method \Bitrix\Sale\Location\Import\Compiler\Db\EO_ExportTreeUkrain setAlternateCoords(\string|\Bitrix\Main\DB\SqlExpression $alternateCoords)
	 * @method bool hasAlternateCoords()
	 * @method bool isAlternateCoordsFilled()
	 * @method bool isAlternateCoordsChanged()
	 * @method \string remindActualAlternateCoords()
	 * @method \string requireAlternateCoords()
	 * @method \Bitrix\Sale\Location\Import\Compiler\Db\EO_ExportTreeUkrain resetAlternateCoords()
	 * @method \Bitrix\Sale\Location\Import\Compiler\Db\EO_ExportTreeUkrain unsetAlternateCoords()
	 * @method \string fillAlternateCoords()
	 * @method \string getBoundedWith()
	 * @method \Bitrix\Sale\Location\Import\Compiler\Db\EO_ExportTreeUkrain setBoundedWith(\string|\Bitrix\Main\DB\SqlExpression $boundedWith)
	 * @method bool hasBoundedWith()
	 * @method bool isBoundedWithFilled()
	 * @method bool isBoundedWithChanged()
	 * @method \string remindActualBoundedWith()
	 * @method \string requireBoundedWith()
	 * @method \Bitrix\Sale\Location\Import\Compiler\Db\EO_ExportTreeUkrain resetBoundedWith()
	 * @method \Bitrix\Sale\Location\Import\Compiler\Db\EO_ExportTreeUkrain unsetBoundedWith()
	 * @method \string fillBoundedWith()
	 * @method \string getZip()
	 * @method \Bitrix\Sale\Location\Import\Compiler\Db\EO_ExportTreeUkrain setZip(\string|\Bitrix\Main\DB\SqlExpression $zip)
	 * @method bool hasZip()
	 * @method bool isZipFilled()
	 * @method bool isZipChanged()
	 * @method \string remindActualZip()
	 * @method \string requireZip()
	 * @method \Bitrix\Sale\Location\Import\Compiler\Db\EO_ExportTreeUkrain resetZip()
	 * @method \Bitrix\Sale\Location\Import\Compiler\Db\EO_ExportTreeUkrain unsetZip()
	 * @method \string fillZip()
	 * @method \string getZipTo()
	 * @method \Bitrix\Sale\Location\Import\Compiler\Db\EO_ExportTreeUkrain setZipTo(\string|\Bitrix\Main\DB\SqlExpression $zipTo)
	 * @method bool hasZipTo()
	 * @method bool isZipToFilled()
	 * @method bool isZipToChanged()
	 * @method \string remindActualZipTo()
	 * @method \string requireZipTo()
	 * @method \Bitrix\Sale\Location\Import\Compiler\Db\EO_ExportTreeUkrain resetZipTo()
	 * @method \Bitrix\Sale\Location\Import\Compiler\Db\EO_ExportTreeUkrain unsetZipTo()
	 * @method \string fillZipTo()
	 * @method \string getNameUa()
	 * @method \Bitrix\Sale\Location\Import\Compiler\Db\EO_ExportTreeUkrain setNameUa(\string|\Bitrix\Main\DB\SqlExpression $nameUa)
	 * @method bool hasNameUa()
	 * @method bool isNameUaFilled()
	 * @method bool isNameUaChanged()
	 * @method \string remindActualNameUa()
	 * @method \string requireNameUa()
	 * @method \Bitrix\Sale\Location\Import\Compiler\Db\EO_ExportTreeUkrain resetNameUa()
	 * @method \Bitrix\Sale\Location\Import\Compiler\Db\EO_ExportTreeUkrain unsetNameUa()
	 * @method \string fillNameUa()
	 * @method \int getSettlTypeId()
	 * @method \Bitrix\Sale\Location\Import\Compiler\Db\EO_ExportTreeUkrain setSettlTypeId(\int|\Bitrix\Main\DB\SqlExpression $settlTypeId)
	 * @method bool hasSettlTypeId()
	 * @method bool isSettlTypeIdFilled()
	 * @method bool isSettlTypeIdChanged()
	 * @method \int remindActualSettlTypeId()
	 * @method \int requireSettlTypeId()
	 * @method \Bitrix\Sale\Location\Import\Compiler\Db\EO_ExportTreeUkrain resetSettlTypeId()
	 * @method \Bitrix\Sale\Location\Import\Compiler\Db\EO_ExportTreeUkrain unsetSettlTypeId()
	 * @method \int fillSettlTypeId()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Sale\Location\Import\Compiler\Db\EO_ExportTreeUkrain set($fieldName, $value)
	 * @method \Bitrix\Sale\Location\Import\Compiler\Db\EO_ExportTreeUkrain reset($fieldName)
	 * @method \Bitrix\Sale\Location\Import\Compiler\Db\EO_ExportTreeUkrain unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Sale\Location\Import\Compiler\Db\EO_ExportTreeUkrain wakeUp($data)
	 */
	class EO_ExportTreeUkrain {
		/* @var \Bitrix\Sale\Location\Import\Compiler\Db\ExportTreeUkrainTable */
		static public $dataClass = '\Bitrix\Sale\Location\Import\Compiler\Db\ExportTreeUkrainTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Sale\Location\Import\Compiler\Db {
	/**
	 * EO_ExportTreeUkrain_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getIdList()
	 * @method \string[] getCodeList()
	 * @method \string[] fillCode()
	 * @method \string[] getParentCodeList()
	 * @method \string[] fillParentCode()
	 * @method \string[] getSysCodeList()
	 * @method \string[] fillSysCode()
	 * @method \string[] getTypeCodeList()
	 * @method \string[] fillTypeCode()
	 * @method \string[] getFiasTypeList()
	 * @method \string[] fillFiasType()
	 * @method \string[] getNameList()
	 * @method \string[] fillName()
	 * @method \string[] getLangnamesList()
	 * @method \string[] fillLangnames()
	 * @method \string[] getExternalsList()
	 * @method \string[] fillExternals()
	 * @method \string[] getLatitudeList()
	 * @method \string[] fillLatitude()
	 * @method \string[] getLongitudeList()
	 * @method \string[] fillLongitude()
	 * @method \string[] getSourceList()
	 * @method \string[] fillSource()
	 * @method \string[] getAlternateCoordsList()
	 * @method \string[] fillAlternateCoords()
	 * @method \string[] getBoundedWithList()
	 * @method \string[] fillBoundedWith()
	 * @method \string[] getZipList()
	 * @method \string[] fillZip()
	 * @method \string[] getZipToList()
	 * @method \string[] fillZipTo()
	 * @method \string[] getNameUaList()
	 * @method \string[] fillNameUa()
	 * @method \int[] getSettlTypeIdList()
	 * @method \int[] fillSettlTypeId()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Sale\Location\Import\Compiler\Db\EO_ExportTreeUkrain $object)
	 * @method bool has(\Bitrix\Sale\Location\Import\Compiler\Db\EO_ExportTreeUkrain $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Sale\Location\Import\Compiler\Db\EO_ExportTreeUkrain getByPrimary($primary)
	 * @method \Bitrix\Sale\Location\Import\Compiler\Db\EO_ExportTreeUkrain[] getAll()
	 * @method bool remove(\Bitrix\Sale\Location\Import\Compiler\Db\EO_ExportTreeUkrain $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Sale\Location\Import\Compiler\Db\EO_ExportTreeUkrain_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Sale\Location\Import\Compiler\Db\EO_ExportTreeUkrain current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 * @method EO_ExportTreeUkrain_Collection merge(?EO_ExportTreeUkrain_Collection $collection)
	 * @method bool isEmpty()
	 */
	class EO_ExportTreeUkrain_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Sale\Location\Import\Compiler\Db\ExportTreeUkrainTable */
		static public $dataClass = '\Bitrix\Sale\Location\Import\Compiler\Db\ExportTreeUkrainTable';
	}
}
namespace Bitrix\Sale\Location\Import\Compiler\Db {
	/**
	 * Common methods:
	 * ---------------
	 *
	 * @method EO_ExportTreeUkrain_Result exec()
	 * @method \Bitrix\Sale\Location\Import\Compiler\Db\EO_ExportTreeUkrain fetchObject()
	 * @method \Bitrix\Sale\Location\Import\Compiler\Db\EO_ExportTreeUkrain_Collection fetchCollection()
	 *
	 * Custom methods:
	 * ---------------
	 *
	 */
	class EO_ExportTreeUkrain_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Sale\Location\Import\Compiler\Db\EO_ExportTreeUkrain fetchObject()
	 * @method \Bitrix\Sale\Location\Import\Compiler\Db\EO_ExportTreeUkrain_Collection fetchCollection()
	 */
	class EO_ExportTreeUkrain_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Sale\Location\Import\Compiler\Db\EO_ExportTreeUkrain createObject($setDefaultValues = true)
	 * @method \Bitrix\Sale\Location\Import\Compiler\Db\EO_ExportTreeUkrain_Collection createCollection()
	 * @method \Bitrix\Sale\Location\Import\Compiler\Db\EO_ExportTreeUkrain wakeUpObject($row)
	 * @method \Bitrix\Sale\Location\Import\Compiler\Db\EO_ExportTreeUkrain_Collection wakeUpCollection($rows)
	 */
	class EO_ExportTreeUkrain_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Sale\Location\Import\Compiler\Db\FiasTable:sale\lib\location\import\compiler\db\fias.php */
namespace Bitrix\Sale\Location\Import\Compiler\Db {
	/**
	 * EO_Fias
	 * @see \Bitrix\Sale\Location\Import\Compiler\Db\FiasTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \string getAoguid()
	 * @method \Bitrix\Sale\Location\Import\Compiler\Db\EO_Fias setAoguid(\string|\Bitrix\Main\DB\SqlExpression $aoguid)
	 * @method bool hasAoguid()
	 * @method bool isAoguidFilled()
	 * @method bool isAoguidChanged()
	 * @method \string getParentguid()
	 * @method \Bitrix\Sale\Location\Import\Compiler\Db\EO_Fias setParentguid(\string|\Bitrix\Main\DB\SqlExpression $parentguid)
	 * @method bool hasParentguid()
	 * @method bool isParentguidFilled()
	 * @method bool isParentguidChanged()
	 * @method \string remindActualParentguid()
	 * @method \string requireParentguid()
	 * @method \Bitrix\Sale\Location\Import\Compiler\Db\EO_Fias resetParentguid()
	 * @method \Bitrix\Sale\Location\Import\Compiler\Db\EO_Fias unsetParentguid()
	 * @method \string fillParentguid()
	 * @method \string getAoid()
	 * @method \Bitrix\Sale\Location\Import\Compiler\Db\EO_Fias setAoid(\string|\Bitrix\Main\DB\SqlExpression $aoid)
	 * @method bool hasAoid()
	 * @method bool isAoidFilled()
	 * @method bool isAoidChanged()
	 * @method \string getNextid()
	 * @method \Bitrix\Sale\Location\Import\Compiler\Db\EO_Fias setNextid(\string|\Bitrix\Main\DB\SqlExpression $nextid)
	 * @method bool hasNextid()
	 * @method bool isNextidFilled()
	 * @method bool isNextidChanged()
	 * @method \string remindActualNextid()
	 * @method \string requireNextid()
	 * @method \Bitrix\Sale\Location\Import\Compiler\Db\EO_Fias resetNextid()
	 * @method \Bitrix\Sale\Location\Import\Compiler\Db\EO_Fias unsetNextid()
	 * @method \string fillNextid()
	 * @method \string getFormalname()
	 * @method \Bitrix\Sale\Location\Import\Compiler\Db\EO_Fias setFormalname(\string|\Bitrix\Main\DB\SqlExpression $formalname)
	 * @method bool hasFormalname()
	 * @method bool isFormalnameFilled()
	 * @method bool isFormalnameChanged()
	 * @method \string remindActualFormalname()
	 * @method \string requireFormalname()
	 * @method \Bitrix\Sale\Location\Import\Compiler\Db\EO_Fias resetFormalname()
	 * @method \Bitrix\Sale\Location\Import\Compiler\Db\EO_Fias unsetFormalname()
	 * @method \string fillFormalname()
	 * @method \string getShortname()
	 * @method \Bitrix\Sale\Location\Import\Compiler\Db\EO_Fias setShortname(\string|\Bitrix\Main\DB\SqlExpression $shortname)
	 * @method bool hasShortname()
	 * @method bool isShortnameFilled()
	 * @method bool isShortnameChanged()
	 * @method \string remindActualShortname()
	 * @method \string requireShortname()
	 * @method \Bitrix\Sale\Location\Import\Compiler\Db\EO_Fias resetShortname()
	 * @method \Bitrix\Sale\Location\Import\Compiler\Db\EO_Fias unsetShortname()
	 * @method \string fillShortname()
	 * @method \string getPostalcode()
	 * @method \Bitrix\Sale\Location\Import\Compiler\Db\EO_Fias setPostalcode(\string|\Bitrix\Main\DB\SqlExpression $postalcode)
	 * @method bool hasPostalcode()
	 * @method bool isPostalcodeFilled()
	 * @method bool isPostalcodeChanged()
	 * @method \string remindActualPostalcode()
	 * @method \string requirePostalcode()
	 * @method \Bitrix\Sale\Location\Import\Compiler\Db\EO_Fias resetPostalcode()
	 * @method \Bitrix\Sale\Location\Import\Compiler\Db\EO_Fias unsetPostalcode()
	 * @method \string fillPostalcode()
	 * @method \int getActstatus()
	 * @method \Bitrix\Sale\Location\Import\Compiler\Db\EO_Fias setActstatus(\int|\Bitrix\Main\DB\SqlExpression $actstatus)
	 * @method bool hasActstatus()
	 * @method bool isActstatusFilled()
	 * @method bool isActstatusChanged()
	 * @method \int remindActualActstatus()
	 * @method \int requireActstatus()
	 * @method \Bitrix\Sale\Location\Import\Compiler\Db\EO_Fias resetActstatus()
	 * @method \Bitrix\Sale\Location\Import\Compiler\Db\EO_Fias unsetActstatus()
	 * @method \int fillActstatus()
	 * @method \int getLivestatus()
	 * @method \Bitrix\Sale\Location\Import\Compiler\Db\EO_Fias setLivestatus(\int|\Bitrix\Main\DB\SqlExpression $livestatus)
	 * @method bool hasLivestatus()
	 * @method bool isLivestatusFilled()
	 * @method bool isLivestatusChanged()
	 * @method \int remindActualLivestatus()
	 * @method \int requireLivestatus()
	 * @method \Bitrix\Sale\Location\Import\Compiler\Db\EO_Fias resetLivestatus()
	 * @method \Bitrix\Sale\Location\Import\Compiler\Db\EO_Fias unsetLivestatus()
	 * @method \int fillLivestatus()
	 * @method \string getNameLc()
	 * @method \Bitrix\Sale\Location\Import\Compiler\Db\EO_Fias setNameLc(\string|\Bitrix\Main\DB\SqlExpression $nameLc)
	 * @method bool hasNameLc()
	 * @method bool isNameLcFilled()
	 * @method bool isNameLcChanged()
	 * @method \string remindActualNameLc()
	 * @method \string requireNameLc()
	 * @method \Bitrix\Sale\Location\Import\Compiler\Db\EO_Fias resetNameLc()
	 * @method \Bitrix\Sale\Location\Import\Compiler\Db\EO_Fias unsetNameLc()
	 * @method \string fillNameLc()
	 * @method \string getCode()
	 * @method \Bitrix\Sale\Location\Import\Compiler\Db\EO_Fias setCode(\string|\Bitrix\Main\DB\SqlExpression $code)
	 * @method bool hasCode()
	 * @method bool isCodeFilled()
	 * @method bool isCodeChanged()
	 * @method \string remindActualCode()
	 * @method \string requireCode()
	 * @method \Bitrix\Sale\Location\Import\Compiler\Db\EO_Fias resetCode()
	 * @method \Bitrix\Sale\Location\Import\Compiler\Db\EO_Fias unsetCode()
	 * @method \string fillCode()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Sale\Location\Import\Compiler\Db\EO_Fias set($fieldName, $value)
	 * @method \Bitrix\Sale\Location\Import\Compiler\Db\EO_Fias reset($fieldName)
	 * @method \Bitrix\Sale\Location\Import\Compiler\Db\EO_Fias unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Sale\Location\Import\Compiler\Db\EO_Fias wakeUp($data)
	 */
	class EO_Fias {
		/* @var \Bitrix\Sale\Location\Import\Compiler\Db\FiasTable */
		static public $dataClass = '\Bitrix\Sale\Location\Import\Compiler\Db\FiasTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Sale\Location\Import\Compiler\Db {
	/**
	 * EO_Fias_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \string[] getAoguidList()
	 * @method \string[] getParentguidList()
	 * @method \string[] fillParentguid()
	 * @method \string[] getAoidList()
	 * @method \string[] getNextidList()
	 * @method \string[] fillNextid()
	 * @method \string[] getFormalnameList()
	 * @method \string[] fillFormalname()
	 * @method \string[] getShortnameList()
	 * @method \string[] fillShortname()
	 * @method \string[] getPostalcodeList()
	 * @method \string[] fillPostalcode()
	 * @method \int[] getActstatusList()
	 * @method \int[] fillActstatus()
	 * @method \int[] getLivestatusList()
	 * @method \int[] fillLivestatus()
	 * @method \string[] getNameLcList()
	 * @method \string[] fillNameLc()
	 * @method \string[] getCodeList()
	 * @method \string[] fillCode()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Sale\Location\Import\Compiler\Db\EO_Fias $object)
	 * @method bool has(\Bitrix\Sale\Location\Import\Compiler\Db\EO_Fias $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Sale\Location\Import\Compiler\Db\EO_Fias getByPrimary($primary)
	 * @method \Bitrix\Sale\Location\Import\Compiler\Db\EO_Fias[] getAll()
	 * @method bool remove(\Bitrix\Sale\Location\Import\Compiler\Db\EO_Fias $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Sale\Location\Import\Compiler\Db\EO_Fias_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Sale\Location\Import\Compiler\Db\EO_Fias current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 * @method EO_Fias_Collection merge(?EO_Fias_Collection $collection)
	 * @method bool isEmpty()
	 */
	class EO_Fias_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Sale\Location\Import\Compiler\Db\FiasTable */
		static public $dataClass = '\Bitrix\Sale\Location\Import\Compiler\Db\FiasTable';
	}
}
namespace Bitrix\Sale\Location\Import\Compiler\Db {
	/**
	 * Common methods:
	 * ---------------
	 *
	 * @method EO_Fias_Result exec()
	 * @method \Bitrix\Sale\Location\Import\Compiler\Db\EO_Fias fetchObject()
	 * @method \Bitrix\Sale\Location\Import\Compiler\Db\EO_Fias_Collection fetchCollection()
	 *
	 * Custom methods:
	 * ---------------
	 *
	 */
	class EO_Fias_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Sale\Location\Import\Compiler\Db\EO_Fias fetchObject()
	 * @method \Bitrix\Sale\Location\Import\Compiler\Db\EO_Fias_Collection fetchCollection()
	 */
	class EO_Fias_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Sale\Location\Import\Compiler\Db\EO_Fias createObject($setDefaultValues = true)
	 * @method \Bitrix\Sale\Location\Import\Compiler\Db\EO_Fias_Collection createCollection()
	 * @method \Bitrix\Sale\Location\Import\Compiler\Db\EO_Fias wakeUpObject($row)
	 * @method \Bitrix\Sale\Location\Import\Compiler\Db\EO_Fias_Collection wakeUpCollection($rows)
	 */
	class EO_Fias_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Sale\Location\LocationTable:sale\lib\location\location.php */
namespace Bitrix\Sale\Location {
	/**
	 * EO_Location
	 * @see \Bitrix\Sale\Location\LocationTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getId()
	 * @method \Bitrix\Sale\Location\EO_Location setId(\int|\Bitrix\Main\DB\SqlExpression $id)
	 * @method bool hasId()
	 * @method bool isIdFilled()
	 * @method bool isIdChanged()
	 * @method \string getCode()
	 * @method \Bitrix\Sale\Location\EO_Location setCode(\string|\Bitrix\Main\DB\SqlExpression $code)
	 * @method bool hasCode()
	 * @method bool isCodeFilled()
	 * @method bool isCodeChanged()
	 * @method \string remindActualCode()
	 * @method \string requireCode()
	 * @method \Bitrix\Sale\Location\EO_Location resetCode()
	 * @method \Bitrix\Sale\Location\EO_Location unsetCode()
	 * @method \string fillCode()
	 * @method \int getLeftMargin()
	 * @method \Bitrix\Sale\Location\EO_Location setLeftMargin(\int|\Bitrix\Main\DB\SqlExpression $leftMargin)
	 * @method bool hasLeftMargin()
	 * @method bool isLeftMarginFilled()
	 * @method bool isLeftMarginChanged()
	 * @method \int remindActualLeftMargin()
	 * @method \int requireLeftMargin()
	 * @method \Bitrix\Sale\Location\EO_Location resetLeftMargin()
	 * @method \Bitrix\Sale\Location\EO_Location unsetLeftMargin()
	 * @method \int fillLeftMargin()
	 * @method \int getRightMargin()
	 * @method \Bitrix\Sale\Location\EO_Location setRightMargin(\int|\Bitrix\Main\DB\SqlExpression $rightMargin)
	 * @method bool hasRightMargin()
	 * @method bool isRightMarginFilled()
	 * @method bool isRightMarginChanged()
	 * @method \int remindActualRightMargin()
	 * @method \int requireRightMargin()
	 * @method \Bitrix\Sale\Location\EO_Location resetRightMargin()
	 * @method \Bitrix\Sale\Location\EO_Location unsetRightMargin()
	 * @method \int fillRightMargin()
	 * @method \int getDepthLevel()
	 * @method \Bitrix\Sale\Location\EO_Location setDepthLevel(\int|\Bitrix\Main\DB\SqlExpression $depthLevel)
	 * @method bool hasDepthLevel()
	 * @method bool isDepthLevelFilled()
	 * @method bool isDepthLevelChanged()
	 * @method \int remindActualDepthLevel()
	 * @method \int requireDepthLevel()
	 * @method \Bitrix\Sale\Location\EO_Location resetDepthLevel()
	 * @method \Bitrix\Sale\Location\EO_Location unsetDepthLevel()
	 * @method \int fillDepthLevel()
	 * @method \int getSort()
	 * @method \Bitrix\Sale\Location\EO_Location setSort(\int|\Bitrix\Main\DB\SqlExpression $sort)
	 * @method bool hasSort()
	 * @method bool isSortFilled()
	 * @method bool isSortChanged()
	 * @method \int remindActualSort()
	 * @method \int requireSort()
	 * @method \Bitrix\Sale\Location\EO_Location resetSort()
	 * @method \Bitrix\Sale\Location\EO_Location unsetSort()
	 * @method \int fillSort()
	 * @method \int getParentId()
	 * @method \Bitrix\Sale\Location\EO_Location setParentId(\int|\Bitrix\Main\DB\SqlExpression $parentId)
	 * @method bool hasParentId()
	 * @method bool isParentIdFilled()
	 * @method bool isParentIdChanged()
	 * @method \int remindActualParentId()
	 * @method \int requireParentId()
	 * @method \Bitrix\Sale\Location\EO_Location resetParentId()
	 * @method \Bitrix\Sale\Location\EO_Location unsetParentId()
	 * @method \int fillParentId()
	 * @method \int getTypeId()
	 * @method \Bitrix\Sale\Location\EO_Location setTypeId(\int|\Bitrix\Main\DB\SqlExpression $typeId)
	 * @method bool hasTypeId()
	 * @method bool isTypeIdFilled()
	 * @method bool isTypeIdChanged()
	 * @method \int remindActualTypeId()
	 * @method \int requireTypeId()
	 * @method \Bitrix\Sale\Location\EO_Location resetTypeId()
	 * @method \Bitrix\Sale\Location\EO_Location unsetTypeId()
	 * @method \int fillTypeId()
	 * @method \float getLatitude()
	 * @method \Bitrix\Sale\Location\EO_Location setLatitude(\float|\Bitrix\Main\DB\SqlExpression $latitude)
	 * @method bool hasLatitude()
	 * @method bool isLatitudeFilled()
	 * @method bool isLatitudeChanged()
	 * @method \float remindActualLatitude()
	 * @method \float requireLatitude()
	 * @method \Bitrix\Sale\Location\EO_Location resetLatitude()
	 * @method \Bitrix\Sale\Location\EO_Location unsetLatitude()
	 * @method \float fillLatitude()
	 * @method \float getLongitude()
	 * @method \Bitrix\Sale\Location\EO_Location setLongitude(\float|\Bitrix\Main\DB\SqlExpression $longitude)
	 * @method bool hasLongitude()
	 * @method bool isLongitudeFilled()
	 * @method bool isLongitudeChanged()
	 * @method \float remindActualLongitude()
	 * @method \float requireLongitude()
	 * @method \Bitrix\Sale\Location\EO_Location resetLongitude()
	 * @method \Bitrix\Sale\Location\EO_Location unsetLongitude()
	 * @method \float fillLongitude()
	 * @method \Bitrix\Sale\Location\EO_Type getType()
	 * @method \Bitrix\Sale\Location\EO_Type remindActualType()
	 * @method \Bitrix\Sale\Location\EO_Type requireType()
	 * @method \Bitrix\Sale\Location\EO_Location setType(\Bitrix\Sale\Location\EO_Type $object)
	 * @method \Bitrix\Sale\Location\EO_Location resetType()
	 * @method \Bitrix\Sale\Location\EO_Location unsetType()
	 * @method bool hasType()
	 * @method bool isTypeFilled()
	 * @method bool isTypeChanged()
	 * @method \Bitrix\Sale\Location\EO_Type fillType()
	 * @method \Bitrix\Sale\Location\Name\EO_Location getName()
	 * @method \Bitrix\Sale\Location\Name\EO_Location remindActualName()
	 * @method \Bitrix\Sale\Location\Name\EO_Location requireName()
	 * @method \Bitrix\Sale\Location\EO_Location setName(\Bitrix\Sale\Location\Name\EO_Location $object)
	 * @method \Bitrix\Sale\Location\EO_Location resetName()
	 * @method \Bitrix\Sale\Location\EO_Location unsetName()
	 * @method bool hasName()
	 * @method bool isNameFilled()
	 * @method bool isNameChanged()
	 * @method \Bitrix\Sale\Location\Name\EO_Location fillName()
	 * @method \Bitrix\Sale\Location\EO_Location getParent()
	 * @method \Bitrix\Sale\Location\EO_Location remindActualParent()
	 * @method \Bitrix\Sale\Location\EO_Location requireParent()
	 * @method \Bitrix\Sale\Location\EO_Location setParent(\Bitrix\Sale\Location\EO_Location $object)
	 * @method \Bitrix\Sale\Location\EO_Location resetParent()
	 * @method \Bitrix\Sale\Location\EO_Location unsetParent()
	 * @method bool hasParent()
	 * @method bool isParentFilled()
	 * @method bool isParentChanged()
	 * @method \Bitrix\Sale\Location\EO_Location fillParent()
	 * @method \Bitrix\Sale\Location\EO_Location getParents()
	 * @method \Bitrix\Sale\Location\EO_Location remindActualParents()
	 * @method \Bitrix\Sale\Location\EO_Location requireParents()
	 * @method \Bitrix\Sale\Location\EO_Location setParents(\Bitrix\Sale\Location\EO_Location $object)
	 * @method \Bitrix\Sale\Location\EO_Location resetParents()
	 * @method \Bitrix\Sale\Location\EO_Location unsetParents()
	 * @method bool hasParents()
	 * @method bool isParentsFilled()
	 * @method bool isParentsChanged()
	 * @method \Bitrix\Sale\Location\EO_Location fillParents()
	 * @method \Bitrix\Sale\Location\EO_Location getChildren()
	 * @method \Bitrix\Sale\Location\EO_Location remindActualChildren()
	 * @method \Bitrix\Sale\Location\EO_Location requireChildren()
	 * @method \Bitrix\Sale\Location\EO_Location setChildren(\Bitrix\Sale\Location\EO_Location $object)
	 * @method \Bitrix\Sale\Location\EO_Location resetChildren()
	 * @method \Bitrix\Sale\Location\EO_Location unsetChildren()
	 * @method bool hasChildren()
	 * @method bool isChildrenFilled()
	 * @method bool isChildrenChanged()
	 * @method \Bitrix\Sale\Location\EO_Location fillChildren()
	 * @method \Bitrix\Sale\Location\EO_External getExternal()
	 * @method \Bitrix\Sale\Location\EO_External remindActualExternal()
	 * @method \Bitrix\Sale\Location\EO_External requireExternal()
	 * @method \Bitrix\Sale\Location\EO_Location setExternal(\Bitrix\Sale\Location\EO_External $object)
	 * @method \Bitrix\Sale\Location\EO_Location resetExternal()
	 * @method \Bitrix\Sale\Location\EO_Location unsetExternal()
	 * @method bool hasExternal()
	 * @method bool isExternalFilled()
	 * @method bool isExternalChanged()
	 * @method \Bitrix\Sale\Location\EO_External fillExternal()
	 * @method \Bitrix\Sale\Location\EO_DefaultSite getDefaultSite()
	 * @method \Bitrix\Sale\Location\EO_DefaultSite remindActualDefaultSite()
	 * @method \Bitrix\Sale\Location\EO_DefaultSite requireDefaultSite()
	 * @method \Bitrix\Sale\Location\EO_Location setDefaultSite(\Bitrix\Sale\Location\EO_DefaultSite $object)
	 * @method \Bitrix\Sale\Location\EO_Location resetDefaultSite()
	 * @method \Bitrix\Sale\Location\EO_Location unsetDefaultSite()
	 * @method bool hasDefaultSite()
	 * @method bool isDefaultSiteFilled()
	 * @method bool isDefaultSiteChanged()
	 * @method \Bitrix\Sale\Location\EO_DefaultSite fillDefaultSite()
	 * @method \int getCnt()
	 * @method \int remindActualCnt()
	 * @method \int requireCnt()
	 * @method bool hasCnt()
	 * @method bool isCntFilled()
	 * @method \Bitrix\Sale\Location\EO_Location unsetCnt()
	 * @method \int fillCnt()
	 * @method \int getChildrenCnt()
	 * @method \int remindActualChildrenCnt()
	 * @method \int requireChildrenCnt()
	 * @method bool hasChildrenCnt()
	 * @method bool isChildrenCntFilled()
	 * @method \Bitrix\Sale\Location\EO_Location unsetChildrenCnt()
	 * @method \int fillChildrenCnt()
	 * @method \boolean getIsParent()
	 * @method \boolean remindActualIsParent()
	 * @method \boolean requireIsParent()
	 * @method bool hasIsParent()
	 * @method bool isIsParentFilled()
	 * @method \Bitrix\Sale\Location\EO_Location unsetIsParent()
	 * @method \boolean fillIsParent()
	 * @method \int getCountryId()
	 * @method \Bitrix\Sale\Location\EO_Location setCountryId(\int|\Bitrix\Main\DB\SqlExpression $countryId)
	 * @method bool hasCountryId()
	 * @method bool isCountryIdFilled()
	 * @method bool isCountryIdChanged()
	 * @method \int remindActualCountryId()
	 * @method \int requireCountryId()
	 * @method \Bitrix\Sale\Location\EO_Location resetCountryId()
	 * @method \Bitrix\Sale\Location\EO_Location unsetCountryId()
	 * @method \int fillCountryId()
	 * @method \int getRegionId()
	 * @method \Bitrix\Sale\Location\EO_Location setRegionId(\int|\Bitrix\Main\DB\SqlExpression $regionId)
	 * @method bool hasRegionId()
	 * @method bool isRegionIdFilled()
	 * @method bool isRegionIdChanged()
	 * @method \int remindActualRegionId()
	 * @method \int requireRegionId()
	 * @method \Bitrix\Sale\Location\EO_Location resetRegionId()
	 * @method \Bitrix\Sale\Location\EO_Location unsetRegionId()
	 * @method \int fillRegionId()
	 * @method \int getCityId()
	 * @method \Bitrix\Sale\Location\EO_Location setCityId(\int|\Bitrix\Main\DB\SqlExpression $cityId)
	 * @method bool hasCityId()
	 * @method bool isCityIdFilled()
	 * @method bool isCityIdChanged()
	 * @method \int remindActualCityId()
	 * @method \int requireCityId()
	 * @method \Bitrix\Sale\Location\EO_Location resetCityId()
	 * @method \Bitrix\Sale\Location\EO_Location unsetCityId()
	 * @method \int fillCityId()
	 * @method \string getLocDefault()
	 * @method \Bitrix\Sale\Location\EO_Location setLocDefault(\string|\Bitrix\Main\DB\SqlExpression $locDefault)
	 * @method bool hasLocDefault()
	 * @method bool isLocDefaultFilled()
	 * @method bool isLocDefaultChanged()
	 * @method \string remindActualLocDefault()
	 * @method \string requireLocDefault()
	 * @method \Bitrix\Sale\Location\EO_Location resetLocDefault()
	 * @method \Bitrix\Sale\Location\EO_Location unsetLocDefault()
	 * @method \string fillLocDefault()
	 * @method \Bitrix\Sale\Location\EO_Location getChild()
	 * @method \Bitrix\Sale\Location\EO_Location remindActualChild()
	 * @method \Bitrix\Sale\Location\EO_Location requireChild()
	 * @method \Bitrix\Sale\Location\EO_Location setChild(\Bitrix\Sale\Location\EO_Location $object)
	 * @method \Bitrix\Sale\Location\EO_Location resetChild()
	 * @method \Bitrix\Sale\Location\EO_Location unsetChild()
	 * @method bool hasChild()
	 * @method bool isChildFilled()
	 * @method bool isChildChanged()
	 * @method \Bitrix\Sale\Location\EO_Location fillChild()
	 * @method \int getChildCnt()
	 * @method \int remindActualChildCnt()
	 * @method \int requireChildCnt()
	 * @method bool hasChildCnt()
	 * @method bool isChildCntFilled()
	 * @method \Bitrix\Sale\Location\EO_Location unsetChildCnt()
	 * @method \int fillChildCnt()
	 * @method \Bitrix\Sale\Location\EO_DefaultSite getDefaultSort()
	 * @method \Bitrix\Sale\Location\EO_DefaultSite remindActualDefaultSort()
	 * @method \Bitrix\Sale\Location\EO_DefaultSite requireDefaultSort()
	 * @method \Bitrix\Sale\Location\EO_Location setDefaultSort(\Bitrix\Sale\Location\EO_DefaultSite $object)
	 * @method \Bitrix\Sale\Location\EO_Location resetDefaultSort()
	 * @method \Bitrix\Sale\Location\EO_Location unsetDefaultSort()
	 * @method bool hasDefaultSort()
	 * @method bool isDefaultSortFilled()
	 * @method bool isDefaultSortChanged()
	 * @method \Bitrix\Sale\Location\EO_DefaultSite fillDefaultSort()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Sale\Location\EO_Location set($fieldName, $value)
	 * @method \Bitrix\Sale\Location\EO_Location reset($fieldName)
	 * @method \Bitrix\Sale\Location\EO_Location unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Sale\Location\EO_Location wakeUp($data)
	 */
	class EO_Location {
		/* @var \Bitrix\Sale\Location\LocationTable */
		static public $dataClass = '\Bitrix\Sale\Location\LocationTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Sale\Location {
	/**
	 * EO_Location_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getIdList()
	 * @method \string[] getCodeList()
	 * @method \string[] fillCode()
	 * @method \int[] getLeftMarginList()
	 * @method \int[] fillLeftMargin()
	 * @method \int[] getRightMarginList()
	 * @method \int[] fillRightMargin()
	 * @method \int[] getDepthLevelList()
	 * @method \int[] fillDepthLevel()
	 * @method \int[] getSortList()
	 * @method \int[] fillSort()
	 * @method \int[] getParentIdList()
	 * @method \int[] fillParentId()
	 * @method \int[] getTypeIdList()
	 * @method \int[] fillTypeId()
	 * @method \float[] getLatitudeList()
	 * @method \float[] fillLatitude()
	 * @method \float[] getLongitudeList()
	 * @method \float[] fillLongitude()
	 * @method \Bitrix\Sale\Location\EO_Type[] getTypeList()
	 * @method \Bitrix\Sale\Location\EO_Location_Collection getTypeCollection()
	 * @method \Bitrix\Sale\Location\EO_Type_Collection fillType()
	 * @method \Bitrix\Sale\Location\Name\EO_Location[] getNameList()
	 * @method \Bitrix\Sale\Location\EO_Location_Collection getNameCollection()
	 * @method \Bitrix\Sale\Location\Name\EO_Location_Collection fillName()
	 * @method \Bitrix\Sale\Location\EO_Location[] getParentList()
	 * @method \Bitrix\Sale\Location\EO_Location_Collection getParentCollection()
	 * @method \Bitrix\Sale\Location\EO_Location_Collection fillParent()
	 * @method \Bitrix\Sale\Location\EO_Location[] getParentsList()
	 * @method \Bitrix\Sale\Location\EO_Location_Collection getParentsCollection()
	 * @method \Bitrix\Sale\Location\EO_Location_Collection fillParents()
	 * @method \Bitrix\Sale\Location\EO_Location[] getChildrenList()
	 * @method \Bitrix\Sale\Location\EO_Location_Collection getChildrenCollection()
	 * @method \Bitrix\Sale\Location\EO_Location_Collection fillChildren()
	 * @method \Bitrix\Sale\Location\EO_External[] getExternalList()
	 * @method \Bitrix\Sale\Location\EO_Location_Collection getExternalCollection()
	 * @method \Bitrix\Sale\Location\EO_External_Collection fillExternal()
	 * @method \Bitrix\Sale\Location\EO_DefaultSite[] getDefaultSiteList()
	 * @method \Bitrix\Sale\Location\EO_Location_Collection getDefaultSiteCollection()
	 * @method \Bitrix\Sale\Location\EO_DefaultSite_Collection fillDefaultSite()
	 * @method \int[] getCntList()
	 * @method \int[] fillCnt()
	 * @method \int[] getChildrenCntList()
	 * @method \int[] fillChildrenCnt()
	 * @method \boolean[] getIsParentList()
	 * @method \boolean[] fillIsParent()
	 * @method \int[] getCountryIdList()
	 * @method \int[] fillCountryId()
	 * @method \int[] getRegionIdList()
	 * @method \int[] fillRegionId()
	 * @method \int[] getCityIdList()
	 * @method \int[] fillCityId()
	 * @method \string[] getLocDefaultList()
	 * @method \string[] fillLocDefault()
	 * @method \Bitrix\Sale\Location\EO_Location[] getChildList()
	 * @method \Bitrix\Sale\Location\EO_Location_Collection getChildCollection()
	 * @method \Bitrix\Sale\Location\EO_Location_Collection fillChild()
	 * @method \int[] getChildCntList()
	 * @method \int[] fillChildCnt()
	 * @method \Bitrix\Sale\Location\EO_DefaultSite[] getDefaultSortList()
	 * @method \Bitrix\Sale\Location\EO_Location_Collection getDefaultSortCollection()
	 * @method \Bitrix\Sale\Location\EO_DefaultSite_Collection fillDefaultSort()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Sale\Location\EO_Location $object)
	 * @method bool has(\Bitrix\Sale\Location\EO_Location $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Sale\Location\EO_Location getByPrimary($primary)
	 * @method \Bitrix\Sale\Location\EO_Location[] getAll()
	 * @method bool remove(\Bitrix\Sale\Location\EO_Location $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Sale\Location\EO_Location_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Sale\Location\EO_Location current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 * @method EO_Location_Collection merge(?EO_Location_Collection $collection)
	 * @method bool isEmpty()
	 */
	class EO_Location_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Sale\Location\LocationTable */
		static public $dataClass = '\Bitrix\Sale\Location\LocationTable';
	}
}
namespace Bitrix\Sale\Location {
	/**
	 * Common methods:
	 * ---------------
	 *
	 * @method EO_Location_Result exec()
	 * @method \Bitrix\Sale\Location\EO_Location fetchObject()
	 * @method \Bitrix\Sale\Location\EO_Location_Collection fetchCollection()
	 *
	 * Custom methods:
	 * ---------------
	 *
	 */
	class EO_Location_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Sale\Location\EO_Location fetchObject()
	 * @method \Bitrix\Sale\Location\EO_Location_Collection fetchCollection()
	 */
	class EO_Location_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Sale\Location\EO_Location createObject($setDefaultValues = true)
	 * @method \Bitrix\Sale\Location\EO_Location_Collection createCollection()
	 * @method \Bitrix\Sale\Location\EO_Location wakeUpObject($row)
	 * @method \Bitrix\Sale\Location\EO_Location_Collection wakeUpCollection($rows)
	 */
	class EO_Location_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Sale\Location\Name\GroupTable:sale\lib\location\name\group.php */
namespace Bitrix\Sale\Location\Name {
	/**
	 * EO_Group
	 * @see \Bitrix\Sale\Location\Name\GroupTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getId()
	 * @method \Bitrix\Sale\Location\Name\EO_Group setId(\int|\Bitrix\Main\DB\SqlExpression $id)
	 * @method bool hasId()
	 * @method bool isIdFilled()
	 * @method bool isIdChanged()
	 * @method \string getName()
	 * @method \Bitrix\Sale\Location\Name\EO_Group setName(\string|\Bitrix\Main\DB\SqlExpression $name)
	 * @method bool hasName()
	 * @method bool isNameFilled()
	 * @method bool isNameChanged()
	 * @method \string remindActualName()
	 * @method \string requireName()
	 * @method \Bitrix\Sale\Location\Name\EO_Group resetName()
	 * @method \Bitrix\Sale\Location\Name\EO_Group unsetName()
	 * @method \string fillName()
	 * @method \string getLid()
	 * @method \Bitrix\Sale\Location\Name\EO_Group setLid(\string|\Bitrix\Main\DB\SqlExpression $lid)
	 * @method bool hasLid()
	 * @method bool isLidFilled()
	 * @method bool isLidChanged()
	 * @method \string remindActualLid()
	 * @method \string requireLid()
	 * @method \Bitrix\Sale\Location\Name\EO_Group resetLid()
	 * @method \Bitrix\Sale\Location\Name\EO_Group unsetLid()
	 * @method \string fillLid()
	 * @method \string getLanguageId()
	 * @method \string remindActualLanguageId()
	 * @method \string requireLanguageId()
	 * @method bool hasLanguageId()
	 * @method bool isLanguageIdFilled()
	 * @method \Bitrix\Sale\Location\Name\EO_Group unsetLanguageId()
	 * @method \string fillLanguageId()
	 * @method \int getLocationGroupId()
	 * @method \Bitrix\Sale\Location\Name\EO_Group setLocationGroupId(\int|\Bitrix\Main\DB\SqlExpression $locationGroupId)
	 * @method bool hasLocationGroupId()
	 * @method bool isLocationGroupIdFilled()
	 * @method bool isLocationGroupIdChanged()
	 * @method \int remindActualLocationGroupId()
	 * @method \int requireLocationGroupId()
	 * @method \Bitrix\Sale\Location\Name\EO_Group resetLocationGroupId()
	 * @method \Bitrix\Sale\Location\Name\EO_Group unsetLocationGroupId()
	 * @method \int fillLocationGroupId()
	 * @method \int getGroupId()
	 * @method \int remindActualGroupId()
	 * @method \int requireGroupId()
	 * @method bool hasGroupId()
	 * @method bool isGroupIdFilled()
	 * @method \Bitrix\Sale\Location\Name\EO_Group unsetGroupId()
	 * @method \int fillGroupId()
	 * @method \Bitrix\Sale\Location\EO_Group getGroup()
	 * @method \Bitrix\Sale\Location\EO_Group remindActualGroup()
	 * @method \Bitrix\Sale\Location\EO_Group requireGroup()
	 * @method \Bitrix\Sale\Location\Name\EO_Group setGroup(\Bitrix\Sale\Location\EO_Group $object)
	 * @method \Bitrix\Sale\Location\Name\EO_Group resetGroup()
	 * @method \Bitrix\Sale\Location\Name\EO_Group unsetGroup()
	 * @method bool hasGroup()
	 * @method bool isGroupFilled()
	 * @method bool isGroupChanged()
	 * @method \Bitrix\Sale\Location\EO_Group fillGroup()
	 * @method \int getCnt()
	 * @method \int remindActualCnt()
	 * @method \int requireCnt()
	 * @method bool hasCnt()
	 * @method bool isCntFilled()
	 * @method \Bitrix\Sale\Location\Name\EO_Group unsetCnt()
	 * @method \int fillCnt()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Sale\Location\Name\EO_Group set($fieldName, $value)
	 * @method \Bitrix\Sale\Location\Name\EO_Group reset($fieldName)
	 * @method \Bitrix\Sale\Location\Name\EO_Group unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Sale\Location\Name\EO_Group wakeUp($data)
	 */
	class EO_Group {
		/* @var \Bitrix\Sale\Location\Name\GroupTable */
		static public $dataClass = '\Bitrix\Sale\Location\Name\GroupTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Sale\Location\Name {
	/**
	 * EO_Group_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getIdList()
	 * @method \string[] getNameList()
	 * @method \string[] fillName()
	 * @method \string[] getLidList()
	 * @method \string[] fillLid()
	 * @method \string[] getLanguageIdList()
	 * @method \string[] fillLanguageId()
	 * @method \int[] getLocationGroupIdList()
	 * @method \int[] fillLocationGroupId()
	 * @method \int[] getGroupIdList()
	 * @method \int[] fillGroupId()
	 * @method \Bitrix\Sale\Location\EO_Group[] getGroupList()
	 * @method \Bitrix\Sale\Location\Name\EO_Group_Collection getGroupCollection()
	 * @method \Bitrix\Sale\Location\EO_Group_Collection fillGroup()
	 * @method \int[] getCntList()
	 * @method \int[] fillCnt()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Sale\Location\Name\EO_Group $object)
	 * @method bool has(\Bitrix\Sale\Location\Name\EO_Group $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Sale\Location\Name\EO_Group getByPrimary($primary)
	 * @method \Bitrix\Sale\Location\Name\EO_Group[] getAll()
	 * @method bool remove(\Bitrix\Sale\Location\Name\EO_Group $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Sale\Location\Name\EO_Group_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Sale\Location\Name\EO_Group current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 * @method EO_Group_Collection merge(?EO_Group_Collection $collection)
	 * @method bool isEmpty()
	 */
	class EO_Group_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Sale\Location\Name\GroupTable */
		static public $dataClass = '\Bitrix\Sale\Location\Name\GroupTable';
	}
}
namespace Bitrix\Sale\Location\Name {
	/**
	 * Common methods:
	 * ---------------
	 *
	 * @method EO_Group_Result exec()
	 * @method \Bitrix\Sale\Location\Name\EO_Group fetchObject()
	 * @method \Bitrix\Sale\Location\Name\EO_Group_Collection fetchCollection()
	 *
	 * Custom methods:
	 * ---------------
	 *
	 */
	class EO_Group_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Sale\Location\Name\EO_Group fetchObject()
	 * @method \Bitrix\Sale\Location\Name\EO_Group_Collection fetchCollection()
	 */
	class EO_Group_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Sale\Location\Name\EO_Group createObject($setDefaultValues = true)
	 * @method \Bitrix\Sale\Location\Name\EO_Group_Collection createCollection()
	 * @method \Bitrix\Sale\Location\Name\EO_Group wakeUpObject($row)
	 * @method \Bitrix\Sale\Location\Name\EO_Group_Collection wakeUpCollection($rows)
	 */
	class EO_Group_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Sale\Location\Name\LocationTable:sale\lib\location\name\location.php */
namespace Bitrix\Sale\Location\Name {
	/**
	 * EO_Location
	 * @see \Bitrix\Sale\Location\Name\LocationTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getId()
	 * @method \Bitrix\Sale\Location\Name\EO_Location setId(\int|\Bitrix\Main\DB\SqlExpression $id)
	 * @method bool hasId()
	 * @method bool isIdFilled()
	 * @method bool isIdChanged()
	 * @method \string getName()
	 * @method \Bitrix\Sale\Location\Name\EO_Location setName(\string|\Bitrix\Main\DB\SqlExpression $name)
	 * @method bool hasName()
	 * @method bool isNameFilled()
	 * @method bool isNameChanged()
	 * @method \string remindActualName()
	 * @method \string requireName()
	 * @method \Bitrix\Sale\Location\Name\EO_Location resetName()
	 * @method \Bitrix\Sale\Location\Name\EO_Location unsetName()
	 * @method \string fillName()
	 * @method \string getNameUpper()
	 * @method \Bitrix\Sale\Location\Name\EO_Location setNameUpper(\string|\Bitrix\Main\DB\SqlExpression $nameUpper)
	 * @method bool hasNameUpper()
	 * @method bool isNameUpperFilled()
	 * @method bool isNameUpperChanged()
	 * @method \string remindActualNameUpper()
	 * @method \string requireNameUpper()
	 * @method \Bitrix\Sale\Location\Name\EO_Location resetNameUpper()
	 * @method \Bitrix\Sale\Location\Name\EO_Location unsetNameUpper()
	 * @method \string fillNameUpper()
	 * @method \string getShortName()
	 * @method \Bitrix\Sale\Location\Name\EO_Location setShortName(\string|\Bitrix\Main\DB\SqlExpression $shortName)
	 * @method bool hasShortName()
	 * @method bool isShortNameFilled()
	 * @method bool isShortNameChanged()
	 * @method \string remindActualShortName()
	 * @method \string requireShortName()
	 * @method \Bitrix\Sale\Location\Name\EO_Location resetShortName()
	 * @method \Bitrix\Sale\Location\Name\EO_Location unsetShortName()
	 * @method \string fillShortName()
	 * @method \string getNameNorm()
	 * @method \Bitrix\Sale\Location\Name\EO_Location setNameNorm(\string|\Bitrix\Main\DB\SqlExpression $nameNorm)
	 * @method bool hasNameNorm()
	 * @method bool isNameNormFilled()
	 * @method bool isNameNormChanged()
	 * @method \string remindActualNameNorm()
	 * @method \string requireNameNorm()
	 * @method \Bitrix\Sale\Location\Name\EO_Location resetNameNorm()
	 * @method \Bitrix\Sale\Location\Name\EO_Location unsetNameNorm()
	 * @method \string fillNameNorm()
	 * @method \string getLanguageId()
	 * @method \Bitrix\Sale\Location\Name\EO_Location setLanguageId(\string|\Bitrix\Main\DB\SqlExpression $languageId)
	 * @method bool hasLanguageId()
	 * @method bool isLanguageIdFilled()
	 * @method bool isLanguageIdChanged()
	 * @method \string remindActualLanguageId()
	 * @method \string requireLanguageId()
	 * @method \Bitrix\Sale\Location\Name\EO_Location resetLanguageId()
	 * @method \Bitrix\Sale\Location\Name\EO_Location unsetLanguageId()
	 * @method \string fillLanguageId()
	 * @method \int getLocationId()
	 * @method \Bitrix\Sale\Location\Name\EO_Location setLocationId(\int|\Bitrix\Main\DB\SqlExpression $locationId)
	 * @method bool hasLocationId()
	 * @method bool isLocationIdFilled()
	 * @method bool isLocationIdChanged()
	 * @method \int remindActualLocationId()
	 * @method \int requireLocationId()
	 * @method \Bitrix\Sale\Location\Name\EO_Location resetLocationId()
	 * @method \Bitrix\Sale\Location\Name\EO_Location unsetLocationId()
	 * @method \int fillLocationId()
	 * @method \Bitrix\Sale\Location\EO_Location getLocation()
	 * @method \Bitrix\Sale\Location\EO_Location remindActualLocation()
	 * @method \Bitrix\Sale\Location\EO_Location requireLocation()
	 * @method \Bitrix\Sale\Location\Name\EO_Location setLocation(\Bitrix\Sale\Location\EO_Location $object)
	 * @method \Bitrix\Sale\Location\Name\EO_Location resetLocation()
	 * @method \Bitrix\Sale\Location\Name\EO_Location unsetLocation()
	 * @method bool hasLocation()
	 * @method bool isLocationFilled()
	 * @method bool isLocationChanged()
	 * @method \Bitrix\Sale\Location\EO_Location fillLocation()
	 * @method \int getCnt()
	 * @method \int remindActualCnt()
	 * @method \int requireCnt()
	 * @method bool hasCnt()
	 * @method bool isCntFilled()
	 * @method \Bitrix\Sale\Location\Name\EO_Location unsetCnt()
	 * @method \int fillCnt()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Sale\Location\Name\EO_Location set($fieldName, $value)
	 * @method \Bitrix\Sale\Location\Name\EO_Location reset($fieldName)
	 * @method \Bitrix\Sale\Location\Name\EO_Location unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Sale\Location\Name\EO_Location wakeUp($data)
	 */
	class EO_Location {
		/* @var \Bitrix\Sale\Location\Name\LocationTable */
		static public $dataClass = '\Bitrix\Sale\Location\Name\LocationTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Sale\Location\Name {
	/**
	 * EO_Location_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getIdList()
	 * @method \string[] getNameList()
	 * @method \string[] fillName()
	 * @method \string[] getNameUpperList()
	 * @method \string[] fillNameUpper()
	 * @method \string[] getShortNameList()
	 * @method \string[] fillShortName()
	 * @method \string[] getNameNormList()
	 * @method \string[] fillNameNorm()
	 * @method \string[] getLanguageIdList()
	 * @method \string[] fillLanguageId()
	 * @method \int[] getLocationIdList()
	 * @method \int[] fillLocationId()
	 * @method \Bitrix\Sale\Location\EO_Location[] getLocationList()
	 * @method \Bitrix\Sale\Location\Name\EO_Location_Collection getLocationCollection()
	 * @method \Bitrix\Sale\Location\EO_Location_Collection fillLocation()
	 * @method \int[] getCntList()
	 * @method \int[] fillCnt()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Sale\Location\Name\EO_Location $object)
	 * @method bool has(\Bitrix\Sale\Location\Name\EO_Location $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Sale\Location\Name\EO_Location getByPrimary($primary)
	 * @method \Bitrix\Sale\Location\Name\EO_Location[] getAll()
	 * @method bool remove(\Bitrix\Sale\Location\Name\EO_Location $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Sale\Location\Name\EO_Location_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Sale\Location\Name\EO_Location current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 * @method EO_Location_Collection merge(?EO_Location_Collection $collection)
	 * @method bool isEmpty()
	 */
	class EO_Location_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Sale\Location\Name\LocationTable */
		static public $dataClass = '\Bitrix\Sale\Location\Name\LocationTable';
	}
}
namespace Bitrix\Sale\Location\Name {
	/**
	 * Common methods:
	 * ---------------
	 *
	 * @method EO_Location_Result exec()
	 * @method \Bitrix\Sale\Location\Name\EO_Location fetchObject()
	 * @method \Bitrix\Sale\Location\Name\EO_Location_Collection fetchCollection()
	 *
	 * Custom methods:
	 * ---------------
	 *
	 */
	class EO_Location_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Sale\Location\Name\EO_Location fetchObject()
	 * @method \Bitrix\Sale\Location\Name\EO_Location_Collection fetchCollection()
	 */
	class EO_Location_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Sale\Location\Name\EO_Location createObject($setDefaultValues = true)
	 * @method \Bitrix\Sale\Location\Name\EO_Location_Collection createCollection()
	 * @method \Bitrix\Sale\Location\Name\EO_Location wakeUpObject($row)
	 * @method \Bitrix\Sale\Location\Name\EO_Location_Collection wakeUpCollection($rows)
	 */
	class EO_Location_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Sale\Location\Name\TypeTable:sale\lib\location\name\type.php */
namespace Bitrix\Sale\Location\Name {
	/**
	 * EO_Type
	 * @see \Bitrix\Sale\Location\Name\TypeTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getId()
	 * @method \Bitrix\Sale\Location\Name\EO_Type setId(\int|\Bitrix\Main\DB\SqlExpression $id)
	 * @method bool hasId()
	 * @method bool isIdFilled()
	 * @method bool isIdChanged()
	 * @method \string getName()
	 * @method \Bitrix\Sale\Location\Name\EO_Type setName(\string|\Bitrix\Main\DB\SqlExpression $name)
	 * @method bool hasName()
	 * @method bool isNameFilled()
	 * @method bool isNameChanged()
	 * @method \string remindActualName()
	 * @method \string requireName()
	 * @method \Bitrix\Sale\Location\Name\EO_Type resetName()
	 * @method \Bitrix\Sale\Location\Name\EO_Type unsetName()
	 * @method \string fillName()
	 * @method \string getLanguageId()
	 * @method \Bitrix\Sale\Location\Name\EO_Type setLanguageId(\string|\Bitrix\Main\DB\SqlExpression $languageId)
	 * @method bool hasLanguageId()
	 * @method bool isLanguageIdFilled()
	 * @method bool isLanguageIdChanged()
	 * @method \string remindActualLanguageId()
	 * @method \string requireLanguageId()
	 * @method \Bitrix\Sale\Location\Name\EO_Type resetLanguageId()
	 * @method \Bitrix\Sale\Location\Name\EO_Type unsetLanguageId()
	 * @method \string fillLanguageId()
	 * @method \int getTypeId()
	 * @method \Bitrix\Sale\Location\Name\EO_Type setTypeId(\int|\Bitrix\Main\DB\SqlExpression $typeId)
	 * @method bool hasTypeId()
	 * @method bool isTypeIdFilled()
	 * @method bool isTypeIdChanged()
	 * @method \int remindActualTypeId()
	 * @method \int requireTypeId()
	 * @method \Bitrix\Sale\Location\Name\EO_Type resetTypeId()
	 * @method \Bitrix\Sale\Location\Name\EO_Type unsetTypeId()
	 * @method \int fillTypeId()
	 * @method \Bitrix\Sale\Location\EO_Type getType()
	 * @method \Bitrix\Sale\Location\EO_Type remindActualType()
	 * @method \Bitrix\Sale\Location\EO_Type requireType()
	 * @method \Bitrix\Sale\Location\Name\EO_Type setType(\Bitrix\Sale\Location\EO_Type $object)
	 * @method \Bitrix\Sale\Location\Name\EO_Type resetType()
	 * @method \Bitrix\Sale\Location\Name\EO_Type unsetType()
	 * @method bool hasType()
	 * @method bool isTypeFilled()
	 * @method bool isTypeChanged()
	 * @method \Bitrix\Sale\Location\EO_Type fillType()
	 * @method \int getCnt()
	 * @method \int remindActualCnt()
	 * @method \int requireCnt()
	 * @method bool hasCnt()
	 * @method bool isCntFilled()
	 * @method \Bitrix\Sale\Location\Name\EO_Type unsetCnt()
	 * @method \int fillCnt()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Sale\Location\Name\EO_Type set($fieldName, $value)
	 * @method \Bitrix\Sale\Location\Name\EO_Type reset($fieldName)
	 * @method \Bitrix\Sale\Location\Name\EO_Type unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Sale\Location\Name\EO_Type wakeUp($data)
	 */
	class EO_Type {
		/* @var \Bitrix\Sale\Location\Name\TypeTable */
		static public $dataClass = '\Bitrix\Sale\Location\Name\TypeTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Sale\Location\Name {
	/**
	 * EO_Type_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getIdList()
	 * @method \string[] getNameList()
	 * @method \string[] fillName()
	 * @method \string[] getLanguageIdList()
	 * @method \string[] fillLanguageId()
	 * @method \int[] getTypeIdList()
	 * @method \int[] fillTypeId()
	 * @method \Bitrix\Sale\Location\EO_Type[] getTypeList()
	 * @method \Bitrix\Sale\Location\Name\EO_Type_Collection getTypeCollection()
	 * @method \Bitrix\Sale\Location\EO_Type_Collection fillType()
	 * @method \int[] getCntList()
	 * @method \int[] fillCnt()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Sale\Location\Name\EO_Type $object)
	 * @method bool has(\Bitrix\Sale\Location\Name\EO_Type $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Sale\Location\Name\EO_Type getByPrimary($primary)
	 * @method \Bitrix\Sale\Location\Name\EO_Type[] getAll()
	 * @method bool remove(\Bitrix\Sale\Location\Name\EO_Type $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Sale\Location\Name\EO_Type_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Sale\Location\Name\EO_Type current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 * @method EO_Type_Collection merge(?EO_Type_Collection $collection)
	 * @method bool isEmpty()
	 */
	class EO_Type_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Sale\Location\Name\TypeTable */
		static public $dataClass = '\Bitrix\Sale\Location\Name\TypeTable';
	}
}
namespace Bitrix\Sale\Location\Name {
	/**
	 * Common methods:
	 * ---------------
	 *
	 * @method EO_Type_Result exec()
	 * @method \Bitrix\Sale\Location\Name\EO_Type fetchObject()
	 * @method \Bitrix\Sale\Location\Name\EO_Type_Collection fetchCollection()
	 *
	 * Custom methods:
	 * ---------------
	 *
	 */
	class EO_Type_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Sale\Location\Name\EO_Type fetchObject()
	 * @method \Bitrix\Sale\Location\Name\EO_Type_Collection fetchCollection()
	 */
	class EO_Type_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Sale\Location\Name\EO_Type createObject($setDefaultValues = true)
	 * @method \Bitrix\Sale\Location\Name\EO_Type_Collection createCollection()
	 * @method \Bitrix\Sale\Location\Name\EO_Type wakeUpObject($row)
	 * @method \Bitrix\Sale\Location\Name\EO_Type_Collection wakeUpCollection($rows)
	 */
	class EO_Type_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Sale\Location\Search\ChainTable:sale\lib\location\search\chain.php */
namespace Bitrix\Sale\Location\Search {
	/**
	 * EO_Chain
	 * @see \Bitrix\Sale\Location\Search\ChainTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getLocationId()
	 * @method \Bitrix\Sale\Location\Search\EO_Chain setLocationId(\int|\Bitrix\Main\DB\SqlExpression $locationId)
	 * @method bool hasLocationId()
	 * @method bool isLocationIdFilled()
	 * @method bool isLocationIdChanged()
	 * @method \int getPosition()
	 * @method \Bitrix\Sale\Location\Search\EO_Chain setPosition(\int|\Bitrix\Main\DB\SqlExpression $position)
	 * @method bool hasPosition()
	 * @method bool isPositionFilled()
	 * @method bool isPositionChanged()
	 * @method \int getRelevancy()
	 * @method \Bitrix\Sale\Location\Search\EO_Chain setRelevancy(\int|\Bitrix\Main\DB\SqlExpression $relevancy)
	 * @method bool hasRelevancy()
	 * @method bool isRelevancyFilled()
	 * @method bool isRelevancyChanged()
	 * @method \int remindActualRelevancy()
	 * @method \int requireRelevancy()
	 * @method \Bitrix\Sale\Location\Search\EO_Chain resetRelevancy()
	 * @method \Bitrix\Sale\Location\Search\EO_Chain unsetRelevancy()
	 * @method \int fillRelevancy()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Sale\Location\Search\EO_Chain set($fieldName, $value)
	 * @method \Bitrix\Sale\Location\Search\EO_Chain reset($fieldName)
	 * @method \Bitrix\Sale\Location\Search\EO_Chain unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Sale\Location\Search\EO_Chain wakeUp($data)
	 */
	class EO_Chain {
		/* @var \Bitrix\Sale\Location\Search\ChainTable */
		static public $dataClass = '\Bitrix\Sale\Location\Search\ChainTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Sale\Location\Search {
	/**
	 * EO_Chain_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getLocationIdList()
	 * @method \int[] getPositionList()
	 * @method \int[] getRelevancyList()
	 * @method \int[] fillRelevancy()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Sale\Location\Search\EO_Chain $object)
	 * @method bool has(\Bitrix\Sale\Location\Search\EO_Chain $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Sale\Location\Search\EO_Chain getByPrimary($primary)
	 * @method \Bitrix\Sale\Location\Search\EO_Chain[] getAll()
	 * @method bool remove(\Bitrix\Sale\Location\Search\EO_Chain $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Sale\Location\Search\EO_Chain_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Sale\Location\Search\EO_Chain current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 * @method EO_Chain_Collection merge(?EO_Chain_Collection $collection)
	 * @method bool isEmpty()
	 */
	class EO_Chain_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Sale\Location\Search\ChainTable */
		static public $dataClass = '\Bitrix\Sale\Location\Search\ChainTable';
	}
}
namespace Bitrix\Sale\Location\Search {
	/**
	 * Common methods:
	 * ---------------
	 *
	 * @method EO_Chain_Result exec()
	 * @method \Bitrix\Sale\Location\Search\EO_Chain fetchObject()
	 * @method \Bitrix\Sale\Location\Search\EO_Chain_Collection fetchCollection()
	 *
	 * Custom methods:
	 * ---------------
	 *
	 */
	class EO_Chain_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Sale\Location\Search\EO_Chain fetchObject()
	 * @method \Bitrix\Sale\Location\Search\EO_Chain_Collection fetchCollection()
	 */
	class EO_Chain_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Sale\Location\Search\EO_Chain createObject($setDefaultValues = true)
	 * @method \Bitrix\Sale\Location\Search\EO_Chain_Collection createCollection()
	 * @method \Bitrix\Sale\Location\Search\EO_Chain wakeUpObject($row)
	 * @method \Bitrix\Sale\Location\Search\EO_Chain_Collection wakeUpCollection($rows)
	 */
	class EO_Chain_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Sale\Location\Search\SiteLinkTable:sale\lib\location\search\sitelink.php */
namespace Bitrix\Sale\Location\Search {
	/**
	 * EO_SiteLink
	 * @see \Bitrix\Sale\Location\Search\SiteLinkTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getLocationId()
	 * @method \Bitrix\Sale\Location\Search\EO_SiteLink setLocationId(\int|\Bitrix\Main\DB\SqlExpression $locationId)
	 * @method bool hasLocationId()
	 * @method bool isLocationIdFilled()
	 * @method bool isLocationIdChanged()
	 * @method \int getSiteId()
	 * @method \Bitrix\Sale\Location\Search\EO_SiteLink setSiteId(\int|\Bitrix\Main\DB\SqlExpression $siteId)
	 * @method bool hasSiteId()
	 * @method bool isSiteIdFilled()
	 * @method bool isSiteIdChanged()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Sale\Location\Search\EO_SiteLink set($fieldName, $value)
	 * @method \Bitrix\Sale\Location\Search\EO_SiteLink reset($fieldName)
	 * @method \Bitrix\Sale\Location\Search\EO_SiteLink unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Sale\Location\Search\EO_SiteLink wakeUp($data)
	 */
	class EO_SiteLink {
		/* @var \Bitrix\Sale\Location\Search\SiteLinkTable */
		static public $dataClass = '\Bitrix\Sale\Location\Search\SiteLinkTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Sale\Location\Search {
	/**
	 * EO_SiteLink_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getLocationIdList()
	 * @method \int[] getSiteIdList()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Sale\Location\Search\EO_SiteLink $object)
	 * @method bool has(\Bitrix\Sale\Location\Search\EO_SiteLink $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Sale\Location\Search\EO_SiteLink getByPrimary($primary)
	 * @method \Bitrix\Sale\Location\Search\EO_SiteLink[] getAll()
	 * @method bool remove(\Bitrix\Sale\Location\Search\EO_SiteLink $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Sale\Location\Search\EO_SiteLink_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Sale\Location\Search\EO_SiteLink current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 * @method EO_SiteLink_Collection merge(?EO_SiteLink_Collection $collection)
	 * @method bool isEmpty()
	 */
	class EO_SiteLink_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Sale\Location\Search\SiteLinkTable */
		static public $dataClass = '\Bitrix\Sale\Location\Search\SiteLinkTable';
	}
}
namespace Bitrix\Sale\Location\Search {
	/**
	 * Common methods:
	 * ---------------
	 *
	 * @method EO_SiteLink_Result exec()
	 * @method \Bitrix\Sale\Location\Search\EO_SiteLink fetchObject()
	 * @method \Bitrix\Sale\Location\Search\EO_SiteLink_Collection fetchCollection()
	 *
	 * Custom methods:
	 * ---------------
	 *
	 */
	class EO_SiteLink_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Sale\Location\Search\EO_SiteLink fetchObject()
	 * @method \Bitrix\Sale\Location\Search\EO_SiteLink_Collection fetchCollection()
	 */
	class EO_SiteLink_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Sale\Location\Search\EO_SiteLink createObject($setDefaultValues = true)
	 * @method \Bitrix\Sale\Location\Search\EO_SiteLink_Collection createCollection()
	 * @method \Bitrix\Sale\Location\Search\EO_SiteLink wakeUpObject($row)
	 * @method \Bitrix\Sale\Location\Search\EO_SiteLink_Collection wakeUpCollection($rows)
	 */
	class EO_SiteLink_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Sale\Location\Search\WordTable:sale\lib\location\search\word.php */
namespace Bitrix\Sale\Location\Search {
	/**
	 * EO_Word
	 * @see \Bitrix\Sale\Location\Search\WordTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getId()
	 * @method \Bitrix\Sale\Location\Search\EO_Word setId(\int|\Bitrix\Main\DB\SqlExpression $id)
	 * @method bool hasId()
	 * @method bool isIdFilled()
	 * @method bool isIdChanged()
	 * @method \string getWord()
	 * @method \Bitrix\Sale\Location\Search\EO_Word setWord(\string|\Bitrix\Main\DB\SqlExpression $word)
	 * @method bool hasWord()
	 * @method bool isWordFilled()
	 * @method bool isWordChanged()
	 * @method \string remindActualWord()
	 * @method \string requireWord()
	 * @method \Bitrix\Sale\Location\Search\EO_Word resetWord()
	 * @method \Bitrix\Sale\Location\Search\EO_Word unsetWord()
	 * @method \string fillWord()
	 * @method \int getPosition()
	 * @method \Bitrix\Sale\Location\Search\EO_Word setPosition(\int|\Bitrix\Main\DB\SqlExpression $position)
	 * @method bool hasPosition()
	 * @method bool isPositionFilled()
	 * @method bool isPositionChanged()
	 * @method \int remindActualPosition()
	 * @method \int requirePosition()
	 * @method \Bitrix\Sale\Location\Search\EO_Word resetPosition()
	 * @method \Bitrix\Sale\Location\Search\EO_Word unsetPosition()
	 * @method \int fillPosition()
	 * @method \int getCnt()
	 * @method \int remindActualCnt()
	 * @method \int requireCnt()
	 * @method bool hasCnt()
	 * @method bool isCntFilled()
	 * @method \Bitrix\Sale\Location\Search\EO_Word unsetCnt()
	 * @method \int fillCnt()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Sale\Location\Search\EO_Word set($fieldName, $value)
	 * @method \Bitrix\Sale\Location\Search\EO_Word reset($fieldName)
	 * @method \Bitrix\Sale\Location\Search\EO_Word unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Sale\Location\Search\EO_Word wakeUp($data)
	 */
	class EO_Word {
		/* @var \Bitrix\Sale\Location\Search\WordTable */
		static public $dataClass = '\Bitrix\Sale\Location\Search\WordTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Sale\Location\Search {
	/**
	 * EO_Word_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getIdList()
	 * @method \string[] getWordList()
	 * @method \string[] fillWord()
	 * @method \int[] getPositionList()
	 * @method \int[] fillPosition()
	 * @method \int[] getCntList()
	 * @method \int[] fillCnt()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Sale\Location\Search\EO_Word $object)
	 * @method bool has(\Bitrix\Sale\Location\Search\EO_Word $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Sale\Location\Search\EO_Word getByPrimary($primary)
	 * @method \Bitrix\Sale\Location\Search\EO_Word[] getAll()
	 * @method bool remove(\Bitrix\Sale\Location\Search\EO_Word $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Sale\Location\Search\EO_Word_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Sale\Location\Search\EO_Word current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 * @method EO_Word_Collection merge(?EO_Word_Collection $collection)
	 * @method bool isEmpty()
	 */
	class EO_Word_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Sale\Location\Search\WordTable */
		static public $dataClass = '\Bitrix\Sale\Location\Search\WordTable';
	}
}
namespace Bitrix\Sale\Location\Search {
	/**
	 * Common methods:
	 * ---------------
	 *
	 * @method EO_Word_Result exec()
	 * @method \Bitrix\Sale\Location\Search\EO_Word fetchObject()
	 * @method \Bitrix\Sale\Location\Search\EO_Word_Collection fetchCollection()
	 *
	 * Custom methods:
	 * ---------------
	 *
	 */
	class EO_Word_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Sale\Location\Search\EO_Word fetchObject()
	 * @method \Bitrix\Sale\Location\Search\EO_Word_Collection fetchCollection()
	 */
	class EO_Word_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Sale\Location\Search\EO_Word createObject($setDefaultValues = true)
	 * @method \Bitrix\Sale\Location\Search\EO_Word_Collection createCollection()
	 * @method \Bitrix\Sale\Location\Search\EO_Word wakeUpObject($row)
	 * @method \Bitrix\Sale\Location\Search\EO_Word_Collection wakeUpCollection($rows)
	 */
	class EO_Word_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Sale\Location\SiteLocationTable:sale\lib\location\sitelocation.php */
namespace Bitrix\Sale\Location {
	/**
	 * EO_SiteLocation
	 * @see \Bitrix\Sale\Location\SiteLocationTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \string getSiteId()
	 * @method \Bitrix\Sale\Location\EO_SiteLocation setSiteId(\string|\Bitrix\Main\DB\SqlExpression $siteId)
	 * @method bool hasSiteId()
	 * @method bool isSiteIdFilled()
	 * @method bool isSiteIdChanged()
	 * @method \int getLocationId()
	 * @method \Bitrix\Sale\Location\EO_SiteLocation setLocationId(\int|\Bitrix\Main\DB\SqlExpression $locationId)
	 * @method bool hasLocationId()
	 * @method bool isLocationIdFilled()
	 * @method bool isLocationIdChanged()
	 * @method \string getLocationType()
	 * @method \Bitrix\Sale\Location\EO_SiteLocation setLocationType(\string|\Bitrix\Main\DB\SqlExpression $locationType)
	 * @method bool hasLocationType()
	 * @method bool isLocationTypeFilled()
	 * @method bool isLocationTypeChanged()
	 * @method \Bitrix\Sale\Location\EO_Location getLocation()
	 * @method \Bitrix\Sale\Location\EO_Location remindActualLocation()
	 * @method \Bitrix\Sale\Location\EO_Location requireLocation()
	 * @method \Bitrix\Sale\Location\EO_SiteLocation setLocation(\Bitrix\Sale\Location\EO_Location $object)
	 * @method \Bitrix\Sale\Location\EO_SiteLocation resetLocation()
	 * @method \Bitrix\Sale\Location\EO_SiteLocation unsetLocation()
	 * @method bool hasLocation()
	 * @method bool isLocationFilled()
	 * @method bool isLocationChanged()
	 * @method \Bitrix\Sale\Location\EO_Location fillLocation()
	 * @method \Bitrix\Sale\Location\EO_Group getGroup()
	 * @method \Bitrix\Sale\Location\EO_Group remindActualGroup()
	 * @method \Bitrix\Sale\Location\EO_Group requireGroup()
	 * @method \Bitrix\Sale\Location\EO_SiteLocation setGroup(\Bitrix\Sale\Location\EO_Group $object)
	 * @method \Bitrix\Sale\Location\EO_SiteLocation resetGroup()
	 * @method \Bitrix\Sale\Location\EO_SiteLocation unsetGroup()
	 * @method bool hasGroup()
	 * @method bool isGroupFilled()
	 * @method bool isGroupChanged()
	 * @method \Bitrix\Sale\Location\EO_Group fillGroup()
	 * @method \Bitrix\Main\EO_Site getSite()
	 * @method \Bitrix\Main\EO_Site remindActualSite()
	 * @method \Bitrix\Main\EO_Site requireSite()
	 * @method \Bitrix\Sale\Location\EO_SiteLocation setSite(\Bitrix\Main\EO_Site $object)
	 * @method \Bitrix\Sale\Location\EO_SiteLocation resetSite()
	 * @method \Bitrix\Sale\Location\EO_SiteLocation unsetSite()
	 * @method bool hasSite()
	 * @method bool isSiteFilled()
	 * @method bool isSiteChanged()
	 * @method \Bitrix\Main\EO_Site fillSite()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Sale\Location\EO_SiteLocation set($fieldName, $value)
	 * @method \Bitrix\Sale\Location\EO_SiteLocation reset($fieldName)
	 * @method \Bitrix\Sale\Location\EO_SiteLocation unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Sale\Location\EO_SiteLocation wakeUp($data)
	 */
	class EO_SiteLocation {
		/* @var \Bitrix\Sale\Location\SiteLocationTable */
		static public $dataClass = '\Bitrix\Sale\Location\SiteLocationTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Sale\Location {
	/**
	 * EO_SiteLocation_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \string[] getSiteIdList()
	 * @method \int[] getLocationIdList()
	 * @method \string[] getLocationTypeList()
	 * @method \Bitrix\Sale\Location\EO_Location[] getLocationList()
	 * @method \Bitrix\Sale\Location\EO_SiteLocation_Collection getLocationCollection()
	 * @method \Bitrix\Sale\Location\EO_Location_Collection fillLocation()
	 * @method \Bitrix\Sale\Location\EO_Group[] getGroupList()
	 * @method \Bitrix\Sale\Location\EO_SiteLocation_Collection getGroupCollection()
	 * @method \Bitrix\Sale\Location\EO_Group_Collection fillGroup()
	 * @method \Bitrix\Main\EO_Site[] getSiteList()
	 * @method \Bitrix\Sale\Location\EO_SiteLocation_Collection getSiteCollection()
	 * @method \Bitrix\Main\EO_Site_Collection fillSite()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Sale\Location\EO_SiteLocation $object)
	 * @method bool has(\Bitrix\Sale\Location\EO_SiteLocation $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Sale\Location\EO_SiteLocation getByPrimary($primary)
	 * @method \Bitrix\Sale\Location\EO_SiteLocation[] getAll()
	 * @method bool remove(\Bitrix\Sale\Location\EO_SiteLocation $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Sale\Location\EO_SiteLocation_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Sale\Location\EO_SiteLocation current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 * @method EO_SiteLocation_Collection merge(?EO_SiteLocation_Collection $collection)
	 * @method bool isEmpty()
	 */
	class EO_SiteLocation_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Sale\Location\SiteLocationTable */
		static public $dataClass = '\Bitrix\Sale\Location\SiteLocationTable';
	}
}
namespace Bitrix\Sale\Location {
	/**
	 * Common methods:
	 * ---------------
	 *
	 * @method EO_SiteLocation_Result exec()
	 * @method \Bitrix\Sale\Location\EO_SiteLocation fetchObject()
	 * @method \Bitrix\Sale\Location\EO_SiteLocation_Collection fetchCollection()
	 *
	 * Custom methods:
	 * ---------------
	 *
	 */
	class EO_SiteLocation_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Sale\Location\EO_SiteLocation fetchObject()
	 * @method \Bitrix\Sale\Location\EO_SiteLocation_Collection fetchCollection()
	 */
	class EO_SiteLocation_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Sale\Location\EO_SiteLocation createObject($setDefaultValues = true)
	 * @method \Bitrix\Sale\Location\EO_SiteLocation_Collection createCollection()
	 * @method \Bitrix\Sale\Location\EO_SiteLocation wakeUpObject($row)
	 * @method \Bitrix\Sale\Location\EO_SiteLocation_Collection wakeUpCollection($rows)
	 */
	class EO_SiteLocation_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Sale\Location\TypeTable:sale\lib\location\type.php */
namespace Bitrix\Sale\Location {
	/**
	 * EO_Type
	 * @see \Bitrix\Sale\Location\TypeTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getId()
	 * @method \Bitrix\Sale\Location\EO_Type setId(\int|\Bitrix\Main\DB\SqlExpression $id)
	 * @method bool hasId()
	 * @method bool isIdFilled()
	 * @method bool isIdChanged()
	 * @method \string getCode()
	 * @method \Bitrix\Sale\Location\EO_Type setCode(\string|\Bitrix\Main\DB\SqlExpression $code)
	 * @method bool hasCode()
	 * @method bool isCodeFilled()
	 * @method bool isCodeChanged()
	 * @method \string remindActualCode()
	 * @method \string requireCode()
	 * @method \Bitrix\Sale\Location\EO_Type resetCode()
	 * @method \Bitrix\Sale\Location\EO_Type unsetCode()
	 * @method \string fillCode()
	 * @method \int getSort()
	 * @method \Bitrix\Sale\Location\EO_Type setSort(\int|\Bitrix\Main\DB\SqlExpression $sort)
	 * @method bool hasSort()
	 * @method bool isSortFilled()
	 * @method bool isSortChanged()
	 * @method \int remindActualSort()
	 * @method \int requireSort()
	 * @method \Bitrix\Sale\Location\EO_Type resetSort()
	 * @method \Bitrix\Sale\Location\EO_Type unsetSort()
	 * @method \int fillSort()
	 * @method \int getDisplaySort()
	 * @method \Bitrix\Sale\Location\EO_Type setDisplaySort(\int|\Bitrix\Main\DB\SqlExpression $displaySort)
	 * @method bool hasDisplaySort()
	 * @method bool isDisplaySortFilled()
	 * @method bool isDisplaySortChanged()
	 * @method \int remindActualDisplaySort()
	 * @method \int requireDisplaySort()
	 * @method \Bitrix\Sale\Location\EO_Type resetDisplaySort()
	 * @method \Bitrix\Sale\Location\EO_Type unsetDisplaySort()
	 * @method \int fillDisplaySort()
	 * @method \Bitrix\Sale\Location\Name\EO_Type getName()
	 * @method \Bitrix\Sale\Location\Name\EO_Type remindActualName()
	 * @method \Bitrix\Sale\Location\Name\EO_Type requireName()
	 * @method \Bitrix\Sale\Location\EO_Type setName(\Bitrix\Sale\Location\Name\EO_Type $object)
	 * @method \Bitrix\Sale\Location\EO_Type resetName()
	 * @method \Bitrix\Sale\Location\EO_Type unsetName()
	 * @method bool hasName()
	 * @method bool isNameFilled()
	 * @method bool isNameChanged()
	 * @method \Bitrix\Sale\Location\Name\EO_Type fillName()
	 * @method \Bitrix\Sale\Location\EO_Location getLocation()
	 * @method \Bitrix\Sale\Location\EO_Location remindActualLocation()
	 * @method \Bitrix\Sale\Location\EO_Location requireLocation()
	 * @method \Bitrix\Sale\Location\EO_Type setLocation(\Bitrix\Sale\Location\EO_Location $object)
	 * @method \Bitrix\Sale\Location\EO_Type resetLocation()
	 * @method \Bitrix\Sale\Location\EO_Type unsetLocation()
	 * @method bool hasLocation()
	 * @method bool isLocationFilled()
	 * @method bool isLocationChanged()
	 * @method \Bitrix\Sale\Location\EO_Location fillLocation()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Sale\Location\EO_Type set($fieldName, $value)
	 * @method \Bitrix\Sale\Location\EO_Type reset($fieldName)
	 * @method \Bitrix\Sale\Location\EO_Type unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Sale\Location\EO_Type wakeUp($data)
	 */
	class EO_Type {
		/* @var \Bitrix\Sale\Location\TypeTable */
		static public $dataClass = '\Bitrix\Sale\Location\TypeTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Sale\Location {
	/**
	 * EO_Type_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getIdList()
	 * @method \string[] getCodeList()
	 * @method \string[] fillCode()
	 * @method \int[] getSortList()
	 * @method \int[] fillSort()
	 * @method \int[] getDisplaySortList()
	 * @method \int[] fillDisplaySort()
	 * @method \Bitrix\Sale\Location\Name\EO_Type[] getNameList()
	 * @method \Bitrix\Sale\Location\EO_Type_Collection getNameCollection()
	 * @method \Bitrix\Sale\Location\Name\EO_Type_Collection fillName()
	 * @method \Bitrix\Sale\Location\EO_Location[] getLocationList()
	 * @method \Bitrix\Sale\Location\EO_Type_Collection getLocationCollection()
	 * @method \Bitrix\Sale\Location\EO_Location_Collection fillLocation()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Sale\Location\EO_Type $object)
	 * @method bool has(\Bitrix\Sale\Location\EO_Type $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Sale\Location\EO_Type getByPrimary($primary)
	 * @method \Bitrix\Sale\Location\EO_Type[] getAll()
	 * @method bool remove(\Bitrix\Sale\Location\EO_Type $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Sale\Location\EO_Type_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Sale\Location\EO_Type current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 * @method EO_Type_Collection merge(?EO_Type_Collection $collection)
	 * @method bool isEmpty()
	 */
	class EO_Type_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Sale\Location\TypeTable */
		static public $dataClass = '\Bitrix\Sale\Location\TypeTable';
	}
}
namespace Bitrix\Sale\Location {
	/**
	 * Common methods:
	 * ---------------
	 *
	 * @method EO_Type_Result exec()
	 * @method \Bitrix\Sale\Location\EO_Type fetchObject()
	 * @method \Bitrix\Sale\Location\EO_Type_Collection fetchCollection()
	 *
	 * Custom methods:
	 * ---------------
	 *
	 */
	class EO_Type_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Sale\Location\EO_Type fetchObject()
	 * @method \Bitrix\Sale\Location\EO_Type_Collection fetchCollection()
	 */
	class EO_Type_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Sale\Location\EO_Type createObject($setDefaultValues = true)
	 * @method \Bitrix\Sale\Location\EO_Type_Collection createCollection()
	 * @method \Bitrix\Sale\Location\EO_Type wakeUpObject($row)
	 * @method \Bitrix\Sale\Location\EO_Type_Collection wakeUpCollection($rows)
	 */
	class EO_Type_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Sale\Reservation\Internals\BasketReservationHistoryTable:sale\lib\reservation\internals\basketreservationhistorytable.php */
namespace Bitrix\Sale\Reservation\Internals {
	/**
	 * EO_BasketReservationHistory
	 * @see \Bitrix\Sale\Reservation\Internals\BasketReservationHistoryTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getId()
	 * @method \Bitrix\Sale\Reservation\Internals\EO_BasketReservationHistory setId(\int|\Bitrix\Main\DB\SqlExpression $id)
	 * @method bool hasId()
	 * @method bool isIdFilled()
	 * @method bool isIdChanged()
	 * @method \int getReservationId()
	 * @method \Bitrix\Sale\Reservation\Internals\EO_BasketReservationHistory setReservationId(\int|\Bitrix\Main\DB\SqlExpression $reservationId)
	 * @method bool hasReservationId()
	 * @method bool isReservationIdFilled()
	 * @method bool isReservationIdChanged()
	 * @method \int remindActualReservationId()
	 * @method \int requireReservationId()
	 * @method \Bitrix\Sale\Reservation\Internals\EO_BasketReservationHistory resetReservationId()
	 * @method \Bitrix\Sale\Reservation\Internals\EO_BasketReservationHistory unsetReservationId()
	 * @method \int fillReservationId()
	 * @method \Bitrix\Main\Type\DateTime getDateReserve()
	 * @method \Bitrix\Sale\Reservation\Internals\EO_BasketReservationHistory setDateReserve(\Bitrix\Main\Type\DateTime|\Bitrix\Main\DB\SqlExpression $dateReserve)
	 * @method bool hasDateReserve()
	 * @method bool isDateReserveFilled()
	 * @method bool isDateReserveChanged()
	 * @method \Bitrix\Main\Type\DateTime remindActualDateReserve()
	 * @method \Bitrix\Main\Type\DateTime requireDateReserve()
	 * @method \Bitrix\Sale\Reservation\Internals\EO_BasketReservationHistory resetDateReserve()
	 * @method \Bitrix\Sale\Reservation\Internals\EO_BasketReservationHistory unsetDateReserve()
	 * @method \Bitrix\Main\Type\DateTime fillDateReserve()
	 * @method \float getQuantity()
	 * @method \Bitrix\Sale\Reservation\Internals\EO_BasketReservationHistory setQuantity(\float|\Bitrix\Main\DB\SqlExpression $quantity)
	 * @method bool hasQuantity()
	 * @method bool isQuantityFilled()
	 * @method bool isQuantityChanged()
	 * @method \float remindActualQuantity()
	 * @method \float requireQuantity()
	 * @method \Bitrix\Sale\Reservation\Internals\EO_BasketReservationHistory resetQuantity()
	 * @method \Bitrix\Sale\Reservation\Internals\EO_BasketReservationHistory unsetQuantity()
	 * @method \float fillQuantity()
	 * @method \Bitrix\Sale\Reservation\Internals\EO_BasketReservation getReservation()
	 * @method \Bitrix\Sale\Reservation\Internals\EO_BasketReservation remindActualReservation()
	 * @method \Bitrix\Sale\Reservation\Internals\EO_BasketReservation requireReservation()
	 * @method \Bitrix\Sale\Reservation\Internals\EO_BasketReservationHistory setReservation(\Bitrix\Sale\Reservation\Internals\EO_BasketReservation $object)
	 * @method \Bitrix\Sale\Reservation\Internals\EO_BasketReservationHistory resetReservation()
	 * @method \Bitrix\Sale\Reservation\Internals\EO_BasketReservationHistory unsetReservation()
	 * @method bool hasReservation()
	 * @method bool isReservationFilled()
	 * @method bool isReservationChanged()
	 * @method \Bitrix\Sale\Reservation\Internals\EO_BasketReservation fillReservation()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Sale\Reservation\Internals\EO_BasketReservationHistory set($fieldName, $value)
	 * @method \Bitrix\Sale\Reservation\Internals\EO_BasketReservationHistory reset($fieldName)
	 * @method \Bitrix\Sale\Reservation\Internals\EO_BasketReservationHistory unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Sale\Reservation\Internals\EO_BasketReservationHistory wakeUp($data)
	 */
	class EO_BasketReservationHistory {
		/* @var \Bitrix\Sale\Reservation\Internals\BasketReservationHistoryTable */
		static public $dataClass = '\Bitrix\Sale\Reservation\Internals\BasketReservationHistoryTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Sale\Reservation\Internals {
	/**
	 * EO_BasketReservationHistory_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getIdList()
	 * @method \int[] getReservationIdList()
	 * @method \int[] fillReservationId()
	 * @method \Bitrix\Main\Type\DateTime[] getDateReserveList()
	 * @method \Bitrix\Main\Type\DateTime[] fillDateReserve()
	 * @method \float[] getQuantityList()
	 * @method \float[] fillQuantity()
	 * @method \Bitrix\Sale\Reservation\Internals\EO_BasketReservation[] getReservationList()
	 * @method \Bitrix\Sale\Reservation\Internals\EO_BasketReservationHistory_Collection getReservationCollection()
	 * @method \Bitrix\Sale\Reservation\Internals\EO_BasketReservation_Collection fillReservation()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Sale\Reservation\Internals\EO_BasketReservationHistory $object)
	 * @method bool has(\Bitrix\Sale\Reservation\Internals\EO_BasketReservationHistory $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Sale\Reservation\Internals\EO_BasketReservationHistory getByPrimary($primary)
	 * @method \Bitrix\Sale\Reservation\Internals\EO_BasketReservationHistory[] getAll()
	 * @method bool remove(\Bitrix\Sale\Reservation\Internals\EO_BasketReservationHistory $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Sale\Reservation\Internals\EO_BasketReservationHistory_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Sale\Reservation\Internals\EO_BasketReservationHistory current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 * @method EO_BasketReservationHistory_Collection merge(?EO_BasketReservationHistory_Collection $collection)
	 * @method bool isEmpty()
	 */
	class EO_BasketReservationHistory_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Sale\Reservation\Internals\BasketReservationHistoryTable */
		static public $dataClass = '\Bitrix\Sale\Reservation\Internals\BasketReservationHistoryTable';
	}
}
namespace Bitrix\Sale\Reservation\Internals {
	/**
	 * Common methods:
	 * ---------------
	 *
	 * @method EO_BasketReservationHistory_Result exec()
	 * @method \Bitrix\Sale\Reservation\Internals\EO_BasketReservationHistory fetchObject()
	 * @method \Bitrix\Sale\Reservation\Internals\EO_BasketReservationHistory_Collection fetchCollection()
	 *
	 * Custom methods:
	 * ---------------
	 *
	 */
	class EO_BasketReservationHistory_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Sale\Reservation\Internals\EO_BasketReservationHistory fetchObject()
	 * @method \Bitrix\Sale\Reservation\Internals\EO_BasketReservationHistory_Collection fetchCollection()
	 */
	class EO_BasketReservationHistory_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Sale\Reservation\Internals\EO_BasketReservationHistory createObject($setDefaultValues = true)
	 * @method \Bitrix\Sale\Reservation\Internals\EO_BasketReservationHistory_Collection createCollection()
	 * @method \Bitrix\Sale\Reservation\Internals\EO_BasketReservationHistory wakeUpObject($row)
	 * @method \Bitrix\Sale\Reservation\Internals\EO_BasketReservationHistory_Collection wakeUpCollection($rows)
	 */
	class EO_BasketReservationHistory_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Sale\Reservation\Internals\BasketReservationTable:sale\lib\reservation\internals\basketreservationtable.php */
namespace Bitrix\Sale\Reservation\Internals {
	/**
	 * EO_BasketReservation
	 * @see \Bitrix\Sale\Reservation\Internals\BasketReservationTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getId()
	 * @method \Bitrix\Sale\Reservation\Internals\EO_BasketReservation setId(\int|\Bitrix\Main\DB\SqlExpression $id)
	 * @method bool hasId()
	 * @method bool isIdFilled()
	 * @method bool isIdChanged()
	 * @method \float getQuantity()
	 * @method \Bitrix\Sale\Reservation\Internals\EO_BasketReservation setQuantity(\float|\Bitrix\Main\DB\SqlExpression $quantity)
	 * @method bool hasQuantity()
	 * @method bool isQuantityFilled()
	 * @method bool isQuantityChanged()
	 * @method \float remindActualQuantity()
	 * @method \float requireQuantity()
	 * @method \Bitrix\Sale\Reservation\Internals\EO_BasketReservation resetQuantity()
	 * @method \Bitrix\Sale\Reservation\Internals\EO_BasketReservation unsetQuantity()
	 * @method \float fillQuantity()
	 * @method \Bitrix\Main\Type\DateTime getDateReserve()
	 * @method \Bitrix\Sale\Reservation\Internals\EO_BasketReservation setDateReserve(\Bitrix\Main\Type\DateTime|\Bitrix\Main\DB\SqlExpression $dateReserve)
	 * @method bool hasDateReserve()
	 * @method bool isDateReserveFilled()
	 * @method bool isDateReserveChanged()
	 * @method \Bitrix\Main\Type\DateTime remindActualDateReserve()
	 * @method \Bitrix\Main\Type\DateTime requireDateReserve()
	 * @method \Bitrix\Sale\Reservation\Internals\EO_BasketReservation resetDateReserve()
	 * @method \Bitrix\Sale\Reservation\Internals\EO_BasketReservation unsetDateReserve()
	 * @method \Bitrix\Main\Type\DateTime fillDateReserve()
	 * @method \Bitrix\Main\Type\DateTime getDateReserveEnd()
	 * @method \Bitrix\Sale\Reservation\Internals\EO_BasketReservation setDateReserveEnd(\Bitrix\Main\Type\DateTime|\Bitrix\Main\DB\SqlExpression $dateReserveEnd)
	 * @method bool hasDateReserveEnd()
	 * @method bool isDateReserveEndFilled()
	 * @method bool isDateReserveEndChanged()
	 * @method \Bitrix\Main\Type\DateTime remindActualDateReserveEnd()
	 * @method \Bitrix\Main\Type\DateTime requireDateReserveEnd()
	 * @method \Bitrix\Sale\Reservation\Internals\EO_BasketReservation resetDateReserveEnd()
	 * @method \Bitrix\Sale\Reservation\Internals\EO_BasketReservation unsetDateReserveEnd()
	 * @method \Bitrix\Main\Type\DateTime fillDateReserveEnd()
	 * @method \int getReservedBy()
	 * @method \Bitrix\Sale\Reservation\Internals\EO_BasketReservation setReservedBy(\int|\Bitrix\Main\DB\SqlExpression $reservedBy)
	 * @method bool hasReservedBy()
	 * @method bool isReservedByFilled()
	 * @method bool isReservedByChanged()
	 * @method \int remindActualReservedBy()
	 * @method \int requireReservedBy()
	 * @method \Bitrix\Sale\Reservation\Internals\EO_BasketReservation resetReservedBy()
	 * @method \Bitrix\Sale\Reservation\Internals\EO_BasketReservation unsetReservedBy()
	 * @method \int fillReservedBy()
	 * @method \int getBasketId()
	 * @method \Bitrix\Sale\Reservation\Internals\EO_BasketReservation setBasketId(\int|\Bitrix\Main\DB\SqlExpression $basketId)
	 * @method bool hasBasketId()
	 * @method bool isBasketIdFilled()
	 * @method bool isBasketIdChanged()
	 * @method \int remindActualBasketId()
	 * @method \int requireBasketId()
	 * @method \Bitrix\Sale\Reservation\Internals\EO_BasketReservation resetBasketId()
	 * @method \Bitrix\Sale\Reservation\Internals\EO_BasketReservation unsetBasketId()
	 * @method \int fillBasketId()
	 * @method \int getStoreId()
	 * @method \Bitrix\Sale\Reservation\Internals\EO_BasketReservation setStoreId(\int|\Bitrix\Main\DB\SqlExpression $storeId)
	 * @method bool hasStoreId()
	 * @method bool isStoreIdFilled()
	 * @method bool isStoreIdChanged()
	 * @method \int remindActualStoreId()
	 * @method \int requireStoreId()
	 * @method \Bitrix\Sale\Reservation\Internals\EO_BasketReservation resetStoreId()
	 * @method \Bitrix\Sale\Reservation\Internals\EO_BasketReservation unsetStoreId()
	 * @method \int fillStoreId()
	 * @method \Bitrix\Sale\Internals\EO_Basket getBasket()
	 * @method \Bitrix\Sale\Internals\EO_Basket remindActualBasket()
	 * @method \Bitrix\Sale\Internals\EO_Basket requireBasket()
	 * @method \Bitrix\Sale\Reservation\Internals\EO_BasketReservation setBasket(\Bitrix\Sale\Internals\EO_Basket $object)
	 * @method \Bitrix\Sale\Reservation\Internals\EO_BasketReservation resetBasket()
	 * @method \Bitrix\Sale\Reservation\Internals\EO_BasketReservation unsetBasket()
	 * @method bool hasBasket()
	 * @method bool isBasketFilled()
	 * @method bool isBasketChanged()
	 * @method \Bitrix\Sale\Internals\EO_Basket fillBasket()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Sale\Reservation\Internals\EO_BasketReservation set($fieldName, $value)
	 * @method \Bitrix\Sale\Reservation\Internals\EO_BasketReservation reset($fieldName)
	 * @method \Bitrix\Sale\Reservation\Internals\EO_BasketReservation unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Sale\Reservation\Internals\EO_BasketReservation wakeUp($data)
	 */
	class EO_BasketReservation {
		/* @var \Bitrix\Sale\Reservation\Internals\BasketReservationTable */
		static public $dataClass = '\Bitrix\Sale\Reservation\Internals\BasketReservationTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Sale\Reservation\Internals {
	/**
	 * EO_BasketReservation_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getIdList()
	 * @method \float[] getQuantityList()
	 * @method \float[] fillQuantity()
	 * @method \Bitrix\Main\Type\DateTime[] getDateReserveList()
	 * @method \Bitrix\Main\Type\DateTime[] fillDateReserve()
	 * @method \Bitrix\Main\Type\DateTime[] getDateReserveEndList()
	 * @method \Bitrix\Main\Type\DateTime[] fillDateReserveEnd()
	 * @method \int[] getReservedByList()
	 * @method \int[] fillReservedBy()
	 * @method \int[] getBasketIdList()
	 * @method \int[] fillBasketId()
	 * @method \int[] getStoreIdList()
	 * @method \int[] fillStoreId()
	 * @method \Bitrix\Sale\Internals\EO_Basket[] getBasketList()
	 * @method \Bitrix\Sale\Reservation\Internals\EO_BasketReservation_Collection getBasketCollection()
	 * @method \Bitrix\Sale\Internals\EO_Basket_Collection fillBasket()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Sale\Reservation\Internals\EO_BasketReservation $object)
	 * @method bool has(\Bitrix\Sale\Reservation\Internals\EO_BasketReservation $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Sale\Reservation\Internals\EO_BasketReservation getByPrimary($primary)
	 * @method \Bitrix\Sale\Reservation\Internals\EO_BasketReservation[] getAll()
	 * @method bool remove(\Bitrix\Sale\Reservation\Internals\EO_BasketReservation $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Sale\Reservation\Internals\EO_BasketReservation_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Sale\Reservation\Internals\EO_BasketReservation current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 * @method EO_BasketReservation_Collection merge(?EO_BasketReservation_Collection $collection)
	 * @method bool isEmpty()
	 */
	class EO_BasketReservation_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Sale\Reservation\Internals\BasketReservationTable */
		static public $dataClass = '\Bitrix\Sale\Reservation\Internals\BasketReservationTable';
	}
}
namespace Bitrix\Sale\Reservation\Internals {
	/**
	 * Common methods:
	 * ---------------
	 *
	 * @method EO_BasketReservation_Result exec()
	 * @method \Bitrix\Sale\Reservation\Internals\EO_BasketReservation fetchObject()
	 * @method \Bitrix\Sale\Reservation\Internals\EO_BasketReservation_Collection fetchCollection()
	 *
	 * Custom methods:
	 * ---------------
	 *
	 */
	class EO_BasketReservation_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Sale\Reservation\Internals\EO_BasketReservation fetchObject()
	 * @method \Bitrix\Sale\Reservation\Internals\EO_BasketReservation_Collection fetchCollection()
	 */
	class EO_BasketReservation_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Sale\Reservation\Internals\EO_BasketReservation createObject($setDefaultValues = true)
	 * @method \Bitrix\Sale\Reservation\Internals\EO_BasketReservation_Collection createCollection()
	 * @method \Bitrix\Sale\Reservation\Internals\EO_BasketReservation wakeUpObject($row)
	 * @method \Bitrix\Sale\Reservation\Internals\EO_BasketReservation_Collection wakeUpCollection($rows)
	 */
	class EO_BasketReservation_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Sale\Tax\RateTable:sale\lib\tax\rate.php */
namespace Bitrix\Sale\Tax {
	/**
	 * EO_Rate
	 * @see \Bitrix\Sale\Tax\RateTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getId()
	 * @method \Bitrix\Sale\Tax\EO_Rate setId(\int|\Bitrix\Main\DB\SqlExpression $id)
	 * @method bool hasId()
	 * @method bool isIdFilled()
	 * @method bool isIdChanged()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Sale\Tax\EO_Rate set($fieldName, $value)
	 * @method \Bitrix\Sale\Tax\EO_Rate reset($fieldName)
	 * @method \Bitrix\Sale\Tax\EO_Rate unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Sale\Tax\EO_Rate wakeUp($data)
	 */
	class EO_Rate {
		/* @var \Bitrix\Sale\Tax\RateTable */
		static public $dataClass = '\Bitrix\Sale\Tax\RateTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Sale\Tax {
	/**
	 * EO_Rate_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getIdList()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Sale\Tax\EO_Rate $object)
	 * @method bool has(\Bitrix\Sale\Tax\EO_Rate $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Sale\Tax\EO_Rate getByPrimary($primary)
	 * @method \Bitrix\Sale\Tax\EO_Rate[] getAll()
	 * @method bool remove(\Bitrix\Sale\Tax\EO_Rate $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Sale\Tax\EO_Rate_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Sale\Tax\EO_Rate current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 * @method EO_Rate_Collection merge(?EO_Rate_Collection $collection)
	 * @method bool isEmpty()
	 */
	class EO_Rate_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Sale\Tax\RateTable */
		static public $dataClass = '\Bitrix\Sale\Tax\RateTable';
	}
}
namespace Bitrix\Sale\Tax {
	/**
	 * Common methods:
	 * ---------------
	 *
	 * @method EO_Rate_Result exec()
	 * @method \Bitrix\Sale\Tax\EO_Rate fetchObject()
	 * @method \Bitrix\Sale\Tax\EO_Rate_Collection fetchCollection()
	 *
	 * Custom methods:
	 * ---------------
	 *
	 */
	class EO_Rate_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Sale\Tax\EO_Rate fetchObject()
	 * @method \Bitrix\Sale\Tax\EO_Rate_Collection fetchCollection()
	 */
	class EO_Rate_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Sale\Tax\EO_Rate createObject($setDefaultValues = true)
	 * @method \Bitrix\Sale\Tax\EO_Rate_Collection createCollection()
	 * @method \Bitrix\Sale\Tax\EO_Rate wakeUpObject($row)
	 * @method \Bitrix\Sale\Tax\EO_Rate_Collection wakeUpCollection($rows)
	 */
	class EO_Rate_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Sale\Tax\RateLocationTable:sale\lib\tax\ratelocation.php */
namespace Bitrix\Sale\Tax {
	/**
	 * EO_RateLocation
	 * @see \Bitrix\Sale\Tax\RateLocationTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getTaxRateId()
	 * @method \Bitrix\Sale\Tax\EO_RateLocation setTaxRateId(\int|\Bitrix\Main\DB\SqlExpression $taxRateId)
	 * @method bool hasTaxRateId()
	 * @method bool isTaxRateIdFilled()
	 * @method bool isTaxRateIdChanged()
	 * @method \string getLocationCode()
	 * @method \Bitrix\Sale\Tax\EO_RateLocation setLocationCode(\string|\Bitrix\Main\DB\SqlExpression $locationCode)
	 * @method bool hasLocationCode()
	 * @method bool isLocationCodeFilled()
	 * @method bool isLocationCodeChanged()
	 * @method \string getLocationType()
	 * @method \Bitrix\Sale\Tax\EO_RateLocation setLocationType(\string|\Bitrix\Main\DB\SqlExpression $locationType)
	 * @method bool hasLocationType()
	 * @method bool isLocationTypeFilled()
	 * @method bool isLocationTypeChanged()
	 * @method \Bitrix\Sale\Location\EO_Location getLocation()
	 * @method \Bitrix\Sale\Location\EO_Location remindActualLocation()
	 * @method \Bitrix\Sale\Location\EO_Location requireLocation()
	 * @method \Bitrix\Sale\Tax\EO_RateLocation setLocation(\Bitrix\Sale\Location\EO_Location $object)
	 * @method \Bitrix\Sale\Tax\EO_RateLocation resetLocation()
	 * @method \Bitrix\Sale\Tax\EO_RateLocation unsetLocation()
	 * @method bool hasLocation()
	 * @method bool isLocationFilled()
	 * @method bool isLocationChanged()
	 * @method \Bitrix\Sale\Location\EO_Location fillLocation()
	 * @method \Bitrix\Sale\Location\EO_Group getGroup()
	 * @method \Bitrix\Sale\Location\EO_Group remindActualGroup()
	 * @method \Bitrix\Sale\Location\EO_Group requireGroup()
	 * @method \Bitrix\Sale\Tax\EO_RateLocation setGroup(\Bitrix\Sale\Location\EO_Group $object)
	 * @method \Bitrix\Sale\Tax\EO_RateLocation resetGroup()
	 * @method \Bitrix\Sale\Tax\EO_RateLocation unsetGroup()
	 * @method bool hasGroup()
	 * @method bool isGroupFilled()
	 * @method bool isGroupChanged()
	 * @method \Bitrix\Sale\Location\EO_Group fillGroup()
	 * @method \Bitrix\Sale\Tax\EO_Rate getRate()
	 * @method \Bitrix\Sale\Tax\EO_Rate remindActualRate()
	 * @method \Bitrix\Sale\Tax\EO_Rate requireRate()
	 * @method \Bitrix\Sale\Tax\EO_RateLocation setRate(\Bitrix\Sale\Tax\EO_Rate $object)
	 * @method \Bitrix\Sale\Tax\EO_RateLocation resetRate()
	 * @method \Bitrix\Sale\Tax\EO_RateLocation unsetRate()
	 * @method bool hasRate()
	 * @method bool isRateFilled()
	 * @method bool isRateChanged()
	 * @method \Bitrix\Sale\Tax\EO_Rate fillRate()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Sale\Tax\EO_RateLocation set($fieldName, $value)
	 * @method \Bitrix\Sale\Tax\EO_RateLocation reset($fieldName)
	 * @method \Bitrix\Sale\Tax\EO_RateLocation unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Sale\Tax\EO_RateLocation wakeUp($data)
	 */
	class EO_RateLocation {
		/* @var \Bitrix\Sale\Tax\RateLocationTable */
		static public $dataClass = '\Bitrix\Sale\Tax\RateLocationTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Sale\Tax {
	/**
	 * EO_RateLocation_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getTaxRateIdList()
	 * @method \string[] getLocationCodeList()
	 * @method \string[] getLocationTypeList()
	 * @method \Bitrix\Sale\Location\EO_Location[] getLocationList()
	 * @method \Bitrix\Sale\Tax\EO_RateLocation_Collection getLocationCollection()
	 * @method \Bitrix\Sale\Location\EO_Location_Collection fillLocation()
	 * @method \Bitrix\Sale\Location\EO_Group[] getGroupList()
	 * @method \Bitrix\Sale\Tax\EO_RateLocation_Collection getGroupCollection()
	 * @method \Bitrix\Sale\Location\EO_Group_Collection fillGroup()
	 * @method \Bitrix\Sale\Tax\EO_Rate[] getRateList()
	 * @method \Bitrix\Sale\Tax\EO_RateLocation_Collection getRateCollection()
	 * @method \Bitrix\Sale\Tax\EO_Rate_Collection fillRate()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Sale\Tax\EO_RateLocation $object)
	 * @method bool has(\Bitrix\Sale\Tax\EO_RateLocation $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Sale\Tax\EO_RateLocation getByPrimary($primary)
	 * @method \Bitrix\Sale\Tax\EO_RateLocation[] getAll()
	 * @method bool remove(\Bitrix\Sale\Tax\EO_RateLocation $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Sale\Tax\EO_RateLocation_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Sale\Tax\EO_RateLocation current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 * @method EO_RateLocation_Collection merge(?EO_RateLocation_Collection $collection)
	 * @method bool isEmpty()
	 */
	class EO_RateLocation_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Sale\Tax\RateLocationTable */
		static public $dataClass = '\Bitrix\Sale\Tax\RateLocationTable';
	}
}
namespace Bitrix\Sale\Tax {
	/**
	 * Common methods:
	 * ---------------
	 *
	 * @method EO_RateLocation_Result exec()
	 * @method \Bitrix\Sale\Tax\EO_RateLocation fetchObject()
	 * @method \Bitrix\Sale\Tax\EO_RateLocation_Collection fetchCollection()
	 *
	 * Custom methods:
	 * ---------------
	 *
	 */
	class EO_RateLocation_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Sale\Tax\EO_RateLocation fetchObject()
	 * @method \Bitrix\Sale\Tax\EO_RateLocation_Collection fetchCollection()
	 */
	class EO_RateLocation_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Sale\Tax\EO_RateLocation createObject($setDefaultValues = true)
	 * @method \Bitrix\Sale\Tax\EO_RateLocation_Collection createCollection()
	 * @method \Bitrix\Sale\Tax\EO_RateLocation wakeUpObject($row)
	 * @method \Bitrix\Sale\Tax\EO_RateLocation_Collection wakeUpCollection($rows)
	 */
	class EO_RateLocation_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Sale\TradingPlatform\Ebay\CategoryTable:sale\lib\tradingplatform\ebay\category.php */
namespace Bitrix\Sale\TradingPlatform\Ebay {
	/**
	 * EO_Category
	 * @see \Bitrix\Sale\TradingPlatform\Ebay\CategoryTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getId()
	 * @method \Bitrix\Sale\TradingPlatform\Ebay\EO_Category setId(\int|\Bitrix\Main\DB\SqlExpression $id)
	 * @method bool hasId()
	 * @method bool isIdFilled()
	 * @method bool isIdChanged()
	 * @method \string getName()
	 * @method \Bitrix\Sale\TradingPlatform\Ebay\EO_Category setName(\string|\Bitrix\Main\DB\SqlExpression $name)
	 * @method bool hasName()
	 * @method bool isNameFilled()
	 * @method bool isNameChanged()
	 * @method \string remindActualName()
	 * @method \string requireName()
	 * @method \Bitrix\Sale\TradingPlatform\Ebay\EO_Category resetName()
	 * @method \Bitrix\Sale\TradingPlatform\Ebay\EO_Category unsetName()
	 * @method \string fillName()
	 * @method \int getCategoryId()
	 * @method \Bitrix\Sale\TradingPlatform\Ebay\EO_Category setCategoryId(\int|\Bitrix\Main\DB\SqlExpression $categoryId)
	 * @method bool hasCategoryId()
	 * @method bool isCategoryIdFilled()
	 * @method bool isCategoryIdChanged()
	 * @method \int remindActualCategoryId()
	 * @method \int requireCategoryId()
	 * @method \Bitrix\Sale\TradingPlatform\Ebay\EO_Category resetCategoryId()
	 * @method \Bitrix\Sale\TradingPlatform\Ebay\EO_Category unsetCategoryId()
	 * @method \int fillCategoryId()
	 * @method \int getParentId()
	 * @method \Bitrix\Sale\TradingPlatform\Ebay\EO_Category setParentId(\int|\Bitrix\Main\DB\SqlExpression $parentId)
	 * @method bool hasParentId()
	 * @method bool isParentIdFilled()
	 * @method bool isParentIdChanged()
	 * @method \int remindActualParentId()
	 * @method \int requireParentId()
	 * @method \Bitrix\Sale\TradingPlatform\Ebay\EO_Category resetParentId()
	 * @method \Bitrix\Sale\TradingPlatform\Ebay\EO_Category unsetParentId()
	 * @method \int fillParentId()
	 * @method \int getLevel()
	 * @method \Bitrix\Sale\TradingPlatform\Ebay\EO_Category setLevel(\int|\Bitrix\Main\DB\SqlExpression $level)
	 * @method bool hasLevel()
	 * @method bool isLevelFilled()
	 * @method bool isLevelChanged()
	 * @method \int remindActualLevel()
	 * @method \int requireLevel()
	 * @method \Bitrix\Sale\TradingPlatform\Ebay\EO_Category resetLevel()
	 * @method \Bitrix\Sale\TradingPlatform\Ebay\EO_Category unsetLevel()
	 * @method \int fillLevel()
	 * @method \Bitrix\Main\Type\DateTime getLastUpdate()
	 * @method \Bitrix\Sale\TradingPlatform\Ebay\EO_Category setLastUpdate(\Bitrix\Main\Type\DateTime|\Bitrix\Main\DB\SqlExpression $lastUpdate)
	 * @method bool hasLastUpdate()
	 * @method bool isLastUpdateFilled()
	 * @method bool isLastUpdateChanged()
	 * @method \Bitrix\Main\Type\DateTime remindActualLastUpdate()
	 * @method \Bitrix\Main\Type\DateTime requireLastUpdate()
	 * @method \Bitrix\Sale\TradingPlatform\Ebay\EO_Category resetLastUpdate()
	 * @method \Bitrix\Sale\TradingPlatform\Ebay\EO_Category unsetLastUpdate()
	 * @method \Bitrix\Main\Type\DateTime fillLastUpdate()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Sale\TradingPlatform\Ebay\EO_Category set($fieldName, $value)
	 * @method \Bitrix\Sale\TradingPlatform\Ebay\EO_Category reset($fieldName)
	 * @method \Bitrix\Sale\TradingPlatform\Ebay\EO_Category unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Sale\TradingPlatform\Ebay\EO_Category wakeUp($data)
	 */
	class EO_Category {
		/* @var \Bitrix\Sale\TradingPlatform\Ebay\CategoryTable */
		static public $dataClass = '\Bitrix\Sale\TradingPlatform\Ebay\CategoryTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Sale\TradingPlatform\Ebay {
	/**
	 * EO_Category_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getIdList()
	 * @method \string[] getNameList()
	 * @method \string[] fillName()
	 * @method \int[] getCategoryIdList()
	 * @method \int[] fillCategoryId()
	 * @method \int[] getParentIdList()
	 * @method \int[] fillParentId()
	 * @method \int[] getLevelList()
	 * @method \int[] fillLevel()
	 * @method \Bitrix\Main\Type\DateTime[] getLastUpdateList()
	 * @method \Bitrix\Main\Type\DateTime[] fillLastUpdate()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Sale\TradingPlatform\Ebay\EO_Category $object)
	 * @method bool has(\Bitrix\Sale\TradingPlatform\Ebay\EO_Category $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Sale\TradingPlatform\Ebay\EO_Category getByPrimary($primary)
	 * @method \Bitrix\Sale\TradingPlatform\Ebay\EO_Category[] getAll()
	 * @method bool remove(\Bitrix\Sale\TradingPlatform\Ebay\EO_Category $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Sale\TradingPlatform\Ebay\EO_Category_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Sale\TradingPlatform\Ebay\EO_Category current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 * @method EO_Category_Collection merge(?EO_Category_Collection $collection)
	 * @method bool isEmpty()
	 */
	class EO_Category_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Sale\TradingPlatform\Ebay\CategoryTable */
		static public $dataClass = '\Bitrix\Sale\TradingPlatform\Ebay\CategoryTable';
	}
}
namespace Bitrix\Sale\TradingPlatform\Ebay {
	/**
	 * Common methods:
	 * ---------------
	 *
	 * @method EO_Category_Result exec()
	 * @method \Bitrix\Sale\TradingPlatform\Ebay\EO_Category fetchObject()
	 * @method \Bitrix\Sale\TradingPlatform\Ebay\EO_Category_Collection fetchCollection()
	 *
	 * Custom methods:
	 * ---------------
	 *
	 */
	class EO_Category_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Sale\TradingPlatform\Ebay\EO_Category fetchObject()
	 * @method \Bitrix\Sale\TradingPlatform\Ebay\EO_Category_Collection fetchCollection()
	 */
	class EO_Category_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Sale\TradingPlatform\Ebay\EO_Category createObject($setDefaultValues = true)
	 * @method \Bitrix\Sale\TradingPlatform\Ebay\EO_Category_Collection createCollection()
	 * @method \Bitrix\Sale\TradingPlatform\Ebay\EO_Category wakeUpObject($row)
	 * @method \Bitrix\Sale\TradingPlatform\Ebay\EO_Category_Collection wakeUpCollection($rows)
	 */
	class EO_Category_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Sale\TradingPlatform\Ebay\CategoryVariationTable:sale\lib\tradingplatform\ebay\categoryvariation.php */
namespace Bitrix\Sale\TradingPlatform\Ebay {
	/**
	 * EO_CategoryVariation
	 * @see \Bitrix\Sale\TradingPlatform\Ebay\CategoryVariationTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getId()
	 * @method \Bitrix\Sale\TradingPlatform\Ebay\EO_CategoryVariation setId(\int|\Bitrix\Main\DB\SqlExpression $id)
	 * @method bool hasId()
	 * @method bool isIdFilled()
	 * @method bool isIdChanged()
	 * @method \int getCategoryId()
	 * @method \Bitrix\Sale\TradingPlatform\Ebay\EO_CategoryVariation setCategoryId(\int|\Bitrix\Main\DB\SqlExpression $categoryId)
	 * @method bool hasCategoryId()
	 * @method bool isCategoryIdFilled()
	 * @method bool isCategoryIdChanged()
	 * @method \int remindActualCategoryId()
	 * @method \int requireCategoryId()
	 * @method \Bitrix\Sale\TradingPlatform\Ebay\EO_CategoryVariation resetCategoryId()
	 * @method \Bitrix\Sale\TradingPlatform\Ebay\EO_CategoryVariation unsetCategoryId()
	 * @method \int fillCategoryId()
	 * @method \string getName()
	 * @method \Bitrix\Sale\TradingPlatform\Ebay\EO_CategoryVariation setName(\string|\Bitrix\Main\DB\SqlExpression $name)
	 * @method bool hasName()
	 * @method bool isNameFilled()
	 * @method bool isNameChanged()
	 * @method \string remindActualName()
	 * @method \string requireName()
	 * @method \Bitrix\Sale\TradingPlatform\Ebay\EO_CategoryVariation resetName()
	 * @method \Bitrix\Sale\TradingPlatform\Ebay\EO_CategoryVariation unsetName()
	 * @method \string fillName()
	 * @method \string getRequired()
	 * @method \Bitrix\Sale\TradingPlatform\Ebay\EO_CategoryVariation setRequired(\string|\Bitrix\Main\DB\SqlExpression $required)
	 * @method bool hasRequired()
	 * @method bool isRequiredFilled()
	 * @method bool isRequiredChanged()
	 * @method \string remindActualRequired()
	 * @method \string requireRequired()
	 * @method \Bitrix\Sale\TradingPlatform\Ebay\EO_CategoryVariation resetRequired()
	 * @method \Bitrix\Sale\TradingPlatform\Ebay\EO_CategoryVariation unsetRequired()
	 * @method \string fillRequired()
	 * @method \int getMinValues()
	 * @method \Bitrix\Sale\TradingPlatform\Ebay\EO_CategoryVariation setMinValues(\int|\Bitrix\Main\DB\SqlExpression $minValues)
	 * @method bool hasMinValues()
	 * @method bool isMinValuesFilled()
	 * @method bool isMinValuesChanged()
	 * @method \int remindActualMinValues()
	 * @method \int requireMinValues()
	 * @method \Bitrix\Sale\TradingPlatform\Ebay\EO_CategoryVariation resetMinValues()
	 * @method \Bitrix\Sale\TradingPlatform\Ebay\EO_CategoryVariation unsetMinValues()
	 * @method \int fillMinValues()
	 * @method \int getMaxValues()
	 * @method \Bitrix\Sale\TradingPlatform\Ebay\EO_CategoryVariation setMaxValues(\int|\Bitrix\Main\DB\SqlExpression $maxValues)
	 * @method bool hasMaxValues()
	 * @method bool isMaxValuesFilled()
	 * @method bool isMaxValuesChanged()
	 * @method \int remindActualMaxValues()
	 * @method \int requireMaxValues()
	 * @method \Bitrix\Sale\TradingPlatform\Ebay\EO_CategoryVariation resetMaxValues()
	 * @method \Bitrix\Sale\TradingPlatform\Ebay\EO_CategoryVariation unsetMaxValues()
	 * @method \int fillMaxValues()
	 * @method \string getSelectionMode()
	 * @method \Bitrix\Sale\TradingPlatform\Ebay\EO_CategoryVariation setSelectionMode(\string|\Bitrix\Main\DB\SqlExpression $selectionMode)
	 * @method bool hasSelectionMode()
	 * @method bool isSelectionModeFilled()
	 * @method bool isSelectionModeChanged()
	 * @method \string remindActualSelectionMode()
	 * @method \string requireSelectionMode()
	 * @method \Bitrix\Sale\TradingPlatform\Ebay\EO_CategoryVariation resetSelectionMode()
	 * @method \Bitrix\Sale\TradingPlatform\Ebay\EO_CategoryVariation unsetSelectionMode()
	 * @method \string fillSelectionMode()
	 * @method \string getAllowedAsVariation()
	 * @method \Bitrix\Sale\TradingPlatform\Ebay\EO_CategoryVariation setAllowedAsVariation(\string|\Bitrix\Main\DB\SqlExpression $allowedAsVariation)
	 * @method bool hasAllowedAsVariation()
	 * @method bool isAllowedAsVariationFilled()
	 * @method bool isAllowedAsVariationChanged()
	 * @method \string remindActualAllowedAsVariation()
	 * @method \string requireAllowedAsVariation()
	 * @method \Bitrix\Sale\TradingPlatform\Ebay\EO_CategoryVariation resetAllowedAsVariation()
	 * @method \Bitrix\Sale\TradingPlatform\Ebay\EO_CategoryVariation unsetAllowedAsVariation()
	 * @method \string fillAllowedAsVariation()
	 * @method \string getHelpUrl()
	 * @method \Bitrix\Sale\TradingPlatform\Ebay\EO_CategoryVariation setHelpUrl(\string|\Bitrix\Main\DB\SqlExpression $helpUrl)
	 * @method bool hasHelpUrl()
	 * @method bool isHelpUrlFilled()
	 * @method bool isHelpUrlChanged()
	 * @method \string remindActualHelpUrl()
	 * @method \string requireHelpUrl()
	 * @method \Bitrix\Sale\TradingPlatform\Ebay\EO_CategoryVariation resetHelpUrl()
	 * @method \Bitrix\Sale\TradingPlatform\Ebay\EO_CategoryVariation unsetHelpUrl()
	 * @method \string fillHelpUrl()
	 * @method \string getValue()
	 * @method \Bitrix\Sale\TradingPlatform\Ebay\EO_CategoryVariation setValue(\string|\Bitrix\Main\DB\SqlExpression $value)
	 * @method bool hasValue()
	 * @method bool isValueFilled()
	 * @method bool isValueChanged()
	 * @method \string remindActualValue()
	 * @method \string requireValue()
	 * @method \Bitrix\Sale\TradingPlatform\Ebay\EO_CategoryVariation resetValue()
	 * @method \Bitrix\Sale\TradingPlatform\Ebay\EO_CategoryVariation unsetValue()
	 * @method \string fillValue()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Sale\TradingPlatform\Ebay\EO_CategoryVariation set($fieldName, $value)
	 * @method \Bitrix\Sale\TradingPlatform\Ebay\EO_CategoryVariation reset($fieldName)
	 * @method \Bitrix\Sale\TradingPlatform\Ebay\EO_CategoryVariation unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Sale\TradingPlatform\Ebay\EO_CategoryVariation wakeUp($data)
	 */
	class EO_CategoryVariation {
		/* @var \Bitrix\Sale\TradingPlatform\Ebay\CategoryVariationTable */
		static public $dataClass = '\Bitrix\Sale\TradingPlatform\Ebay\CategoryVariationTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Sale\TradingPlatform\Ebay {
	/**
	 * EO_CategoryVariation_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getIdList()
	 * @method \int[] getCategoryIdList()
	 * @method \int[] fillCategoryId()
	 * @method \string[] getNameList()
	 * @method \string[] fillName()
	 * @method \string[] getRequiredList()
	 * @method \string[] fillRequired()
	 * @method \int[] getMinValuesList()
	 * @method \int[] fillMinValues()
	 * @method \int[] getMaxValuesList()
	 * @method \int[] fillMaxValues()
	 * @method \string[] getSelectionModeList()
	 * @method \string[] fillSelectionMode()
	 * @method \string[] getAllowedAsVariationList()
	 * @method \string[] fillAllowedAsVariation()
	 * @method \string[] getHelpUrlList()
	 * @method \string[] fillHelpUrl()
	 * @method \string[] getValueList()
	 * @method \string[] fillValue()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Sale\TradingPlatform\Ebay\EO_CategoryVariation $object)
	 * @method bool has(\Bitrix\Sale\TradingPlatform\Ebay\EO_CategoryVariation $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Sale\TradingPlatform\Ebay\EO_CategoryVariation getByPrimary($primary)
	 * @method \Bitrix\Sale\TradingPlatform\Ebay\EO_CategoryVariation[] getAll()
	 * @method bool remove(\Bitrix\Sale\TradingPlatform\Ebay\EO_CategoryVariation $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Sale\TradingPlatform\Ebay\EO_CategoryVariation_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Sale\TradingPlatform\Ebay\EO_CategoryVariation current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 * @method EO_CategoryVariation_Collection merge(?EO_CategoryVariation_Collection $collection)
	 * @method bool isEmpty()
	 */
	class EO_CategoryVariation_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Sale\TradingPlatform\Ebay\CategoryVariationTable */
		static public $dataClass = '\Bitrix\Sale\TradingPlatform\Ebay\CategoryVariationTable';
	}
}
namespace Bitrix\Sale\TradingPlatform\Ebay {
	/**
	 * Common methods:
	 * ---------------
	 *
	 * @method EO_CategoryVariation_Result exec()
	 * @method \Bitrix\Sale\TradingPlatform\Ebay\EO_CategoryVariation fetchObject()
	 * @method \Bitrix\Sale\TradingPlatform\Ebay\EO_CategoryVariation_Collection fetchCollection()
	 *
	 * Custom methods:
	 * ---------------
	 *
	 */
	class EO_CategoryVariation_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Sale\TradingPlatform\Ebay\EO_CategoryVariation fetchObject()
	 * @method \Bitrix\Sale\TradingPlatform\Ebay\EO_CategoryVariation_Collection fetchCollection()
	 */
	class EO_CategoryVariation_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Sale\TradingPlatform\Ebay\EO_CategoryVariation createObject($setDefaultValues = true)
	 * @method \Bitrix\Sale\TradingPlatform\Ebay\EO_CategoryVariation_Collection createCollection()
	 * @method \Bitrix\Sale\TradingPlatform\Ebay\EO_CategoryVariation wakeUpObject($row)
	 * @method \Bitrix\Sale\TradingPlatform\Ebay\EO_CategoryVariation_Collection wakeUpCollection($rows)
	 */
	class EO_CategoryVariation_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Sale\TradingPlatform\Ebay\Feed\QueueTable:sale\lib\tradingplatform\ebay\feed\queue.php */
namespace Bitrix\Sale\TradingPlatform\Ebay\Feed {
	/**
	 * EO_Queue
	 * @see \Bitrix\Sale\TradingPlatform\Ebay\Feed\QueueTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getId()
	 * @method \Bitrix\Sale\TradingPlatform\Ebay\Feed\EO_Queue setId(\int|\Bitrix\Main\DB\SqlExpression $id)
	 * @method bool hasId()
	 * @method bool isIdFilled()
	 * @method bool isIdChanged()
	 * @method \string getFeedType()
	 * @method \Bitrix\Sale\TradingPlatform\Ebay\Feed\EO_Queue setFeedType(\string|\Bitrix\Main\DB\SqlExpression $feedType)
	 * @method bool hasFeedType()
	 * @method bool isFeedTypeFilled()
	 * @method bool isFeedTypeChanged()
	 * @method \string remindActualFeedType()
	 * @method \string requireFeedType()
	 * @method \Bitrix\Sale\TradingPlatform\Ebay\Feed\EO_Queue resetFeedType()
	 * @method \Bitrix\Sale\TradingPlatform\Ebay\Feed\EO_Queue unsetFeedType()
	 * @method \string fillFeedType()
	 * @method \string getData()
	 * @method \Bitrix\Sale\TradingPlatform\Ebay\Feed\EO_Queue setData(\string|\Bitrix\Main\DB\SqlExpression $data)
	 * @method bool hasData()
	 * @method bool isDataFilled()
	 * @method bool isDataChanged()
	 * @method \string remindActualData()
	 * @method \string requireData()
	 * @method \Bitrix\Sale\TradingPlatform\Ebay\Feed\EO_Queue resetData()
	 * @method \Bitrix\Sale\TradingPlatform\Ebay\Feed\EO_Queue unsetData()
	 * @method \string fillData()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Sale\TradingPlatform\Ebay\Feed\EO_Queue set($fieldName, $value)
	 * @method \Bitrix\Sale\TradingPlatform\Ebay\Feed\EO_Queue reset($fieldName)
	 * @method \Bitrix\Sale\TradingPlatform\Ebay\Feed\EO_Queue unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Sale\TradingPlatform\Ebay\Feed\EO_Queue wakeUp($data)
	 */
	class EO_Queue {
		/* @var \Bitrix\Sale\TradingPlatform\Ebay\Feed\QueueTable */
		static public $dataClass = '\Bitrix\Sale\TradingPlatform\Ebay\Feed\QueueTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Sale\TradingPlatform\Ebay\Feed {
	/**
	 * EO_Queue_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getIdList()
	 * @method \string[] getFeedTypeList()
	 * @method \string[] fillFeedType()
	 * @method \string[] getDataList()
	 * @method \string[] fillData()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Sale\TradingPlatform\Ebay\Feed\EO_Queue $object)
	 * @method bool has(\Bitrix\Sale\TradingPlatform\Ebay\Feed\EO_Queue $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Sale\TradingPlatform\Ebay\Feed\EO_Queue getByPrimary($primary)
	 * @method \Bitrix\Sale\TradingPlatform\Ebay\Feed\EO_Queue[] getAll()
	 * @method bool remove(\Bitrix\Sale\TradingPlatform\Ebay\Feed\EO_Queue $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Sale\TradingPlatform\Ebay\Feed\EO_Queue_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Sale\TradingPlatform\Ebay\Feed\EO_Queue current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 * @method EO_Queue_Collection merge(?EO_Queue_Collection $collection)
	 * @method bool isEmpty()
	 */
	class EO_Queue_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Sale\TradingPlatform\Ebay\Feed\QueueTable */
		static public $dataClass = '\Bitrix\Sale\TradingPlatform\Ebay\Feed\QueueTable';
	}
}
namespace Bitrix\Sale\TradingPlatform\Ebay\Feed {
	/**
	 * Common methods:
	 * ---------------
	 *
	 * @method EO_Queue_Result exec()
	 * @method \Bitrix\Sale\TradingPlatform\Ebay\Feed\EO_Queue fetchObject()
	 * @method \Bitrix\Sale\TradingPlatform\Ebay\Feed\EO_Queue_Collection fetchCollection()
	 *
	 * Custom methods:
	 * ---------------
	 *
	 */
	class EO_Queue_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Sale\TradingPlatform\Ebay\Feed\EO_Queue fetchObject()
	 * @method \Bitrix\Sale\TradingPlatform\Ebay\Feed\EO_Queue_Collection fetchCollection()
	 */
	class EO_Queue_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Sale\TradingPlatform\Ebay\Feed\EO_Queue createObject($setDefaultValues = true)
	 * @method \Bitrix\Sale\TradingPlatform\Ebay\Feed\EO_Queue_Collection createCollection()
	 * @method \Bitrix\Sale\TradingPlatform\Ebay\Feed\EO_Queue wakeUpObject($row)
	 * @method \Bitrix\Sale\TradingPlatform\Ebay\Feed\EO_Queue_Collection wakeUpCollection($rows)
	 */
	class EO_Queue_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Sale\TradingPlatform\Ebay\Feed\ResultsTable:sale\lib\tradingplatform\ebay\feed\results.php */
namespace Bitrix\Sale\TradingPlatform\Ebay\Feed {
	/**
	 * EO_Results
	 * @see \Bitrix\Sale\TradingPlatform\Ebay\Feed\ResultsTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getId()
	 * @method \Bitrix\Sale\TradingPlatform\Ebay\Feed\EO_Results setId(\int|\Bitrix\Main\DB\SqlExpression $id)
	 * @method bool hasId()
	 * @method bool isIdFilled()
	 * @method bool isIdChanged()
	 * @method \string getFilename()
	 * @method \Bitrix\Sale\TradingPlatform\Ebay\Feed\EO_Results setFilename(\string|\Bitrix\Main\DB\SqlExpression $filename)
	 * @method bool hasFilename()
	 * @method bool isFilenameFilled()
	 * @method bool isFilenameChanged()
	 * @method \string remindActualFilename()
	 * @method \string requireFilename()
	 * @method \Bitrix\Sale\TradingPlatform\Ebay\Feed\EO_Results resetFilename()
	 * @method \Bitrix\Sale\TradingPlatform\Ebay\Feed\EO_Results unsetFilename()
	 * @method \string fillFilename()
	 * @method \string getFeedType()
	 * @method \Bitrix\Sale\TradingPlatform\Ebay\Feed\EO_Results setFeedType(\string|\Bitrix\Main\DB\SqlExpression $feedType)
	 * @method bool hasFeedType()
	 * @method bool isFeedTypeFilled()
	 * @method bool isFeedTypeChanged()
	 * @method \string remindActualFeedType()
	 * @method \string requireFeedType()
	 * @method \Bitrix\Sale\TradingPlatform\Ebay\Feed\EO_Results resetFeedType()
	 * @method \Bitrix\Sale\TradingPlatform\Ebay\Feed\EO_Results unsetFeedType()
	 * @method \string fillFeedType()
	 * @method \Bitrix\Main\Type\DateTime getUploadTime()
	 * @method \Bitrix\Sale\TradingPlatform\Ebay\Feed\EO_Results setUploadTime(\Bitrix\Main\Type\DateTime|\Bitrix\Main\DB\SqlExpression $uploadTime)
	 * @method bool hasUploadTime()
	 * @method bool isUploadTimeFilled()
	 * @method bool isUploadTimeChanged()
	 * @method \Bitrix\Main\Type\DateTime remindActualUploadTime()
	 * @method \Bitrix\Main\Type\DateTime requireUploadTime()
	 * @method \Bitrix\Sale\TradingPlatform\Ebay\Feed\EO_Results resetUploadTime()
	 * @method \Bitrix\Sale\TradingPlatform\Ebay\Feed\EO_Results unsetUploadTime()
	 * @method \Bitrix\Main\Type\DateTime fillUploadTime()
	 * @method \string getProcessingRequestId()
	 * @method \Bitrix\Sale\TradingPlatform\Ebay\Feed\EO_Results setProcessingRequestId(\string|\Bitrix\Main\DB\SqlExpression $processingRequestId)
	 * @method bool hasProcessingRequestId()
	 * @method bool isProcessingRequestIdFilled()
	 * @method bool isProcessingRequestIdChanged()
	 * @method \string remindActualProcessingRequestId()
	 * @method \string requireProcessingRequestId()
	 * @method \Bitrix\Sale\TradingPlatform\Ebay\Feed\EO_Results resetProcessingRequestId()
	 * @method \Bitrix\Sale\TradingPlatform\Ebay\Feed\EO_Results unsetProcessingRequestId()
	 * @method \string fillProcessingRequestId()
	 * @method \string getProcessingResult()
	 * @method \Bitrix\Sale\TradingPlatform\Ebay\Feed\EO_Results setProcessingResult(\string|\Bitrix\Main\DB\SqlExpression $processingResult)
	 * @method bool hasProcessingResult()
	 * @method bool isProcessingResultFilled()
	 * @method bool isProcessingResultChanged()
	 * @method \string remindActualProcessingResult()
	 * @method \string requireProcessingResult()
	 * @method \Bitrix\Sale\TradingPlatform\Ebay\Feed\EO_Results resetProcessingResult()
	 * @method \Bitrix\Sale\TradingPlatform\Ebay\Feed\EO_Results unsetProcessingResult()
	 * @method \string fillProcessingResult()
	 * @method \string getResults()
	 * @method \Bitrix\Sale\TradingPlatform\Ebay\Feed\EO_Results setResults(\string|\Bitrix\Main\DB\SqlExpression $results)
	 * @method bool hasResults()
	 * @method bool isResultsFilled()
	 * @method bool isResultsChanged()
	 * @method \string remindActualResults()
	 * @method \string requireResults()
	 * @method \Bitrix\Sale\TradingPlatform\Ebay\Feed\EO_Results resetResults()
	 * @method \Bitrix\Sale\TradingPlatform\Ebay\Feed\EO_Results unsetResults()
	 * @method \string fillResults()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Sale\TradingPlatform\Ebay\Feed\EO_Results set($fieldName, $value)
	 * @method \Bitrix\Sale\TradingPlatform\Ebay\Feed\EO_Results reset($fieldName)
	 * @method \Bitrix\Sale\TradingPlatform\Ebay\Feed\EO_Results unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Sale\TradingPlatform\Ebay\Feed\EO_Results wakeUp($data)
	 */
	class EO_Results {
		/* @var \Bitrix\Sale\TradingPlatform\Ebay\Feed\ResultsTable */
		static public $dataClass = '\Bitrix\Sale\TradingPlatform\Ebay\Feed\ResultsTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Sale\TradingPlatform\Ebay\Feed {
	/**
	 * EO_Results_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getIdList()
	 * @method \string[] getFilenameList()
	 * @method \string[] fillFilename()
	 * @method \string[] getFeedTypeList()
	 * @method \string[] fillFeedType()
	 * @method \Bitrix\Main\Type\DateTime[] getUploadTimeList()
	 * @method \Bitrix\Main\Type\DateTime[] fillUploadTime()
	 * @method \string[] getProcessingRequestIdList()
	 * @method \string[] fillProcessingRequestId()
	 * @method \string[] getProcessingResultList()
	 * @method \string[] fillProcessingResult()
	 * @method \string[] getResultsList()
	 * @method \string[] fillResults()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Sale\TradingPlatform\Ebay\Feed\EO_Results $object)
	 * @method bool has(\Bitrix\Sale\TradingPlatform\Ebay\Feed\EO_Results $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Sale\TradingPlatform\Ebay\Feed\EO_Results getByPrimary($primary)
	 * @method \Bitrix\Sale\TradingPlatform\Ebay\Feed\EO_Results[] getAll()
	 * @method bool remove(\Bitrix\Sale\TradingPlatform\Ebay\Feed\EO_Results $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Sale\TradingPlatform\Ebay\Feed\EO_Results_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Sale\TradingPlatform\Ebay\Feed\EO_Results current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 * @method EO_Results_Collection merge(?EO_Results_Collection $collection)
	 * @method bool isEmpty()
	 */
	class EO_Results_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Sale\TradingPlatform\Ebay\Feed\ResultsTable */
		static public $dataClass = '\Bitrix\Sale\TradingPlatform\Ebay\Feed\ResultsTable';
	}
}
namespace Bitrix\Sale\TradingPlatform\Ebay\Feed {
	/**
	 * Common methods:
	 * ---------------
	 *
	 * @method EO_Results_Result exec()
	 * @method \Bitrix\Sale\TradingPlatform\Ebay\Feed\EO_Results fetchObject()
	 * @method \Bitrix\Sale\TradingPlatform\Ebay\Feed\EO_Results_Collection fetchCollection()
	 *
	 * Custom methods:
	 * ---------------
	 *
	 */
	class EO_Results_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Sale\TradingPlatform\Ebay\Feed\EO_Results fetchObject()
	 * @method \Bitrix\Sale\TradingPlatform\Ebay\Feed\EO_Results_Collection fetchCollection()
	 */
	class EO_Results_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Sale\TradingPlatform\Ebay\Feed\EO_Results createObject($setDefaultValues = true)
	 * @method \Bitrix\Sale\TradingPlatform\Ebay\Feed\EO_Results_Collection createCollection()
	 * @method \Bitrix\Sale\TradingPlatform\Ebay\Feed\EO_Results wakeUpObject($row)
	 * @method \Bitrix\Sale\TradingPlatform\Ebay\Feed\EO_Results_Collection wakeUpCollection($rows)
	 */
	class EO_Results_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Sale\TradingPlatform\MapTable:sale\lib\tradingplatform\map.php */
namespace Bitrix\Sale\TradingPlatform {
	/**
	 * EO_Map
	 * @see \Bitrix\Sale\TradingPlatform\MapTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getId()
	 * @method \Bitrix\Sale\TradingPlatform\EO_Map setId(\int|\Bitrix\Main\DB\SqlExpression $id)
	 * @method bool hasId()
	 * @method bool isIdFilled()
	 * @method bool isIdChanged()
	 * @method \int getEntityId()
	 * @method \Bitrix\Sale\TradingPlatform\EO_Map setEntityId(\int|\Bitrix\Main\DB\SqlExpression $entityId)
	 * @method bool hasEntityId()
	 * @method bool isEntityIdFilled()
	 * @method bool isEntityIdChanged()
	 * @method \int remindActualEntityId()
	 * @method \int requireEntityId()
	 * @method \Bitrix\Sale\TradingPlatform\EO_Map resetEntityId()
	 * @method \Bitrix\Sale\TradingPlatform\EO_Map unsetEntityId()
	 * @method \int fillEntityId()
	 * @method \string getValueExternal()
	 * @method \Bitrix\Sale\TradingPlatform\EO_Map setValueExternal(\string|\Bitrix\Main\DB\SqlExpression $valueExternal)
	 * @method bool hasValueExternal()
	 * @method bool isValueExternalFilled()
	 * @method bool isValueExternalChanged()
	 * @method \string remindActualValueExternal()
	 * @method \string requireValueExternal()
	 * @method \Bitrix\Sale\TradingPlatform\EO_Map resetValueExternal()
	 * @method \Bitrix\Sale\TradingPlatform\EO_Map unsetValueExternal()
	 * @method \string fillValueExternal()
	 * @method \string getValueInternal()
	 * @method \Bitrix\Sale\TradingPlatform\EO_Map setValueInternal(\string|\Bitrix\Main\DB\SqlExpression $valueInternal)
	 * @method bool hasValueInternal()
	 * @method bool isValueInternalFilled()
	 * @method bool isValueInternalChanged()
	 * @method \string remindActualValueInternal()
	 * @method \string requireValueInternal()
	 * @method \Bitrix\Sale\TradingPlatform\EO_Map resetValueInternal()
	 * @method \Bitrix\Sale\TradingPlatform\EO_Map unsetValueInternal()
	 * @method \string fillValueInternal()
	 * @method \string getParams()
	 * @method \Bitrix\Sale\TradingPlatform\EO_Map setParams(\string|\Bitrix\Main\DB\SqlExpression $params)
	 * @method bool hasParams()
	 * @method bool isParamsFilled()
	 * @method bool isParamsChanged()
	 * @method \string remindActualParams()
	 * @method \string requireParams()
	 * @method \Bitrix\Sale\TradingPlatform\EO_Map resetParams()
	 * @method \Bitrix\Sale\TradingPlatform\EO_Map unsetParams()
	 * @method \string fillParams()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Sale\TradingPlatform\EO_Map set($fieldName, $value)
	 * @method \Bitrix\Sale\TradingPlatform\EO_Map reset($fieldName)
	 * @method \Bitrix\Sale\TradingPlatform\EO_Map unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Sale\TradingPlatform\EO_Map wakeUp($data)
	 */
	class EO_Map {
		/* @var \Bitrix\Sale\TradingPlatform\MapTable */
		static public $dataClass = '\Bitrix\Sale\TradingPlatform\MapTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Sale\TradingPlatform {
	/**
	 * EO_Map_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getIdList()
	 * @method \int[] getEntityIdList()
	 * @method \int[] fillEntityId()
	 * @method \string[] getValueExternalList()
	 * @method \string[] fillValueExternal()
	 * @method \string[] getValueInternalList()
	 * @method \string[] fillValueInternal()
	 * @method \string[] getParamsList()
	 * @method \string[] fillParams()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Sale\TradingPlatform\EO_Map $object)
	 * @method bool has(\Bitrix\Sale\TradingPlatform\EO_Map $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Sale\TradingPlatform\EO_Map getByPrimary($primary)
	 * @method \Bitrix\Sale\TradingPlatform\EO_Map[] getAll()
	 * @method bool remove(\Bitrix\Sale\TradingPlatform\EO_Map $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Sale\TradingPlatform\EO_Map_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Sale\TradingPlatform\EO_Map current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 * @method EO_Map_Collection merge(?EO_Map_Collection $collection)
	 * @method bool isEmpty()
	 */
	class EO_Map_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Sale\TradingPlatform\MapTable */
		static public $dataClass = '\Bitrix\Sale\TradingPlatform\MapTable';
	}
}
namespace Bitrix\Sale\TradingPlatform {
	/**
	 * Common methods:
	 * ---------------
	 *
	 * @method EO_Map_Result exec()
	 * @method \Bitrix\Sale\TradingPlatform\EO_Map fetchObject()
	 * @method \Bitrix\Sale\TradingPlatform\EO_Map_Collection fetchCollection()
	 *
	 * Custom methods:
	 * ---------------
	 *
	 */
	class EO_Map_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Sale\TradingPlatform\EO_Map fetchObject()
	 * @method \Bitrix\Sale\TradingPlatform\EO_Map_Collection fetchCollection()
	 */
	class EO_Map_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Sale\TradingPlatform\EO_Map createObject($setDefaultValues = true)
	 * @method \Bitrix\Sale\TradingPlatform\EO_Map_Collection createCollection()
	 * @method \Bitrix\Sale\TradingPlatform\EO_Map wakeUpObject($row)
	 * @method \Bitrix\Sale\TradingPlatform\EO_Map_Collection wakeUpCollection($rows)
	 */
	class EO_Map_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Sale\TradingPlatform\MapEntityTable:sale\lib\tradingplatform\mapentity.php */
namespace Bitrix\Sale\TradingPlatform {
	/**
	 * EO_MapEntity
	 * @see \Bitrix\Sale\TradingPlatform\MapEntityTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getId()
	 * @method \Bitrix\Sale\TradingPlatform\EO_MapEntity setId(\int|\Bitrix\Main\DB\SqlExpression $id)
	 * @method bool hasId()
	 * @method bool isIdFilled()
	 * @method bool isIdChanged()
	 * @method \int getTradingPlatformId()
	 * @method \Bitrix\Sale\TradingPlatform\EO_MapEntity setTradingPlatformId(\int|\Bitrix\Main\DB\SqlExpression $tradingPlatformId)
	 * @method bool hasTradingPlatformId()
	 * @method bool isTradingPlatformIdFilled()
	 * @method bool isTradingPlatformIdChanged()
	 * @method \int remindActualTradingPlatformId()
	 * @method \int requireTradingPlatformId()
	 * @method \Bitrix\Sale\TradingPlatform\EO_MapEntity resetTradingPlatformId()
	 * @method \Bitrix\Sale\TradingPlatform\EO_MapEntity unsetTradingPlatformId()
	 * @method \int fillTradingPlatformId()
	 * @method \string getCode()
	 * @method \Bitrix\Sale\TradingPlatform\EO_MapEntity setCode(\string|\Bitrix\Main\DB\SqlExpression $code)
	 * @method bool hasCode()
	 * @method bool isCodeFilled()
	 * @method bool isCodeChanged()
	 * @method \string remindActualCode()
	 * @method \string requireCode()
	 * @method \Bitrix\Sale\TradingPlatform\EO_MapEntity resetCode()
	 * @method \Bitrix\Sale\TradingPlatform\EO_MapEntity unsetCode()
	 * @method \string fillCode()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Sale\TradingPlatform\EO_MapEntity set($fieldName, $value)
	 * @method \Bitrix\Sale\TradingPlatform\EO_MapEntity reset($fieldName)
	 * @method \Bitrix\Sale\TradingPlatform\EO_MapEntity unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Sale\TradingPlatform\EO_MapEntity wakeUp($data)
	 */
	class EO_MapEntity {
		/* @var \Bitrix\Sale\TradingPlatform\MapEntityTable */
		static public $dataClass = '\Bitrix\Sale\TradingPlatform\MapEntityTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Sale\TradingPlatform {
	/**
	 * EO_MapEntity_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getIdList()
	 * @method \int[] getTradingPlatformIdList()
	 * @method \int[] fillTradingPlatformId()
	 * @method \string[] getCodeList()
	 * @method \string[] fillCode()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Sale\TradingPlatform\EO_MapEntity $object)
	 * @method bool has(\Bitrix\Sale\TradingPlatform\EO_MapEntity $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Sale\TradingPlatform\EO_MapEntity getByPrimary($primary)
	 * @method \Bitrix\Sale\TradingPlatform\EO_MapEntity[] getAll()
	 * @method bool remove(\Bitrix\Sale\TradingPlatform\EO_MapEntity $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Sale\TradingPlatform\EO_MapEntity_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Sale\TradingPlatform\EO_MapEntity current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 * @method EO_MapEntity_Collection merge(?EO_MapEntity_Collection $collection)
	 * @method bool isEmpty()
	 */
	class EO_MapEntity_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Sale\TradingPlatform\MapEntityTable */
		static public $dataClass = '\Bitrix\Sale\TradingPlatform\MapEntityTable';
	}
}
namespace Bitrix\Sale\TradingPlatform {
	/**
	 * Common methods:
	 * ---------------
	 *
	 * @method EO_MapEntity_Result exec()
	 * @method \Bitrix\Sale\TradingPlatform\EO_MapEntity fetchObject()
	 * @method \Bitrix\Sale\TradingPlatform\EO_MapEntity_Collection fetchCollection()
	 *
	 * Custom methods:
	 * ---------------
	 *
	 */
	class EO_MapEntity_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Sale\TradingPlatform\EO_MapEntity fetchObject()
	 * @method \Bitrix\Sale\TradingPlatform\EO_MapEntity_Collection fetchCollection()
	 */
	class EO_MapEntity_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Sale\TradingPlatform\EO_MapEntity createObject($setDefaultValues = true)
	 * @method \Bitrix\Sale\TradingPlatform\EO_MapEntity_Collection createCollection()
	 * @method \Bitrix\Sale\TradingPlatform\EO_MapEntity wakeUpObject($row)
	 * @method \Bitrix\Sale\TradingPlatform\EO_MapEntity_Collection wakeUpCollection($rows)
	 */
	class EO_MapEntity_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Sale\TradingPlatform\OrderTable:sale\lib\tradingplatform\order.php */
namespace Bitrix\Sale\TradingPlatform {
	/**
	 * EO_Order
	 * @see \Bitrix\Sale\TradingPlatform\OrderTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getId()
	 * @method \Bitrix\Sale\TradingPlatform\EO_Order setId(\int|\Bitrix\Main\DB\SqlExpression $id)
	 * @method bool hasId()
	 * @method bool isIdFilled()
	 * @method bool isIdChanged()
	 * @method \int getOrderId()
	 * @method \Bitrix\Sale\TradingPlatform\EO_Order setOrderId(\int|\Bitrix\Main\DB\SqlExpression $orderId)
	 * @method bool hasOrderId()
	 * @method bool isOrderIdFilled()
	 * @method bool isOrderIdChanged()
	 * @method \int remindActualOrderId()
	 * @method \int requireOrderId()
	 * @method \Bitrix\Sale\TradingPlatform\EO_Order resetOrderId()
	 * @method \Bitrix\Sale\TradingPlatform\EO_Order unsetOrderId()
	 * @method \int fillOrderId()
	 * @method \Bitrix\Sale\Internals\EO_Order getOrder()
	 * @method \Bitrix\Sale\Internals\EO_Order remindActualOrder()
	 * @method \Bitrix\Sale\Internals\EO_Order requireOrder()
	 * @method \Bitrix\Sale\TradingPlatform\EO_Order setOrder(\Bitrix\Sale\Internals\EO_Order $object)
	 * @method \Bitrix\Sale\TradingPlatform\EO_Order resetOrder()
	 * @method \Bitrix\Sale\TradingPlatform\EO_Order unsetOrder()
	 * @method bool hasOrder()
	 * @method bool isOrderFilled()
	 * @method bool isOrderChanged()
	 * @method \Bitrix\Sale\Internals\EO_Order fillOrder()
	 * @method \string getExternalOrderId()
	 * @method \Bitrix\Sale\TradingPlatform\EO_Order setExternalOrderId(\string|\Bitrix\Main\DB\SqlExpression $externalOrderId)
	 * @method bool hasExternalOrderId()
	 * @method bool isExternalOrderIdFilled()
	 * @method bool isExternalOrderIdChanged()
	 * @method \string remindActualExternalOrderId()
	 * @method \string requireExternalOrderId()
	 * @method \Bitrix\Sale\TradingPlatform\EO_Order resetExternalOrderId()
	 * @method \Bitrix\Sale\TradingPlatform\EO_Order unsetExternalOrderId()
	 * @method \string fillExternalOrderId()
	 * @method \string getParams()
	 * @method \Bitrix\Sale\TradingPlatform\EO_Order setParams(\string|\Bitrix\Main\DB\SqlExpression $params)
	 * @method bool hasParams()
	 * @method bool isParamsFilled()
	 * @method bool isParamsChanged()
	 * @method \string remindActualParams()
	 * @method \string requireParams()
	 * @method \Bitrix\Sale\TradingPlatform\EO_Order resetParams()
	 * @method \Bitrix\Sale\TradingPlatform\EO_Order unsetParams()
	 * @method \string fillParams()
	 * @method \int getTradingPlatformId()
	 * @method \Bitrix\Sale\TradingPlatform\EO_Order setTradingPlatformId(\int|\Bitrix\Main\DB\SqlExpression $tradingPlatformId)
	 * @method bool hasTradingPlatformId()
	 * @method bool isTradingPlatformIdFilled()
	 * @method bool isTradingPlatformIdChanged()
	 * @method \int remindActualTradingPlatformId()
	 * @method \int requireTradingPlatformId()
	 * @method \Bitrix\Sale\TradingPlatform\EO_Order resetTradingPlatformId()
	 * @method \Bitrix\Sale\TradingPlatform\EO_Order unsetTradingPlatformId()
	 * @method \int fillTradingPlatformId()
	 * @method \Bitrix\Sale\EO_TradingPlatform getTradingPlatform()
	 * @method \Bitrix\Sale\EO_TradingPlatform remindActualTradingPlatform()
	 * @method \Bitrix\Sale\EO_TradingPlatform requireTradingPlatform()
	 * @method \Bitrix\Sale\TradingPlatform\EO_Order setTradingPlatform(\Bitrix\Sale\EO_TradingPlatform $object)
	 * @method \Bitrix\Sale\TradingPlatform\EO_Order resetTradingPlatform()
	 * @method \Bitrix\Sale\TradingPlatform\EO_Order unsetTradingPlatform()
	 * @method bool hasTradingPlatform()
	 * @method bool isTradingPlatformFilled()
	 * @method bool isTradingPlatformChanged()
	 * @method \Bitrix\Sale\EO_TradingPlatform fillTradingPlatform()
	 * @method \string getXmlId()
	 * @method \Bitrix\Sale\TradingPlatform\EO_Order setXmlId(\string|\Bitrix\Main\DB\SqlExpression $xmlId)
	 * @method bool hasXmlId()
	 * @method bool isXmlIdFilled()
	 * @method bool isXmlIdChanged()
	 * @method \string remindActualXmlId()
	 * @method \string requireXmlId()
	 * @method \Bitrix\Sale\TradingPlatform\EO_Order resetXmlId()
	 * @method \Bitrix\Sale\TradingPlatform\EO_Order unsetXmlId()
	 * @method \string fillXmlId()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Sale\TradingPlatform\EO_Order set($fieldName, $value)
	 * @method \Bitrix\Sale\TradingPlatform\EO_Order reset($fieldName)
	 * @method \Bitrix\Sale\TradingPlatform\EO_Order unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Sale\TradingPlatform\EO_Order wakeUp($data)
	 */
	class EO_Order {
		/* @var \Bitrix\Sale\TradingPlatform\OrderTable */
		static public $dataClass = '\Bitrix\Sale\TradingPlatform\OrderTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Sale\TradingPlatform {
	/**
	 * EO_Order_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getIdList()
	 * @method \int[] getOrderIdList()
	 * @method \int[] fillOrderId()
	 * @method \Bitrix\Sale\Internals\EO_Order[] getOrderList()
	 * @method \Bitrix\Sale\TradingPlatform\EO_Order_Collection getOrderCollection()
	 * @method \Bitrix\Sale\Internals\EO_Order_Collection fillOrder()
	 * @method \string[] getExternalOrderIdList()
	 * @method \string[] fillExternalOrderId()
	 * @method \string[] getParamsList()
	 * @method \string[] fillParams()
	 * @method \int[] getTradingPlatformIdList()
	 * @method \int[] fillTradingPlatformId()
	 * @method \Bitrix\Sale\EO_TradingPlatform[] getTradingPlatformList()
	 * @method \Bitrix\Sale\TradingPlatform\EO_Order_Collection getTradingPlatformCollection()
	 * @method \Bitrix\Sale\EO_TradingPlatform_Collection fillTradingPlatform()
	 * @method \string[] getXmlIdList()
	 * @method \string[] fillXmlId()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Sale\TradingPlatform\EO_Order $object)
	 * @method bool has(\Bitrix\Sale\TradingPlatform\EO_Order $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Sale\TradingPlatform\EO_Order getByPrimary($primary)
	 * @method \Bitrix\Sale\TradingPlatform\EO_Order[] getAll()
	 * @method bool remove(\Bitrix\Sale\TradingPlatform\EO_Order $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Sale\TradingPlatform\EO_Order_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Sale\TradingPlatform\EO_Order current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 * @method EO_Order_Collection merge(?EO_Order_Collection $collection)
	 * @method bool isEmpty()
	 */
	class EO_Order_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Sale\TradingPlatform\OrderTable */
		static public $dataClass = '\Bitrix\Sale\TradingPlatform\OrderTable';
	}
}
namespace Bitrix\Sale\TradingPlatform {
	/**
	 * Common methods:
	 * ---------------
	 *
	 * @method EO_Order_Result exec()
	 * @method \Bitrix\Sale\TradingPlatform\EO_Order fetchObject()
	 * @method \Bitrix\Sale\TradingPlatform\EO_Order_Collection fetchCollection()
	 *
	 * Custom methods:
	 * ---------------
	 *
	 */
	class EO_Order_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Sale\TradingPlatform\EO_Order fetchObject()
	 * @method \Bitrix\Sale\TradingPlatform\EO_Order_Collection fetchCollection()
	 */
	class EO_Order_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Sale\TradingPlatform\EO_Order createObject($setDefaultValues = true)
	 * @method \Bitrix\Sale\TradingPlatform\EO_Order_Collection createCollection()
	 * @method \Bitrix\Sale\TradingPlatform\EO_Order wakeUpObject($row)
	 * @method \Bitrix\Sale\TradingPlatform\EO_Order_Collection wakeUpCollection($rows)
	 */
	class EO_Order_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Sale\TradingPlatform\Vk\ExportProfileTable:sale\lib\tradingplatform\vk\exportprofile.php */
namespace Bitrix\Sale\TradingPlatform\Vk {
	/**
	 * EO_ExportProfile
	 * @see \Bitrix\Sale\TradingPlatform\Vk\ExportProfileTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getId()
	 * @method \Bitrix\Sale\TradingPlatform\Vk\EO_ExportProfile setId(\int|\Bitrix\Main\DB\SqlExpression $id)
	 * @method bool hasId()
	 * @method bool isIdFilled()
	 * @method bool isIdChanged()
	 * @method \string getDescription()
	 * @method \Bitrix\Sale\TradingPlatform\Vk\EO_ExportProfile setDescription(\string|\Bitrix\Main\DB\SqlExpression $description)
	 * @method bool hasDescription()
	 * @method bool isDescriptionFilled()
	 * @method bool isDescriptionChanged()
	 * @method \string remindActualDescription()
	 * @method \string requireDescription()
	 * @method \Bitrix\Sale\TradingPlatform\Vk\EO_ExportProfile resetDescription()
	 * @method \Bitrix\Sale\TradingPlatform\Vk\EO_ExportProfile unsetDescription()
	 * @method \string fillDescription()
	 * @method \int getPlatformId()
	 * @method \Bitrix\Sale\TradingPlatform\Vk\EO_ExportProfile setPlatformId(\int|\Bitrix\Main\DB\SqlExpression $platformId)
	 * @method bool hasPlatformId()
	 * @method bool isPlatformIdFilled()
	 * @method bool isPlatformIdChanged()
	 * @method \int remindActualPlatformId()
	 * @method \int requirePlatformId()
	 * @method \Bitrix\Sale\TradingPlatform\Vk\EO_ExportProfile resetPlatformId()
	 * @method \Bitrix\Sale\TradingPlatform\Vk\EO_ExportProfile unsetPlatformId()
	 * @method \int fillPlatformId()
	 * @method \string getVkSettings()
	 * @method \Bitrix\Sale\TradingPlatform\Vk\EO_ExportProfile setVkSettings(\string|\Bitrix\Main\DB\SqlExpression $vkSettings)
	 * @method bool hasVkSettings()
	 * @method bool isVkSettingsFilled()
	 * @method bool isVkSettingsChanged()
	 * @method \string remindActualVkSettings()
	 * @method \string requireVkSettings()
	 * @method \Bitrix\Sale\TradingPlatform\Vk\EO_ExportProfile resetVkSettings()
	 * @method \Bitrix\Sale\TradingPlatform\Vk\EO_ExportProfile unsetVkSettings()
	 * @method \string fillVkSettings()
	 * @method \string getExportSettings()
	 * @method \Bitrix\Sale\TradingPlatform\Vk\EO_ExportProfile setExportSettings(\string|\Bitrix\Main\DB\SqlExpression $exportSettings)
	 * @method bool hasExportSettings()
	 * @method bool isExportSettingsFilled()
	 * @method bool isExportSettingsChanged()
	 * @method \string remindActualExportSettings()
	 * @method \string requireExportSettings()
	 * @method \Bitrix\Sale\TradingPlatform\Vk\EO_ExportProfile resetExportSettings()
	 * @method \Bitrix\Sale\TradingPlatform\Vk\EO_ExportProfile unsetExportSettings()
	 * @method \string fillExportSettings()
	 * @method \string getOauth()
	 * @method \Bitrix\Sale\TradingPlatform\Vk\EO_ExportProfile setOauth(\string|\Bitrix\Main\DB\SqlExpression $oauth)
	 * @method bool hasOauth()
	 * @method bool isOauthFilled()
	 * @method bool isOauthChanged()
	 * @method \string remindActualOauth()
	 * @method \string requireOauth()
	 * @method \Bitrix\Sale\TradingPlatform\Vk\EO_ExportProfile resetOauth()
	 * @method \Bitrix\Sale\TradingPlatform\Vk\EO_ExportProfile unsetOauth()
	 * @method \string fillOauth()
	 * @method \string getProcess()
	 * @method \Bitrix\Sale\TradingPlatform\Vk\EO_ExportProfile setProcess(\string|\Bitrix\Main\DB\SqlExpression $process)
	 * @method bool hasProcess()
	 * @method bool isProcessFilled()
	 * @method bool isProcessChanged()
	 * @method \string remindActualProcess()
	 * @method \string requireProcess()
	 * @method \Bitrix\Sale\TradingPlatform\Vk\EO_ExportProfile resetProcess()
	 * @method \Bitrix\Sale\TradingPlatform\Vk\EO_ExportProfile unsetProcess()
	 * @method \string fillProcess()
	 * @method \string getJournal()
	 * @method \Bitrix\Sale\TradingPlatform\Vk\EO_ExportProfile setJournal(\string|\Bitrix\Main\DB\SqlExpression $journal)
	 * @method bool hasJournal()
	 * @method bool isJournalFilled()
	 * @method bool isJournalChanged()
	 * @method \string remindActualJournal()
	 * @method \string requireJournal()
	 * @method \Bitrix\Sale\TradingPlatform\Vk\EO_ExportProfile resetJournal()
	 * @method \Bitrix\Sale\TradingPlatform\Vk\EO_ExportProfile unsetJournal()
	 * @method \string fillJournal()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Sale\TradingPlatform\Vk\EO_ExportProfile set($fieldName, $value)
	 * @method \Bitrix\Sale\TradingPlatform\Vk\EO_ExportProfile reset($fieldName)
	 * @method \Bitrix\Sale\TradingPlatform\Vk\EO_ExportProfile unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Sale\TradingPlatform\Vk\EO_ExportProfile wakeUp($data)
	 */
	class EO_ExportProfile {
		/* @var \Bitrix\Sale\TradingPlatform\Vk\ExportProfileTable */
		static public $dataClass = '\Bitrix\Sale\TradingPlatform\Vk\ExportProfileTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Sale\TradingPlatform\Vk {
	/**
	 * EO_ExportProfile_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getIdList()
	 * @method \string[] getDescriptionList()
	 * @method \string[] fillDescription()
	 * @method \int[] getPlatformIdList()
	 * @method \int[] fillPlatformId()
	 * @method \string[] getVkSettingsList()
	 * @method \string[] fillVkSettings()
	 * @method \string[] getExportSettingsList()
	 * @method \string[] fillExportSettings()
	 * @method \string[] getOauthList()
	 * @method \string[] fillOauth()
	 * @method \string[] getProcessList()
	 * @method \string[] fillProcess()
	 * @method \string[] getJournalList()
	 * @method \string[] fillJournal()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Sale\TradingPlatform\Vk\EO_ExportProfile $object)
	 * @method bool has(\Bitrix\Sale\TradingPlatform\Vk\EO_ExportProfile $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Sale\TradingPlatform\Vk\EO_ExportProfile getByPrimary($primary)
	 * @method \Bitrix\Sale\TradingPlatform\Vk\EO_ExportProfile[] getAll()
	 * @method bool remove(\Bitrix\Sale\TradingPlatform\Vk\EO_ExportProfile $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Sale\TradingPlatform\Vk\EO_ExportProfile_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Sale\TradingPlatform\Vk\EO_ExportProfile current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 * @method EO_ExportProfile_Collection merge(?EO_ExportProfile_Collection $collection)
	 * @method bool isEmpty()
	 */
	class EO_ExportProfile_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Sale\TradingPlatform\Vk\ExportProfileTable */
		static public $dataClass = '\Bitrix\Sale\TradingPlatform\Vk\ExportProfileTable';
	}
}
namespace Bitrix\Sale\TradingPlatform\Vk {
	/**
	 * Common methods:
	 * ---------------
	 *
	 * @method EO_ExportProfile_Result exec()
	 * @method \Bitrix\Sale\TradingPlatform\Vk\EO_ExportProfile fetchObject()
	 * @method \Bitrix\Sale\TradingPlatform\Vk\EO_ExportProfile_Collection fetchCollection()
	 *
	 * Custom methods:
	 * ---------------
	 *
	 */
	class EO_ExportProfile_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Sale\TradingPlatform\Vk\EO_ExportProfile fetchObject()
	 * @method \Bitrix\Sale\TradingPlatform\Vk\EO_ExportProfile_Collection fetchCollection()
	 */
	class EO_ExportProfile_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Sale\TradingPlatform\Vk\EO_ExportProfile createObject($setDefaultValues = true)
	 * @method \Bitrix\Sale\TradingPlatform\Vk\EO_ExportProfile_Collection createCollection()
	 * @method \Bitrix\Sale\TradingPlatform\Vk\EO_ExportProfile wakeUpObject($row)
	 * @method \Bitrix\Sale\TradingPlatform\Vk\EO_ExportProfile_Collection wakeUpCollection($rows)
	 */
	class EO_ExportProfile_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Sale\TradingPlatform\Vk\LogTable:sale\lib\tradingplatform\vk\log.php */
namespace Bitrix\Sale\TradingPlatform\Vk {
	/**
	 * EO_Log
	 * @see \Bitrix\Sale\TradingPlatform\Vk\LogTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getId()
	 * @method \Bitrix\Sale\TradingPlatform\Vk\EO_Log setId(\int|\Bitrix\Main\DB\SqlExpression $id)
	 * @method bool hasId()
	 * @method bool isIdFilled()
	 * @method bool isIdChanged()
	 * @method \int getExportId()
	 * @method \Bitrix\Sale\TradingPlatform\Vk\EO_Log setExportId(\int|\Bitrix\Main\DB\SqlExpression $exportId)
	 * @method bool hasExportId()
	 * @method bool isExportIdFilled()
	 * @method bool isExportIdChanged()
	 * @method \int remindActualExportId()
	 * @method \int requireExportId()
	 * @method \Bitrix\Sale\TradingPlatform\Vk\EO_Log resetExportId()
	 * @method \Bitrix\Sale\TradingPlatform\Vk\EO_Log unsetExportId()
	 * @method \int fillExportId()
	 * @method \string getErrorCode()
	 * @method \Bitrix\Sale\TradingPlatform\Vk\EO_Log setErrorCode(\string|\Bitrix\Main\DB\SqlExpression $errorCode)
	 * @method bool hasErrorCode()
	 * @method bool isErrorCodeFilled()
	 * @method bool isErrorCodeChanged()
	 * @method \string remindActualErrorCode()
	 * @method \string requireErrorCode()
	 * @method \Bitrix\Sale\TradingPlatform\Vk\EO_Log resetErrorCode()
	 * @method \Bitrix\Sale\TradingPlatform\Vk\EO_Log unsetErrorCode()
	 * @method \string fillErrorCode()
	 * @method \string getItemId()
	 * @method \Bitrix\Sale\TradingPlatform\Vk\EO_Log setItemId(\string|\Bitrix\Main\DB\SqlExpression $itemId)
	 * @method bool hasItemId()
	 * @method bool isItemIdFilled()
	 * @method bool isItemIdChanged()
	 * @method \string remindActualItemId()
	 * @method \string requireItemId()
	 * @method \Bitrix\Sale\TradingPlatform\Vk\EO_Log resetItemId()
	 * @method \Bitrix\Sale\TradingPlatform\Vk\EO_Log unsetItemId()
	 * @method \string fillItemId()
	 * @method \Bitrix\Main\Type\DateTime getTime()
	 * @method \Bitrix\Sale\TradingPlatform\Vk\EO_Log setTime(\Bitrix\Main\Type\DateTime|\Bitrix\Main\DB\SqlExpression $time)
	 * @method bool hasTime()
	 * @method bool isTimeFilled()
	 * @method bool isTimeChanged()
	 * @method \Bitrix\Main\Type\DateTime remindActualTime()
	 * @method \Bitrix\Main\Type\DateTime requireTime()
	 * @method \Bitrix\Sale\TradingPlatform\Vk\EO_Log resetTime()
	 * @method \Bitrix\Sale\TradingPlatform\Vk\EO_Log unsetTime()
	 * @method \Bitrix\Main\Type\DateTime fillTime()
	 * @method \string getErrorParams()
	 * @method \Bitrix\Sale\TradingPlatform\Vk\EO_Log setErrorParams(\string|\Bitrix\Main\DB\SqlExpression $errorParams)
	 * @method bool hasErrorParams()
	 * @method bool isErrorParamsFilled()
	 * @method bool isErrorParamsChanged()
	 * @method \string remindActualErrorParams()
	 * @method \string requireErrorParams()
	 * @method \Bitrix\Sale\TradingPlatform\Vk\EO_Log resetErrorParams()
	 * @method \Bitrix\Sale\TradingPlatform\Vk\EO_Log unsetErrorParams()
	 * @method \string fillErrorParams()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Sale\TradingPlatform\Vk\EO_Log set($fieldName, $value)
	 * @method \Bitrix\Sale\TradingPlatform\Vk\EO_Log reset($fieldName)
	 * @method \Bitrix\Sale\TradingPlatform\Vk\EO_Log unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Sale\TradingPlatform\Vk\EO_Log wakeUp($data)
	 */
	class EO_Log {
		/* @var \Bitrix\Sale\TradingPlatform\Vk\LogTable */
		static public $dataClass = '\Bitrix\Sale\TradingPlatform\Vk\LogTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Sale\TradingPlatform\Vk {
	/**
	 * EO_Log_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getIdList()
	 * @method \int[] getExportIdList()
	 * @method \int[] fillExportId()
	 * @method \string[] getErrorCodeList()
	 * @method \string[] fillErrorCode()
	 * @method \string[] getItemIdList()
	 * @method \string[] fillItemId()
	 * @method \Bitrix\Main\Type\DateTime[] getTimeList()
	 * @method \Bitrix\Main\Type\DateTime[] fillTime()
	 * @method \string[] getErrorParamsList()
	 * @method \string[] fillErrorParams()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Sale\TradingPlatform\Vk\EO_Log $object)
	 * @method bool has(\Bitrix\Sale\TradingPlatform\Vk\EO_Log $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Sale\TradingPlatform\Vk\EO_Log getByPrimary($primary)
	 * @method \Bitrix\Sale\TradingPlatform\Vk\EO_Log[] getAll()
	 * @method bool remove(\Bitrix\Sale\TradingPlatform\Vk\EO_Log $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Sale\TradingPlatform\Vk\EO_Log_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Sale\TradingPlatform\Vk\EO_Log current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 * @method EO_Log_Collection merge(?EO_Log_Collection $collection)
	 * @method bool isEmpty()
	 */
	class EO_Log_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Sale\TradingPlatform\Vk\LogTable */
		static public $dataClass = '\Bitrix\Sale\TradingPlatform\Vk\LogTable';
	}
}
namespace Bitrix\Sale\TradingPlatform\Vk {
	/**
	 * Common methods:
	 * ---------------
	 *
	 * @method EO_Log_Result exec()
	 * @method \Bitrix\Sale\TradingPlatform\Vk\EO_Log fetchObject()
	 * @method \Bitrix\Sale\TradingPlatform\Vk\EO_Log_Collection fetchCollection()
	 *
	 * Custom methods:
	 * ---------------
	 *
	 */
	class EO_Log_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Sale\TradingPlatform\Vk\EO_Log fetchObject()
	 * @method \Bitrix\Sale\TradingPlatform\Vk\EO_Log_Collection fetchCollection()
	 */
	class EO_Log_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Sale\TradingPlatform\Vk\EO_Log createObject($setDefaultValues = true)
	 * @method \Bitrix\Sale\TradingPlatform\Vk\EO_Log_Collection createCollection()
	 * @method \Bitrix\Sale\TradingPlatform\Vk\EO_Log wakeUpObject($row)
	 * @method \Bitrix\Sale\TradingPlatform\Vk\EO_Log_Collection wakeUpCollection($rows)
	 */
	class EO_Log_Entity extends \Bitrix\Main\ORM\Entity {}
}