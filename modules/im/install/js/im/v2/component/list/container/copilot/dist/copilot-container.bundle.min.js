this.BX=this.BX||{};this.BX.Messenger=this.BX.Messenger||{};this.BX.Messenger.v2=this.BX.Messenger.v2||{};this.BX.Messenger.v2.Component=this.BX.Messenger.v2.Component||{};(function(t,e,o,i,n,s,l,r){"use strict";const a={name:"RoleItem",props:{role:{type:Object,required:true}},data(){return{imageLoadError:false}},computed:{roleItem(){return this.role},roleAvatar(){return this.roleItem.avatar.medium},roleName(){return this.roleItem.name},roleSDescription(){return this.roleItem.desc},defaultRole(){return this.$store.getters["copilot/roles/getDefault"]},defaultRoleAvatarUrl(){return this.defaultRole.avatar.medium}},methods:{onImageLoadError(){this.imageLoadError=true}},template:`\n\t\t<div class="bx-im-role-item__container">\n\t\t\t<div class="bx-im-role-item__avatar">\n\t\t\t\t<img v-if="!imageLoadError" :src="roleAvatar" :alt="roleName" @error="onImageLoadError">\n\t\t\t\t<img v-else :src="defaultRoleAvatarUrl" :alt="roleName">\n\t\t\t</div>\n\t\t\t<div class="bx-im-role-item__info">\n\t\t\t\t<div class="bx-im-role-item__name" :title="roleName">{{ roleName }}</div>\n\t\t\t\t<div class="bx-im-role-item__description" :title="roleSDescription">{{ roleSDescription }}</div>\n\t\t\t</div>\n\t\t</div>\n\t`};const c={name:"RoleSelectorMiniContent",components:{RoleItem:a},emits:["selectedRole","openMainSelector"],computed:{rolesToShow(){return this.$store.getters["copilot/getRecommendedRoles"]()}},methods:{openMainSelector(){this.$emit("openMainSelector")},loc(t){return this.$Bitrix.Loc.getMessage(t)},onRoleClick(t){this.$emit("selectedRole",t.code)}},template:`\n\t\t<div class="bx-im-role-selector-mini-content__container">\n\t\t\t<span class="bx-im-role-selector-mini-content__title">\n\t\t\t\t{{ loc('IM_LIST_CONTAINER_COPILOT_ROLES_LIST') }}\n\t\t\t</span>\n\t\t\t<div class="bx-im-role-selector-mini-content__items">\n\t\t\t\t<RoleItem \n\t\t\t\t\tv-for="role in rolesToShow" \n\t\t\t\t\t:role="role"\n\t\t\t\t\t@click="onRoleClick(role)"\n\t\t\t\t/>\n\t\t\t\t<div class="bx-im-role-selector-mini-content__main-selector" @click="openMainSelector">\n\t\t\t\t\t<div class="bx-im-role-selector-mini-content__main-selector-info">\n\t\t\t\t\t\t<div class="bx-im-role-selector-mini-content__main-selector-avatar"></div>\n\t\t\t\t\t\t<div class="bx-im-role-selector-mini-content__main-selector-name">\n\t\t\t\t\t\t\t{{ loc('IM_LIST_CONTAINER_COPILOT_SELECT_ROLE_FROM_LIST') }}\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div class="bx-im-role-selector-mini-content__main-selector-arrow"></div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t`};const m="im-role-selector-mini-popup";const d={name:"RoleSelectorMini",components:{MessengerPopup:r.MessengerPopup,RoleSelectorMiniContent:c},props:{bindElement:{type:Object,required:true}},emits:["close","selectedRole","openMainSelector"],computed:{POPUP_ID:()=>m,config(){return{width:294,closeIcon:false,bindElement:this.bindElement,offsetTop:0,offsetLeft:0,padding:0,contentPadding:0,contentBackground:"#fff"}}},template:`\n\t\t<MessengerPopup\n\t\t\tv-slot="{enableAutoHide, disableAutoHide}"\n\t\t\t:config="config"\n\t\t\t@close="$emit('close')"\n\t\t\t:id="POPUP_ID"\n\t\t>\n\t\t\t<RoleSelectorMiniContent\n\t\t\t\t@selectedRole="$emit('selectedRole', $event)"\n\t\t\t\t@openMainSelector="$emit('openMainSelector')"\n\t\t\t\t@close="$emit('close')"\n\t\t\t/>\n\t\t</MessengerPopup>\n\t`};const h={name:"CopilotListContainer",components:{CopilotList:o.CopilotList,RoleSelectorMini:d,CopilotRolesDialog:r.CopilotRolesDialog},emits:["selectEntity"],data(){return{showRoleSelector:false,showRolesDialog:false,isCreatingChat:false}},created(){s.Logger.warn("List: Copilot container created")},deactivated(){this.showRolesDialog=false;this.showRoleSelector=false},methods:{async onCreateChatClick(){n.Analytics.getInstance().onStartCreateNewChat(i.ChatType.copilot);this.showRoleSelector=true},onChatClick(t){this.$emit("selectEntity",{layoutName:i.Layout.copilot.name,entityId:t})},showCreateChatError(){BX.UI.Notification.Center.notify({content:this.loc("IM_LIST_CONTAINER_COPILOT_CREATE_CHAT_ERROR")})},getCopilotService(){if(!this.copilotService){this.copilotService=new l.CopilotService}return this.copilotService},async createChat(t){this.showRoleSelector=false;this.showRolesDialog=false;this.isCreatingChat=true;const o=await this.getCopilotService().createChat({roleCode:t}).catch((()=>{this.isCreatingChat=false;this.showCreateChatError()}));this.isCreatingChat=false;void e.Messenger.openCopilot(o)},loc(t){return this.$Bitrix.Loc.getMessage(t)},onCopilotDialogSelectRole(t){void this.createChat(t.code)},onOpenMainSelector(){this.showRoleSelector=false;this.showRolesDialog=true}},template:`\n\t\t<div class="bx-im-list-container-copilot__scope bx-im-list-container-copilot__container">\n\t\t\t<div class="bx-im-list-container-copilot__header_container">\n\t\t\t\t<div class="bx-im-list-container-copilot__header_title">CoPilot</div>\n\t\t\t\t<div\n\t\t\t\t\tclass="bx-im-list-container-copilot__create-chat"\n\t\t\t\t\t:class="{'--loading': isCreatingChat}"\n\t\t\t\t\tref="createChatButton"\n\t\t\t\t\t@click="onCreateChatClick"\n\t\t\t\t>\n\t\t\t\t\t<div class="bx-im-list-container-copilot__create-chat_icon"></div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<div class="bx-im-list-container-copilot__elements_container">\n\t\t\t\t<div class="bx-im-list-container-copilot__elements">\n\t\t\t\t\t<CopilotList @chatClick="onChatClick" />\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<RoleSelectorMini\n\t\t\t\tv-if="showRoleSelector"\n\t\t\t\t:bindElement="$refs.createChatButton"\n\t\t\t\t@close="showRoleSelector = false"\n\t\t\t\t@selectedRole="createChat"\n\t\t\t\t@openMainSelector="onOpenMainSelector"\n\t\t\t/>\n\t\t\t<CopilotRolesDialog\n\t\t\t\tv-if="showRolesDialog"\n\t\t\t\t@selectRole="onCopilotDialogSelectRole"\n\t\t\t\t@close="showRolesDialog = false"\n\t\t\t/>\n\t\t</div>\n\t`};t.CopilotListContainer=h})(this.BX.Messenger.v2.Component.List=this.BX.Messenger.v2.Component.List||{},BX.Messenger.v2.Lib,BX.Messenger.v2.Component.List,BX.Messenger.v2.Const,BX.Messenger.v2.Lib,BX.Messenger.v2.Lib,BX.Messenger.v2.Service,BX.Messenger.v2.Component.Elements);
//# sourceMappingURL=copilot-container.bundle.map.js