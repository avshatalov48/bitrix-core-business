this.BX=this.BX||{};this.BX.Messenger=this.BX.Messenger||{};this.BX.Messenger.v2=this.BX.Messenger.v2||{};this.BX.Messenger.v2.Component=this.BX.Messenger.v2.Component||{};(function(t,e,s,i,r,a,n,o,l,c,d,m,u,h,g,p,v,I,b,_,S){"use strict";const y={name:"MessageStatus",props:{item:{type:Object,required:true},isOverlay:{type:Boolean,default:false}},computed:{message(){return this.item},formattedDate(){return e.DateFormatter.formatByCode(this.message.date,e.DateCode.shortTimeFormat)},isSelfMessage(){return this.message.authorId===l.Core.getUserId()},messageStatus(){if(this.message.error){return h.OwnMessageStatus.error}if(this.message.sending){return h.OwnMessageStatus.sending}if(this.message.viewedByOthers){return h.OwnMessageStatus.viewed}return h.OwnMessageStatus.sent}},methods:{loc(t){return this.$Bitrix.Loc.getMessage(t)}},template:`\n\t\t<div class="bx-im-message-status__container bx-im-message-status__scope" :class="{'--overlay': isOverlay}">\n\t\t\t<div v-if="message.isEdited && !message.isDeleted" class="bx-im-message-status__edit-mark">\n\t\t\t\t{{ loc('IM_MESSENGER_MESSAGE_EDITED') }}\n\t\t\t</div>\n\t\t\t<div class="bx-im-message-status__date" :class="{'--overlay': isOverlay}">\n\t\t\t\t{{ formattedDate }}\n\t\t\t</div>\n\t\t\t<div v-if="isSelfMessage" :class="'--' + messageStatus" class="bx-im-message-status__icon"></div>\n\t\t</div>\n\t`};const M={name:"MessageAttach",components:{Attach:g.Attach},props:{item:{type:Object,required:true},dialogId:{type:String,required:true}},computed:{message(){return this.item},dialog(){return this.$store.getters["chats/get"](this.dialogId,true)},user(){return this.$store.getters["users/get"](this.dialogId,true)},dialogColor(){return this.dialog.type===h.ChatType.user?this.user.color:this.dialog.color}},created(){s.provide("message",this.message)},template:`\n\t\t<div v-for="config in message.attach" :key="config.id" class="bx-im-message-attach__container">\n\t\t\t<Attach :baseColor="dialogColor" :config="config" />\n\t\t</div>\n\t`};const C={name:"MessageKeyboard",components:{Keyboard:g.Keyboard},props:{item:{type:Object,required:true},dialogId:{type:String,required:true}},computed:{message(){return this.item},dialog(){return this.$store.getters["chats/get"](this.dialogId,true)},user(){return this.$store.getters["users/get"](this.dialogId,true)}},template:`\n\t\t<div class="bx-im-message-keyboard__container">\n\t\t\t<Keyboard :buttons="message.keyboard" :dialogId="dialogId" :messageId="message.id" />\n\t\t</div>\n\t`};const f={components:{ChatAvatar:g.ChatAvatar},props:{userId:{type:Number,required:true},contextDialogId:{type:String,required:true}},computed:{AvatarSize:()=>g.AvatarSize,user(){return this.$store.getters["users/get"](this.userId)},avatarStyle(){if(!this.user.avatar){return{}}return{backgroundImage:`url('${this.user.avatar}')`}}},template:`\n\t\t<div class="bx-im-reaction-list__user_avatar">\n\t\t\t<ChatAvatar \n\t\t\t\t:avatarDialogId="userId" \n\t\t\t\t:contextDialogId="contextDialogId" \n\t\t\t\t:size="AvatarSize.XS" \n\t\t\t\t:withAvatarLetters="false"\n\t\t\t\t:withTooltip="false"\n\t\t\t/>\n\t\t</div>\n\t`};var w=babelHelpers.classPrivateFieldLooseKey("store");var T=babelHelpers.classPrivateFieldLooseKey("restClient");var x=babelHelpers.classPrivateFieldLooseKey("userManager");class E{constructor(){Object.defineProperty(this,w,{writable:true,value:void 0});Object.defineProperty(this,T,{writable:true,value:void 0});Object.defineProperty(this,x,{writable:true,value:void 0});babelHelpers.classPrivateFieldLooseBase(this,w)[w]=l.Core.getStore();babelHelpers.classPrivateFieldLooseBase(this,T)[T]=l.Core.getRestClient();babelHelpers.classPrivateFieldLooseBase(this,x)[x]=new r.UserManager}loadReactionUsers(t,e){let s=[];a.Logger.warn("Reactions: UserService: loadReactionUsers",t,e);const i={messageId:t,filter:{reaction:e}};return babelHelpers.classPrivateFieldLooseBase(this,T)[T].callMethod(h.RestMethod.imV2ChatMessageReactionTail,i).then((t=>{s=t.data().users;return babelHelpers.classPrivateFieldLooseBase(this,x)[x].setUsersToModel(Object.values(s))})).then((()=>s.map((t=>t.id)))).catch((t=>{console.error("Reactions: UserService: loadReactionUsers error",t);throw new Error(t)}))}}const R={components:{UserListPopup:g.UserListPopup},props:{messageId:{type:[String,Number],required:true},reaction:{type:String,required:true},show:{type:Boolean,required:true},bindElement:{type:Object,required:true},contextDialogId:{type:String,required:true}},emits:["close"],data(){return{showPopup:false,loadingAdditionalUsers:false,additionalUsers:[]}},watch:{show(t,e){if(!e&&t){this.showPopup=true;this.loadUsers()}}},methods:{loadUsers(){this.loadingAdditionalUsers=true;this.getUserService().loadReactionUsers(this.messageId,this.reaction).then((t=>{this.additionalUsers=t;this.loadingAdditionalUsers=false})).catch((()=>{this.loadingAdditionalUsers=false}))},onPopupClose(){this.showPopup=false;this.$emit("close")},prepareAdditionalUsers(t){const e=this.dialog.lastMessageViews.firstViewer.userId;return t.filter((t=>t!==l.Core.getUserId()&&t!==e))},getUserService(){if(!this.userService){this.userService=new E}return this.userService}},template:`\n\t\t<UserListPopup\n\t\t\tid="bx-im-message-reaction-users"\n\t\t\t:showPopup="showPopup"\n\t\t\t:loading="loadingAdditionalUsers"\n\t\t\t:userIds="additionalUsers"\n\t\t\t:contextDialogId="contextDialogId"\n\t\t\t:bindElement="bindElement || {}"\n\t\t\t:withAngle="false"\n\t\t\t:offsetLeft="-112"\n\t\t\t:forceTop="true"\n\t\t\t@close="onPopupClose"\n\t\t/>\n\t`};const A=5;const B=500;const U={components:{ReactionUser:f,AdditionalUsers:R},props:{messageId:{type:[String,Number],required:true},type:{type:String,required:true},counter:{type:Number,required:true},users:{type:Array,required:true},selected:{type:Boolean,required:true},animate:{type:Boolean,required:true},showAvatars:{type:Boolean,required:false,default:true},contextDialogId:{type:String,required:true}},emits:["click"],data(){return{showAdditionalUsers:false}},computed:{showUsers(){if(!this.showAvatars){return false}const t=this.counter<=A;const e=this.counter===this.users.length;return t&&e},preparedUsers(){return[...this.users].sort(((t,e)=>t-e)).reverse()},reactionClass(){return n.reactionCssClass[this.type]}},mounted(){if(this.animate){this.playAnimation()}},methods:{playAnimation(){this.animation=i.Lottie.loadAnimation({animationData:n.ReactionsSelect.getLottieAnimation(this.type),container:this.$refs.reactionIcon,loop:false,autoplay:false,renderer:"svg",rendererSettings:{viewBoxOnly:true}});b.Event.bind(this.animation,"complete",(()=>{this.animation.destroy()}));b.Event.bind(this.animation,"destroy",(()=>{this.animation=null}));this.animation.play()},startShowUsersTimer(){this.showUsersTimeout=setTimeout((()=>{this.showAdditionalUsers=true}),B)},clearShowUsersTimer(){clearTimeout(this.showUsersTimeout)},onClick(){this.clearShowUsersTimer();this.$emit("click",{animateItemFunction:this.playAnimation})}},template:`\n\t\t<div\n\t\t\t@click="onClick" \n\t\t\t@mouseenter="startShowUsersTimer"\n\t\t\t@mouseleave="clearShowUsersTimer"\n\t\t\tclass="bx-im-reaction-list__item"\n\t\t\t:class="{'--selected': selected}"\n\t\t>\n\t\t\t<div class="bx-im-reaction-list__item_icon" :class="reactionClass" ref="reactionIcon"></div>\n\t\t\t<div v-if="showUsers" class="bx-im-reaction-list__user_container" ref="users">\n\t\t\t\t<TransitionGroup name="bx-im-reaction-list__user_animation">\n\t\t\t\t\t<ReactionUser \n\t\t\t\t\t\tv-for="user in preparedUsers" \n\t\t\t\t\t\t:key="user" \n\t\t\t\t\t\t:userId="user"\n\t\t\t\t\t\t:contextDialogId="contextDialogId"\n\t\t\t\t\t/>\n\t\t\t\t</TransitionGroup>\n\t\t\t</div>\n\t\t\t<div v-else class="bx-im-reaction-list__item_counter" ref="counter">{{ counter }}</div>\n\t\t\t<AdditionalUsers\n\t\t\t\t:show="showAdditionalUsers"\n\t\t\t\t:bindElement="$refs['users'] || $refs['counter'] || {}"\n\t\t\t\t:messageId="messageId"\n\t\t\t\t:contextDialogId="contextDialogId"\n\t\t\t\t:reaction="type"\n\t\t\t\t@close="showAdditionalUsers = false"\n\t\t\t/>\n\t\t</div>\n\t`};var L=babelHelpers.classPrivateFieldLooseKey("store");var P=babelHelpers.classPrivateFieldLooseKey("restClient");class N{constructor(){Object.defineProperty(this,L,{writable:true,value:void 0});Object.defineProperty(this,P,{writable:true,value:void 0});babelHelpers.classPrivateFieldLooseBase(this,L)[L]=l.Core.getStore();babelHelpers.classPrivateFieldLooseBase(this,P)[P]=l.Core.getRestClient()}setReaction(t,e){a.Logger.warn("ReactionService: setReaction",t,e);babelHelpers.classPrivateFieldLooseBase(this,L)[L].dispatch("messages/reactions/setReaction",{messageId:t,reaction:e,userId:l.Core.getUserId()});babelHelpers.classPrivateFieldLooseBase(this,P)[P].callMethod(h.RestMethod.imV2ChatMessageReactionAdd,{messageId:t,reaction:e}).catch((t=>{console.error("ReactionService: error setting reaction",t)}))}removeReaction(t,e){a.Logger.warn("ReactionService: removeReaction",t,e);babelHelpers.classPrivateFieldLooseBase(this,L)[L].dispatch("messages/reactions/removeReaction",{messageId:t,reaction:e,userId:l.Core.getUserId()});babelHelpers.classPrivateFieldLooseBase(this,P)[P].callMethod(h.RestMethod.imV2ChatMessageReactionDelete,{messageId:t,reaction:e}).catch((t=>{console.error("ReactionService: error removing reaction",t)}))}}const F={name:"ReactionList",components:{ReactionItem:U},props:{messageId:{type:[String,Number],required:true},contextDialogId:{type:String,required:true}},data(){return{mounted:false}},computed:{Reaction:()=>n.reactionType,message(){return this.$store.getters["messages/getById"](this.messageId)},dialog(){return this.$store.getters["chats/getByChatId"](this.message.chatId)},reactionsData(){return this.$store.getters["messages/reactions/getByMessageId"](this.messageId)},reactionCounters(){var t,e;return(t=(e=this.reactionsData)==null?void 0:e.reactionCounters)!=null?t:{}},ownReactions(){var t,e;return(t=(e=this.reactionsData)==null?void 0:e.ownReactions)!=null?t:new Set},showReactionsContainer(){return Object.keys(this.reactionCounters).length>0},isChannel(){return m.ChannelManager.isChannel(this.dialog.dialogId)},showAvatars(){return!this.isChannel}},watch:{showReactionsContainer(t,e){if(!e&&t){u.EventEmitter.emit(h.EventType.dialog.scrollToBottom,{chatId:this.message.chatId,threshold:h.DialogScrollThreshold.nearTheBottom,animation:false})}}},mounted(){this.mounted=true},methods:{onReactionSelect(t,e){var s;const i=p.PermissionManager.getInstance();if(!i.canPerformActionByRole(h.ActionByRole.setReaction,this.dialog.dialogId)){return}const{animateItemFunction:r}=e;if((s=this.ownReactions)!=null&&s.has(t)){this.getReactionService().removeReaction(this.messageId,t);return}this.getReactionService().setReaction(this.messageId,t);r()},getReactionUsers(t){const e=this.reactionsData.reactionUsers[t];if(!e){return[]}return[...e]},getReactionService(){if(!this.reactionService){this.reactionService=new N}return this.reactionService}},template:`\n\t\t<div v-if="showReactionsContainer" class="bx-im-reaction-list__container bx-im-reaction-list__scope">\n\t\t\t<template v-for="reactionType in Reaction">\n\t\t\t\t<ReactionItem\n\t\t\t\t\tv-if="reactionCounters[reactionType] > 0"\n\t\t\t\t\t:key="reactionType + messageId"\n\t\t\t\t\t:messageId="messageId"\n\t\t\t\t\t:type="reactionType"\n\t\t\t\t\t:counter="reactionCounters[reactionType]"\n\t\t\t\t\t:users="getReactionUsers(reactionType)"\n\t\t\t\t\t:selected="ownReactions.has(reactionType)"\n\t\t\t\t\t:animate="mounted"\n\t\t\t\t\t:showAvatars="showAvatars"\n\t\t\t\t\t:contextDialogId="contextDialogId"\n\t\t\t\t\t@click="onReactionSelect(reactionType, $event)"\n\t\t\t\t/>\n\t\t\t</template>\n\t\t</div>\n\t`};const D=500;const O=800;const $={name:"ReactionSelector",props:{messageId:{type:[String,Number],required:true}},computed:{message(){return this.$store.getters["messages/getById"](this.messageId)},dialog(){return this.$store.getters["chats/getByChatId"](this.message.chatId)},reactionsData(){return this.$store.getters["messages/reactions/getByMessageId"](this.messageId)},ownReactionSet(){var t,e;return((t=this.reactionsData)==null?void 0:(e=t.ownReactions)==null?void 0:e.size)>0},isBot(){const t=this.$store.getters["users/get"](this.dialog.dialogId);return(t==null?void 0:t.type)===h.UserType.bot},hasError(){return this.message.error},canSetReactions(){return b.Type.isNumber(this.messageId)&&this.canSetReactionsByRole&&!this.isBot&&!this.hasError},canSetReactionsByRole(){const t=p.PermissionManager.getInstance();return t.canPerformActionByRole(h.ActionByRole.setReaction,this.dialog.dialogId)}},methods:{startShowTimer(){var t;this.clearHideTimer();if((t=this.selector)!=null&&t.isShown()){return}this.showTimeout=setTimeout((()=>{this.showSelector()}),D)},clearShowTimer(){clearTimeout(this.showTimeout);this.startHideTimer()},showSelector(){this.selector=new n.ReactionsSelect({name:"im-base-message-reaction-selector",position:this.$refs.selector});this.subscribeToSelectorEvents();this.selector.show()},subscribeToSelectorEvents(){this.selector.subscribe("select",(t=>{var e;const{reaction:s}=t.getData();this.getReactionService().setReaction(this.messageId,s);(e=this.selector)==null?void 0:e.hide()}));this.selector.subscribe("mouseleave",this.startHideTimer);this.selector.subscribe("mouseenter",(()=>{clearTimeout(this.hideTimeout)}));this.selector.subscribe("hide",(()=>{clearTimeout(this.hideTimeout);this.selector=null}))},startHideTimer(){this.hideTimeout=setTimeout((()=>{var t;(t=this.selector)==null?void 0:t.hide()}),O)},clearHideTimer(){clearTimeout(this.hideTimeout)},onIconClick(){this.clearShowTimer();if(this.ownReactionSet){const[t]=[...this.reactionsData.ownReactions];this.getReactionService().removeReaction(this.messageId,t);return}this.getReactionService().setReaction(this.messageId,n.reactionType.like)},getReactionService(){if(!this.reactionService){this.reactionService=new N}return this.reactionService}},template:`\n\t\t<div v-if="canSetReactions" class="bx-im-reaction-selector__container">\n\t\t\t<div\n\t\t\t\t@click="onIconClick"\n\t\t\t\t@mouseenter="startShowTimer"\n\t\t\t\t@mouseleave="clearShowTimer"\n\t\t\t\tclass="bx-im-reaction-selector__selector"\n\t\t\t\tref="selector"\n\t\t\t>\n\t\t\t\t<div class="bx-im-reaction-selector__icon" :class="{'--active': ownReactionSet}"></div>\n\t\t\t</div>\n\t\t</div>\n\t`};const k="none";const H={name:"ReplyComponent",props:{dialogId:{type:String,required:true},replyId:{type:Number,required:true},isForward:{type:Boolean,default:false}},computed:{dialog(){return this.$store.getters["chats/get"](this.dialogId,true)},replyMessage(){return this.$store.getters["messages/getById"](this.replyId)},replyMessageChat(){var t;return this.$store.getters["chats/getByChatId"]((t=this.replyMessage)==null?void 0:t.chatId)},replyAuthor(){return this.$store.getters["users/get"](this.replyMessage.authorId)},replyTitle(){return this.replyAuthor?this.replyAuthor.name:this.loc("IM_DIALOG_CHAT_QUOTE_DEFAULT_TITLE")},replyText(){let t=S.Parser.prepareQuote(this.replyMessage);t=S.Parser.decodeText(t);return t},isQuoteFromTheSameChat(){var t;return((t=this.replyMessage)==null?void 0:t.chatId)===this.dialog.chatId},replyContext(){if(!this.isQuoteFromTheSameChat){return k}if(!this.isForward){return`${this.dialogId}/${this.replyId}`}return`${this.replyMessageChat.dialogId}/${this.replyId}`},canShowReply(){return!b.Type.isNil(this.replyMessage)}},methods:{loc(t){return this.$Bitrix.Loc.getMessage(t)}},template:`\n\t\t<div v-if="canShowReply" class="bx-im-message-quote" :data-context="replyContext">\n\t\t\t<div class="bx-im-message-quote__wrap">\n\t\t\t\t<div class="bx-im-message-quote__name">\n\t\t\t\t\t<div class="bx-im-message-quote__name-text">{{ replyTitle }}</div>\n\t\t\t\t</div>\n\t\t\t\t<div class="bx-im-message-quote__text" v-html="replyText"></div>\n\t\t\t</div>\n\t\t</div>\n\t`};const q={name:"AuthorTitle",components:{MessageAuthorTitle:g.MessageAuthorTitle},props:{item:{type:Object,required:true}},computed:{message(){return this.item},dialog(){return this.$store.getters["chats/getByChatId"](this.message.chatId)},user(){return this.$store.getters["users/get"](this.message.authorId,true)},isSystemMessage(){return this.message.authorId===0},isSelfMessage(){return this.message.authorId===l.Core.getUserId()},isUserChat(){return this.dialog.type===h.ChatType.user&&!this.isBotWithFakeAuthorNames},isBotWithFakeAuthorNames(){return this.isSupportBot||this.isNetworkBot},isNetworkBot(){return this.$store.getters["users/bots/isNetwork"](this.dialog.dialogId)},isSupportBot(){return this.$store.getters["users/bots/isSupport"](this.dialog.dialogId)},showTitle(){return!this.isSystemMessage&&!this.isSelfMessage&&!this.isUserChat},authorDialogId(){if(this.message.authorId){return this.message.authorId.toString()}return this.dialogId},isCopilot(){const t=Number.parseInt(this.authorDialogId,10);return this.$store.getters["users/bots/isCopilot"](t)}},methods:{onAuthorNameClick(){const t=Number.parseInt(this.authorDialogId,10);if(!t||t===l.Core.getUserId()||this.isCopilot){return}u.EventEmitter.emit(h.EventType.textarea.insertMention,{mentionText:this.user.name,mentionReplacement:o.Utils.text.getMentionBbCode(this.user.id,this.user.name),dialogId:this.dialog.dialogId})}},template:`\n\t\t<div \n\t\t\tv-if="showTitle" \n\t\t\t@click="onAuthorNameClick" \n\t\t\tclass="bx-im-message-author-title__container" \n\t\t\t:class="{'--clickable': !isCopilot}"\n\t\t>\n\t\t\t<MessageAuthorTitle\n\t\t\t\t:dialogId="authorDialogId"\n\t\t\t\t:messageId="message.id"\n\t\t\t\t:showItsYou="false"\n\t\t\t\t:withColor="true"\n\t\t\t\t:withLeftIcon="!isCopilot"\n\t\t\t/>\n\t\t</div>\n\t`};const X={name:"ContextMenu",props:{dialogId:{type:String,required:true},message:{type:Object,required:true},menuIsActiveForId:{type:[String,Number],default:0},showContextMenu:{type:Boolean,default:true}},computed:{menuTitle(){return this.$Bitrix.Loc.getMessage("IM_MESSENGER_MESSAGE_MENU_TITLE",{"#SHORTCUT#":o.Utils.platform.isMac()?"CMD":"CTRL"})},messageItem(){return this.message},messageHasError(){return this.messageItem.error},canShowContextMenu(){return this.showContextMenu&&!this.messageHasError},isBulkActionsMode(){return this.$store.getters["messages/select/getBulkActionsMode"]}},methods:{onMenuClick(t){u.EventEmitter.emit(h.EventType.dialog.onClickMessageContextMenu,{message:this.message,dialogId:this.dialogId,event:t})}},template:`\n\t\t<template v-if="!isBulkActionsMode">\n\t\t\t<div v-if="canShowContextMenu" class="bx-im-message-context-menu__container bx-im-message-context-menu__scope">\n\t\t\t\t<button\n\t\t\t\t\t:title="menuTitle"\n\t\t\t\t\t@click="onMenuClick"\n\t\t\t\t\t@contextmenu.prevent\n\t\t\t\t\t:class="{'--active': menuIsActiveForId === message.id}"\n\t\t\t\t\tclass="bx-im-message-context-menu__button"\n\t\t\t\t></button>\n\t\t\t</div>\n\t\t\t<div v-else class="bx-im-message-base__context-menu-placeholder"></div>\n\t\t</template>\n\t`};var G=babelHelpers.classPrivateFieldLooseKey("isOwnMessage");var j=babelHelpers.classPrivateFieldLooseKey("hasError");var K=babelHelpers.classPrivateFieldLooseKey("retrySend");var z=babelHelpers.classPrivateFieldLooseKey("retrySendMessage");class V extends c.BaseMenu{constructor(){super();Object.defineProperty(this,z,{value:J});Object.defineProperty(this,K,{value:Q});Object.defineProperty(this,j,{value:Y});Object.defineProperty(this,G,{value:W});this.id="bx-im-message-retry-context-menu"}getMenuItems(){return[this.getRetryItem(),this.getDeleteItem()]}getRetryItem(){if(!babelHelpers.classPrivateFieldLooseBase(this,G)[G]()||!babelHelpers.classPrivateFieldLooseBase(this,j)[j]()){return null}return{text:b.Loc.getMessage("IM_MESSENGER_MESSAGE_CONTEXT_MENU_RETRY"),onclick:()=>{babelHelpers.classPrivateFieldLooseBase(this,K)[K]();this.menuInstance.close()}}}getDeleteItem(){if(!babelHelpers.classPrivateFieldLooseBase(this,G)[G]()||!babelHelpers.classPrivateFieldLooseBase(this,j)[j]()){return null}const t=b.Loc.getMessage("IM_MESSENGER_MESSAGE_CONTEXT_MENU_DELETE");return{html:`<span class="bx-im-message-retry-button__context-menu-delete">${t}</span>`,onclick:()=>{const t=new I.MessageService({chatId:this.context.chatId});t.deleteMessage(this.context.id);this.menuInstance.close()}}}}function W(){return this.context.authorId===l.Core.getUserId()}function Y(){return this.context.error}function Q(){const t=this.context.files.length>0;if(t){return}babelHelpers.classPrivateFieldLooseBase(this,z)[z]()}function J(){(new I.SendingService).retrySendMessage({tempMessageId:this.context.id,dialogId:this.context.dialogId})}const Z={name:"RetryButton",props:{message:{type:Object,required:true},dialogId:{type:String,required:true}},computed:{messageItem(){return this.message},menuTitle(){return this.$Bitrix.Loc.getMessage("IM_MESSENGER_MESSAGE_CONTEXT_MENU_RETRY")}},created(){this.contextMenu=new V},methods:{onClick(t){const e={dialogId:this.dialogId,...this.messageItem};this.contextMenu.openMenu(e,t.currentTarget)}},template:`\n\t\t<div class="bx-im-message-retry-button__container bx-im-message-retry-button__scope">\n\t\t\t<button\n\t\t\t\t:title="menuTitle"\n\t\t\t\t@click="onClick"\n\t\t\t\tclass="bx-im-message-retry-button__arrow"\n\t\t\t></button>\n\t\t</div>\n\t`};const tt={name:"MessageHeader",components:{AuthorTitle:q},props:{item:{type:Object,required:true},withTitle:{type:Boolean,default:false}},computed:{message(){return this.item},forwardAuthorId(){return this.message.forward.userId},forwardContextId(){return this.message.forward.id},isForwarded(){return this.$store.getters["messages/isForward"](this.message.id)},isChannelForward(){return m.ChannelManager.channelTypes.has(this.message.forward.chatType)},forwardAuthorName(){const t=new d.CopilotManager;if(t.isCopilotBot(this.forwardAuthorId)){const e=this.forwardContextId.split("/")[1];return t.getNameWithRole({dialogId:this.forwardAuthorId,messageId:e})}return this.$store.getters["users/get"](this.forwardAuthorId,true).name},forwardChatName(){var t;return(t=this.message.forward.chatTitle)!=null?t:this.loc("IM_MESSENGER_MESSAGE_HEADER_FORWARDED_CLOSED_CHANNEL")},isSystemMessage(){return this.message.forward.userId===0},forwardAuthorTitle(){return b.Loc.getMessage("IM_MESSENGER_MESSAGE_HEADER_FORWARDED_FROM_CHAT",{"[user_name]":'<span class="bx-im-message-header__author-name">',"#USER_NAME#":b.Text.encode(this.forwardAuthorName),"[/user_name]":"</span>"})},forwardChannelTitle(){return b.Loc.getMessage("IM_MESSENGER_MESSAGE_HEADER_FORWARDED_FROM_CHANNEL",{"[user_name]":'<span class="bx-im-message-header__author-name">',"#USER_NAME#":b.Text.encode(this.forwardAuthorName),"[/user_name]":"</span>","[channel_name]":'<span class="bx-im-message-header__author-name">',"#CHANNEL_NAME#":b.Text.encode(this.forwardChatName),"[/channel_name]":"</span>"})}},methods:{loc(t,e={}){return this.$Bitrix.Loc.getMessage(t,e)},onForwardClick(){const t=S.Parser.getContextCodeFromForwardId(this.forwardContextId);if(t.length===0){return}const[e,s]=t.split("/");u.EventEmitter.emit(h.EventType.dialog.goToMessageContext,{messageId:Number.parseInt(s,10),dialogId:e.toString()})}},template:`\n\t\t<div v-if="isForwarded" class="bx-im-message-header__container" @click="onForwardClick">\n\t\t\t<span v-if="isSystemMessage">{{ loc('IM_MESSENGER_MESSAGE_HEADER_FORWARDED_FROM_SYSTEM')}}</span>\n\t\t\t<span v-else-if="isChannelForward" v-html="forwardChannelTitle"></span>\n\t\t\t<span v-else v-html="forwardAuthorTitle"></span>\n\t\t</div>\n\t\t<AuthorTitle v-else-if="withTitle" :item="item" />\n\t`};const et={name:"CommentsPanel",components:{ChatAvatar:g.ChatAvatar,FadeAnimation:v.FadeAnimation},props:{item:{type:Object,required:true},dialogId:{type:String,required:true}},data(){return{}},computed:{AvatarSize:()=>g.AvatarSize,dialog(){return this.$store.getters["chats/get"](this.dialogId)},message(){return this.item},commentInfo(){return this.$store.getters["messages/comments/getByMessageId"](this.message.id)},commentsChatId(){return this.commentInfo.chatId},commentsCount(){if(this.commentInfo.messageCount>0){return this.commentInfo.messageCount-1}return this.commentInfo.messageCount},commentsCountText(){return b.Loc.getMessagePlural("IM_MESSAGE_COMMENTS_PANEL_COMMENT_COUNT",this.commentsCount,{"#COUNT#":this.commentsCount})},noComments(){return this.commentsCount===0},lastUsers(){return[...this.commentInfo.lastUserIds].map((t=>this.$store.getters["users/get"](t))).reverse()},unreadCount(){const t=this.$store.getters["counters/getSpecificCommentsCounter"]({channelId:this.dialog.chatId,commentChatId:this.commentsChatId});if(!t){return""}return`+${t}`},isSubscribed(){return this.$store.getters["messages/comments/isUserSubscribed"](this.message.id)},showSubscribeIcon(){const t=p.PermissionManager.getInstance();return t.canPerformActionByRole(h.ActionByRole.subscribeToComments,this.dialogId)},subscribeIconTitle(){if(this.isSubscribed){return this.loc("IM_MESSAGE_COMMENTS_PANEL_ICON_UNSUBSCRIBE")}return this.loc("IM_MESSAGE_COMMENTS_PANEL_ICON_SUBSCRIBE")}},methods:{onCommentsClick(){const t=p.PermissionManager.getInstance();if(!t.canPerformActionByRole(h.ActionByRole.openComments,this.dialogId)){return}u.EventEmitter.emit(h.EventType.dialog.openComments,{messageId:this.message.id})},onSubscribeIconClick(){if(this.isSubscribed){I.CommentsService.unsubscribe(this.message.id);return}I.CommentsService.subscribe(this.message.id)},loc(t){return this.$Bitrix.Loc.getMessage(t)}},template:`\n\t\t<div class="bx-im-message-comments-panel__container" @click="onCommentsClick">\n\t\t\t<div class="bx-im-message-comments-panel__left">\n\t\t\t\t<div v-if="noComments" class="bx-im-message-comments-panel__empty_container">\n\t\t\t\t\t<div class="bx-im-message-comments-panel__empty_icon"></div>\n\t\t\t\t\t<div class="bx-im-message-comments-panel__text">{{ loc('IM_MESSAGE_COMMENTS_PANEL_EMPTY_TEXT') }}</div>\n\t\t\t\t</div>\n\t\t\t\t<div v-else class="bx-im-message-comments-panel__meta_container">\n\t\t\t\t\t<div class="bx-im-message-comments-panel__user_container">\n\t\t\t\t\t\t<TransitionGroup name="bx-im-message-comments-panel__user_animation">\n\t\t\t\t\t\t\t<div v-for="(user, index) in lastUsers" :key="user.id" class="bx-im-message-comments-panel__user_avatar" :class="'--image-' + (index + 1)">\n\t\t\t\t\t\t\t\t<ChatAvatar\n\t\t\t\t\t\t\t\t\t:avatarDialogId="user.id"\n\t\t\t\t\t\t\t\t\t:contextDialogId="dialogId"\n\t\t\t\t\t\t\t\t\t:size="AvatarSize.S"\n\t\t\t\t\t\t\t\t\t:withTooltip="false"\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</TransitionGroup>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div class="bx-im-message-comments-panel__text">{{ commentsCountText }}</div>\n\t\t\t\t\t<FadeAnimation :duration="200">\n\t\t\t\t\t\t<div v-if="unreadCount" class="bx-im-message-comments-panel__unread-counter">{{ unreadCount }}</div>\n\t\t\t\t\t</FadeAnimation>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<div v-if="showSubscribeIcon" :title="subscribeIconTitle" class="bx-im-message-comments-panel__right">\n\t\t\t\t<div\n\t\t\t\t\t@click.stop="onSubscribeIconClick"\n\t\t\t\t\tclass="bx-im-message-comments-panel__subscribe-icon"\n\t\t\t\t\t:class="{'--active': isSubscribed}"\n\t\t\t\t></div>\n\t\t\t</div>\n\t\t</div>\n\t`};const st={name:"MessageFooter",components:{CommentsPanel:et},props:{item:{type:Object,required:true},dialogId:{type:String,required:true}},data(){return{}},computed:{dialog(){return this.$store.getters["chats/get"](this.dialogId)},message(){return this.item},isChannelPost(){return m.ChannelManager.isChannel(this.dialogId)},isSystemMessage(){return this.message.authorId===0},showCommentsPanel(){return this.isChannelPost&&!this.isSystemMessage}},template:`\n\t\t<CommentsPanel v-if="showCommentsPanel" :dialogId="dialogId" :item="item" />\n\t`};const it={name:"DefaultMessageContent",components:{Reactions:_.Reactions,MessageStatus:y,MessageAttach:M,ReactionList:F,Reply:H},props:{item:{type:Object,required:true},dialogId:{type:String,required:true},withMessageStatus:{type:Boolean,default:true},withText:{type:Boolean,default:true},withAttach:{type:Boolean,default:true}},computed:{message(){return this.item},isReply(){return this.message.replyId!==0},formattedText(){return S.Parser.decodeMessage(this.item)},canSetReactions(){return b.Type.isNumber(this.message.id)},isForward(){return this.$store.getters["messages/isForward"](this.message.id)}},template:`\n\t\t<div class="bx-im-message-default-content__container bx-im-message-default-content__scope" :class="{'--no-text': !withText}">\n\t\t\t<Reply v-if="isReply" :dialogId="dialogId" :replyId="message.replyId" :isForward="isForward" />\n\t\t\t<div v-if="withText" class="bx-im-message-default-content__text" v-html="formattedText"></div>\n\t\t\t<div v-if="withAttach && message.attach.length > 0" class="bx-im-message-default-content__attach">\n\t\t\t\t<MessageAttach :item="message" :dialogId="dialogId" />\n\t\t\t</div>\n\t\t\t<div class="bx-im-message-default-content__bottom-panel">\n\t\t\t\t<ReactionList \n\t\t\t\t\tv-if="canSetReactions" \n\t\t\t\t\t:messageId="message.id" \n\t\t\t\t\t:contextDialogId="dialogId"\n\t\t\t\t\tclass="bx-im-message-default-content__reaction-list" \n\t\t\t\t/>\n\t\t\t\t<div v-if="withMessageStatus" class="bx-im-message-default-content__status-container">\n\t\t\t\t\t<MessageStatus :item="message" />\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t`};t.MessageStatus=y;t.MessageAttach=M;t.MessageKeyboard=C;t.ReactionList=F;t.ReactionSelector=$;t.Reply=H;t.AuthorTitle=q;t.ContextMenu=X;t.RetryButton=Z;t.MessageHeader=tt;t.MessageFooter=st;t.DefaultMessageContent=it})(this.BX.Messenger.v2.Component.Message=this.BX.Messenger.v2.Component.Message||{},BX.Messenger.v2.Lib,BX.Vue3,BX.UI,BX.Messenger.v2.Lib,BX.Messenger.v2.Lib,BX.Ui,BX.Messenger.v2.Lib,BX.Messenger.v2.Application,BX.Messenger.v2.Lib,BX.Messenger.v2.Lib,BX.Messenger.v2.Lib,BX.Event,BX.Messenger.v2.Const,BX.Messenger.v2.Component.Elements,BX.Messenger.v2.Lib,BX.Messenger.v2.Component.Animation,BX.Messenger.v2.Service,BX,BX.Vue3.Components,BX.Messenger.v2.Lib);
//# sourceMappingURL=registry.bundle.map.js