this.BX=this.BX||{};this.BX.Messenger=this.BX.Messenger||{};this.BX.Messenger.v2=this.BX.Messenger.v2||{};this.BX.Messenger.v2.Component=this.BX.Messenger.v2.Component||{};(function(t,e,i,n,s,o,a,r,c,l,u,h,d,f,m,p){"use strict";const g={name:"NotificationItemAvatar",components:{ChatAvatar:r.ChatAvatar},props:{userId:{type:Number,required:true}},computed:{AvatarSize:()=>r.AvatarSize,isSystem(){return this.userId===0},userDialogId(){return this.userId.toString()},user(){return this.$store.getters["users/get"](this.userId)}},template:`\n\t\t<div class="bx-im-content-notification-item-avatar__container">\n\t\t\t<div \n\t\t\t\tv-if="isSystem || !user"\n\t\t\t\tclass="bx-im-content-notification-item-avatar__system-icon"\n\t\t\t></div>\n\t\t\t<ChatAvatar \n\t\t\t\tv-else \n\t\t\t\t:avatarDialogId="userDialogId" \n\t\t\t\t:contextDialogId="userDialogId" \n\t\t\t\t:size="AvatarSize.L" \n\t\t\t/>\n\t\t</div>\n\t`};const v={name:"NotificationQuickAnswer",components:{MessengerButton:r.Button},props:{notification:{type:Object,required:true}},emits:["sendQuickAnswer"],data(){return{quickAnswerText:"",quickAnswerResultMessage:"",showQuickAnswer:false,isSending:false,successSentQuickAnswer:false}},computed:{ButtonSize:()=>r.ButtonSize,ButtonColor:()=>r.ButtonColor},methods:{toggleQuickAnswer(){if(this.successSentQuickAnswer){this.showQuickAnswer=true;this.successSentQuickAnswer=false;this.quickAnswerResultMessage=""}else{this.showQuickAnswer=!this.showQuickAnswer}if(this.showQuickAnswer){this.$nextTick((()=>{this.$refs["textarea"].focus()}))}},sendQuickAnswer(){if(this.isSending||this.quickAnswerText.trim()===""){return}this.isSending=true;this.$emit("sendQuickAnswer",{id:this.notification.id,text:this.quickAnswerText.trim(),callbackSuccess:t=>{const{result_message:e}=t.data();const[i]=e;this.quickAnswerResultMessage=i;this.successSentQuickAnswer=true;this.quickAnswerText="";this.isSending=false},callbackError:()=>{this.isSending=false}})}},template:`\n\t\t<div class="bx-im-content-notification-quick-answer__container">\n\t\t\t<button \n\t\t\t\tv-if="!showQuickAnswer"\n\t\t\t\tclass="bx-im-content-notification-quick-answer__reply-link" \n\t\t\t\t@click="toggleQuickAnswer" \n\t\t\t\t@dblclick.stop\n\t\t\t>\n\t\t\t\t{{ $Bitrix.Loc.getMessage('IM_NOTIFICATIONS_QUICK_ANSWER_BUTTON') }}\n\t\t\t</button>\n\t\t\t<transition name="quick-answer-slide">\n\t\t\t\t<div \n\t\t\t\t\tv-if="showQuickAnswer && !successSentQuickAnswer" \n\t\t\t\t\tclass="bx-im-content-notification-quick-answer__textarea-container"\n\t\t\t\t>\n\t\t\t\t\t<textarea\n\t\t\t\t\t\tref="textarea"\n\t\t\t\t\t\tautofocus\n\t\t\t\t\t\tclass="bx-im-content-notification-quick-answer__textarea"\n\t\t\t\t\t\tv-model="quickAnswerText"\n\t\t\t\t\t\t:disabled="isSending"\n\t\t\t\t\t\t@keydown.enter.prevent\n\t\t\t\t\t\t@keyup.enter.prevent="sendQuickAnswer"\n\t\t\t\t\t/>\n\t\t\t\t\t<div \n\t\t\t\t\t\tv-if="!successSentQuickAnswer" \n\t\t\t\t\t\tclass="bx-im-content-notification-quick-answer__buttons-container"\n\t\t\t\t\t>\n\t\t\t\t\t\t<MessengerButton\n\t\t\t\t\t\t\t:color="ButtonColor.Primary"\n\t\t\t\t\t\t\t:size="ButtonSize.M"\n\t\t\t\t\t\t\t:isRounded="true"\n\t\t\t\t\t\t\t:isUppercase="false"\n\t\t\t\t\t\t\t:text="$Bitrix.Loc.getMessage('IM_NOTIFICATIONS_QUICK_ANSWER_SEND')"\n\t\t\t\t\t\t\t:isLoading="isSending"\n\t\t\t\t\t\t\t@click="sendQuickAnswer"\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<MessengerButton\n\t\t\t\t\t\t\t:color="ButtonColor.LightBorder"\n\t\t\t\t\t\t\t:size="ButtonSize.M"\n\t\t\t\t\t\t\t:isRounded="true"\n\t\t\t\t\t\t\t:isUppercase="false"\n\t\t\t\t\t\t\t:text="$Bitrix.Loc.getMessage('IM_NOTIFICATIONS_QUICK_ANSWER_CANCEL')"\n\t\t\t\t\t\t\t:isDisabled="isSending"\n\t\t\t\t\t\t\t@click="toggleQuickAnswer"\n\t\t\t\t\t\t/>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</transition>\n\t\t\t<div v-if="successSentQuickAnswer" class="bx-im-content-notification-quick-answer__result">\n\t\t\t\t<div class="bx-im-content-notification-quick-answer__success-icon"></div>\n\t\t\t\t<div class="bx-im-content-notification-quick-answer__success-text">{{ quickAnswerResultMessage }}</div>\n\t\t\t</div>\n\t\t</div>\n\t`};const C={name:"NotificationItemConfirmButtons",components:{MessengerButton:r.Button},props:{buttons:{type:Array,required:true}},emits:["confirmButtonsClick"],computed:{ButtonSize:()=>r.ButtonSize,ButtonColor:()=>r.ButtonColor,preparedButtons(){return this.buttons.map((t=>{const[e,i]=t.COMMAND_PARAMS.split("|");const n=d.Text.decode(t.TEXT);return{id:e,value:i,text:n}}))}},methods:{click(t){this.$emit("confirmButtonsClick",t)},getButtonColor(t){return t.value==="Y"?r.ButtonColor.Primary:r.ButtonColor.LightBorder}},template:`\n\t\t<div class="bx-im-content-notification-item-confirm-buttons__container">\n\t\t\t<MessengerButton\n\t\t\t\tv-for="(button, index) in preparedButtons" :key="index"\n\t\t\t\t:text="button.text"\n\t\t\t\t:color="getButtonColor(button)"\n\t\t\t\t:size="ButtonSize.M"\n\t\t\t\t:isRounded="true"\n\t\t\t\t:isUppercase="false"\n\t\t\t\t@click="click(button)"\n\t\t\t></MessengerButton>\n\t\t</div>\n\t`};const S={name:"NotificationItemContent",components:{NotificationQuickAnswer:v,Attach:r.Attach,NotificationItemConfirmButtons:C},props:{notification:{type:Object,required:true}},emits:["confirmButtonsClick","sendQuickAnswer"],computed:{notificationItem(){return this.notification},hasQuickAnswer(){var t;return Boolean(((t=this.notification.params)==null?void 0:t.canAnswer)==="Y")},content(){return o.Parser.decodeNotification(this.notification)},attachList(){var t;return(t=this.notification.params)==null?void 0:t.attach}},methods:{onContentClick(t){o.Parser.executeClickEvent(t)},onConfirmButtonsClick(t){this.$emit("confirmButtonsClick",t)},onSendQuickAnswer(t){this.$emit("sendQuickAnswer",t)}},template:`\n\t\t<div class="bx-im-content-notification-item-content__container" @click="onContentClick">\n\t\t\t<div \n\t\t\t\tv-if="content.length > 0" \n\t\t\t\tclass="bx-im-content-notification-item-content__content-text"\n\t\t\t\tv-html="content"\n\t\t\t></div>\n\t\t\t<NotificationQuickAnswer \n\t\t\t\tv-if="hasQuickAnswer" \n\t\t\t\t:notification="notificationItem" \n\t\t\t\t@sendQuickAnswer="onSendQuickAnswer"\n\t\t\t/>\n\t\t\t<template v-if="attachList">\n\t\t\t\t<template v-for="attachItem in attachList">\n\t\t\t\t\t<Attach :config="attachItem"/>\n\t\t\t\t</template>\n\t\t\t</template>\n\t\t\t<NotificationItemConfirmButtons \n\t\t\t\tv-if="notificationItem.notifyButtons.length > 0" \n\t\t\t\t@confirmButtonsClick="onConfirmButtonsClick" \n\t\t\t\t:buttons="notificationItem.notifyButtons"\n\t\t\t/>\n\t\t</div>\n\t`};const _={name:"NotificationItemHeader",components:{ChatTitle:r.ChatTitle},props:{notification:{type:Object,required:true}},computed:{notificationItem(){return this.notification},date(){return this.notificationItem.date},type(){return this.notificationItem.sectionCode},user(){return this.$store.getters["users/get"](this.notificationItem.authorId,true)},hasName(){return this.notificationItem.authorId>0&&this.user.name.length>0},title(){if(this.notificationItem.title.length>0){return this.notificationItem.title}return this.$Bitrix.Loc.getMessage("IM_NOTIFICATIONS_ITEM_SYSTEM")},isSystem(){return this.notification.authorId===0},userDialogId(){return this.notification.authorId.toString()},titleClasses(){return{"bx-im-content-notification-item-header__title-text":true,"bx-im-content-notification-item-header__title-user-text":!this.isSystem,"--extranet":this.user.extranet,"--short":!this.hasMoreUsers}},hasMoreUsers(){var t;if(this.isSystem){return false}return Boolean((t=this.notificationItem.params)==null?void 0:t.users)&&this.notificationItem.params.users.length>0},moreUsers(){const t=this.$Bitrix.Loc.getMessage("IM_NOTIFICATIONS_MORE_USERS").split("#COUNT#");return{start:t[0],end:this.notificationItem.params.users.length+t[1]}},canDelete(){return this.type===m.NotificationTypesCodes.simple},itemDate(){return c.DateFormatter.formatByTemplate(this.date,c.DateTemplate.notification)}},methods:{onUserTitleClick(){if(this.isSystem){return}a.Messenger.openChat(this.userDialogId)},onMoreUsersClick(t){if(t.users){this.$emit("moreUsersClick",{event:t.event,users:t.users})}},onDeleteClick(){this.$emit("deleteClick",this.notificationItem.id)}},template:`\n\t\t<div class="bx-im-content-notification-item-header__container">\n\t\t\t<div class="bx-im-content-notification-item-header__title-container">\n\t\t\t\t<ChatTitle\n\t\t\t\t\tv-if="hasName"\n\t\t\t\t\t:dialogId="userDialogId"\n\t\t\t\t\t:showItsYou="false"\n\t\t\t\t\t:class="titleClasses"\n\t\t\t\t\t@click.prevent="onUserTitleClick"\n\t\t\t\t/>\n\t\t\t\t<span v-else @click.prevent="onUserTitleClick" :class="titleClasses">{{ title }}</span>\n\t\t\t\t<span v-if="hasMoreUsers" class="bx-im-content-notification-item-header__more-users">\n\t\t\t\t\t<span class="bx-im-content-notification-item-header__more-users-start">{{ moreUsers.start }}</span>\n\t\t\t\t\t<span\n\t\t\t\t\t\tclass="bx-im-content-notification-item-header__more-users-dropdown"\n\t\t\t\t\t\t@click="onMoreUsersClick({users: notificationItem.params.users, event: $event})"\n\t\t\t\t\t>\n\t\t\t\t\t\t{{ moreUsers.end }}\n\t\t\t\t\t</span>\n\t\t\t\t</span>\n\t\t\t</div>\n\t\t\t<div class="bx-im-content-notification-item-header__date-container">\n\t\t\t\t<div class="bx-im-content-notification-item-header__date">{{ itemDate }}</div>\n\t\t\t\t<div\n\t\t\t\t\tv-if="canDelete"\n\t\t\t\t\tclass="bx-im-content-notification-item-header__delete-button"\n\t\t\t\t\t@click="onDeleteClick()"\n\t\t\t\t>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t`};const I={components:{NotificationItemAvatar:g,NotificationItemContent:S,NotificationItemHeader:_},props:{notification:{type:Object,required:true},searchMode:{type:Boolean,default:false}},emits:["dblclick","buttonsClick","confirmButtonsClick","deleteClick","sendQuickAnswer","moreUsersClick"],computed:{NotificationTypesCodes:()=>m.NotificationTypesCodes,notificationItem(){return this.notification},type(){return this.notification.sectionCode},isUnread(){return!this.notificationItem.read&&!this.searchMode},userData(){return this.$store.getters["users/get"](this.notificationItem.authorId,true)}},methods:{onDoubleClick(){this.$emit("dblclick",this.notificationItem.id)},onConfirmButtonsClick(t){this.$emit("confirmButtonsClick",t)},onMoreUsersClick(t){this.$emit("moreUsersClick",t)},onSendQuickAnswer(t){this.$emit("sendQuickAnswer",t)},onDeleteClick(t){this.$emit("deleteClick",t)}},template:`\n\t\t<div\n\t\t\tclass="bx-im-content-notification-item__container"\n\t\t\t:class="{'--unread': isUnread}"\n\t\t\t@dblclick="onDoubleClick"\n\t\t>\n\t\t\t<NotificationItemAvatar :userId="notificationItem.authorId" />\n\t\t\t<div class="bx-im-content-notification-item__content-container">\n\t\t\t\t<NotificationItemHeader \n\t\t\t\t\t:notification="notificationItem"\n\t\t\t\t\t@deleteClick="onDeleteClick"\n\t\t\t\t\t@moreUsersClick="onMoreUsersClick"\n\t\t\t\t/>\n\t\t\t\t<NotificationItemContent \n\t\t\t\t\t:notification="notificationItem" \n\t\t\t\t\t@confirmButtonsClick="onConfirmButtonsClick"\n\t\t\t\t\t@sendQuickAnswer="onSendQuickAnswer"\n\t\t\t\t/>\n\t\t\t</div>\n\t\t</div>\n\t`};const b={name:"NotificationPlaceholder",props:{itemsToShow:{type:Number,default:50}},template:`\n\t\t<div class="bx-im-content-notification-placeholder__container" v-for="index in itemsToShow">\n\t\t\t<div class="bx-im-content-notification-placeholder__element">\n\t\t\t\t<div class="bx-im-content-notification-placeholder__avatar-container">\n\t\t\t\t\t<div class="bx-im-content-notification-placeholder__avatar"></div>\n\t\t\t\t</div>\n\t\t\t\t<div class="bx-im-content-notification-placeholder__content-container">\n\t\t\t\t\t<div class="bx-im-content-notification-placeholder__content-inner">\n\t\t\t\t\t\t<div class="bx-im-content-notification-placeholder__content --top"></div>\n\t\t\t\t\t\t<div class="bx-im-content-notification-placeholder__content --short"></div>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div class="bx-im-content-notification-placeholder__content --full"></div>\n\t\t\t\t\t<div class="bx-im-content-notification-placeholder__content --middle"></div>\n\t\t\t\t\t<div class="bx-im-content-notification-placeholder__content --bottom"></div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t`};const w={name:"NotificationSearchPanel",props:{schema:{type:Object,required:true}},emits:["search"],data:function(){return{searchQuery:"",searchType:"",searchDate:""}},computed:{filterTypes(){const t={...this.schema};const e=["timeman","mail","disk","bizproc","voximplant","sender","blog","vote","socialnetwork","imopenlines","photogallery","intranet","forum"];e.forEach((e=>{if(t[e]){delete t[e].LIST}}));if(t.calendar){t.calendar.NAME=this.$Bitrix.Loc.getMessage("IM_NOTIFICATIONS_SEARCH_FILTER_TYPE_CALENDAR")}if(t.sender){t["sender"].NAME=this.$Bitrix.Loc.getMessage("IM_NOTIFICATIONS_SEARCH_FILTER_TYPE_SENDER")}if(t.blog){t.blog.NAME=this.$Bitrix.Loc.getMessage("IM_NOTIFICATIONS_SEARCH_FILTER_TYPE_BLOG")}if(t.socialnetwork){t["socialnetwork"].NAME=this.$Bitrix.Loc.getMessage("IM_NOTIFICATIONS_SEARCH_FILTER_TYPE_SOCIALNETWORK")}if(t.intranet){t["intranet"].NAME=this.$Bitrix.Loc.getMessage("IM_NOTIFICATIONS_SEARCH_FILTER_TYPE_INTRANET")}const i=["tasks","calendar","crm","timeman","mail","disk","bizproc","voximplant","sender","blog","vote","socialnetwork","imopenlines","photogallery","intranet","forum"];const n=[];i.forEach((e=>{if(t[e]){n.push(t[e])}}));return n}},watch:{searchQuery(){this.search()},searchType(){this.search()},searchDate(){this.search()}},methods:{search(){this.$emit("search",{searchQuery:this.searchQuery,searchType:this.searchType,searchDate:this.searchDate})},onDateFilterClick(t){if(BX&&BX.calendar&&BX.calendar.get().popup){BX.calendar.get().popup.close()}BX.calendar({node:t.target,field:t.target,bTime:false,callback_after:()=>{this.searchDate=t.target.value}});return false}},template:`\n\t\t<div class="bx-im-notifications-header-filter-box">\n\t\t\t<div class="ui-ctl ui-ctl-after-icon ui-ctl-dropdown ui-ctl-sm ui-ctl-w25">\n\t\t\t\t<div class="ui-ctl-after ui-ctl-icon-angle"></div>\n\t\t\t\t<select class="ui-ctl-element" v-model="searchType">\n\t\t\t\t\t<option value="">\n\t\t\t\t\t\t{{ $Bitrix.Loc.getMessage('IM_NOTIFICATIONS_SEARCH_FILTER_TYPE_PLACEHOLDER') }}\n\t\t\t\t\t</option>\n\t\t\t\t\t<template v-for="group in filterTypes">\n\t\t\t\t\t\t<template v-if="group.LIST">\n\t\t\t\t\t\t\t<optgroup :label="group.NAME">\n\t\t\t\t\t\t\t\t<option v-for="option in group.LIST" :value="option.ID">\n\t\t\t\t\t\t\t\t\t{{ option.NAME }}\n\t\t\t\t\t\t\t\t</option>\n\t\t\t\t\t\t\t</optgroup>\n\t\t\t\t\t\t</template>\n\t\t\t\t\t\t<template v-else>\n\t\t\t\t\t\t\t<option :value="group.MODULE_ID">\n\t\t\t\t\t\t\t\t{{ group.NAME }}\n\t\t\t\t\t\t\t</option>\n\t\t\t\t\t\t</template>\n\t\t\t\t\t</template>\n\t\t\t\t</select>\n\t\t\t</div>\n\t\t\t<div class="ui-ctl ui-ctl-textbox ui-ctl-after-icon ui-ctl-sm ui-ctl-w50">\n\t\t\t\t<button class="ui-ctl-after ui-ctl-icon-clear" @click.prevent="searchQuery=''"></button>\n\t\t\t\t<input\n\t\t\t\t\tautofocus\n\t\t\t\t\ttype="text"\n\t\t\t\t\tclass="ui-ctl-element"\n\t\t\t\t\tv-model="searchQuery"\n\t\t\t\t\t:placeholder="$Bitrix.Loc.getMessage('IM_NOTIFICATIONS_SEARCH_FILTER_TEXT_PLACEHOLDER')"\n\t\t\t\t>\n\t\t\t</div>\n\t\t\t<div class="ui-ctl ui-ctl-after-icon ui-ctl-before-icon ui-ctl-sm ui-ctl-w25">\n\t\t\t\t<div class="ui-ctl-before ui-ctl-icon-calendar"></div>\n\t\t\t\t<input\n\t\t\t\t\ttype="text"\n\t\t\t\t\tclass="ui-ctl-element ui-ctl-textbox"\n\t\t\t\t\tv-model="searchDate"\n\t\t\t\t\t@focus.prevent.stop="onDateFilterClick"\n\t\t\t\t\t@click.prevent.stop="onDateFilterClick"\n\t\t\t\t\t:placeholder="$Bitrix.Loc.getMessage('IM_NOTIFICATIONS_SEARCH_FILTER_DATE_PLACEHOLDER')"\n\t\t\t\t\treadonly\n\t\t\t\t>\n\t\t\t\t<button class="ui-ctl-after ui-ctl-icon-clear" @click.prevent="searchDate=''"></button>\n\t\t\t</div>\n\t\t</div>\n\t`};const k={name:"NotificationScrollButton",props:{unreadCounter:{type:Number,default:0},notificationsOnScreen:{type:Object,required:true}},emits:["scrollButtonClick"],computed:{notificationCollection(){return this.$store.getters["notifications/getSortedCollection"]},hasUnreadOnScreen(){return[...this.notificationsOnScreen].some((t=>{var e;return!((e=this.notificationMapCollection.get(t))!=null&&e.read)}))},firstUnreadId(){const t=this.notificationCollection.find((t=>!t.read));if(!t){return}return t.id},firstUnreadBelowVisible(){const t=Math.min(...this.notificationsOnScreen);const e=this.notificationCollection.find((e=>!e.read&&e.sectionCode===m.NotificationTypesCodes.simple&&t>e.id));if(!e){return}return e.id},hasUnreadBelowVisible(){let t=0;for(let e=0;e<=this.notificationCollection.length-1;e++){if(!this.notificationCollection[e].read){++t}if(this.notificationsOnScreen.has(this.notificationCollection[e].id)&&this.unreadCounter===t){return false}}return true},showScrollButton(){if(this.unreadCounter===0||this.hasUnreadOnScreen){return false}return true},arrowButtonClass(){const t=this.hasUnreadBelowVisible;return{"bx-im-notifications-scroll-button-arrow-down":t,"bx-im-notifications-scroll-button-arrow-up":!t}},formattedCounter(){if(this.unreadCounter>99){return"99+"}return`${this.unreadCounter}`},...u.mapState({notificationMapCollection:t=>t.notifications.collection})},methods:{onScrollButtonClick(){let t=null;if(this.firstUnreadBelowVisible){t=this.firstUnreadBelowVisible}else if(!this.hasUnreadBelowVisible){t=this.firstUnreadId}let e=null;if(t!==null){const i=`.bx-im-content-notification-item__container[data-id="${t}"]`;e=document.querySelector(i)}if(e){this.$emit("scrollButtonClick",e.offsetTop)}else{const t=this.notificationCollection[this.notificationCollection.length-1];const e=`.bx-im-content-notification-item__container[data-id="${t.id}"]`;const i=document.querySelector(e);this.$emit("scrollButtonClick",i.offsetTop)}}},template:`\n\t\t<transition name="bx-im-notifications-scroll-button">\n\t\t\t<div \n\t\t\t\tv-show="showScrollButton" \n\t\t\t\tclass="bx-im-content-notification-scroll-button__container" \n\t\t\t\t@click="onScrollButtonClick"\n\t\t\t>\n\t\t\t\t<div class="bx-im-content-notification-scroll-button__button">\n\t\t\t\t\t<div class="bx-im-notifications-scroll-button-counter">\n\t\t\t\t\t\t{{ formattedCounter }}\n\t\t\t\t\t</div>\n\t\t\t\t\t<div :class="arrowButtonClass"></div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</transition>\n\t`};const T=50;class A{constructor(){this.searchQuery="";this.searchType="";this.searchDate=null;this.store=null;this.restClient=null;this.userManager=null;this.isLoading=false;this.lastId=0;this.hasMoreItemsToLoad=true;this.store=f.Core.getStore();this.restClient=f.Core.getRestClient();this.userManager=new h.UserManager}loadFirstPage({searchQuery:t,searchType:e,searchDate:i}){this.isLoading=true;this.searchQuery=t;this.searchType=e;this.searchDate=i;return this.requestItems({firstPage:true})}loadNextPage(){if(this.isLoading||!this.hasMoreItemsToLoad){return Promise.resolve()}this.isLoading=true;return this.requestItems()}searchInModel({searchQuery:t,searchType:e,searchDate:i}){this.searchQuery=t;this.searchType=e;this.searchDate=i;return this.store.getters["notifications/getSortedCollection"].filter((t=>{let e=false;if(this.searchQuery.length>=3){e=t.text.toLowerCase().includes(this.searchQuery.toLowerCase());if(!e){return e}}if(this.searchType!==""){e=t.settingName===this.searchType;if(!e){return e}}if(this.searchDate!==""){const i=BX.parseDate(this.searchDate);if(i instanceof Date){const n=new Date(t.date.getTime()).setHours(0,0,0,0);const s=i.setHours(0,0,0,0);e=n===s}}return e}))}requestItems({firstPage:t=false}={}){const e=this.getSearchRequestParams(t);return this.restClient.callMethod(m.RestMethod.imNotifyHistorySearch,e).then((t=>{const e=t.data();p.Logger.warn("im.notify.history.search: first page results",e);this.hasMoreItemsToLoad=!this.isLastPage(e.notifications);if(!e||e.notifications.length===0){p.Logger.warn("im.notify.get: no notifications",e);return[]}this.lastId=this.getLastItemId(e.notifications);this.userManager.setUsersToModel(e.users);this.isLoading=false;return e.notifications})).catch((t=>{p.Logger.warn("History request error",t)}))}getSearchRequestParams(t){const e={SEARCH_TEXT:this.searchQuery,SEARCH_TYPE:this.searchType,LIMIT:T,CONVERT_TEXT:"Y"};if(BX.parseDate(this.searchDate)instanceof Date){e["SEARCH_DATE"]=BX.parseDate(this.searchDate).toISOString()}if(!t){e["LAST_ID"]=this.lastId}return e}getLastItemId(t){return t[t.length-1].id}isLastPage(t){if(!d.Type.isArrayFilled(t)||t.length<T){return true}return false}destroy(){p.Logger.warn("Notification search service destroyed")}}class B{constructor(){this.itemsToRead=new Set;this.changeReadStatusBlockTimeout={};this.store=f.Core.getStore();this.restClient=f.Core.getRestClient();this.readOnClientWithDebounce=d.Runtime.debounce(this.readOnClient,50,this);this.readRequestWithDebounce=d.Runtime.debounce(this.readRequest,500,this)}addToReadQueue(t){if(!d.Type.isArrayFilled(t)){return}t.forEach((t=>{if(!d.Type.isNumber(t)){return}const e=this.store.getters["notifications/getById"](t);if(e.read){return}this.itemsToRead.add(t)}))}read(){this.readOnClientWithDebounce();this.readRequestWithDebounce()}readRequest(){if(this.itemsToRead.size===0){return}const t=Math.min(...this.itemsToRead);this.restClient.callMethod(m.RestMethod.imNotifyRead,{id:t}).then((e=>{p.Logger.warn(`I have read all the notifications from id ${t}`,e)})).catch((()=>{}));this.itemsToRead.clear()}readOnClient(){this.store.dispatch("notifications/read",{ids:[...this.itemsToRead],read:true})}readAll(){this.store.dispatch("notifications/readAll");this.restClient.callMethod(m.RestMethod.imNotifyRead,{id:0}).then((t=>{p.Logger.warn("I have read ALL the notifications",t)})).catch((t=>{console.error(t)}))}changeReadStatus(t){const e=this.store.getters["notifications/getById"](t);this.store.dispatch("notifications/read",{ids:[e.id],read:!e.read});clearTimeout(this.changeReadStatusBlockTimeout[e.id]);this.changeReadStatusBlockTimeout[e.id]=setTimeout((()=>{this.restClient.callMethod(m.RestMethod.imNotifyRead,{id:e.id,action:e.read?"N":"Y",only_current:"Y"}).then((()=>{p.Logger.warn(`Notification ${e.id} unread status set to ${!e.read}`)})).catch((t=>{console.error(t)}))}),1500)}destroy(){p.Logger.warn("Notification read service destroyed")}}const N={name:"NotificationContent",components:{NotificationItem:I,NotificationSearchPanel:w,NotificationPlaceholder:b,NotificationScrollButton:k,UserListPopup:r.UserListPopup,Loader:r.Loader},directives:{"notifications-item-observer":{mounted(t,e){e.instance.observer.observe(t)},beforeUnmount(t,e){e.instance.observer.unobserve(t)}}},data(){return{isInitialLoading:false,isNextPageLoading:false,notificationsOnScreen:new Set,windowFocused:false,showSearchPanel:false,showSearchResult:false,popupBindElement:null,showUserListPopup:false,userListIds:null,schema:{}}},computed:{NotificationTypesCodes:()=>m.NotificationTypesCodes,notificationCollection(){return this.$store.getters["notifications/getSortedCollection"]},searchResultCollection(){return this.$store.getters["notifications/getSearchResultCollection"]},notifications(){if(this.showSearchResult){return this.searchResultCollection}return this.notificationCollection},isReadAllAvailable(){if(this.showSearchResult){return false}return this.unreadCounter>0},isEmptyState(){return this.notifications.length===0&&!this.isInitialLoading&&!this.isNextPageLoading},emptyStateIcon(){return this.showSearchResult?"bx-im-content-notification__not-found-icon":"bx-im-content-notification__empty-state-icon"},emptyStateTitle(){return this.showSearchResult?this.$Bitrix.Loc.getMessage("IM_NOTIFICATIONS_SEARCH_RESULTS_NOT_FOUND"):this.$Bitrix.Loc.getMessage("IM_NOTIFICATIONS_NO_ITEMS")},enableAutoRead(){return this.$store.getters["application/settings/get"](m.Settings.notification.enableAutoRead)},...u.mapState({unreadCounter:t=>t.notifications.unreadCounter})},watch:{showSearchPanel(t,e){if(t===false&&e===true){this.showSearchResult=false;this.$store.dispatch("notifications/clearSearchResult")}}},created(){this.notificationService=new n.NotificationService;this.notificationSearchService=new A;this.notificationReadService=new B;this.searchOnServerDelayed=d.Runtime.debounce(this.searchOnServer,1500,this);d.Event.bind(window,"focus",this.onWindowFocus);d.Event.bind(window,"blur",this.onWindowBlur);this.initObserver()},mounted(){this.isInitialLoading=true;this.windowFocused=document.hasFocus();this.notificationService.loadFirstPage().then((t=>{this.schema=t;this.isInitialLoading=false}))},beforeUnmount(){this.notificationService.destroy();this.notificationSearchService.destroy();this.notificationReadService.destroy();d.Event.unbind(window,"focus",this.onWindowFocus);d.Event.unbind(window,"blur",this.onWindowBlur)},methods:{initObserver(){this.observer=new IntersectionObserver((t=>{t.forEach((t=>{const e=Number.parseInt(t.target.dataset.id,10);if(!t.isIntersecting){this.notificationsOnScreen.delete(e);return}if(t.intersectionRatio>=.7||t.intersectionRatio>0&&t.intersectionRect.height>t.rootBounds.height/2){this.read(e);this.notificationsOnScreen.add(e)}else{this.notificationsOnScreen.delete(e)}}))}),{root:this.$refs.listNotifications,threshold:Array.from({length:101}).fill(0).map(((t,e)=>e*.01))})},read(t){if(!this.enableAutoRead){p.Logger.warn("Notifications: Auto read is disabled!");return}if(!this.windowFocused){return}if(d.Type.isNumber(t)){t=[t]}this.notificationReadService.addToReadQueue(t);this.notificationReadService.read()},searchOnServer(t){this.notificationSearchService.loadFirstPage(t).then((t=>{this.isNextPageLoading=false;this.setSearchResult(t)}))},setSearchResult(t){this.$store.dispatch("notifications/setSearchResult",{notifications:t})},onScrollButtonClick(t){this.$refs.listNotifications.scroll({top:t,behavior:"smooth"})},onScroll(t){this.showUserListPopup=false;if(this.showSearchResult){this.onScrollSearchResult(t)}else{this.onScrollNotifications(t)}},onClickReadAll(){const t=new i.MessageBox({message:this.$Bitrix.Loc.getMessage("IM_NOTIFICATIONS_READ_ALL_WARNING_POPUP"),buttons:i.MessageBoxButtons.YES_CANCEL,onYes:()=>{this.notificationReadService.readAll();t.close()},onCancel:()=>{t.close()}});t.show()},onScrollNotifications(t){if(!s.Utils.dom.isOneScreenRemaining(t.target)||!this.notificationService.hasMoreItemsToLoad||this.isInitialLoading||this.isNextPageLoading){return}this.isNextPageLoading=true;this.notificationService.loadNextPage().then((()=>{this.isNextPageLoading=false}))},onScrollSearchResult(t){if(!s.Utils.dom.isOneScreenRemaining(t.target)||!this.notificationSearchService.hasMoreItemsToLoad||this.isInitialLoading||this.isNextPageLoading){return}this.isNextPageLoading=true;this.notificationSearchService.loadNextPage().then((t=>{this.isNextPageLoading=false;this.setSearchResult(t)}))},onDoubleClick(t){this.notificationReadService.changeReadStatus(t)},onConfirmButtonsClick(t){const{id:e,value:i}=t;const n=Number.parseInt(e,10);this.notificationsOnScreen.delete(n);this.notificationService.sendConfirmAction(n,i)},onDeleteClick(t){this.notificationsOnScreen.delete(t);this.notificationService.delete(t)},onMoreUsersClick(t){p.Logger.warn("onMoreUsersClick",t);this.popupBindElement=t.event.target;this.userListIds=t.users;this.showUserListPopup=true},onSearch(t){if(t.searchQuery.length<3&&t.searchType===""&&t.searchDate===""){this.showSearchResult=false;return}this.showSearchResult=true;const e=this.notificationSearchService.searchInModel(t);this.$store.dispatch("notifications/clearSearchResult");this.$store.dispatch("notifications/setSearchResult",{notifications:e,skipValidation:true});this.isNextPageLoading=true;this.searchOnServerDelayed(t)},onSendQuickAnswer(t){this.notificationService.sendQuickAnswer(t)},onWindowFocus(){this.windowFocused=true;this.read([...this.notificationsOnScreen])},onWindowBlur(){this.windowFocused=false}},template:`\n\t\t<div class="bx-im-content-notification__container">\n\t\t\t<div class="bx-im-content-notification__header-container">\n\t\t\t\t<div class="bx-im-content-notification__header">\n\t\t\t\t\t<div class="bx-im-content-notification__header-panel-container">\n\t\t\t\t\t\t<div class="bx-im-content-notification__panel-title_icon"></div>\n\t\t\t\t\t\t<div class="bx-im-content-notification__panel_text">\n\t\t\t\t\t\t\t{{ $Bitrix.Loc.getMessage('IM_NOTIFICATIONS_HEADER') }}\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div v-if="notificationCollection.length > 0" class="bx-im-content-notification__header-buttons-container">\n\t\t\t\t\t\t<transition name="notifications-read-all-fade">\n\t\t\t\t\t\t\t<div\n\t\t\t\t\t\t\t\tv-if="isReadAllAvailable"\n\t\t\t\t\t\t\t\tclass="bx-im-content-notification__header_button bx-im-content-notification__header_read-all-button"\n\t\t\t\t\t\t\t\t@click="onClickReadAll"\n\t\t\t\t\t\t\t\t:title="$Bitrix.Loc.getMessage('IM_NOTIFICATIONS_READ_ALL_BUTTON')"\n\t\t\t\t\t\t\t></div>\n\t\t\t\t\t\t</transition>\n\t\t\t\t\t\t<div\n\t\t\t\t\t\t\tclass="bx-im-content-notification__header_button bx-im-content-notification__header_filter-button"\n\t\t\t\t\t\t\t:class="[showSearchPanel ? '--active' : '']"\n\t\t\t\t\t\t\t@click="showSearchPanel = !showSearchPanel"\n\t\t\t\t\t\t\t:title="$Bitrix.Loc.getMessage('IM_NOTIFICATIONS_SEARCH_FILTER_OPEN_BUTTON')"\n\t\t\t\t\t\t></div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t<NotificationSearchPanel v-if="showSearchPanel" :schema="schema" @search="onSearch" />\n\t\t\t</div>\n\t\t\t<div class="bx-im-content-notification__elements-container">\n\t\t\t\t<div class="bx-im-content-notification__elements" @scroll.passive="onScroll" ref="listNotifications">\n\t\t\t\t\t<NotificationItem\n\t\t\t\t\t\tv-for="notification in notifications"\n\t\t\t\t\t\t:key="notification.id"\n\t\t\t\t\t\t:data-id="notification.id"\n\t\t\t\t\t\t:notification="notification"\n\t\t\t\t\t\t@dblclick="onDoubleClick"\n\t\t\t\t\t\t@confirmButtonsClick="onConfirmButtonsClick"\n\t\t\t\t\t\t@deleteClick="onDeleteClick"\n\t\t\t\t\t\t@moreUsersClick="onMoreUsersClick"\n\t\t\t\t\t\t@sendQuickAnswer="onSendQuickAnswer"\n\t\t\t\t\t\tv-notifications-item-observer\n\t\t\t\t\t/>\n\t\t\t\t\t<div v-if="isEmptyState" class="bx-im-content-notification__empty-state-container">\n\t\t\t\t\t\t<div :class="emptyStateIcon"></div>\n\t\t\t\t\t\t<span class="bx-im-content-notification__empty-state-title">\n\t\t\t\t\t\t\t{{ emptyStateTitle }}\n\t\t\t\t\t\t</span>\n\t\t\t\t\t</div>\n\t\t\t\t\t<NotificationPlaceholder v-if="isInitialLoading" />\n\t\t\t\t\t<div v-if="isNextPageLoading" class="bx-im-content-notification__loader-container">\n\t\t\t\t\t\t<Loader />\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t<NotificationScrollButton\n\t\t\t\t\tv-if="!isInitialLoading || !isNextPageLoading"\n\t\t\t\t\t:unreadCounter="unreadCounter"\n\t\t\t\t\t:notificationsOnScreen="notificationsOnScreen"\n\t\t\t\t\t@scrollButtonClick="onScrollButtonClick"\n\t\t\t\t/>\n\t\t\t\t<UserListPopup\n\t\t\t\t\tv-if="showUserListPopup"\n\t\t\t\t\t:userIds="userListIds"\n\t\t\t\t\t:bindElement="popupBindElement"\n\t\t\t\t\t:showPopup="showUserListPopup"\n\t\t\t\t\t@close="showUserListPopup = false"\n\t\t\t\t/>\n\t\t\t</div>\n\t\t</div>\n\t`};t.NotificationContent=N})(this.BX.Messenger.v2.Component.Content=this.BX.Messenger.v2.Component.Content||{},BX,BX.UI.Dialogs,BX.Messenger.v2.Service,BX.Messenger.v2.Lib,BX.Messenger.v2.Lib,BX.Messenger.v2.Lib,BX.Messenger.v2.Component.Elements,BX.Messenger.v2.Lib,BX,BX.Vue3.Vuex,BX.Messenger.v2.Lib,BX,BX.Messenger.v2.Application,BX.Messenger.v2.Const,BX.Messenger.v2.Lib);
//# sourceMappingURL=notification-content.bundle.map.js