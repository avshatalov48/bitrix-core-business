this.BX=this.BX||{};this.BX.Messenger=this.BX.Messenger||{};this.BX.Messenger.v2=this.BX.Messenger.v2||{};this.BX.Messenger.v2.Component=this.BX.Messenger.v2.Component||{};(function(e,t,s,a,r){"use strict";const i="none";const o={name:"ReplyComponent",props:{dialogId:{type:String,required:true},replyId:{type:Number,required:true},isForward:{type:Boolean,default:false}},computed:{dialog(){return this.$store.getters["chats/get"](this.dialogId,true)},replyMessage(){return this.$store.getters["messages/getById"](this.replyId)},replyMessageChat(){var e;return this.$store.getters["chats/getByChatId"]((e=this.replyMessage)==null?void 0:e.chatId)},replyAuthor(){return this.$store.getters["users/get"](this.replyMessage.authorId)},replyTitle(){return this.replyAuthor?this.replyAuthor.name:this.loc("IM_DIALOG_CHAT_QUOTE_DEFAULT_TITLE")},replyText(){let e=r.Parser.prepareQuote(this.replyMessage);e=r.Parser.decodeText(e);return e},isQuoteFromTheSameChat(){var e;return((e=this.replyMessage)==null?void 0:e.chatId)===this.dialog.chatId},replyContext(){if(!this.isQuoteFromTheSameChat){return i}if(!this.isForward){return`${this.dialogId}/${this.replyId}`}return`${this.replyMessageChat.dialogId}/${this.replyId}`},canShowReply(){return!a.Type.isNil(this.replyMessage)&&!a.Type.isNil(this.replyMessageChat)}},methods:{loc(e){return this.$Bitrix.Loc.getMessage(e)}},template:`\n\t\t<div v-if="canShowReply" class="bx-im-message-quote" :data-context="replyContext">\n\t\t\t<div class="bx-im-message-quote__wrap">\n\t\t\t\t<div class="bx-im-message-quote__name">\n\t\t\t\t\t<div class="bx-im-message-quote__name-text">{{ replyTitle }}</div>\n\t\t\t\t</div>\n\t\t\t\t<div class="bx-im-message-quote__text" v-html="replyText"></div>\n\t\t\t</div>\n\t\t</div>\n\t`};const n={name:"DefaultMessage",components:{MessageHeader:t.MessageHeader,MessageFooter:t.MessageFooter,BaseMessage:s.BaseMessage,DefaultMessageContent:t.DefaultMessageContent,ReactionSelector:t.ReactionSelector,Reply:o,MessageKeyboard:t.MessageKeyboard},props:{item:{type:Object,required:true},dialogId:{type:String,required:true},withTitle:{type:Boolean,default:true}},computed:{message(){return this.item},isReply(){return this.message.replyId!==0},isForward(){return this.$store.getters["messages/isForward"](this.message.id)},hasKeyboard(){return this.message.keyboard.length>0}},template:`\n\t\t<BaseMessage :item="item" :dialogId="dialogId" :afterMessageWidthLimit="false">\n\t\t\t<template #before-message v-if="$slots['before-message']">\n\t\t\t\t<slot name="before-message"></slot>\n\t\t\t</template>\n\t\t\t<div class="bx-im-message-default__container">\n\t\t\t\t<MessageHeader :withTitle="withTitle" :item="item" />\n\t\t\t\t<Reply v-if="isReply" :dialogId="dialogId" :replyId="message.replyId" :isForward="isForward" />\n\t\t\t\t<DefaultMessageContent :item="item" :dialogId="dialogId" />\n\t\t\t</div>\n\t\t\t<MessageFooter :item="item" :dialogId="dialogId" />\n\t\t\t<template #after-message v-if="hasKeyboard">\n\t\t\t\t<MessageKeyboard :item="item" :dialogId="dialogId" />\n\t\t\t</template>\n\t\t</BaseMessage>\n\t`};e.DefaultMessage=n})(this.BX.Messenger.v2.Component.Message=this.BX.Messenger.v2.Component.Message||{},BX.Messenger.v2.Component.Message,BX.Messenger.v2.Component.Message,BX,BX.Messenger.v2.Lib);
//# sourceMappingURL=default.bundle.map.js