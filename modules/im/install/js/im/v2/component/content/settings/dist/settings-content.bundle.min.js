this.BX=this.BX||{};this.BX.Messenger=this.BX.Messenger||{};this.BX.Messenger.v2=this.BX.Messenger.v2||{};this.BX.Messenger.v2.Component=this.BX.Messenger.v2.Component||{};(function(t,e,n,i,s,o,c,a,r,l,d,g,_,S,p){"use strict";const h={appearance:{name:a.Loc.getMessage("IM_CONTENT_SETTINGS_SECTION_LIST_APPEARANCE"),icon:"fa-solid fa-brush"},notification:{name:a.Loc.getMessage("IM_CONTENT_SETTINGS_SECTION_LIST_NOTIFICATION"),icon:"fa-solid fa-bell"},hotkey:{name:a.Loc.getMessage("IM_CONTENT_SETTINGS_SECTION_LIST_HOTKEY"),icon:"fa-solid fa-keyboard"},message:{name:a.Loc.getMessage("IM_CONTENT_SETTINGS_SECTION_LIST_MESSAGE"),icon:"fa-solid fa-message"},recent:{name:a.Loc.getMessage("IM_CONTENT_SETTINGS_SECTION_LIST_RECENT"),icon:"fa-solid fa-list-ul"},desktop:{name:a.Loc.getMessage("IM_CONTENT_SETTINGS_SECTION_LIST_DESKTOP"),icon:"fa-solid fa-desktop"},help:{name:a.Loc.getMessage("IM_CONTENT_SETTINGS_SECTION_LIST_HELP"),icon:"fa-solid fa-question"},feedback:{name:a.Loc.getMessage("IM_CONTENT_SETTINGS_SECTION_LIST_FEEDBACK"),icon:"fa-solid fa-comment"}};const m={help:"help",feedback:"feedback"};const T={name:"SectionList",props:{activeSection:{type:String,required:true}},emits:["sectionClick"],data(){return{}},computed:{AdditionalSections:()=>m,disabledSections(){const t=new Set([S.SettingsSection.message]);if(!g.DesktopApi.isDesktop()){t.add(S.SettingsSection.desktop)}return t},sections(){return Object.keys(S.SettingsSection).filter((t=>!this.disabledSections.has(t)))}},methods:{getSectionName(t){return h[t].name},getSectionIconClass(t){return h[t].icon},onHelpClick(){var t;const e="17373696";(t=BX.Helper)==null?void 0:t.show(`redirect=detail&code=${e}`)},onFeedbackClick(){BX.UI.Feedback.Form.open({id:"im-v2-feedback",forms:[{zones:["ru"],id:550,sec:"50my2x",lang:"ru"},{zones:["en"],id:560,sec:"621lbr",lang:"ru"}],presets:{sender_page:"profile"}})},loc(t){return this.$Bitrix.Loc.getMessage(t)}},template:`\n\t\t<div class="bx-im-settings-section-list__container">\n\t\t\t<div class="bx-im-settings-section-list__title">\n\t\t\t\t{{ loc('IM_CONTENT_SETTINGS_SECTION_LIST_TITLE') }}\n\t\t\t</div>\n\t\t\t<div\n\t\t\t\tv-for="section in sections"\n\t\t\t\t:key="section"\n\t\t\t\tclass="bx-im-settings-section-list__item"\n\t\t\t\t:class="{'--active': section === activeSection}"\n\t\t\t\t@click="$emit('sectionClick', section)"\n\t\t\t>\n\t\t\t\t<div class="bx-im-settings-section-list__item_icon">\n\t\t\t\t\t<i :class="getSectionIconClass(section)"></i>\n\t\t\t\t</div>\n\t\t\t\t<div class="bx-im-settings-section-list__item_title">{{ getSectionName(section) }}</div>\n\t\t\t</div>\n\t\t\t\x3c!-- Help --\x3e\n\t\t\t<div\n\t\t\t\tclass="bx-im-settings-section-list__item"\n\t\t\t\t@click="onHelpClick"\n\t\t\t>\n\t\t\t\t<div class="bx-im-settings-section-list__item_icon">\n\t\t\t\t\t<i :class="getSectionIconClass(AdditionalSections.help)"></i>\n\t\t\t\t</div>\n\t\t\t\t<div class="bx-im-settings-section-list__item_title">{{ getSectionName(AdditionalSections.help) }}</div>\n\t\t\t</div>\n\t\t\t\x3c!-- Feedback --\x3e\n\t\t\t<div\n\t\t\t\tclass="bx-im-settings-section-list__item"\n\t\t\t\t@click="onFeedbackClick"\n\t\t\t>\n\t\t\t\t<div class="bx-im-settings-section-list__item_icon">\n\t\t\t\t\t<i :class="getSectionIconClass(AdditionalSections.feedback)"></i>\n\t\t\t\t</div>\n\t\t\t\t<div class="bx-im-settings-section-list__item_title">{{ getSectionName(AdditionalSections.feedback) }}</div>\n\t\t\t</div>\n\t\t</div>\n\t`};const v={name:"ChatBackground",emits:["close"],computed:{currentBackgroundId(){return this.$store.getters["application/settings/get"](S.Settings.appearance.background).toString()},backgroundIdList(){return Object.keys(s.ThemeColorScheme)}},methods:{getBackgroundStyleById(t){return s.ThemeManager.getBackgroundStyleById(t)},onBackgroundClick(t){const e=Number.parseInt(t,10);const n=new p.SettingsService;n.changeSetting(S.Settings.appearance.background,e)}},template:`\n\t\t<div class="bx-im-settings-background__container">\n\t\t\t<div class="bx-im-settings-background__list">\n\t\t\t\t<div\n\t\t\t\t\tv-for="id in backgroundIdList"\n\t\t\t\t\t:key="id"\n\t\t\t\t\t:style="getBackgroundStyleById(id)"\n\t\t\t\t\tclass="bx-im-background-select-popup__item bx-im-settings-background__item"\n\t\t\t\t\t:class="{'--active': id === currentBackgroundId}"\n\t\t\t\t\t@click="onBackgroundClick(id)"\n\t\t\t\t></div>\n\t\t\t</div>\n\t\t</div>\n\t`};const u={name:"ChatAlignment",emits:["close"],computed:{DialogAlignment:()=>S.DialogAlignment,currentOptionId(){return this.$store.getters["application/settings/get"](S.Settings.appearance.alignment)},backgroundStyle(){return s.ThemeManager.getCurrentBackgroundStyle()}},methods:{onOptionClick(t){this.getSettingsService().changeSetting(S.Settings.appearance.alignment,t)},getSettingsService(){if(!this.settingsService){this.settingsService=new p.SettingsService}return this.settingsService}},template:`\n\t\t<div class="bx-im-settings-alignment__container">\n\t\t\t<div class="bx-im-settings-alignment__list">\n\t\t\t\t<div\n\t\t\t\t\tclass="bx-im-settings-alignment__item --left"\n\t\t\t\t\t:class="{'--active': currentOptionId === DialogAlignment.left}"\n\t\t\t\t\t:style="backgroundStyle"\n\t\t\t\t\t@click="onOptionClick(DialogAlignment.left)"\n\t\t\t\t>\n\t\t\t\t\t<div class="bx-im-settings-alignment__item_content"></div>\n\t\t\t\t\t<div v-if="currentOptionId === DialogAlignment.left" class="bx-im-settings-alignment__item_checkmark"></div>\n\t\t\t\t</div>\n\t\t\t\t<div\n\t\t\t\t\tclass="bx-im-settings-alignment__item --center"\n\t\t\t\t\t:class="{'--active': currentOptionId === DialogAlignment.center}"\n\t\t\t\t\t:style="backgroundStyle"\n\t\t\t\t\t@click="onOptionClick(DialogAlignment.center)"\n\t\t\t\t>\n\t\t\t\t\t<div class="bx-im-settings-alignment__item_content"></div>\n\t\t\t\t\t<div v-if="currentOptionId === DialogAlignment.center" class="bx-im-settings-alignment__item_checkmark"></div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t`};const b="settings";const I={dialogId:b,chatId:-1,type:S.ChatType.chat,inited:true,role:S.UserRole.guest};const N={id:-1,name:a.Loc.getMessage("IM_CONTENT_SETTINGS_DEMO_CHAT_USER_NAME")};const O={id:-3,chatId:I.chatId,authorId:N.id,text:a.Loc.getMessage("IM_CONTENT_SETTINGS_DEMO_CHAT_MESSAGE_1"),viewedByOthers:true};const C={id:-2,chatId:I.chatId,authorId:r.Core.getUserId(),replyId:O.id,text:a.Loc.getMessage("IM_CONTENT_SETTINGS_DEMO_CHAT_MESSAGE_2"),viewedByOthers:true};const E={id:-1,chatId:I.chatId,authorId:N.id,text:a.Loc.getMessage("IM_CONTENT_SETTINGS_DEMO_CHAT_MESSAGE_3"),viewedByOthers:true};const k={initModels(){r.Core.getStore().dispatch("chats/set",I);const t=new o.UserManager;t.addUsersToModel([N]);const e=[O,C,E];r.Core.getStore().dispatch("messages/setChatCollection",{messages:e})}};const x={name:"AppearanceSection",components:{ChatDialog:i.ChatDialog,ChatBackground:v,ChatAlignment:u},data(){return{}},computed:{containerClasses(){const t=this.$store.getters["application/settings/get"](S.Settings.appearance.alignment);return[`--${t}-align`]},backgroundStyle(){return s.ThemeManager.getCurrentBackgroundStyle()}},created(){k.initModels()},methods:{loc(t){return this.$Bitrix.Loc.getMessage(t)}},template:`\n\t\t<div class="bx-im-settings-section-content__body">\n\t\t\t<div class="bx-im-settings-section-content__block">\n\t\t\t\t<div class="bx-im-content-chat__container bx-im-settings-appearance__demo-chat_container" :class="containerClasses" :style="backgroundStyle">\n\t\t\t\t\t<ChatDialog :dialogId="'settings'" />\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<div class="bx-im-settings-section-content__block">\n\t\t\t\t<div class="bx-im-settings-section-content__block_title">\n\t\t\t\t\t{{ loc('IM_CONTENT_SETTINGS_OPTION_APPEARANCE_BACKGROUND') }}\n\t\t\t\t</div>\n\t\t\t\t<ChatBackground />\n\t\t\t</div>\n\t\t\t<div class="bx-im-settings-section-content__separator"></div>\n\t\t\t<div class="bx-im-settings-section-content__block">\n\t\t\t\t<div class="bx-im-settings-section-content__block_title">\n\t\t\t\t\t{{ loc('IM_CONTENT_SETTINGS_OPTION_APPEARANCE_ALIGNMENT') }}\n\t\t\t\t</div>\n\t\t\t\t<ChatAlignment />\n\t\t\t</div>\n\t\t</div>\n\t`};const M={name:"CheckboxOption",props:{value:{type:Boolean,required:true},text:{type:String,required:false,default:""},disabled:{type:Boolean,required:false,default:false}},emits:["change"],data(){return{}},methods:{onInput(t){this.$emit("change",t.target.checked)}},template:`\n\t\t<div class="bx-im-settings-checkbox__container bx-im-settings-section-content__block_option" :class="{ '--no-text': text === '' }">\n\t\t\t<label class="ui-ctl ui-ctl-checkbox">\n\t\t\t\t<input type="checkbox" :checked="value" :disabled="disabled" @input="onInput" class="ui-ctl-element">\n\t\t\t\t<div v-if="text" class="ui-ctl-label-text">{{ text }}</div>\n\t\t\t</label>\n\t\t</div>\n\t`};const f={name:"RadioOption",props:{items:{type:Array,required:true}},emits:["change"],data(){return{groupName:a.Text.getRandom()}},computed:{options(){return this.items},selectedValue(){return this.options.find((t=>t.selected===true))}},methods:{onInput(t){this.$emit("change",t.value)}},template:`\n\t\t<div class="bx-im-settings-radio__container bx-im-settings-section-content__block_option">\n\t\t\t<label v-for="option in options" class="ui-ctl ui-ctl-radio">\n\t\t\t\t<input type="radio" class="ui-ctl-element" :name="groupName" :checked="option.selected" @input="onInput(option)">\n\t\t\t\t<div class="bx-im-settings-radio__label ui-ctl-label-text">\n\t\t\t\t\t\x3c!-- Text --\x3e\n\t\t\t\t\t<div v-if="option.html" class="bx-im-settings-radio__label_title" v-html="option.text"></div>\n\t\t\t\t\t<div v-else class="bx-im-settings-radio__label_title">{{ option.text }}</div>\n\t\t\t\t\t\x3c!-- Subtext --\x3e\n\t\t\t\t\t<template v-if="option.subtext">\n\t\t\t\t\t\t<div v-if="option.html" class="bx-im-settings-radio__label_subtitle" v-html="option.subtext"></div>\n\t\t\t\t\t\t<div v-else class="bx-im-settings-radio__label_subtitle">{{ option.subtext }}</div>\n\t\t\t\t\t</template>\n\t\t\t\t</div>\n\t\t\t</label>\n\t\t</div>\n\t`};const y={name:"SimpleNotificationList",components:{CheckboxOption:M},data(){return{}},computed:{enableWeb(){return this.$store.getters["application/settings/get"](S.Settings.notification.enableWeb)},enableMail(){return this.$store.getters["application/settings/get"](S.Settings.notification.enableMail)},enablePush(){return this.$store.getters["application/settings/get"](S.Settings.notification.enablePush)},enableMailText(){return this.loc("IM_CONTENT_SETTINGS_OPTION_NOTIFICATION_ENABLE_MAIL",{"#MAIL#":this.userEmail})},userEmail(){const{currentUser:{email:t}}=r.Core.getApplicationData();return t}},methods:{onEnableWebChange(t){this.getSettingsService().changeSetting(S.Settings.notification.enableWeb,t)},onEnableMailChange(t){this.getSettingsService().changeSetting(S.Settings.notification.enableMail,t)},onEnablePushChange(t){this.getSettingsService().changeSetting(S.Settings.notification.enablePush,t)},getSettingsService(){if(!this.settingsService){this.settingsService=new p.SettingsService}return this.settingsService},loc(t,e={}){return this.$Bitrix.Loc.getMessage(t,e)}},template:`\n\t\t<div class="bx-im-settings-section-content__body">\n\t\t\t<div class="bx-im-settings-section-content__block">\n\t\t\t\t<div class="bx-im-settings-section-content__block_title">\n\t\t\t\t\t{{ loc('IM_CONTENT_SETTINGS_OPTION_NOTIFICATION_BLOCK_SIMPLE_MODE_TITLE') }}\n\t\t\t\t</div>\n\t\t\t\t<CheckboxOption\n\t\t\t\t\t:value="enableWeb"\n\t\t\t\t\t:text="loc('IM_CONTENT_SETTINGS_OPTION_NOTIFICATION_ENABLE_WEB')"\n\t\t\t\t\t@change="onEnableWebChange"\n\t\t\t\t/>\n\t\t\t\t<CheckboxOption\n\t\t\t\t\t:value="enableMail"\n\t\t\t\t\t:text="enableMailText"\n\t\t\t\t\t@change="onEnableMailChange"\n\t\t\t\t/>\n\t\t\t\t<CheckboxOption\n\t\t\t\t\t:value="enablePush"\n\t\t\t\t\t:text="loc('IM_CONTENT_SETTINGS_OPTION_NOTIFICATION_ENABLE_PUSH_V1')"\n\t\t\t\t\t@change="onEnablePushChange"\n\t\t\t\t/>\n\t\t\t</div>\n\t\t</div>\n\t`};const A={async switchScheme(t){void r.Core.getStore().dispatch("application/settings/set",{[S.Settings.notification.mode]:t});const e=await l.runAction(S.RestMethod.imV2SettingsNotifySwitchScheme,{data:{userId:r.Core.getUserId(),scheme:t}}).catch((t=>{console.error("NotificationService: switchScheme error",t)}));return r.Core.getStore().dispatch("application/settings/set",{notifications:e})},changeExpertOption(t){const{moduleId:e,optionName:n,type:i,value:s}=t;r.Core.getStore().dispatch("application/settings/setNotificationOption",{moduleId:e,optionName:n,type:i,value:s});return l.runAction(S.RestMethod.imV2SettingsNotifyUpdate,{data:{userId:r.Core.getUserId(),moduleId:e,name:n,type:i,value:s}}).catch((t=>{console.error("NotificationService: changeExpertOption error",t)}))}};const L={name:"NotificationItem",components:{CheckboxOption:M},props:{item:{type:Object,required:true},blockId:{type:String,required:true}},data(){return{}},computed:{NotificationSettingsType:()=>S.NotificationSettingsType,notification(){return this.item},disabledForWeb(){return this.notification.disabled.includes(S.NotificationSettingsType.web)},disabledForMail(){return this.notification.disabled.includes(S.NotificationSettingsType.mail)},disabledForPush(){return this.notification.disabled.includes(S.NotificationSettingsType.push)}},methods:{onItemChange(t,e){A.changeExpertOption({moduleId:this.blockId,optionName:this.notification.id,type:e,value:t})}},template:`\n\t\t<div class="bx-im-settings-expert-notifications-item__container">\n\t\t\t<div class="bx-im-settings-expert-notifications-item__title">\n\t\t\t\t{{ notification.label }}\n\t\t\t</div>\n\t\t\t<div class="bx-im-settings-expert-notifications-item__type --web">\n\t\t\t\t<CheckboxOption :value="notification.site" :disabled="disabledForWeb" @change="onItemChange($event, NotificationSettingsType.web)" />\n\t\t\t</div>\n\t\t\t<div class="bx-im-settings-expert-notifications-item__type --mail">\n\t\t\t\t<CheckboxOption :value="notification.mail" :disabled="disabledForMail" @change="onItemChange($event, NotificationSettingsType.mail)" />\n\t\t\t</div>\n\t\t\t<div class="bx-im-settings-expert-notifications-item__type --push">\n\t\t\t\t<CheckboxOption :value="notification.push" :disabled="disabledForPush" @change="onItemChange($event, NotificationSettingsType.push)" />\n\t\t\t</div>\n\t\t</div>\n\t`};const B={name:"NotificationBlock",components:{NotificationItem:L},props:{item:{type:Object,required:true}},data(){return{}},computed:{block(){return this.item}},methods:{loc(t){return this.$Bitrix.Loc.getMessage(t)}},template:`\n\t\t<div class="bx-im-settings-section-content__body">\n\t\t\t<div class="bx-im-settings-section-content__block">\n\t\t\t\t<div class="bx-im-settings-section-content__block_title">\n\t\t\t\t\t{{ block.label }}\n\t\t\t\t</div>\n\t\t\t\t<div class="bx-im-settings-expert-notifications__header">\n\t\t\t\t\t<div class="bx-im-settings-expert-notifications__header_title"></div>\n\t\t\t\t\t<div class="bx-im-settings-expert-notifications__header_type">\n\t\t\t\t\t\t{{ loc('IM_CONTENT_SETTINGS_EXPERT_NOTIFICATIONS_TYPE_WEB') }}\n\t\t\t\t\t</div>\n\t\t\t\t\t<div class="bx-im-settings-expert-notifications__header_type">\n\t\t\t\t\t\t{{ loc('IM_CONTENT_SETTINGS_EXPERT_NOTIFICATIONS_TYPE_MAIL') }}\n\t\t\t\t\t</div>\n\t\t\t\t\t<div class="bx-im-settings-expert-notifications__header_type">\n\t\t\t\t\t\t{{ loc('IM_CONTENT_SETTINGS_EXPERT_NOTIFICATIONS_TYPE_PUSH') }}\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t<NotificationItem v-for="item in block.items" :item="item" :blockId="block.id" :key="item.id" />\n\t\t\t</div>\n\t\t</div>\n\t`};const P={name:"ExpertNotificationList",components:{NotificationBlock:B},data(){return{}},computed:{notificationSettings(){const t=this.$store.getters["application/settings/get"]("notifications");return Object.values(t)}},template:`\n\t\t<NotificationBlock\n\t\t\tv-for="block in notificationSettings"\n\t\t\t:item="block"\n\t\t\t:key="block.id"\n\t\t\tclass="bx-im-settings-expert-notifications__container"\n\t\t/>\n\t`};const D={name:"NotificationSection",components:{CheckboxOption:M,RadioOption:f,SimpleNotificationList:y,ExpertNotificationList:P},data(){return{}},computed:{enableSound(){return this.$store.getters["application/settings/get"](S.Settings.notification.enableSound)},enableAutoRead(){return this.$store.getters["application/settings/get"](S.Settings.notification.enableAutoRead)},notificationMode(){return this.$store.getters["application/settings/get"](S.Settings.notification.mode)},notificationModeOptions(){return[{value:S.NotificationSettingsMode.simple,text:this.loc("IM_CONTENT_SETTINGS_OPTION_NOTIFICATION_SIMPLE_MODE"),selected:this.notificationMode===S.NotificationSettingsMode.simple},{value:S.NotificationSettingsMode.expert,text:this.loc("IM_CONTENT_SETTINGS_OPTION_NOTIFICATION_EXPERT_MODE"),selected:this.notificationMode===S.NotificationSettingsMode.expert}]},notificationListComponent(){return this.notificationMode==="simple"?y:P}},methods:{onEnableSoundChange(t){this.getSettingsService().changeSetting(S.Settings.notification.enableSound,t)},onEnableAutoReadChange(t){this.getSettingsService().changeSetting(S.Settings.notification.enableAutoRead,t)},async onNotificationModeChange(t){const e=t===S.NotificationSettingsMode.simple;if(e){this.changeLocalNotificationMode(S.NotificationSettingsMode.simple);const t=await _.showNotificationsModeSwitchConfirm();if(!t){this.changeLocalNotificationMode(S.NotificationSettingsMode.expert);return}}void A.switchScheme(t)},async changeLocalNotificationMode(t){this.$store.dispatch("application/settings/set",{[S.Settings.notification.mode]:t})},getSettingsService(){if(!this.settingsService){this.settingsService=new p.SettingsService}return this.settingsService},loc(t){return this.$Bitrix.Loc.getMessage(t)}},template:`\n\t\t<div class="bx-im-settings-section-content__body">\n\t\t\t<div class="bx-im-settings-section-content__block">\n\t\t\t\t<div class="bx-im-settings-section-content__block_title">\n\t\t\t\t\t{{ loc('IM_CONTENT_SETTINGS_OPTION_NOTIFICATION_BLOCK_FOCUS') }}\n\t\t\t\t</div>\n\t\t\t\t<CheckboxOption\n\t\t\t\t\t:value="enableSound"\n\t\t\t\t\t:text="loc('IM_CONTENT_SETTINGS_OPTION_NOTIFICATION_ENABLE_SOUND')"\n\t\t\t\t\t@change="onEnableSoundChange"\n\t\t\t\t/>\n\t\t\t\t<CheckboxOption\n\t\t\t\t\t:value="enableAutoRead"\n\t\t\t\t\t:text="loc('IM_CONTENT_SETTINGS_OPTION_NOTIFICATION_AUTO_READ')"\n\t\t\t\t\t@change="onEnableAutoReadChange"\n\t\t\t\t/>\n\t\t\t</div>\n\t\t</div>\n\t\t<div class="bx-im-settings-section-content__body">\n\t\t\t<div class="bx-im-settings-section-content__block">\n\t\t\t\t<div class="bx-im-settings-section-content__block_title">\n\t\t\t\t\t{{ loc('IM_CONTENT_SETTINGS_OPTION_NOTIFICATION_BLOCK_MODE') }}\n\t\t\t\t</div>\n\t\t\t\t<RadioOption :items="notificationModeOptions" @change="onNotificationModeChange" />\n\t\t\t</div>\n\t\t</div>\n\t\t<component :is="notificationListComponent" />\n\t`};const w={name:"HotkeySection",components:{RadioOption:f},data(){return{}},computed:{sendByEnter(){return this.$store.getters["application/settings/get"](S.Settings.hotkey.sendByEnter)},sendCombinationItems(){const t=d.Utils.platform.isMac()?"&#8984;":"Ctrl";const e=this.loc("IM_CONTENT_SETTINGS_OPTION_HOTKEY_NEW_LINE",{"#HOTKEY#":"Shift + Enter"});const n=this.loc("IM_CONTENT_SETTINGS_OPTION_HOTKEY_NEW_LINE",{"#HOTKEY#":"Enter"});return[{value:true,text:"Enter",subtext:e,selected:this.sendByEnter===true},{value:false,text:`${t} + Enter`,subtext:n,html:true,selected:this.sendByEnter===false}]},isMac(){return d.Utils.platform.isMac()}},methods:{onSendByEnterChange(t){this.getSettingsService().changeSetting(S.Settings.hotkey.sendByEnter,t)},getSettingsService(){if(!this.settingsService){this.settingsService=new p.SettingsService}return this.settingsService},loc(t,e={}){return this.$Bitrix.Loc.getMessage(t,e)}},template:`\n\t\t<div class="bx-im-settings-section-content__body">\n\t\t\t<div class="bx-im-settings-section-content__block">\n\t\t\t\t<div class="bx-im-settings-section-content__block_title">\n\t\t\t\t\t{{ loc('IM_CONTENT_SETTINGS_OPTION_HOTKEY_SEND_COMBINATION') }}\n\t\t\t\t</div>\n\t\t\t\t<RadioOption\n\t\t\t\t\t:items="sendCombinationItems"\n\t\t\t\t\t@change="onSendByEnterChange"\n\t\t\t\t/>\n\t\t\t</div>\n\t\t</div>\n\t`};const G={name:"RecentSection",components:{CheckboxOption:M},data(){return{}},computed:{showBirthday(){return this.$store.getters["application/settings/get"](S.Settings.recent.showBirthday)},showInvited(){return this.$store.getters["application/settings/get"](S.Settings.recent.showInvited)},showLastMessage(){return this.$store.getters["application/settings/get"](S.Settings.recent.showLastMessage)}},methods:{onShowBirthdayChange(t){this.getSettingsService().changeSetting(S.Settings.recent.showBirthday,t)},onShowInvitedChange(t){this.getSettingsService().changeSetting(S.Settings.recent.showInvited,t)},onShowLastMessageChange(t){this.getSettingsService().changeSetting(S.Settings.recent.showLastMessage,t)},getSettingsService(){if(!this.settingsService){this.settingsService=new p.SettingsService}return this.settingsService},loc(t){return this.$Bitrix.Loc.getMessage(t)}},template:`\n\t\t<div class="bx-im-settings-section-content__body">\n\t\t\t<div class="bx-im-settings-section-content__block">\n\t\t\t\t<CheckboxOption\n\t\t\t\t\t:value="showBirthday"\n\t\t\t\t\t:text="loc('IM_CONTENT_SETTINGS_OPTION_RECENT_SHOW_BIRTHDAY')"\n\t\t\t\t\t@change="onShowBirthdayChange"\n\t\t\t\t/>\n\t\t\t\t<CheckboxOption\n\t\t\t\t\t:value="showInvited"\n\t\t\t\t\t:text="loc('IM_CONTENT_SETTINGS_OPTION_RECENT_SHOW_INVITED')"\n\t\t\t\t\t@change="onShowInvitedChange"\n\t\t\t\t/>\n\t\t\t\t<CheckboxOption\n\t\t\t\t\t:value="showLastMessage"\n\t\t\t\t\t:text="loc('IM_CONTENT_SETTINGS_OPTION_RECENT_SHOW_TEXT')"\n\t\t\t\t\t@change="onShowLastMessageChange"\n\t\t\t\t/>\n\t\t\t</div>\n\t\t</div>\n\t`};const R={name:"DesktopSection",components:{CheckboxOption:M},data(){return{}},computed:{twoWindowMode(){return g.DesktopApi.isTwoWindowMode()},autoStartDesktop(){return g.DesktopApi.getAutostartStatus()},openPortalLinkInDesktop(){return this.$store.getters["application/settings/get"](S.Settings.desktop.enableRedirect)},openPortalLinkInDesktopPhrase(){if(!g.DesktopApi.isFeatureSupported(g.DesktopFeature.openPage.id)){return this.loc("IM_CONTENT_SETTINGS_OPTION_DESKTOP_ALWAYS_OPEN_CHAT")}return this.loc("IM_CONTENT_SETTINGS_OPTION_DESKTOP_ALWAYS_OPEN_PORTAL_LINK_V2")},openLinksInSlider(){const t=g.DesktopApi.getCustomSetting(g.DesktopSettingsKey.sliderBindingsStatus,"1");return t==="1"},sendTelemetry(){return g.DesktopApi.getTelemetryStatus()}},methods:{async onTwoWindowModeChange(t){g.DesktopApi.setTwoWindowMode(t);if(!g.DesktopApi.isFeatureSupported(g.DesktopFeature.restart.id)){void _.showDesktopConfirm();return}const e=await _.showDesktopRestartConfirm();if(e===true){g.DesktopApi.restart()}},onAutoStartDesktopChange(t){g.DesktopApi.setAutostartStatus(t)},onOpenPortalLinkInDesktopChange(t){this.getSettingsService().changeSetting(S.Settings.desktop.enableRedirect,t)},onOpenLinksInSliderChange(t){this.setSliderBindingStatus(t);g.DesktopApi.setCustomSetting(g.DesktopSettingsKey.sliderBindingsStatus,t?"1":"0")},onSendTelemetryChange(t){g.DesktopApi.setTelemetryStatus(t)},setSliderBindingStatus(t){if(t===true){BX.SidePanel.Instance.enableAnchorBinding();return}BX.SidePanel.Instance.disableAnchorBinding()},getSettingsService(){if(!this.settingsService){this.settingsService=new p.SettingsService}return this.settingsService},loc(t){return this.$Bitrix.Loc.getMessage(t)}},template:`\n\t\t<div class="bx-im-settings-section-content__body">\n\t\t\t<div class="bx-im-settings-section-content__block">\n\t\t\t\t<div class="bx-im-settings-section-content__block_title">\n\t\t\t\t\t{{ loc('IM_CONTENT_SETTINGS_OPTION_DESKTOP_BLOCK_STARTUP') }}\n\t\t\t\t</div>\n\t\t\t\t<CheckboxOption\n\t\t\t\t\t:value="twoWindowMode"\n\t\t\t\t\t:text="loc('IM_CONTENT_SETTINGS_OPTION_DESKTOP_TWO_WINDOW_MODE_V2')"\n\t\t\t\t\t@change="onTwoWindowModeChange"\n\t\t\t\t/>\n\t\t\t\t<CheckboxOption\n\t\t\t\t\t:value="autoStartDesktop"\n\t\t\t\t\t:text="loc('IM_CONTENT_SETTINGS_OPTION_DESKTOP_AUTO_START')"\n\t\t\t\t\t@change="onAutoStartDesktopChange"\n\t\t\t\t/>\n\t\t\t</div>\n\t\t\t<div class="bx-im-settings-section-content__block">\n\t\t\t\t<div class="bx-im-settings-section-content__block_title">\n\t\t\t\t\t{{ loc('IM_CONTENT_SETTINGS_OPTION_DESKTOP_BLOCK_LINKS') }}\n\t\t\t\t</div>\n\t\t\t\t<CheckboxOption\n\t\t\t\t\t:value="openPortalLinkInDesktop"\n\t\t\t\t\t:text="openPortalLinkInDesktopPhrase"\n\t\t\t\t\t@change="onOpenPortalLinkInDesktopChange"\n\t\t\t\t/>\n\t\t\t\t<CheckboxOption\n\t\t\t\t\t:value="openLinksInSlider"\n\t\t\t\t\t:text="loc('IM_CONTENT_SETTINGS_OPTION_DESKTOP_OPEN_LINKS_IN_SLIDER_V2')"\n\t\t\t\t\t@change="onOpenLinksInSliderChange"\n\t\t\t\t/>\n\t\t\t</div>\n\t\t\t<div class="bx-im-settings-section-content__block">\n\t\t\t\t<div class="bx-im-settings-section-content__block_title">\n\t\t\t\t\t{{ loc('IM_CONTENT_SETTINGS_OPTION_DESKTOP_BLOCK_ADDITIONAL') }}\n\t\t\t\t</div>\n\t\t\t\t<CheckboxOption\n\t\t\t\t\t:value="sendTelemetry"\n\t\t\t\t\t:text="loc('IM_CONTENT_SETTINGS_OPTION_DESKTOP_SEND_TELEMETRY')"\n\t\t\t\t\t@change="onSendTelemetryChange"\n\t\t\t\t/>\n\t\t\t</div>\n\t\t</div>\n\t`};const $={name:"SectionContent",components:{AppearanceSection:x,NotificationSection:D,HotkeySection:w,RecentSection:G,DesktopSection:R},props:{activeSection:{type:String,required:true}},data(){return{}},computed:{sectionComponentName(){const t=this.activeSection[0].toUpperCase()+this.activeSection.slice(1);const e="Section";return`${t}${e}`},sectionName(){return h[this.activeSection].name},sectionIconClass(){return h[this.activeSection].icon}},methods:{loc(t){return this.$Bitrix.Loc.getMessage(t)}},template:`\n\t\t<div class="bx-im-settings-section-content__container">\n\t\t\t<div class="bx-im-settings-section-content__header">\n\t\t\t\t<div class="bx-im-settings-section-content__header_icon">\n\t\t\t\t\t<i :class="sectionIconClass"></i>\n\t\t\t\t</div>\n\t\t\t\t<div class="bx-im-settings-section-content__header_title">{{ sectionName }}</div>\n\t\t\t</div>\n\t\t\t<div class="bx-im-settings-section-content__background">\n\t\t\t\t<component :is="sectionComponentName" />\n\t\t\t</div>\n\t\t</div>\n\t`};const X={name:"SettingsContent",components:{SectionList:T,SectionContent:$},props:{entityId:{type:String,required:true}},data(){return{activeSection:""}},computed:{sections(){return Object.keys(S.Settings)}},created(){e.Logger.warn("Content: Openlines created");this.setInitialSection()},methods:{setInitialSection(){if(this.entityId&&S.SettingsSection[this.entityId]){this.activeSection=this.entityId;return}this.activeSection=this.sections[0]},onSectionClick(t){this.activeSection=t}},template:`\n\t\t<div class="bx-im-content-settings__container">\n\t\t\t<SectionList :activeSection="activeSection" @sectionClick="onSectionClick" />\n\t\t\t<SectionContent :activeSection="activeSection" />\n\t\t</div>\n\t`};t.SettingsContent=X})(this.BX.Messenger.v2.Component.Content=this.BX.Messenger.v2.Component.Content||{},BX.Messenger.v2.Lib,BX.UI.Feedback,BX.Messenger.v2.Component.Dialog,BX.Messenger.v2.Lib,BX.Messenger.v2.Lib,BX,BX,BX.Messenger.v2.Application,BX.Messenger.v2.Lib,BX.Messenger.v2.Lib,BX.Messenger.v2.Lib,BX.Messenger.v2.Lib,BX.Messenger.v2.Const,BX.Messenger.v2.Service);
//# sourceMappingURL=settings-content.bundle.map.js