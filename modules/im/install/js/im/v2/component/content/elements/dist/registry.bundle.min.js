this.BX=this.BX||{};this.BX.Messenger=this.BX.Messenger||{};this.BX.Messenger.v2=this.BX.Messenger.v2||{};this.BX.Messenger.v2.Component=this.BX.Messenger.v2.Component||{};(function(t,e,a,n,i,s,r,o,l,c,d,h,u,g,v,p,C,m,_,b,E,T,I,A,f,L,M,y){"use strict";const S={video:{id:"video",locCode:"IM_CONTENT_CHAT_HEADER_VIDEOCALL",start:t=>{l.Messenger.startVideoCall(t)}},audio:{id:"audio",locCode:"IM_CONTENT_CHAT_HEADER_CALL_MENU_AUDIO",start:t=>{l.Messenger.startVideoCall(t,false)}},beta:{id:"beta",locCode:"IM_CONTENT_CHAT_HEADER_CALL_MENU_BETA_2",start:t=>{const e=f.Core.getStore().getters["chats/get"](t);c.CallManager.getInstance().createBetaCallRoom(e.chatId)}}};let B=t=>t,N;var x=babelHelpers.classPrivateFieldLooseKey("getDelimiter");var P=babelHelpers.classPrivateFieldLooseKey("getVideoCallItem");var O=babelHelpers.classPrivateFieldLooseKey("getAudioCallItem");var H=babelHelpers.classPrivateFieldLooseKey("analyticsOnStartCallClick");var k=babelHelpers.classPrivateFieldLooseKey("getPersonalPhoneItem");var D=babelHelpers.classPrivateFieldLooseKey("getWorkPhoneItem");var R=babelHelpers.classPrivateFieldLooseKey("getInnerPhoneItem");var w=babelHelpers.classPrivateFieldLooseKey("getZoomItem");var U=babelHelpers.classPrivateFieldLooseKey("getUserPhoneHtml");var F=babelHelpers.classPrivateFieldLooseKey("isCallAvailable");var X=babelHelpers.classPrivateFieldLooseKey("getUser");var $=babelHelpers.classPrivateFieldLooseKey("isUser");var z=babelHelpers.classPrivateFieldLooseKey("requestCreateZoomConference");class K extends i.BaseMenu{constructor(){super();Object.defineProperty(this,z,{value:nt});Object.defineProperty(this,$,{value:at});Object.defineProperty(this,X,{value:et});Object.defineProperty(this,F,{value:tt});Object.defineProperty(this,U,{value:Q});Object.defineProperty(this,w,{value:Y});Object.defineProperty(this,R,{value:J});Object.defineProperty(this,D,{value:W});Object.defineProperty(this,k,{value:Z});Object.defineProperty(this,H,{value:q});Object.defineProperty(this,O,{value:G});Object.defineProperty(this,P,{value:V});Object.defineProperty(this,x,{value:j});this.id="bx-im-chat-header-call-menu"}getMenuOptions(){return{...super.getMenuOptions(),className:this.getMenuClassName(),angle:true,offsetLeft:4,offsetTop:5}}getMenuClassName(){return"bx-im-messenger__scope bx-im-chat-header-call-button__scope"}getMenuItems(){return[babelHelpers.classPrivateFieldLooseBase(this,P)[P](),babelHelpers.classPrivateFieldLooseBase(this,O)[O](),babelHelpers.classPrivateFieldLooseBase(this,w)[w](),babelHelpers.classPrivateFieldLooseBase(this,x)[x](),babelHelpers.classPrivateFieldLooseBase(this,k)[k](),babelHelpers.classPrivateFieldLooseBase(this,D)[D](),babelHelpers.classPrivateFieldLooseBase(this,R)[R]()]}}function j(){return{delimiter:true}}function V(){const t=babelHelpers.classPrivateFieldLooseBase(this,F)[F](this.context.dialogId);return{text:T.Loc.getMessage("IM_CONTENT_CHAT_HEADER_VIDEOCALL"),onclick:()=>{if(!t){return}babelHelpers.classPrivateFieldLooseBase(this,H)[H](S.video.id);S.video.start(this.context.dialogId);this.emit(K.events.onMenuItemClick,S.video);this.menuInstance.close()},disabled:!t}}function G(){const t=babelHelpers.classPrivateFieldLooseBase(this,F)[F](this.context.dialogId);return{text:T.Loc.getMessage("IM_CONTENT_CHAT_HEADER_CALL_MENU_AUDIO"),onclick:()=>{if(!t){return}babelHelpers.classPrivateFieldLooseBase(this,H)[H](S.audio.id);S.audio.start(this.context.dialogId);this.emit(K.events.onMenuItemClick,S.audio);this.menuInstance.close()},disabled:!t}}function q(t){o.Analytics.getInstance().onStartCallClick({type:babelHelpers.classPrivateFieldLooseBase(this,$)[$]()?o.Analytics.AnalyticsType.privateCall:o.Analytics.AnalyticsType.groupCall,section:o.Analytics.AnalyticsSection.chatWindow,subSection:o.Analytics.AnalyticsSubSection.contextMenu,element:t===S.video.id?o.Analytics.AnalyticsElement.videocall:o.Analytics.AnalyticsElement.audiocall,chatId:this.context.chatId})}function Z(){if(!babelHelpers.classPrivateFieldLooseBase(this,$)[$]()){return null}const{phones:t}=babelHelpers.classPrivateFieldLooseBase(this,X)[X]();if(!t.personalMobile){return null}const e=T.Loc.getMessage("IM_CONTENT_CHAT_HEADER_CALL_MENU_PERSONAL_PHONE");return{className:"menu-popup-no-icon bx-im-chat-header-call-button-menu__item",html:babelHelpers.classPrivateFieldLooseBase(this,U)[U](e,t.personalMobile),onclick:()=>{l.Messenger.startPhoneCall(t.personalMobile);this.menuInstance.close()}}}function W(){if(!babelHelpers.classPrivateFieldLooseBase(this,$)[$]()){return null}const{phones:t}=babelHelpers.classPrivateFieldLooseBase(this,X)[X]();if(!t.workPhone){return null}const e=T.Loc.getMessage("IM_CONTENT_CHAT_HEADER_CALL_MENU_WORK_PHONE");return{className:"menu-popup-no-icon bx-im-chat-header-call-button-menu__item",html:babelHelpers.classPrivateFieldLooseBase(this,U)[U](e,t.workPhone),onclick:()=>{l.Messenger.startPhoneCall(t.workPhone);this.menuInstance.close()}}}function J(){if(!babelHelpers.classPrivateFieldLooseBase(this,$)[$]()){return null}const{phones:t}=babelHelpers.classPrivateFieldLooseBase(this,X)[X]();if(!t.innerPhone){return null}const e=T.Loc.getMessage("IM_CONTENT_CHAT_HEADER_CALL_MENU_INNER_PHONE_MSGVER_1");return{className:"menu-popup-no-icon bx-im-chat-header-call-button-menu__item",html:babelHelpers.classPrivateFieldLooseBase(this,U)[U](e,t.innerPhone),onclick:()=>{l.Messenger.startPhoneCall(t.innerPhone);this.menuInstance.close()}}}function Y(){const t=r.FeatureManager.isFeatureAvailable(r.Feature.zoomActive);if(!t){return null}const e=["bx-im-chat-header-call-button-menu__zoom","menu-popup-no-icon"];const a=r.FeatureManager.isFeatureAvailable(r.Feature.zoomAvailable);if(!a){e.push("--disabled")}return{className:e.join(" "),text:T.Loc.getMessage("IM_CONTENT_CHAT_HEADER_CALL_MENU_ZOOM"),onclick:()=>{if(!a){BX.UI.InfoHelper.show("limit_video_conference_zoom");return}babelHelpers.classPrivateFieldLooseBase(this,z)[z](this.context.dialogId);this.menuInstance.close()}}}function Q(t,e){return T.Tag.render(N||(N=B`
			<span class="bx-im-chat-header-call-button-menu__phone_container">
				<span class="bx-im-chat-header-call-button-menu__phone_title">${0}</span>
				<span class="bx-im-chat-header-call-button-menu__phone_number">${0}</span>
			</span>
		`),t,e)}function tt(t){if(f.Core.getStore().getters["recent/calls/hasActiveCall"](t)&&c.CallManager.getInstance().getCurrentCallDialogId()===t){return true}if(f.Core.getStore().getters["recent/calls/hasActiveCall"]()){return false}const e=c.CallManager.getInstance().chatCanBeCalled(t);const a=m.PermissionManager.getInstance().canPerformAction(L.ChatActionType.call,t);return e&&a}function et(){if(!babelHelpers.classPrivateFieldLooseBase(this,$)[$]()){return null}return f.Core.getStore().getters["users/get"](this.context.dialogId)}function at(){return this.context.type===L.ChatType.user}function nt(t){s.runAction(L.RestMethod.imV2CallZoomCreate,{data:{dialogId:t}}).catch((t=>{let e=T.Loc.getMessage("IM_CONTENT_CHAT_HEADER_CALL_MENU_ZOOM_CREATE_ERROR");const a=t.some((t=>t.code==="ZOOM_CONNECTED_ERROR"));if(a){const t=`/company/personal/user/${f.Core.getUserId()}/social_services/`;e=T.Loc.getMessage("IM_CONTENT_CHAT_HEADER_CALL_MENU_ZOOM_CONNECT_ERROR").replace("#HREF_START#",`<a href=${t}>`).replace("#HREF_END#","</>")}BX.UI.Notification.Center.notify({content:e})}))}K.events={onMenuItemClick:"onMenuItemClick"};const it={directives:{hint:d.hint},props:{dialogId:{type:String,required:true}},emits:[],data(){return{lastCallType:""}},computed:{dialog(){return this.$store.getters["chats/get"](this.dialogId,true)},chatId(){return this.dialog.chatId},isConference(){return this.dialog.type===L.ChatType.videoconf},callButtonText(){const t=S[this.lastCallType].locCode;return this.loc(t)},hasActiveCurrentCall(){return c.CallManager.getInstance().hasActiveCurrentCall(this.dialogId)},hasActiveAnotherCall(){return c.CallManager.getInstance().hasActiveAnotherCall(this.dialogId)},isActive(){if(this.hasActiveCurrentCall){return true}if(this.hasActiveAnotherCall){return false}return c.CallManager.getInstance().chatCanBeCalled(this.dialogId)},userLimit(){return c.CallManager.getInstance().getCallUserLimit()},isChatUserLimitExceeded(){return c.CallManager.getInstance().isChatUserLimitExceeded(this.dialogId)},hintContent(){if(this.isChatUserLimitExceeded){return{text:this.loc("IM_LIB_CALL_USER_LIMIT_EXCEEDED_TOOLTIP",{"#USER_LIMIT#":this.userLimit}),popupOptions:{bindOptions:{position:"bottom"},angle:{position:"top"},targetContainer:document.body,offsetLeft:63,offsetTop:0}}}return null}},created(){this.lastCallType=this.getLastCallChoice();this.subscribeToMenuItemClick()},methods:{startVideoCall(){if(!this.isActive){return}l.Messenger.startVideoCall(this.dialogId)},subscribeToMenuItemClick(){this.getCallMenu().subscribe(K.events.onMenuItemClick,(t=>{const{id:e}=t.getData();this.saveLastCallChoice(e)}))},getCallMenu(){if(!this.callMenu){this.callMenu=new K}return this.callMenu},onButtonClick(){if(!this.isActive){return}o.Analytics.getInstance().onStartCallClick({type:this.dialog.type===L.ChatType.user?o.Analytics.AnalyticsType.privateCall:o.Analytics.AnalyticsType.groupCall,section:o.Analytics.AnalyticsSection.chatWindow,subSection:o.Analytics.AnalyticsSubSection.window,element:this.lastCallType===S.video.id?o.Analytics.AnalyticsElement.videocall:o.Analytics.AnalyticsElement.audiocall,chatId:this.chatId});S[this.lastCallType].start(this.dialogId)},onMenuClick(){if(!this.shouldShowMenu()){return}this.getCallMenu().openMenu(this.dialog,this.$refs.menu)},onStartConferenceClick(){if(!this.isActive){return}o.Analytics.getInstance().onStartConferenceClick({element:o.Analytics.AnalyticsElement.startButton,chatId:this.chatId});l.Messenger.openConference({code:this.dialog.public.code})},getLastCallChoice(){const t=n.LocalStorageManager.getInstance().get(L.LocalStorageKey.lastCallType,S.video.id);if(t===S.beta.id){return S.video.id}return t},saveLastCallChoice(t){this.lastCallType=t;n.LocalStorageManager.getInstance().set(L.LocalStorageKey.lastCallType,t)},shouldShowMenu(){return this.isActive},loc(t,e={}){return this.$Bitrix.Loc.getMessage(t,e)}},template:`\n\t\t<div\n\t\t\tv-if="isConference"\n\t\t\tclass="bx-im-chat-header-call-button__scope bx-im-chat-header-call-button__container --conference"\n\t\t\t:class="{'--disabled': !isActive}"\n\t\t\t@click="onStartConferenceClick"\n\t\t>\n\t\t\t<div class="bx-im-chat-header-call-button__text">\n\t\t\t\t{{ loc('IM_CONTENT_CHAT_HEADER_START_CONFERENCE') }}\n\t\t\t</div>\n\t\t</div>\n\t\t<div\n\t\t\tv-else\n\t\t\tclass="bx-im-chat-header-call-button__scope bx-im-chat-header-call-button__container"\n\t\t\t:class="{'--disabled': !isActive}"\n\t\t\tv-hint="hintContent"\n\t\t\t@click="onButtonClick"\n\t\t>\n\t\t\t<div class="bx-im-chat-header-call-button__text">\n\t\t\t\t{{ callButtonText }}\n\t\t\t</div>\n\t\t\t<div class="bx-im-chat-header-call-button__separator"></div>\n\t\t\t<div class="bx-im-chat-header-call-button__chevron_container" @click.stop="onMenuClick">\n\t\t\t\t<div class="bx-im-chat-header-call-button__chevron" ref="menu"></div>\n\t\t\t</div>\n\t\t</div>\n\t`};const st={[L.ChatEntityLinkType.tasks]:{className:"--task",loc:T.Loc.getMessage("IM_CONTENT_CHAT_HEADER_OPEN_TASK")},[L.ChatEntityLinkType.calendar]:{className:"--calendar",loc:T.Loc.getMessage("IM_CONTENT_CHAT_HEADER_OPEN_MEETING_MSGVER_1")},[L.ChatEntityLinkType.sonetGroup]:{className:"--group",loc:T.Loc.getMessage("IM_CONTENT_CHAT_HEADER_OPEN_GROUP_MSGVER_1")},[L.ChatEntityLinkType.mail]:{className:"--mail",loc:T.Loc.getMessage("IM_CONTENT_CHAT_HEADER_OPEN_MAIL_MSGVER_1")},[L.ChatEntityLinkType.contact]:{className:"--crm",loc:T.Loc.getMessage("IM_CONTENT_CHAT_HEADER_OPEN_CONTACT")},[L.ChatEntityLinkType.deal]:{className:"--crm",loc:T.Loc.getMessage("IM_CONTENT_CHAT_HEADER_OPEN_DEAL")},[L.ChatEntityLinkType.lead]:{className:"--crm",loc:T.Loc.getMessage("IM_CONTENT_CHAT_HEADER_OPEN_LEAD")},[L.ChatEntityLinkType.dynamic]:{className:"--crm",loc:T.Loc.getMessage("IM_CONTENT_CHAT_HEADER_OPEN_DYNAMIC_ELEMENT")}};const rt={name:"EntityLink",props:{dialogId:{type:String,required:true}},data(){return{}},computed:{dialog(){return this.$store.getters["chats/get"](this.dialogId,true)},entityType(){return this.dialog.entityLink.type},entityUrl(){return this.dialog.entityLink.url},containerClassName(){var t,e;return(t=(e=st[this.entityType])==null?void 0:e.className)!=null?t:""},linkText(){var t,e;return(t=(e=st[this.entityType])==null?void 0:e.loc)!=null?t:"Open entity"}},template:`\n\t\t<a :href="entityUrl" class="bx-im-chat-header-entity-link__container" :class="containerClassName" target="_blank">\n\t\t\t<div class="bx-im-chat-header-entity-link__icon"></div>\n\t\t\t<div class="bx-im-chat-header-entity-link__text">{{ linkText }}</div>\n\t\t\t<div class="bx-im-chat-header-entity-link__arrow"></div>\n\t\t</a>\n\t`};const ot={[L.ChatType.openChannel]:"IM_CONTENT_CHAT_HEADER_CHANNEL_USER_COUNT",[L.ChatType.channel]:"IM_CONTENT_CHAT_HEADER_CHANNEL_USER_COUNT",[L.ChatType.generalChannel]:"IM_CONTENT_CHAT_HEADER_CHANNEL_USER_COUNT",default:"IM_CONTENT_CHAT_HEADER_USER_COUNT"};const lt={name:"GroupChatTitle",components:{EditableChatTitle:M.EditableChatTitle,EntityLink:rt,LineLoader:M.LineLoader,FadeAnimation:h.FadeAnimation},props:{dialogId:{type:String,required:true}},emits:["membersClick","newTitle"],data(){return{}},computed:{dialog(){return this.$store.getters["chats/get"](this.dialogId,true)},hasEntityLink(){var t;return Boolean((t=this.dialog.entityLink)==null?void 0:t.url)},userCounterPhraseCode(){var t;return(t=ot[this.dialog.type])!=null?t:ot.default},userCounterText(){return T.Loc.getMessagePlural(this.userCounterPhraseCode,this.dialog.userCounter,{"#COUNT#":this.dialog.userCounter})}},methods:{loc(t){return this.$Bitrix.Loc.getMessage(t)}},template:`\n\t\t<div class="bx-im-chat-header__info">\n\t\t\t<EditableChatTitle :dialogId="dialogId" @newTitleSubmit="$emit('newTitle', $event)" />\n\t\t\t<LineLoader v-if="!dialog.inited" :width="50" :height="16" />\n\t\t\t<FadeAnimation :duration="100">\n\t\t\t\t<div v-if="dialog.inited" class="bx-im-chat-header__subtitle_container">\n\t\t\t\t\t<div\n\t\t\t\t\t\t:title="loc('IM_CONTENT_CHAT_HEADER_OPEN_MEMBERS')"\n\t\t\t\t\t\t@click="$emit('membersClick')"\n\t\t\t\t\t\tclass="bx-im-chat-header__subtitle_content --click"\n\t\t\t\t\t>\n\t\t\t\t\t\t{{ userCounterText }}\n\t\t\t\t\t</div>\n\t\t\t\t\t<EntityLink v-if="hasEntityLink" :dialogId="dialogId" />\n\t\t\t\t</div>\n\t\t\t</FadeAnimation>\n\t\t</div>\n\t`};const ct=60*1e3;const dt={name:"UserTitle",components:{ChatTitle:M.ChatTitle},props:{dialogId:{type:String,required:true}},data(){return{userLastOnlineText:""}},computed:{userPosition(){return this.$store.getters["users/getPosition"](this.dialogId)},userLastOnline(){return this.$store.getters["users/getLastOnline"](this.dialogId)},userLink(){return u.Utils.user.getProfileLink(this.dialogId)}},watch:{userLastOnline(t){this.userLastOnlineText=t}},created(){this.updateUserOnline();this.userLastOnlineInterval=setInterval(this.updateUserOnline,ct)},beforeUnmount(){clearInterval(this.userLastOnlineInterval)},methods:{updateUserOnline(){this.userLastOnlineText=this.$store.getters["users/getLastOnline"](this.dialogId)}},template:`\n\t\t<div class="bx-im-chat-header__info">\n\t\t\t<div class="bx-im-chat-header__title --user">\n\t\t\t\t<a :href="userLink" target="_blank" class="bx-im-chat-header__title_container">\n\t\t\t\t\t<ChatTitle :dialogId="dialogId" />\n\t\t\t\t</a>\n\t\t\t\t<span class="bx-im-chat-header__user-status">{{ userLastOnlineText }}</span>\n\t\t\t</div>\n\t\t\t<div class="bx-im-chat-header__subtitle_container">\n\t\t\t\t<div class="bx-im-chat-header__subtitle_content">{{ userPosition }}</div>\n\t\t\t</div>\n\t\t</div>\n\t`};const ht={name:"HeaderAvatar",components:{ChatAvatar:M.ChatAvatar},props:{dialogId:{type:String,required:true}},emits:["avatarClick"],computed:{AvatarSize:()=>M.AvatarSize,dialog(){return this.$store.getters["chats/get"](this.dialogId,true)},isUser(){return this.dialog.type===L.ChatType.user},canChangeAvatar(){return m.PermissionManager.getInstance().canPerformAction(L.ChatActionType.avatar,this.dialogId)},userLink(){return u.Utils.user.getProfileLink(this.dialogId)}},methods:{onAvatarClick(){if(this.isUser||!this.canChangeAvatar){return}this.$refs.avatarInput.click()},async onAvatarSelect(t){const e=t.target;const a=e.files[0];if(!a){return}const n=await this.getChatService().prepareAvatar(a);if(!n){return}void this.getChatService().changeAvatar(this.dialog.chatId,n)},getChatService(){if(!this.chatService){this.chatService=new y.ChatService}return this.chatService}},template:`\n\t\t<div class="bx-im-chat-header__avatar" :class="{'--can-change': canChangeAvatar}" @click="onAvatarClick">\n\t\t\t<a v-if="isUser" :href="userLink" target="_blank">\n\t\t\t\t<ChatAvatar :avatarDialogId="dialogId" :contextDialogId="dialogId" :size="AvatarSize.L" />\n\t\t\t</a>\n\t\t\t<ChatAvatar v-else :avatarDialogId="dialogId" :contextDialogId="dialogId" :size="AvatarSize.L" />\n\t\t</div>\n\t\t<input\n\t\t\ttype="file"\n\t\t\taccept="image/*"\n\t\t\tclass="bx-im-chat-header__avatar_input"\n\t\t\tref="avatarInput"\n\t\t\t@change="onAvatarSelect"\n\t\t>\n\t`};const ut={name:"ChatHeader",components:{ChatAvatar:M.ChatAvatar,AddToChat:a.AddToChat,CallButton:it,GroupChatTitle:lt,UserChatTitle:dt,LineLoader:M.LineLoader,FadeAnimation:h.FadeAnimation,HeaderAvatar:ht},inject:["currentSidebarPanel"],props:{dialogId:{type:String,default:""},withCallButton:{type:Boolean,default:true},withSearchButton:{type:Boolean,default:true},withSidebarButton:{type:Boolean,default:true}},emits:["toggleRightPanel","toggleSearchPanel","toggleMembersPanel","buttonPanelReady"],data(){return{showAddToChatPopup:false}},computed:{user(){return this.$store.getters["users/get"](this.dialogId,true)},dialog(){return this.$store.getters["chats/get"](this.dialogId,true)},isInited(){return this.dialog.inited},isUser(){return this.dialog.type===L.ChatType.user},isBot(){if(!this.isUser){return false}return this.user.bot===true},showCallButton(){if(this.isBot||!this.withCallButton){return false}return m.PermissionManager.getInstance().canPerformAction(L.ChatActionType.call,this.dialogId)},showInviteButton(){if(this.isBot){return false}return m.PermissionManager.getInstance().canPerformAction(L.ChatActionType.extend,this.dialogId)},showSearchButton(){return this.withSearchButton},showSidebarButton(){if(!this.withSidebarButton){return false}return m.PermissionManager.getInstance().canPerformAction(L.ChatActionType.openSidebar,this.dialogId)},isSidebarOpened(){return T.Type.isStringFilled(this.currentSidebarPanel)},isMessageSearchActive(){return this.currentSidebarPanel===L.SidebarDetailBlock.messageSearch},isMembersPanelActive(){return this.currentSidebarPanel===L.SidebarDetailBlock.members},chatTitleComponent(){return this.isUser?dt:lt}},methods:{toggleRightPanel(){if(this.isSidebarOpened){I.EventEmitter.emit(L.EventType.sidebar.close,{panel:""});return}I.EventEmitter.emit(L.EventType.sidebar.open,{panel:L.SidebarDetailBlock.main,dialogId:this.dialogId})},toggleSearchPanel(){if(this.isMessageSearchActive){I.EventEmitter.emit(L.EventType.sidebar.close,{panel:L.SidebarDetailBlock.messageSearch});return}I.EventEmitter.emit(L.EventType.sidebar.open,{panel:L.SidebarDetailBlock.messageSearch,dialogId:this.dialogId})},onMembersClick(){if(!this.isInited){return}if(this.isMembersPanelActive){I.EventEmitter.emit(L.EventType.sidebar.close,{panel:L.SidebarDetailBlock.members});return}I.EventEmitter.emit(L.EventType.sidebar.open,{panel:L.SidebarDetailBlock.members,dialogId:this.dialogId})},onNewTitleSubmit(t){this.getChatService().renameChat(this.dialogId,t).catch((()=>{BX.UI.Notification.Center.notify({content:this.loc("IM_CONTENT_CHAT_HEADER_RENAME_ERROR")})}))},getChatService(){if(!this.chatService){this.chatService=new y.ChatService}return this.chatService},loc(t,e={}){return this.$Bitrix.Loc.getMessage(t,e)}},template:`\n\t\t<div class="bx-im-chat-header__scope bx-im-chat-header__container">\n\t\t\t<div class="bx-im-chat-header__left">\n\t\t\t\t<slot name="left">\n\t\t\t\t\t<HeaderAvatar :dialogId="dialogId" />\n\t\t\t\t\t<slot name="title" :onNewTitleHandler="onNewTitleSubmit">\n\t\t\t\t\t\t<component\n\t\t\t\t\t\t\t:is="chatTitleComponent"\n\t\t\t\t\t\t\t:dialogId="dialogId"\n\t\t\t\t\t\t\t@membersClick="onMembersClick"\n\t\t\t\t\t\t\t@newTitle="onNewTitleSubmit"\n\t\t\t\t\t\t/>\n\t\t\t\t\t</slot>\n\t\t\t\t</slot>\n\t\t\t</div>\n\t\t\t<LineLoader v-if="!isInited" :width="45" :height="22" />\n\t\t\t<FadeAnimation @afterEnter="$emit('buttonPanelReady')" :duration="100">\n\t\t\t\t<div v-if="isInited" class="bx-im-chat-header__right">\n\t\t\t\t\t<slot name="before-actions"></slot>\n\t\t\t\t\t<CallButton v-if="showCallButton" :dialogId="dialogId" />\n\t\t\t\t\t<div\n\t\t\t\t\t\tv-if="showInviteButton"\n\t\t\t\t\t\t:title="loc('IM_CONTENT_CHAT_HEADER_OPEN_INVITE_POPUP_TITLE')"\n\t\t\t\t\t\t:class="{'--active': showAddToChatPopup}"\n\t\t\t\t\t\tclass="bx-im-chat-header__icon --add-people"\n\t\t\t\t\t\t@click="showAddToChatPopup = true" \n\t\t\t\t\t\tref="add-members"\n\t\t\t\t\t>\n\t\t\t\t\t\t<slot name="invite-hint" :inviteButtonRef="$refs['add-members']"></slot>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div\n\t\t\t\t\t\tv-if="showSearchButton"\n\t\t\t\t\t\t:title="loc('IM_CONTENT_CHAT_HEADER_OPEN_SEARCH')"\n\t\t\t\t\t\t:class="{'--active': isMessageSearchActive}"\n\t\t\t\t\t\tclass="bx-im-chat-header__icon --search" \n\t\t\t\t\t\t@click="toggleSearchPanel"\n\t\t\t\t\t></div>\n\t\t\t\t\t<div\n\t\t\t\t\t\tv-if="showSidebarButton"\n\t\t\t\t\t\tclass="bx-im-chat-header__icon --panel"\n\t\t\t\t\t\t:title="loc('IM_CONTENT_CHAT_HEADER_OPEN_SIDEBAR')"\n\t\t\t\t\t\t:class="{'--active': isSidebarOpened}"\n\t\t\t\t\t\t@click="toggleRightPanel" \n\t\t\t\t\t></div>\n\t\t\t\t</div>\n\t\t\t</FadeAnimation>\n\t\t\t<AddToChat\n\t\t\t\t:bindElement="$refs['add-members'] ?? {}"\n\t\t\t\t:dialogId="dialogId"\n\t\t\t\t:showPopup="showAddToChatPopup"\n\t\t\t\t:popupConfig="{ offsetTop: 15, offsetLeft: -300 }"\n\t\t\t\t@close="showAddToChatPopup = false"\n\t\t\t/>\n\t\t</div>\n\t`};const gt={chatHeader:64,pinnedMessages:53,blockedTextarea:50,dropAreaOffset:16};const vt={props:{dialogId:{type:String,required:true},container:{type:Object,required:true}},data(){return{showDropArea:false,lastDropAreaEnterTarget:null}},computed:{dialog(){return this.$store.getters["chats/get"](this.dialogId,true)},hasPinnedMessages(){return this.$store.getters["messages/pin/getPinned"](this.dialog.chatId).length>0},dropAreaStyles(){let t=gt.dropAreaOffset+gt.chatHeader;if(this.hasPinnedMessages){t+=gt.pinnedMessages}return{top:`${t}px`}}},watch:{container:{immediate:true,handler(t){if(!T.Type.isElementNode(t)){return}this.bindEvents()}}},beforeUnmount(){this.unbindEvents()},methods:{bindEvents(){T.Event.bind(this.container,"dragenter",this.onDragEnter);T.Event.bind(this.container,"dragleave",this.onDragLeave);T.Event.bind(this.container,"dragover",this.onDragOver);T.Event.bind(this.container,"drop",this.onDrop)},unbindEvents(){T.Event.unbind(this.container,"dragenter",this.onDragEnter);T.Event.unbind(this.container,"dragleave",this.onDragLeave);T.Event.unbind(this.container,"dragover",this.onDragOver);T.Event.unbind(this.container,"drop",this.onDrop)},async onDragEnter(t){t.stopPropagation();t.preventDefault();const e=await E.hasDataTransferOnlyFiles(t.dataTransfer,false);if(!e){return}this.lastDropAreaEnterTarget=t.target;this.showDropArea=true},onDragLeave(t){t.stopPropagation();t.preventDefault();if(this.lastDropAreaEnterTarget!==t.target){return}this.showDropArea=false},onDragOver(t){t.preventDefault()},async onDrop(t){t.preventDefault();const e=A.ChannelManager.isChannel(this.dialogId);const a=await this.getUploadingService().uploadFromDragAndDrop({event:t,dialogId:this.dialogId,sendAsFile:false,autoUpload:!e});if(T.Type.isStringFilled(a)&&e){I.EventEmitter.emit(L.EventType.textarea.openUploadPreview,{uploaderId:a})}this.showDropArea=false},getUploadingService(){if(!this.uploadingService){this.uploadingService=y.UploadingService.getInstance()}return this.uploadingService},loc(t){return this.$Bitrix.Loc.getMessage(t)}},template:`\n\t\t<Transition name="drop-area-fade">\n\t\t\t<div v-if="showDropArea" :style="dropAreaStyles" class="bx-im-content-chat-drop-area__container bx-im-content-chat-drop-area__scope">\n\t\t\t\t<div class="bx-im-content-chat-drop-area__box">\n\t\t\t\t\t<span class="bx-im-content-chat-drop-area__icon"></span>\n\t\t\t\t\t<label class="bx-im-content-chat-drop-area__label-text">\n\t\t\t\t\t\t{{ loc('IM_CONTENT_BASE_CHAT_DROP_AREA') }}\n\t\t\t\t\t</label>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</Transition>\n\t`};const pt="rgba(0, 0, 0, 0.1)";const Ct="rgba(0, 0, 0, 0.2)";const mt="#fff";const _t={components:{ChatButton:M.Button},props:{dialogId:{type:String,required:true}},data(){return{}},computed:{ButtonSize:()=>M.ButtonSize,dialog(){return this.$store.getters["chats/get"](this.dialogId,true)},isMuted(){return this.dialog.muteList.includes(f.Core.getUserId())},buttonText(){const t=this.loc("IM_CONTENT_BLOCKED_TEXTAREA_ENABLE_NOTIFICATIONS");const e=this.loc("IM_CONTENT_BLOCKED_TEXTAREA_DISABLE_NOTIFICATIONS");return this.isMuted?t:e},buttonColorScheme(){return{borderColor:L.Color.transparent,backgroundColor:pt,iconColor:mt,textColor:mt,hoverColor:Ct}}},methods:{onButtonClick(){if(this.isMuted){this.getChatService().unmuteChat(this.dialogId);return}this.getChatService().muteChat(this.dialogId)},getChatService(){if(!this.chatService){this.chatService=new y.ChatService}return this.chatService},loc(t){return this.$Bitrix.Loc.getMessage(t)}},template:`\n\t\t<div class="bx-im-content-chat__textarea_placeholder">\n\t\t\t<ChatButton\n\t\t\t\t:size="ButtonSize.XL"\n\t\t\t\t:customColorScheme="buttonColorScheme"\n\t\t\t\t:text="buttonText"\n\t\t\t\t:isRounded="true"\n\t\t\t\t@click="onButtonClick"\n\t\t\t/>\n\t\t</div>\n\t`};const bt={components:{ChatButton:M.Button},props:{dialogId:{type:String,required:true}},data(){return{}},computed:{ButtonSize:()=>M.ButtonSize,ButtonColor:()=>M.ButtonColor},methods:{onButtonClick(){this.getChatService().joinChat(this.dialogId)},getChatService(){if(!this.chatService){this.chatService=new y.ChatService}return this.chatService},loc(t){return this.$Bitrix.Loc.getMessage(t)}},template:`\n\t\t<div class="bx-im-content-chat__textarea_placeholder">\n\t\t\t<ChatButton\n\t\t\t\t:size="ButtonSize.XL"\n\t\t\t\t:color="ButtonColor.Primary"\n\t\t\t\t:text="loc('IM_CONTENT_BLOCKED_TEXTAREA_JOIN_CHAT')"\n\t\t\t\t:isRounded="true"\n\t\t\t\t@click="onButtonClick"\n\t\t\t/>\n\t\t</div>\n\t`};const Et={name:"LoadingBar",data(){return{}},template:`\n\t\t<div class="bx-im-content-chat__loading-bar"></div>\n\t`};const Tt={mounted(t,e){e.instance.textareaResizeManager.observeTextarea(t)},beforeUnmount(t,e){e.instance.textareaResizeManager.unobserveTextarea(t)}};const It={name:"BaseChatContent",components:{ChatHeader:ut,ChatDialog:v.ChatDialog,ChatTextarea:p.ChatTextarea,ChatSidebar:b.ChatSidebar,DropArea:vt,MutePanel:_t,JoinPanel:bt,LoadingBar:Et},directives:{"textarea-observer":Tt},provide(){return{currentSidebarPanel:g.computed((()=>this.currentSidebarPanel))}},props:{dialogId:{type:String,default:""},backgroundId:{type:[Number,null],default:null}},data(){return{textareaHeight:0,showLoadingBar:false,currentSidebarPanel:""}},computed:{dialog(){return this.$store.getters["chats/get"](this.dialogId,true)},canSend(){return m.PermissionManager.getInstance().canPerformAction(L.ChatActionType.send,this.dialog.dialogId)},isGuest(){return this.dialog.role===L.UserRole.guest},hasCommentsOnTop(){return this.$store.getters["messages/comments/areOpenedForChannel"](this.dialogId)},containerClasses(){const t=this.$store.getters["application/settings/get"](L.Settings.appearance.alignment);return[`--${t}-align`]},backgroundStyle(){if(this.backgroundId){return C.ThemeManager.getBackgroundStyleById(this.backgroundId)}return C.ThemeManager.getCurrentBackgroundStyle()},dialogContainerStyle(){let t=this.textareaHeight;if(!this.canSend){t=gt.blockedTextarea}return{height:`calc(100% - ${gt.chatHeader}px - ${t}px)`}}},watch:{textareaHeight(t,e){if(!this.dialog.inited||e===0){return}I.EventEmitter.emit(L.EventType.dialog.scrollToBottom,{chatId:this.dialog.chatId,animation:false})}},created(){this.initTextareaResizeManager();this.bindEvents()},beforeUnmount(){this.unbindEvents()},methods:{initTextareaResizeManager(){this.textareaResizeManager=new _.ResizeManager;this.textareaResizeManager.subscribe(_.ResizeManager.events.onHeightChange,this.onTextareaHeightChange)},onTextareaMount(){const t=this.$refs["textarea-container"];this.textareaHeight=t.clientHeight},onTextareaHeightChange(t){const{newHeight:e}=t.getData();this.textareaHeight=e},onShowLoadingBar(t){const{dialogId:e}=t.getData();if(e!==this.dialogId){return}this.showLoadingBar=true},onHideLoadingBar(t){const{dialogId:e}=t.getData();if(e!==this.dialogId){return}this.showLoadingBar=false},onChangeSidebarPanel({panel:t}){this.currentSidebarPanel=t},bindEvents(){I.EventEmitter.subscribe(L.EventType.dialog.showLoadingBar,this.onShowLoadingBar);I.EventEmitter.subscribe(L.EventType.dialog.hideLoadingBar,this.onHideLoadingBar)},unbindEvents(){I.EventEmitter.unsubscribe(L.EventType.dialog.showLoadingBar,this.onShowLoadingBar);I.EventEmitter.unsubscribe(L.EventType.dialog.hideLoadingBar,this.onHideLoadingBar)},loc(t){return this.$Bitrix.Loc.getMessage(t)}},template:`\n\t\t<div class="bx-im-content-chat__scope bx-im-content-chat__container" :class="containerClasses" :style="backgroundStyle">\n\t\t\t<div class="bx-im-content-chat__content" ref="content">\n\t\t\t\t<slot name="header">\n\t\t\t\t\t<ChatHeader :dialogId="dialogId" :key="dialogId" />\n\t\t\t\t</slot>\n\t\t\t\t<div :style="dialogContainerStyle" class="bx-im-content-chat__dialog_container">\n\t\t\t\t\t<Transition name="loading-bar-transition">\n\t\t\t\t\t\t<LoadingBar v-if="showLoadingBar" />\n\t\t\t\t\t</Transition>\n\t\t\t\t\t<div class="bx-im-content-chat__dialog_content">\n\t\t\t\t\t\t<slot name="dialog">\n\t\t\t\t\t\t\t<ChatDialog :dialogId="dialogId" :key="dialogId" />\n\t\t\t\t\t\t</slot>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t\x3c!-- Textarea --\x3e\n\t\t\t\t<div v-if="canSend" v-textarea-observer class="bx-im-content-chat__textarea_container" ref="textarea-container">\n\t\t\t\t\t<slot name="textarea" :onTextareaMount="onTextareaMount">\n\t\t\t\t\t\t<ChatTextarea \n\t\t\t\t\t\t\t:dialogId="dialogId" \n\t\t\t\t\t\t\t:key="dialogId" \n\t\t\t\t\t\t\t:withAudioInput="false" \n\t\t\t\t\t\t\t@mounted="onTextareaMount" \n\t\t\t\t\t\t/>\n\t\t\t\t\t</slot>\n\t\t\t\t</div>\n\t\t\t\t<slot v-else-if="isGuest" name="join-panel">\n\t\t\t\t\t<JoinPanel :dialogId="dialogId" />\n\t\t\t\t</slot>\n\t\t\t\t<MutePanel v-else :dialogId="dialogId" />\n\t\t\t\t\x3c!-- End textarea --\x3e\n\t\t\t\t<DropArea :dialogId="dialogId" :container="$refs.content || {}" :key="dialogId" />\n\t\t\t</div>\n\t\t\t<ChatSidebar\n\t\t\t\tv-if="dialogId.length > 0" \n\t\t\t\t:originDialogId="dialogId"\n\t\t\t\t:isActive="!hasCommentsOnTop"\n\t\t\t\t@changePanel="onChangeSidebarPanel"\n\t\t\t/>\n\t\t</div>\n\t`};t.ChatHeader=ut;t.BaseChatContent=It})(this.BX.Messenger.v2.Component.Content=this.BX.Messenger.v2.Component.Content||{},BX,BX.Messenger.v2.Component.EntitySelector,BX.Messenger.v2.Lib,BX.Messenger.v2.Lib,BX.Messenger.v2.Lib,BX.Messenger.v2.Lib,BX.Messenger.v2.Lib,BX.Messenger.v2.Lib,BX.Messenger.v2.Lib,BX.Vue3.Directives,BX.Messenger.v2.Component.Animation,BX.Messenger.v2.Lib,BX.Vue3,BX.Messenger.v2.Component.Dialog,BX.Messenger.v2.Component,BX.Messenger.v2.Lib,BX.Messenger.v2.Lib,BX.Messenger.v2.Lib,BX.Messenger.v2.Component,BX.UI.Uploader,BX,BX.Event,BX.Messenger.v2.Lib,BX.Messenger.v2.Application,BX.Messenger.v2.Const,BX.Messenger.v2.Component.Elements,BX.Messenger.v2.Service);
//# sourceMappingURL=registry.bundle.map.js