this.BX=this.BX||{};this.BX.Messenger=this.BX.Messenger||{};this.BX.Messenger.v2=this.BX.Messenger.v2||{};(function(e,t,n,a,r,s,i,o,l,g,c,d){"use strict";const y={async openChat(e="",t=0){const r=e.toString();if(g.Utils.dialog.isLinesExternalId(r)){return this.openLines(r)}await c.MessengerSlider.getInstance().openSlider();const s={name:a.Layout.chat.name,entityId:r};if(t>0){s.contextId=t}await i.LayoutManager.getInstance().setLayout(s);n.EventEmitter.emit(a.EventType.layout.onOpenChat,{dialogId:r});return Promise.resolve()},async forwardEntityToChat(e,t){const r=e.toString();await c.MessengerSlider.getInstance().openSlider();const s={name:a.Layout.chat.name,entityId:r};await i.LayoutManager.getInstance().setLayout(s);n.EventEmitter.emit(a.EventType.layout.onOpenChat,{dialogId:r});n.EventEmitter.emit(a.EventType.textarea.forwardEntity,{dialogId:e,entityConfig:t});return Promise.resolve()},async openLines(e=""){let n=e.toString();if(g.Utils.dialog.isLinesExternalId(n)){const e=new d.LinesService;n=await e.getDialogIdByUserCode(n)}await c.MessengerSlider.getInstance().openSlider();const r=t.FeatureManager.isFeatureAvailable(t.Feature.openLinesV2);return i.LayoutManager.getInstance().setLayout({name:r?a.Layout.openlinesV2.name:a.Layout.openlines.name,entityId:n})},async openCopilot(e="",t=0){const n=e.toString();await c.MessengerSlider.getInstance().openSlider();return i.LayoutManager.getInstance().setLayout({name:a.Layout.copilot.name,entityId:n,contextId:t})},async openCollab(e=""){const t=e.toString();await c.MessengerSlider.getInstance().openSlider();return i.LayoutManager.getInstance().setLayout({name:a.Layout.collab.name,entityId:t})},openHistory(e=""){if(g.Utils.dialog.isDialogId(e)){return this.openChat(e)}if(!p(e)){return Promise.reject()}const t=u(e);BX.SidePanel.Instance.open(t,{width:g.Utils.dialog.isLinesExternalId(e)?700:1e3,allowChangeHistory:false,allowChangeTitle:false,cacheable:false});return Promise.resolve()},async openNotifications(){await c.MessengerSlider.getInstance().openSlider();await i.LayoutManager.getInstance().setLayout({name:a.Layout.notification.name});n.EventEmitter.emit(a.EventType.layout.onOpenNotifications);return Promise.resolve()},async openRecentSearch(){await c.MessengerSlider.getInstance().openSlider();await i.LayoutManager.getInstance().setLayout({name:a.Layout.chat.name});n.EventEmitter.emit(a.EventType.recent.openSearch);return Promise.resolve()},async openSettings(e){o.Logger.warn("Slider: openSettings",e);await c.MessengerSlider.getInstance().openSlider();await i.LayoutManager.getInstance().setLayout({name:a.Layout.settings.name,entityId:e});return Promise.resolve()},openConference(e=""){o.Logger.warn("Slider: openConference",e);if(!g.Utils.conference.isValidCode(e)){return Promise.reject()}const t=g.Utils.conference.getUrlByCode(e);g.Utils.browser.openLink(t,g.Utils.conference.getWindowNameByCode(e));return Promise.resolve()},async openChatCreation(e){o.Logger.warn("Slider: openChatCreation",e);await c.MessengerSlider.getInstance().openSlider();const t={name:a.Layout.createChat.name,entityId:e};return i.LayoutManager.getInstance().setLayout(t)},startVideoCall(e="",t=true){o.Logger.warn("Slider: onStartVideoCall",e,t);if(!g.Utils.dialog.isDialogId(e)){o.Logger.error("Slider: onStartVideoCall - dialogId is not correct",e);return false}r.CallManager.getInstance().startCall(e,t);return Promise.resolve()},startPhoneCall(e,t){o.Logger.warn("Slider: startPhoneCall",e,t);void l.PhoneManager.getInstance().startCall(e,t);return Promise.resolve()},startCallList(e,t){o.Logger.warn("Slider: startCallList",e,t);l.PhoneManager.getInstance().startCallList(e,t);return Promise.resolve()},openNewTab(e){if(s.DesktopApi.isChatTab()&&s.DesktopApi.isFeatureSupported(s.DesktopFeature.openNewTab.id)){s.DesktopApi.createImTab(`${e}&${a.GetParameter.desktopChatTabMode}=Y`)}else{g.Utils.browser.openLink(e)}}};const p=e=>g.Utils.dialog.isLinesHistoryId(e)||g.Utils.dialog.isLinesExternalId(e);const u=e=>{const t=new URLSearchParams({[a.GetParameter.openHistory]:e,[a.GetParameter.backgroundType]:"light"});return`/desktop_app/history.php?${t.toString()}`};e.Opener=y})(this.BX.Messenger.v2.Lib=this.BX.Messenger.v2.Lib||{},BX.Messenger.v2.Lib,BX.Event,BX.Messenger.v2.Const,BX.Messenger.v2.Lib,BX.Messenger.v2.Lib,BX.Messenger.v2.Lib,BX.Messenger.v2.Lib,BX.Messenger.v2.Lib,BX.Messenger.v2.Lib,BX.Messenger.v2.Lib,BX.Messenger.v2.Service);
//# sourceMappingURL=opener.bundle.map.js