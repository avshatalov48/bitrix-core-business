this.BX=this.BX||{};this.BX.Messenger=this.BX.Messenger||{};this.BX.Messenger.v2=this.BX.Messenger.v2||{};(function(t,e,n,s,i,o,a,r,c,u,l,p,d,m,v,g,h,_,S,b,C,I,x,M){"use strict";const k={name:"ButtonPanel",components:{ChatButton:u.Button},emits:["openProfile","logout"],computed:{ButtonSize:()=>u.ButtonSize,ButtonColor:()=>u.ButtonColor,currentUserId(){return I.Core.getUserId()},profileUri(){return l.Utils.user.getProfileLink(this.currentUserId)},isDesktop(){return g.DesktopApi.isDesktop()}},methods:{loc(t){return this.$Bitrix.Loc.getMessage(t)},onLogoutClick(){void g.DesktopApi.logout()}},template:`\n\t\t<div class="bx-im-user-settings-popup__button-panel">\n\t\t\t<a :href="profileUri" target="_blank" class="bx-im-user-settings-popup__user_link">\n\t\t\t\t<ChatButton\n\t\t\t\t\t:color="ButtonColor.PrimaryBorder"\n\t\t\t\t\t:size="ButtonSize.M"\n\t\t\t\t\t:isUppercase="false"\n\t\t\t\t\t:isRounded="true"\n\t\t\t\t\t:text="loc('IM_USER_SETTINGS_OPEN_PROFILE')"\n\t\t\t\t\t@click="$emit('openProfile')"\n\t\t\t\t/>\n\t\t\t</a>\n\t\t\t<ChatButton\n\t\t\t\tv-if="isDesktop" \n\t\t\t\t:color="ButtonColor.DangerBorder"\n\t\t\t\t:size="ButtonSize.M"\n\t\t\t\t:isUppercase="false"\n\t\t\t\t:isRounded="true"\n\t\t\t\t:text="loc('IM_USER_SETTINGS_LOGOUT')"\n\t\t\t\t@click="onLogoutClick"\n\t\t\t/>\n\t\t</div>\n\t`};class f{constructor(){this.store=null;this.restClient=null;this.store=I.Core.getStore();this.restClient=I.Core.getRestClient()}changeStatus(t){if(!x.UserStatus[t]){return false}p.Logger.warn(`StatusService: change current user status to ${t}`);this.store.dispatch("users/setStatus",{status:t});this.store.dispatch("application/settings/set",{status:t});return this.restClient.callMethod(x.RestMethod.imUserStatusSet,{STATUS:t}).catch((t=>{console.error("StatusService: changeStatus error",t)}))}}const T={name:"UserStatusContent",components:{UserStatus:u.UserStatus},emits:["close"],computed:{UserStatusSize:()=>u.UserStatusSize,UserStatusType:()=>x.UserStatus,statusList(){return[x.UserStatus.online,x.UserStatus.dnd]}},methods:{onStatusClick(t){this.getStatusService().changeStatus(t);this.$emit("close")},getStatusService(){if(!this.statusService){this.statusService=new f}return this.statusService},getStatusText(t){return l.Utils.user.getStatusText(t)}},template:`\n\t\t<div class="bx-im-user-status-popup__scope bx-im-user-status-popup__container">\n\t\t\t<div\n\t\t\t\tv-for="status in statusList"\n\t\t\t\t:key="status"\n\t\t\t\t@click="onStatusClick(status)"\n\t\t\t\tclass="bx-im-user-status-popup__item"\n\t\t\t>\n\t\t\t\t<UserStatus :status="status" :size="UserStatusSize.M" />\n\t\t\t\t<div class="bx-im-user-status-popup__text">{{ getStatusText(status) }}</div>\n\t\t\t</div>\n\t\t</div>\n\t`};const A="im-user-status-popup";const P={name:"UserStatusPopup",components:{MessengerPopup:u.MessengerPopup,UserStatusContent:T},props:{bindElement:{type:Object,required:true}},emits:["close"],computed:{POPUP_ID:()=>A,config(){return{width:190,bindElement:this.bindElement,offsetTop:4,padding:0}}},template:`\n\t\t<MessengerPopup\n\t\t\t:config="config"\n\t\t\t@close="$emit('close')"\n\t\t\t:id="POPUP_ID"\n\t\t>\n\t\t\t<UserStatusContent @close="$emit('close')" />\n\t\t</MessengerPopup>\n\t`};var U=babelHelpers.classPrivateFieldLooseKey("getConnectItem");var N=babelHelpers.classPrivateFieldLooseKey("getDeleteItem");var B=babelHelpers.classPrivateFieldLooseKey("connect");var L=babelHelpers.classPrivateFieldLooseKey("disconnect");class E extends v.BaseMenu{constructor(){super();Object.defineProperty(this,L,{value:O});Object.defineProperty(this,B,{value:w});Object.defineProperty(this,N,{value:D});Object.defineProperty(this,U,{value:y});this.id=x.PopupType.desktopItemMenu}getMenuItems(){return[babelHelpers.classPrivateFieldLooseBase(this,U)[U](),babelHelpers.classPrivateFieldLooseBase(this,N)[N]()]}close(){var t;(t=m.PopupManager.getPopupById(x.PopupType.userProfile))==null?void 0:t.setAutoHide(true);super.close()}}function y(){const t=this.context.connected?d.Loc.getMessage("IM_USER_SETTINGS_DESKTOP_CONTEXT_MENU_DISCONNECT_V2"):d.Loc.getMessage("IM_USER_SETTINGS_DESKTOP_CONTEXT_MENU_CONNECT_V2");return{text:t,onclick:function(){var t;if(this.context.connected){babelHelpers.classPrivateFieldLooseBase(this,L)[L]()}else{babelHelpers.classPrivateFieldLooseBase(this,B)[B]()}this.menuInstance.close();(t=m.PopupManager.getPopupById(x.PopupType.userProfile))==null?void 0:t.close()}.bind(this)}}function D(){return{text:d.Loc.getMessage("IM_USER_SETTINGS_DESKTOP_CONTEXT_MENU_DELETE_V2"),onclick:async function(){const t=await h.showDesktopDeleteConfirm();if(t===true){var e;g.DesktopApi.deleteAccount(this.context.host,this.context.login);(e=m.PopupManager.getPopupById(x.PopupType.userProfile))==null?void 0:e.close()}}.bind(this)}}function w(){const{host:t,login:e,protocol:n}=this.context;const s=navigator.language;g.DesktopApi.connectAccount(t,e,n,s)}function O(){const{host:t}=this.context;g.DesktopApi.disconnectAccount(t)}const $={name:"DesktopAccountItem",props:{account:{type:Object,required:true}},emits:["contextMenuClick"],data(){return{errorLoadAvatar:false}},computed:{accountItem(){return this.account},avatarUrl(){if(this.errorLoadAvatar||!this.hasAvatar){return""}if(this.accountItem.avatar.startsWith("http")){return this.accountItem.avatar}return`${this.accountItem.protocol}://${this.accountItem.host}${this.accountItem.avatar}`},isConnected(){return this.accountItem.connected},hasAvatar(){return this.accountItem.avatar&&this.accountItem.avatar!=="/bitrix/js/im/images/blank.gif"}},methods:{onContextMenuClick(t){this.$emit("contextMenuClick",{account:this.account,target:t.target})},onDomainClick(){if(!this.isConnected){return}_.DesktopManager.getInstance().openAccountTab(this.accountItem.portal)},onError(){this.errorLoadAvatar=true}},template:`\n\t\t<div class="bx-im-desktop-connection-list-item__container bx-im-desktop-connection-list-item__scope">\n\t\t\t<div class="bx-im-desktop-connection-list-item__content" :class="{'--disconnected': !isConnected}">\n\t\t\t\t<img \n\t\t\t\t\tv-if="avatarUrl" \n\t\t\t\t\t:src="avatarUrl"\n\t\t\t\t\t:alt="accountItem.portal"\n\t\t\t\t\t@error="onError"\n\t\t\t\t\tclass="bx-im-desktop-connection-list-item__avatar" \n\t\t\t\t/>\n\t\t\t\t<span v-else class="bx-im-desktop-connection-list-item__avatar-default"></span>\n\t\t\t\t<div class="bx-im-desktop-connection-list-item__title-container">\n\t\t\t\t\t<span class="bx-im-desktop-connection-list-item__title" @click="onDomainClick">\n\t\t\t\t\t\t{{ accountItem.portal }}\n\t\t\t\t\t</span>\n\t\t\t\t\t<span class="bx-im-desktop-connection-list-item__login">{{ accountItem.login }}</span>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<button\n\t\t\t\tclass="bx-im-messenger__context-menu-icon bx-im-desktop-connection-list-item__context-menu"\n\t\t\t\t@click="onContextMenuClick"\n\t\t\t></button>\n\t\t</div>\n\t`};const X={name:"DesktopAccountList",components:{DesktopAccountItem:$},emits:["openContextMenu"],data(){return{accounts:[]}},computed:{isEmptyState(){return this.accounts.length===0}},created(){this.contextMenu=new E;this.accounts=g.DesktopApi.getAccountList()},beforeUnmount(){this.contextMenu.destroy()},methods:{openLoginTab(){var t;this.contextMenu.destroy();(t=m.PopupManager.getPopupById(x.PopupType.userProfile))==null?void 0:t.close();g.DesktopApi.openAddAccountTab()},onContextMenuClick(t){const{account:e,target:n}=t;this.contextMenu.openMenu(e,n);this.$emit("openContextMenu")}},template:`\n\t\t<div class="bx-im-desktop-connection-list__container bx-im-desktop-connection-list__scope">\n\t\t\t<div class="bx-im-desktop-connection-list__header">\n\t\t\t\t<span class="bx-im-desktop-connection-list__title">\n\t\t\t\t\t{{ $Bitrix.Loc.getMessage('IM_USER_SETTINGS_CONNECTED_BITRIX24') }}\n\t\t\t\t</span>\n\t\t\t\t<span class="bx-im-desktop-connection-list__add" @click="openLoginTab">\n\t\t\t\t\t{{ $Bitrix.Loc.getMessage('IM_USER_SETTINGS_CONNECT_BITRIX24') }}\n\t\t\t\t</span>\n\t\t\t</div>\n\t\t\t<div class="bx-im-desktop-connection-list__items">\n\t\t\t\t<DesktopAccountItem \n\t\t\t\t\tv-for="account in accounts" \n\t\t\t\t\t:account="account" \n\t\t\t\t\t@contextMenuClick="onContextMenuClick"\n\t\t\t\t/>\n\t\t\t</div>\n\t\t</div>\n\t`};const H={name:"UserSettingsContent",components:{ChatAvatar:u.ChatAvatar,UserStatus:u.UserStatus,ButtonPanel:k,UserStatusPopup:P,DesktopAccountList:X,ScrollWithGradient:u.ScrollWithGradient},emits:["closePopup","enableAutoHide","disableAutoHide"],data(){return{showStatusPopup:false}},computed:{AvatarSize:()=>u.AvatarSize,UserStatusSize:()=>u.UserStatusSize,currentUserId(){return I.Core.getUserId()},currentUserDialogId(){return this.currentUserId.toString()},currentUser(){return this.$store.getters["users/get"](this.currentUserId,true)},currentUserPosition(){return this.$store.getters["users/getPosition"](this.currentUserId)},userStatus(){const t=this.$store.getters["application/settings/get"](x.Settings.user.status);if(t){return t}return x.UserStatus.online},currentHost(){return location.hostname},userStatusText(){return l.Utils.user.getStatusText(this.userStatus)},isDesktopAccountManagementAvailable(){return g.DesktopApi.isFeatureSupported(g.DesktopFeature.accountManagement.id)}},methods:{onStatusClick(){this.showStatusPopup=true;this.$emit("disableAutoHide")},onStatusPopupClose(){this.showStatusPopup=false;this.$emit("enableAutoHide")},loc(t){return this.$Bitrix.Loc.getMessage(t)},onScroll(){var t;(t=m.MenuManager.getMenuById(x.PopupType.desktopItemMenu))==null?void 0:t.close()}},template:`\n\t\t<div class="bx-im-user-settings-popup__scope bx-im-user-settings-popup__container">\n\t\t\t<div class="bx-im-user-settings-popup__header">\n\t\t\t\t<div class="bx-im-user-settings-popup__header_left">\n\t\t\t\t\t<ChatAvatar \n\t\t\t\t\t\t:avatarDialogId="currentUserDialogId" \n\t\t\t\t\t\t:contextDialogId="currentUserDialogId" \n\t\t\t\t\t\t:size="AvatarSize.XL" \n\t\t\t\t\t/>\n\t\t\t\t</div>\n\t\t\t\t<div class="bx-im-user-settings-popup__header_right">\n\t\t\t\t\t<div class="bx-im-user-settings-popup__domain">{{ currentHost }}</div>\n\t\t\t\t\t<div class="bx-im-user-settings-popup__user_name" :title="currentUser.name">{{ currentUser.name }}</div>\n\t\t\t\t\t<div class="bx-im-user-settings-popup__user_title" :title="currentUserPosition">{{ currentUserPosition }}</div>\n\t\t\t\t\t<ButtonPanel @openProfile="$emit('closePopup')" />\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<ScrollWithGradient :containerMaxHeight="328" :gradientHeight="24" @scroll="onScroll">\n\t\t\t\t<div class="bx-im-user-settings-popup__list">\n\t\t\t\t\t<div class="bx-im-user-settings-popup__separator"></div>\n\t\t\t\t\t\x3c!-- Status select --\x3e\n\t\t\t\t\t<div @click="onStatusClick" class="bx-im-user-settings-popup__list-item --with-icon">\n\t\t\t\t\t\t<div class="bx-im-user-settings-popup__list-item_left">\n\t\t\t\t\t\t\t<div class="bx-im-user-settings-popup__list-item_status">\n\t\t\t\t\t\t\t\t<UserStatus :status="userStatus" :size="UserStatusSize.M" />\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div class="bx-im-user-settings-popup__list-item_text">{{ userStatusText }}</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div class="bx-im-user-settings-popup__list-item_icon --chevron" ref="status-select"></div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t<div class="bx-im-user-settings-popup__separator"></div>\n\t\t\t\t<DesktopAccountList \n\t\t\t\t\tv-if="isDesktopAccountManagementAvailable"\n\t\t\t\t\t@openContextMenu="$emit('disableAutoHide')"\n\t\t\t\t/>\n\t\t\t</ScrollWithGradient>\n\t\t</div>\n\t\t<UserStatusPopup\n\t\t\tv-if="showStatusPopup"\n\t\t\t:bindElement="$refs['status-select'] || {}"\n\t\t\t@close="onStatusPopupClose"\n\t\t/>\n\t`};const G="im-user-settings-popup";const F={name:"UserSettingsPopup",components:{MessengerPopup:u.MessengerPopup,UserSettingsContent:H},props:{bindElement:{type:Object,required:true}},emits:["close"],computed:{POPUP_ID:()=>G,config(){return{width:313,bindElement:this.bindElement,offsetTop:4,padding:0}}},template:`\n\t\t<MessengerPopup\n\t\t\tv-slot="{enableAutoHide, disableAutoHide}"\n\t\t\t:config="config"\n\t\t\t@close="$emit('close')"\n\t\t\t:id="POPUP_ID"\n\t\t>\n\t\t\t<UserSettingsContent \n\t\t\t\t@closePopup="$emit('close')" \n\t\t\t\t@enableAutoHide="enableAutoHide" \n\t\t\t\t@disableAutoHide="disableAutoHide" \n\t\t\t/>\n\t\t</MessengerPopup>\n\t`};const z={name:"UserSettings",components:{UserSettingsPopup:F,UserStatusPopup:P,ChatAvatar:u.ChatAvatar},data(){return{showSettingsPopup:false,showStatusPopup:false}},computed:{AvatarSize:()=>u.AvatarSize,currentUserDialogId(){return I.Core.getUserId().toString()},userStatus(){const t=this.$store.getters["application/settings/get"](x.Settings.user.status);if(t){return t}return x.UserStatus.online}},methods:{onAvatarClick(){this.showSettingsPopup=true},onStatusClick(){this.showStatusPopup=true}},template:`\n\t\t<div class="bx-im-navigation__user">\n\t\t\t<div @click="onAvatarClick" class="bx-im-navigation__user_avatar" ref="avatar">\n\t\t\t\t<ChatAvatar \n\t\t\t\t\t:avatarDialogId="currentUserDialogId"\n\t\t\t\t\t:contextDialogId="currentUserDialogId" \n\t\t\t\t\t:size="AvatarSize.M" \n\t\t\t\t/>\n\t\t\t\t<div @click.stop="onStatusClick" :class="'--' + userStatus" class="bx-im-navigation__user_status" ref="status"></div>\n\t\t\t</div>\n\t\t\t<UserStatusPopup\n\t\t\t\tv-if="showStatusPopup"\n\t\t\t\t:bindElement="$refs['status'] || {}"\n\t\t\t\t@close="showStatusPopup = false"\n\t\t\t/>\n\t\t\t<UserSettingsPopup\n\t\t\t\tv-if="showSettingsPopup"\n\t\t\t\t:bindElement="$refs['avatar'] || {}"\n\t\t\t\t@close="showSettingsPopup = false" \n\t\t\t/>\n\t\t</div>\n\t`};const R={name:"MarketApps",emits:["clickMarketItem"],computed:{marketMenuItems(){const t=M.MarketManager.getInstance().getAvailablePlacementsByType(x.PlacementType.navigation);return t.map((t=>({id:t.id,text:t.title,counter:0,active:true,iconName:t.options.iconName?t.options.iconName:"",loadConfiguration:t.loadConfiguration})))},layout(){return this.$store.getters["application/getLayout"]},canShowMarket(){return I.Core.isCloud()}},methods:{onMarketClick(){M.MarketManager.openMarketplace()},onMarketItemClick(t){this.$emit("clickMarketItem",{layoutName:x.Layout.market.name,layoutEntityId:t.id})},getMenuItemClasses(t){return{"--selected":this.isItemSelected(t.id),"--active":t.active}},isItemSelected(t){return this.layout.name===x.Layout.market.name&&this.layout.entityId===t},getIconClassNames(t){return t.iconName.toString()}},template:`\n\t\t<div\n\t\t\tv-if="canShowMarket"\n\t\t\t@click="onMarketClick"\n\t\t\tclass="bx-im-navigation__item_container"\n\t\t>\n\t\t\t<div class="bx-im-navigation__item --active">\n\t\t\t\t<div class="bx-im-navigation__item_icon --market"></div>\n\t\t\t\t<div class="bx-im-navigation__item_text" :title="$Bitrix.Loc.getMessage('IM_NAVIGATION_MARKET_TITLE')">\n\t\t\t\t\t{{ $Bitrix.Loc.getMessage('IM_NAVIGATION_MARKET_TITLE') }}\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t\t<div\n\t\t\tv-for="item in marketMenuItems"\n\t\t\t@click="onMarketItemClick(item)"\n\t\t\tclass="bx-im-navigation__item_container"\n\t\t>\n\t\t\t<div :class="getMenuItemClasses(item)" class="bx-im-navigation__item">\n\t\t\t\t<div class="bx-im-navigation__market-item_icon-container">\n\t\t\t\t\t<i \n\t\t\t\t\t\tclass="bx-im-navigation__market-item_icon fa" \n\t\t\t\t\t\t:class="getIconClassNames(item)" \n\t\t\t\t\t\taria-hidden="true"\n\t\t\t\t\t></i>\n\t\t\t\t</div>\n\t\t\t\t<div class="bx-im-navigation__item_text" :title="item.text">{{item.text}}</div>\n\t\t\t</div>\n\t\t</div>\n\t`};const V={name:"MessengerNavigation",directives:{hint:e.hint},components:{UserSettings:z,MarketApps:R},props:{currentLayoutName:{type:String,required:true}},emits:["navigationClick"],data(){return{needTopShadow:false,needBottomShadow:false}},computed:{menuItems(){return[{id:x.Layout.chat.name,text:this.prepareNavigationText("IM_NAVIGATION_CHATS"),counter:this.formatCounter(this.$store.getters["counters/getTotalChatCounter"]),active:true},{id:x.Layout.copilot.name,text:this.prepareNavigationText("IM_NAVIGATION_COPILOT"),counter:this.formatCounter(this.$store.getters["counters/getTotalCopilotCounter"]),clickHandler:this.onCopilotClick,showCondition:()=>r.FeatureManager.isFeatureAvailable(r.Feature.copilotAvailable),active:true},{id:x.Layout.channel.name,text:this.prepareNavigationText("IM_NAVIGATION_CHANNELS"),active:true},{id:x.Layout.openlines.name,text:this.prepareNavigationText("IM_NAVIGATION_OPENLINES"),counter:this.formatCounter(this.$store.getters["counters/getTotalLinesCounter"]),active:true},{id:x.Layout.notification.name,text:this.prepareNavigationText("IM_NAVIGATION_NOTIFICATIONS"),counter:this.formatCounter(this.$store.getters["notifications/getCounter"]),active:true},{id:x.Layout.call.name,text:this.prepareNavigationText("IM_NAVIGATION_CALLS_V2"),clickHandler:this.onCallClick,showCondition:a.PhoneManager.getInstance().canCall.bind(a.PhoneManager.getInstance()),active:true},{id:"timemanager",text:this.prepareNavigationText("IM_NAVIGATION_TIMEMANAGER"),clickHandler:this.onTimeManagerClick,showCondition:this.isTimeManagerActive,active:true},{id:"market"},{id:x.Layout.settings.name,text:this.prepareNavigationText("IM_NAVIGATION_SETTINGS"),active:true}]},showCloseIcon(){return!g.DesktopApi.isChatTab()}},created(){p.Logger.warn("Navigation created")},mounted(){const t=this.$refs.navigation;this.needBottomShadow=t.scrollTop+t.clientHeight!==t.scrollHeight},methods:{onMenuItemClick(t,e){if(!t.active){return}if(d.Type.isFunction(t.clickHandler)){t.clickHandler(e.target);return}this.sendClickEvent({layoutName:t.id})},sendClickEvent({layoutName:t,layoutEntityId:e=""}){this.$emit("navigationClick",{layoutName:t,layoutEntityId:e})},closeSlider(){const t=o.CallManager.getInstance().hasCurrentCall();if(t){this.showExitConfirm();return}i.MessengerSlider.getInstance().getCurrent().close()},getMenuItemClasses(t){return{"--selected":t.id===this.currentLayoutName,"--with-counter":t.counter&&t.id!==this.currentLayoutName,"--active":t.active}},formatCounter(t){if(t===0){return""}return t>99?"99+":String(t)},getHintContent(t){if(t.active){return null}return{text:this.loc("IM_MESSENGER_NOT_AVAILABLE"),popupOptions:{angle:{position:"left"},targetContainer:document.body,offsetLeft:80,offsetTop:-54}}},prepareNavigationText(t){return this.loc(t,{"#BR#":"</br>"})},showExitConfirm(){n.MessageBox.show({message:this.loc("IM_NAVIGATION_ACTIVE_CALL_CONFIRM"),modal:true,buttons:n.MessageBoxButtons.OK_CANCEL,onOk:t=>{o.CallManager.getInstance().leaveCurrentCall();i.MessengerSlider.getInstance().getCurrent().close();t.close()},onCancel:t=>{t.close()}})},needToShowMenuItem(t){if(!d.Type.isFunction(t.showCondition)){return true}return t.showCondition()===true},onScroll(t){const e=Math.round(t.target.scrollTop+t.target.clientHeight);this.needBottomShadow=e!==t.target.scrollHeight;if(t.target.scrollTop===0){this.needTopShadow=false;return}this.needTopShadow=true},onClickScrollDown(){this.$refs.navigation.scrollTo({top:this.$refs.navigation.scrollHeight,behavior:"smooth"})},onClickScrollUp(){this.$refs.navigation.scrollTo({top:0,behavior:"smooth"})},onCallClick(t){const e="bx-im-navigation__item";const n=-30;const s=64;a.PhoneManager.getInstance().openKeyPad({bindElement:t.closest(`.${e}`),offsetTop:n,offsetLeft:s})},isTimeManagerActive(){var t,e;return Boolean((t=BX.Timeman)==null?void 0:(e=t.Monitor)==null?void 0:e.isEnabled())},async onTimeManagerClick(){var t,e;(t=BX.Timeman)==null?void 0:(e=t.Monitor)==null?void 0:e.openReport()},onCopilotClick(){if(!r.FeatureManager.isFeatureAvailable(r.Feature.copilotActive)){const t=new s.FeaturePromoter({code:x.SliderCode.copilotDisabled});t.show();c.Analytics.getInstance().onOpenCopilotTab({isAvailable:false});return}this.sendClickEvent({layoutName:x.Layout.copilot.name})},loc(t,e={}){return this.$Bitrix.Loc.getMessage(t,e)}},template:`\n\t\t<div class="bx-im-navigation__scope bx-im-navigation__container">\n\t\t\t<div v-if="needTopShadow" class="bx-im-navigation__shadow --top">\n\t\t\t\t<div class="bx-im-navigation__scroll-button" @click="onClickScrollUp"></div>\n\t\t\t</div>\n\t\t\t<div class="bx-im-navigation__top" @scroll="onScroll" ref="navigation">\n\t\t\t\t<template v-if="showCloseIcon">\n\t\t\t\t\t\x3c!-- Close --\x3e\n\t\t\t\t\t<div class="bx-im-navigation__close_container" @click="closeSlider">\n\t\t\t\t\t\t<div class="bx-im-navigation__close"></div>\n\t\t\t\t\t</div>\n\t\t\t\t\t\x3c!-- Separator --\x3e\n\t\t\t\t\t<div class="bx-im-navigation__separator_container">\n\t\t\t\t\t\t<div class="bx-im-navigation__close_separator"></div>\n\t\t\t\t\t</div>\n\t\t\t\t</template>\n\t\t\t\t\x3c!-- Menu items --\x3e\n\t\t\t\t<template v-for="item in menuItems">\n\t\t\t\t\t<MarketApps v-if="item.id === 'market'" @clickMarketItem="sendClickEvent"/>\n\t\t\t\t\t<div\n\t\t\t\t\t\tv-else-if="needToShowMenuItem(item)"\n\t\t\t\t\t\t:key="item.id"\n\t\t\t\t\t\tv-hint="getHintContent(item)"\n\t\t\t\t\t\t@click="onMenuItemClick(item, $event)"\n\t\t\t\t\t\tclass="bx-im-navigation__item_container"\n\t\t\t\t\t>\n\t\t\t\t\t\t<div :class="getMenuItemClasses(item)" class="bx-im-navigation__item">\n\t\t\t\t\t\t\t<div :class="'--' + item.id" class="bx-im-navigation__item_icon"></div>\n\t\t\t\t\t\t\t<div class="bx-im-navigation__item_text" :title="item.text" v-html="item.text"></div>\n\t\t\t\t\t\t\t<div v-if="item.active && item.counter" class="bx-im-navigation__item_counter">\n\t\t\t\t\t\t\t\t<div class="bx-im-navigation__item_counter-text">\n\t\t\t\t\t\t\t\t\t{{ item.counter }}\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</template>\n\t\t\t</div>\n\t\t\t<div v-if="needBottomShadow" class="bx-im-navigation__shadow --bottom">\n\t\t\t\t<div class="bx-im-navigation__scroll-button --bottom" @click="onClickScrollDown"></div>\n\t\t\t</div>\n\t\t\t\x3c!-- Avatar --\x3e\n\t\t\t<div class="bx-im-navigation__user_container">\n\t\t\t\t<UserSettings />\n\t\t\t</div>\n\t\t</div>\n\t`};t.MessengerNavigation=V})(this.BX.Messenger.v2.Component=this.BX.Messenger.v2.Component||{},BX.Vue3.Directives,BX.UI.Dialogs,BX.UI,BX.Messenger.v2.Lib,BX.Messenger.v2.Lib,BX.Messenger.v2.Lib,BX.Messenger.v2.Lib,BX.Messenger.v2.Lib,BX.Messenger.v2.Component.Elements,BX.Messenger.v2.Lib,BX.Messenger.v2.Lib,BX,BX.Main,BX.Messenger.v2.Lib,BX.Messenger.v2.Lib,BX.Messenger.v2.Lib,BX.Messenger.v2.Lib,BX.UI,BX.UI.Feedback,BX,BX.Messenger.v2.Application,BX.Messenger.v2.Const,BX.Messenger.v2.Lib);
//# sourceMappingURL=navigation.bundle.map.js