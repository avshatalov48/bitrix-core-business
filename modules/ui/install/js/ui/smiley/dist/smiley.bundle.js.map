{"version":3,"file":"smiley.bundle.js","sources":["../src/smiley.js","../src/smiley-parser.js","../src/smiley-manager.js"],"sourcesContent":["import { Type } from 'main.core';\n\nexport type SmileyOptions = {\n\tname: string;\n\timage: string;\n\ttyping: string;\n\twidth: number;\n\theight: number;\n};\n\nexport class Smiley\n{\n\t#name: string;\n\t#image: string;\n\t#typing: string;\n\t#width: number;\n\t#height: number;\n\n\tconstructor(smileyOptions: SmileyOptions)\n\t{\n\t\tconst options = Type.isPlainObject(smileyOptions) ? smileyOptions : {};\n\n\t\tthis.setName(options.name);\n\t\tthis.setImage(options.image);\n\t\tthis.setTyping(options.typing);\n\t\tthis.setWidth(options.width);\n\t\tthis.setHeight(options.height);\n\t}\n\n\tgetName(): string\n\t{\n\t\treturn this.#name;\n\t}\n\n\tsetName(value: string)\n\t{\n\t\tthis.#name = value;\n\t}\n\n\tgetImage(): string\n\t{\n\t\treturn this.#image;\n\t}\n\n\tsetImage(value: string)\n\t{\n\t\tthis.#image = value;\n\t}\n\n\tgetTyping(): string\n\t{\n\t\treturn this.#typing;\n\t}\n\n\tsetTyping(value: string)\n\t{\n\t\tthis.#typing = value;\n\t}\n\n\tgetWidth(): number\n\t{\n\t\treturn this.#width;\n\t}\n\n\tsetWidth(value: number)\n\t{\n\t\tthis.#width = value;\n\t}\n\n\tgetHeight(): number\n\t{\n\t\treturn this.#height;\n\t}\n\n\tsetHeight(value: number)\n\t{\n\t\tthis.#height = value;\n\t}\n}\n","import { TextParser, isDelimiter, TokenTree } from 'ui.text-parser';\nimport { type Smiley } from './smiley';\n\nexport class SmileyParser\n{\n\t#splitOffsets: Array<{ start: number, end: number }> = [];\n\t#tokenTree: TokenTree = null;\n\t#textParser: TextParser = null;\n\n\tconstructor(smileys: Smiley[])\n\t{\n\t\tthis.#tokenTree = new TokenTree();\n\t\tsmileys.forEach((smiley: Smiley) => {\n\t\t\tthis.#tokenTree.addToken(smiley.getTyping());\n\t\t});\n\t}\n\n\tparse(text: string): Array<{ start: number, end: number }>\n\t{\n\t\tthis.#splitOffsets = [];\n\t\tthis.#textParser = new TextParser(text);\n\n\t\twhile (this.#textParser.hasNext())\n\t\t{\n\t\t\tlet success = false;\n\t\t\tsuccess = success || this.#parseEmoji();\n\t\t\tsuccess = success || this.#parseSmileys();\n\t\t\tsuccess = success || this.#textParser.consumeText();\n\t\t}\n\n\t\treturn this.#splitOffsets;\n\t}\n\n\t#parseSmileys(): boolean\n\t{\n\t\tif (this.#isWordBoundary())\n\t\t{\n\t\t\treturn this.#textParser.tryChangePosition(() => {\n\t\t\t\tconst currentPosition = this.#textParser.getCurrentPosition();\n\t\t\t\tif (this.#consumeSmiley() && this.#isNextWordBoundary())\n\t\t\t\t{\n\t\t\t\t\tthis.#splitOffsets.push({\n\t\t\t\t\t\tstart: currentPosition,\n\t\t\t\t\t\tend: this.#textParser.getCurrentPosition(),\n\t\t\t\t\t});\n\n\t\t\t\t\tthis.#textParser.flushText();\n\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\n\t\t\t\treturn false;\n\t\t\t});\n\t\t}\n\n\t\treturn false;\n\t}\n\n\t#consumeSmiley(): boolean\n\t{\n\t\treturn this.#textParser.consumeTree(this.#tokenTree.getTreeIndex());\n\t}\n\n\t#isWordBoundary(): boolean\n\t{\n\t\tif (!this.#textParser.hasPendingText())\n\t\t{\n\t\t\tconst last = this.#splitOffsets.at(-1);\n\t\t\tif (last && last.end === this.#textParser.getCurrentPosition())\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\n\t\treturn this.#textParser.isWordBoundary();\n\t}\n\n\t#isNextWordBoundary(): boolean\n\t{\n\t\tlet isSmileyNext = false;\n\t\tthis.#textParser.tryChangePosition(() => {\n\t\t\tif (this.#consumeSmiley())\n\t\t\t{\n\t\t\t\tisSmileyNext = true;\n\t\t\t}\n\n\t\t\treturn false;\n\t\t});\n\n\t\tif (isSmileyNext)\n\t\t{\n\t\t\treturn true;\n\t\t}\n\n\t\treturn isDelimiter(this.#textParser.peek());\n\t}\n\n\t#parseEmoji(): boolean\n\t{\n\t\treturn false;\n\t}\n}\n","import { Extension } from 'main.core';\nimport { Smiley } from './smiley';\n\nexport class SmileyManager\n{\n\tstatic #smileys: Map<string, Smiley> = new Map();\n\tstatic {\n\t\tconst settings = Extension.getSettings('ui.smiley');\n\t\tconst smileys = settings.get('smileys', []);\n\t\tfor (const smiley of smileys)\n\t\t{\n\t\t\tthis.#smileys.set(smiley.typing, new Smiley(smiley));\n\t\t}\n\t}\n\n\tstatic getSize(): number\n\t{\n\t\treturn this.#smileys.size;\n\t}\n\n\tstatic get(typing: string): Smiley | null\n\t{\n\t\treturn this.#smileys.get(typing) || null;\n\t}\n\n\tstatic getAll(): Smiley[]\n\t{\n\t\treturn [...this.#smileys.values()];\n\t}\n}\n"],"names":["Smiley","constructor","smileyOptions","options","Type","isPlainObject","setName","name","setImage","image","setTyping","typing","setWidth","width","setHeight","height","getName","value","getImage","getTyping","getWidth","getHeight","SmileyParser","smileys","TokenTree","forEach","smiley","addToken","parse","text","TextParser","hasNext","success","consumeText","tryChangePosition","currentPosition","getCurrentPosition","push","start","end","flushText","consumeTree","getTreeIndex","hasPendingText","last","at","isWordBoundary","isSmileyNext","isDelimiter","peek","SmileyManager","getSize","size","get","getAll","values","Map","settings","Extension","getSettings","set"],"mappings":";;;;;;CAAiC;CAAA;CAAA;CAAA;CAAA;AAUjC,CAAO,MAAMA,MAAM,CACnB;GAOCC,WAAW,CAACC,aAA4B,EACxC;KAAA;OAAA;OAAA;;KAAA;OAAA;OAAA;;KAAA;OAAA;OAAA;;KAAA;OAAA;OAAA;;KAAA;OAAA;OAAA;;KACC,MAAMC,OAAO,GAAGC,cAAI,CAACC,aAAa,CAACH,aAAa,CAAC,GAAGA,aAAa,GAAG,EAAE;KAEtE,IAAI,CAACI,OAAO,CAACH,OAAO,CAACI,IAAI,CAAC;KAC1B,IAAI,CAACC,QAAQ,CAACL,OAAO,CAACM,KAAK,CAAC;KAC5B,IAAI,CAACC,SAAS,CAACP,OAAO,CAACQ,MAAM,CAAC;KAC9B,IAAI,CAACC,QAAQ,CAACT,OAAO,CAACU,KAAK,CAAC;KAC5B,IAAI,CAACC,SAAS,CAACX,OAAO,CAACY,MAAM,CAAC;;GAG/BC,OAAO,GACP;KACC,+CAAO,IAAI;;GAGZV,OAAO,CAACW,KAAa,EACrB;KACC,4CAAI,kBAASA,KAAK;;GAGnBC,QAAQ,GACR;KACC,+CAAO,IAAI;;GAGZV,QAAQ,CAACS,KAAa,EACtB;KACC,4CAAI,oBAAUA,KAAK;;GAGpBE,SAAS,GACT;KACC,+CAAO,IAAI;;GAGZT,SAAS,CAACO,KAAa,EACvB;KACC,4CAAI,sBAAWA,KAAK;;GAGrBG,QAAQ,GACR;KACC,+CAAO,IAAI;;GAGZR,QAAQ,CAACK,KAAa,EACtB;KACC,4CAAI,oBAAUA,KAAK;;GAGpBI,SAAS,GACT;KACC,+CAAO,IAAI;;GAGZP,SAAS,CAACG,KAAa,EACvB;KACC,4CAAI,sBAAWA,KAAK;;CAEtB;;CC9EoE;CAAA;CAAA;CAAA;CAAA;CAAA;CAAA;CAAA;AAGpE,CAAO,MAAMK,YAAY,CACzB;GAKCrB,WAAW,CAACsB,OAAiB,EAC7B;KAAA;OAAA;;KAAA;OAAA;;KAAA;OAAA;;KAAA;OAAA;;KAAA;OAAA;;KAAA;OAAA;OAAA,OALuD;;KAAE;OAAA;OAAA,OACjC;;KAAI;OAAA;OAAA,OACF;;KAIzB,4CAAI,4BAAc,IAAIC,uBAAS,EAAE;KACjCD,OAAO,CAACE,OAAO,CAAEC,MAAc,IAAK;OACnC,4CAAI,0BAAYC,QAAQ,CAACD,MAAM,CAACP,SAAS,EAAE,CAAC;MAC5C,CAAC;;GAGHS,KAAK,CAACC,IAAY,EAClB;KACC,4CAAI,kCAAiB,EAAE;KACvB,4CAAI,8BAAe,IAAIC,wBAAU,CAACD,IAAI,CAAC;KAEvC,OAAO,4CAAI,4BAAaE,OAAO,EAAE,EACjC;OACC,IAAIC,OAAO,GAAG,KAAK;OACnBA,OAAO,GAAGA,OAAO,4CAAI,IAAI,6BAAc;OACvCA,OAAO,GAAGA,OAAO,4CAAI,IAAI,iCAAgB;OACzCA,OAAO,GAAGA,OAAO,IAAI,4CAAI,4BAAaC,WAAW,EAAE;;KAGpD,+CAAO,IAAI;;CAuEb;CAAC,0BAnEA;GACC,4CAAI,IAAI,uCACR;KACC,OAAO,4CAAI,4BAAaC,iBAAiB,CAAC,MAAM;OAC/C,MAAMC,eAAe,GAAG,4CAAI,4BAAaC,kBAAkB,EAAE;OAC7D,IAAI,4CAAI,+EAAqB,IAAI,6CAAsB,EACvD;SACC,4CAAI,gCAAeC,IAAI,CAAC;WACvBC,KAAK,EAAEH,eAAe;WACtBI,GAAG,EAAE,4CAAI,4BAAaH,kBAAkB;UACxC,CAAC;SAEF,4CAAI,4BAAaI,SAAS,EAAE;SAE5B,OAAO,IAAI;;OAGZ,OAAO,KAAK;MACZ,CAAC;;GAGH,OAAO,KAAK;CACb;CAAC,2BAGD;GACC,OAAO,4CAAI,4BAAaC,WAAW,CAAC,4CAAI,0BAAYC,YAAY,EAAE,CAAC;CACpE;CAAC,4BAGD;GACC,IAAI,CAAC,4CAAI,4BAAaC,cAAc,EAAE,EACtC;KACC,MAAMC,IAAI,GAAG,4CAAI,gCAAeC,EAAE,CAAC,CAAC,CAAC,CAAC;KACtC,IAAID,IAAI,IAAIA,IAAI,CAACL,GAAG,KAAK,4CAAI,4BAAaH,kBAAkB,EAAE,EAC9D;OACC,OAAO,IAAI;;;GAIb,OAAO,4CAAI,4BAAaU,cAAc,EAAE;CACzC;CAAC,gCAGD;GACC,IAAIC,YAAY,GAAG,KAAK;GACxB,4CAAI,4BAAab,iBAAiB,CAAC,MAAM;KACxC,4CAAI,IAAI,qCACR;OACCa,YAAY,GAAG,IAAI;;KAGpB,OAAO,KAAK;IACZ,CAAC;GAEF,IAAIA,YAAY,EAChB;KACC,OAAO,IAAI;;GAGZ,OAAOC,yBAAW,CAAC,4CAAI,4BAAaC,IAAI,EAAE,CAAC;CAC5C;CAAC,wBAGD;GACC,OAAO,KAAK;CACb;;CCnGiC;AAElC,CAAO,MAAMC,aAAa,CAC1B;GAWC,OAAOC,OAAO,GACd;KACC,OAAO,4CAAI,sBAAUC,IAAI;;GAG1B,OAAOC,GAAG,CAAC1C,MAAc,EACzB;KACC,OAAO,4CAAI,sBAAU0C,GAAG,CAAC1C,MAAM,CAAC,IAAI,IAAI;;GAGzC,OAAO2C,MAAM,GACb;KACC,OAAO,CAAC,GAAG,4CAAI,sBAAUC,MAAM,EAAE,CAAC;;CAEpC;CAAC,sBA1BYL,aAAa;GAAA;GAAA,OAEc,IAAIM,GAAG;CAAE;CAAA;GAE/C,MAAMC,QAAQ,GAAGC,mBAAS,CAACC,WAAW,CAAC,WAAW,CAAC;GACnD,MAAMpC,OAAO,GAAGkC,QAAQ,CAACJ,GAAG,CAAC,SAAS,EAAE,EAAE,CAAC;GAC3C,KAAK,MAAM3B,MAAM,IAAIH,OAAO,EAC5B;KACC,wCARU2B,aAAa,sBAQTU,GAAG,CAAClC,MAAM,CAACf,MAAM,EAAE,IAAIX,MAAM,CAAC0B,MAAM,CAAC,CAAC;;CACpD;;;;;;;;;;"}